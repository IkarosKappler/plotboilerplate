{"version":3,"file":"index.esm.min.js","sources":["../src/esm/UIDGenerator.js","../src/esm/VertexAttr.js","../src/esm/VertexListeners.js","../src/esm/Vertex.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/VertTuple.js","../src/esm/Vector.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/Line.js","../src/esm/Circle.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js","../src/esm/SVGBuilder.js"],"sourcesContent":["/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n    * Remove a drag listener.\n    *\n    * @method removeDragEndListener\n    * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n    * @return {VertexListeners} this (for chaining)\n    * @instance\n    * @memberof VertexListeners\n    **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    ;\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    ;\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n    ;\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @version  2.4.2\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<circle\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    }\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    ;\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(vert) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(vert);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    ;\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    ;\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    ;\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += (addX * addY * 0.5);\n            total -= (subX * subY * 0.5);\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @version  1.3.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    }\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    ;\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    ;\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    }\n    ;\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        const tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        const startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        const endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    }\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    }\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    toSVGPathData() {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    }\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n    ;\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @version 2.3.1\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<path\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join(\"\");\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        const arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        // var firstStartPoint: Vertex;\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        const numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + (a * (this.b.x - this.a.x));\n        const y = this.a.y + (a * (this.b.y - this.a.y));\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return undefined;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                   Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path ');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        const data = CircleSector.circleSectorUtils.describeSVGArc(this.circle.center.x, this.circle.center.y, this.circle.radius, this.startAngle, this.endAngle);\n        buffer.push(' d=\"' + data.join(\" \") + '\" />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n    */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + (radius * Math.cos(angle)),\n            y: centerY + (radius * Math.sin(angle))\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === 'undefined')\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push('M', start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.3.0\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    addStyleDefs(drawConfig) {\n        const nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(nodeStyle); // nodeDef);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${this.curClassName} ${className}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color);\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode, this.bufferGNode);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        let tmp = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmp;\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        const d = [\"M\", this._x(zA.x), this._y(zA.y)];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        const node = this.makeNode(\"path\");\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubierBezier\", color, lineWidth);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth) {\n        const node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, 0.5);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polyline\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    text(text, x, y, options) {\n        options = options || {};\n        const color = options.color || \"black\";\n        const node = this.makeNode(\"text\");\n        node.setAttribute(\"x\", `${this._x(x)}`);\n        node.setAttribute(\"y\", `${this._y(y)}`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${this.offset.x},${this.offset.y}), rotate(${(rotation / Math.PI) * 180})`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // // Clearing an SVG is equivalent to removing all its child elements.\n        // for (var i = 0; i < this.gNode.childNodes.length; i++) {\n        //   // Hide all nodes here. Don't throw them away.\n        //   // We can probably re-use them in the next draw cycle.\n        //   var child: SVGElement = this.gNode.childNodes[i] as SVGElement;\n        //   this.cache.set(child.getAttribute(\"id\"), child);\n        // }\n        // this.removeAllChildNodes();\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        const stx = (value) => {\n            return offset.x + scale.x * value;\n        };\n        const sty = (value) => {\n            return offset.y + scale.y * value;\n        };\n        // scale only {x,y}\n        const sx = (value) => {\n            return scale.x * value;\n        };\n        const sy = (value) => {\n            return scale.y * value;\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.9.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {Vertex} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    text(text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  0.0.5\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    label(text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    ;\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius ) \n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    }\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    }\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n    },\n    min3(a, b, c) {\n        return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && (1 - s - t) > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    }\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = (e) => { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = (e) => { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = (e) => { _self.fireUpEvent(e, _self); });\n    }\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    }\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\nKeyHandler.KEY_CODES = {\n    'break': 3,\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29,\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46,\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91,\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93,\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108,\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169,\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173,\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181,\n    'unmute': 181,\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191,\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251,\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers['mousemove'] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX,\n            y: e.offsetY\n        };\n    }\n    ;\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(e, eventName) {\n        const rel = this.relPos(e);\n        const xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    }\n    ;\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    ;\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    toSVGString(options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    }\n    ;\n}\n//# sourceMappingURL=PBImage.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @version  1.2.2\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector(point, endPointB);\n        }\n        else {\n            return new Vector(point, endPointA);\n        }\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<ellipse\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author  Ikaros Kappler\n * @date    2021-02-26\n * @version 1.0.0\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    },\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        const M = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @version  1.14.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    constructor(config) {\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas == \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear)\n            pb.config.preClear();\n        tosvgDraw.clear(pb.config.backgroundColor);\n        if (pb.config.preDraw)\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, \"#000000\");\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].startPoint.attr.visible) {\n                            draw.setCurrentId(`${d.uid}_h0`);\n                            draw.setCurrentClassName(`${d.className}-start-handle`);\n                            draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    }\n                    if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].endPoint.attr.visible) {\n                            draw.setCurrentId(`${d.uid}_h1`);\n                            draw.setCurrentClassName(`${d.className}-end-handle`);\n                            draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h2`);\n                        draw.setCurrentClassName(`${d.className}-start-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, \"#008888\"));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h3`);\n                        draw.setCurrentClassName(`${d.className}-end-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, \"#008888\"));\n                    }\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(undefined);\n        draw.setCurrentClassName(undefined);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        const _self = this;\n        const _setSize = (w, h) => {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = _self.config.canvasWidthFactor * width + \"px\";\n            _self.canvas.style.height = _self.config.canvasWidthFactor * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"absolute\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = _self.config.canvasWidthFactor * space.width + \"px\";\n            _self.canvas.style.height = _self.config.canvasHeightFactor * space.height + \"px\";\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        // x:number,y:number) {\n        const _self = this;\n        // const x:number = e.params.pos.x;\n        //const y:number = e.params.pos.y;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (p.typeName == \"bpath\") {\n                    let vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == \"vertex\") {\n                    let vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown(\"y\") /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == \"vertex\" && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == \"bpath\")\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == \"vertex\")\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\")) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            const fingerB = new Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"])\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    else\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k))\n                continue;\n            if (base.hasOwnProperty(k)) {\n                var typ = typeof base[k];\n                try {\n                    if (typ == \"boolean\")\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (typ == \"number\")\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (typ == \"function\" && typeof extension[k] == \"function\")\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extension[k], e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        element.style[\"transform-origin\"] = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0)\n            element.style.transform = null;\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    },\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","/**\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @deprecated THIS CLASS IS DEPRECATED. Please use the new `drawutilssvg` instead.\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-12-17 Added Circle and CircleSection style classes.\n * @modified 2021-01-26 DEPRECATION\n * @version  1.0.5\n **/\n/**\n * @classdesc A default SVG builder.\n *\n * @requires SVGSerializable\n * @requires Vertex\n */\nexport class SVGBuilder {\n    /**\n     * @constructor\n     **/\n    constructor() {\n        console.warn(\"THIS CLASS IS DEPRECATED. Please use the new 'drawutilssvg' instead.\");\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    build(drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Circle { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .CircleSector { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=SVGBuilder.js.map"],"names":["UIDGenerator","static","current","VertexAttr","constructor","key","this","draggable","selectable","isSelected","visible","model","VertexListeners","vertex","click","drag","dragStart","dragEnd","addClickListener","listener","_addListener","removeClickListener","_removeListener","addDragListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireClickEvent","e","_fireEvent","fireDragEvent","fireDragStartEvent","fireDragEndEvent","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vertex","x","y","className","uid","next","tuple","NaN","attr","set","setX","setY","invX","invY","add","addXY","amountX","amountY","addX","addY","sub","equals","eqX","Math","abs","EPSILON","eqY","clone","distance","vert","sqrt","pow","angle","origin","a","PI","atan2","difference","scale","factor","center","rotate","len","ZERO","cos","sin","multiplyScalar","scalar","round","inv","toString","toSVGString","options","buffer","join","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","Polygon","isOpen","addVertex","getVertexAt","index","move","containsVert","inside","j","xi","yi","xj","yj","area","signedArea","isClockwise","console","log","getBounds","Bounds","computeFromVertices","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","t","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","b","c","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","BezierPath","fromArray","total","l","sum","n","width","height","toPolygon","getCenter","xMin","xMax","yMin","yMax","VertTuple","factory","setLength","amount","normalize","moveTo","newA","diff","line","v0","v1","vertAt","denominator","colinear","getClosestT","p","l2","vtutils","dist2","hasPoint","point","insideBoundsOnly","getClosestPoint","pointDistance","v","w","Vector","vertA","vertB","super","perp","inverse","tmp","intersection","numerator1","numerator2","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","translate","reverse","getLength","pointA","pointB","curveStep","newLength","tmpLength","getPointAt","result","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","dist","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getPointByID","id","Error","getPoint","u","getTangentAt","d","t2","nt2","tX","tY","getSubCurveAt","startVec","endVec","convertU2T","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","obj","toSVGPathData","toJSON","prettyFormat","jsonString","JSON","parse","fromObject","arr","Array","isArray","pathPoints","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaling","curveT","uMin","warn","uTemp","relativeU","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","undefined","bPath","lastCurve","isInstance","toReducedListRepresentation","digits","toFixed","listJSON","pointArray","fromReducedList","bezierPath","Line","isNaN","Circle","radius","containsCircle","circle","lineDistance","circleUtils","tangentAt","circleIntersection","p0","p1","h","p2","x3","y3","x4","y4","CircleSector","startAngle","endAngle","data","circleSectorUtils","describeSVGArc","polarToCartesian","centerX","centerY","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","drawlibConfiguration","cache","Map","setSize","addStyleDefs","createSVGNode","appendChild","nodeStyle","keys","polygon","triangle","ellipse","ellipseSector","circleSector","vector","image","rules","k","drawSettings","color","lineWidth","innerHTML","findElement","nodeName","node","get","toUpperCase","delete","document","createElementNS","makeNode","curId","blendMode","style","_bindFillDraw","curClassName","setAttribute","parentNode","copyInstance","setConfiguration","configuration","setCurrentId","setCurrentClassName","beginDrawCycle","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","endDrawCycle","replaceChild","_x","_y","arrow","position","size","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","cubicBezier","cubicBezierPath","handle","square","handleLine","dot","circleArc","arcData","radiusX","radiusY","rotation","rect","grid","sizeX","sizeY","ceil","raster","diamondHandle","squareHandle","circleHandle","crosshair","polyline","text","label","inplace","copyPathData","transformPathData","lastChild","removeChild","copy","_stx","_sty","_sx","_sy","_slp","HEAD_XML","drawutils","context","ctx","globalCompositeOperation","save","beginPath","lineTo","strokeStyle","stroke","restore","_fillOrDraw","complete","drawImage","closePath","fillStyle","fill","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","arc","asSegment","setLineDash","fillText","strokeText","Path2D","clearRect","canvas","fillRect","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","getArea","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","inCircumcircle","min3","max3","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","circleIntersB","circleIntersC","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","scaleFactor","wrapMax","wrapMinMax","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","fireEvent","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","key2code","press","up","isDown","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","$","pagebackward","pageforward","refresh","closingparen","minus","decreasevolumelevel","increasevolumelevel","previous","stop","email","mute","unmute","semicolon","equal","comma","dash","period","forwardslash","openbracket","backslash","closebracket","singlequote","altgr","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","destroy","PBImage","upperLeft","lowerRight","getLen","getRotateAngle","v2","mr","acos","getAngle","cross","HandlerAdmin","el","del","dispatch","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","Date","pageX","pageY","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","on","off","VEllipse","axis","radiusH","signedRadiusH","radiusV","signedRadiusV","normalAt","foci","getFoci","angleA","centerAngle","endPointA","endPointB","normal","perimeter","rh","rv","sdiff","getEquidistantVertices","pointCount","angles","equidistantVertAngles","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","_a","r2d","fullEllipsePointCount","ellipseAngles","map","filter","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","sign","M","_cx","_cy","PlotBoilerplate","config","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","selectedVertex","canvasElement","tagName","toLowerCase","eventCatcher","getContext","draw","parentElement","createElement","left","top","cursor","body","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","Boolean","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","drawDrawable","error","drawSelectPolygon","clearSelection","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","display","padding","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","fingerA","item","fingerB","window","createGUI","props","isVertex","safeMergeByKeys","extension","hasOwnProperty","typ","transform","fallback","build","nl","indent"],"mappings":"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"}