{"version":3,"file":"index.esm.min.js","sources":["../src/esm/UIDGenerator.js","../src/esm/VertexAttr.js","../src/esm/VertexListeners.js","../src/esm/Vertex.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/VertTuple.js","../src/esm/Vector.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/Line.js","../src/esm/Circle.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js","../src/esm/SVGBuilder.js"],"sourcesContent":["/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n    * Remove a drag listener.\n    *\n    * @method removeDragEndListener\n    * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n    * @return {VertexListeners} this (for chaining)\n    * @instance\n    * @memberof VertexListeners\n    **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    ;\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    ;\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n    ;\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @version  2.4.2\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<circle\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    }\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    ;\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(vert) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(vert);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    ;\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    ;\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    ;\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += (addX * addY * 0.5);\n            total -= (subX * subY * 0.5);\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @version  1.3.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    }\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    ;\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    ;\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    }\n    ;\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        const tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        const startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        const endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    }\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    }\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    toSVGPathData() {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    }\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n    ;\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @version 2.3.1\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<path\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join(\"\");\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        const arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        // var firstStartPoint: Vertex;\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        const numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + (a * (this.b.x - this.a.x));\n        const y = this.a.y + (a * (this.b.y - this.a.y));\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return undefined;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                   Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path ');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        const data = CircleSector.circleSectorUtils.describeSVGArc(this.circle.center.x, this.circle.center.y, this.circle.radius, this.startAngle, this.endAngle);\n        buffer.push(' d=\"' + data.join(\" \") + '\" />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n    */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + (radius * Math.cos(angle)),\n            y: centerY + (radius * Math.sin(angle))\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === 'undefined')\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push('M', start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.3.0\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    addStyleDefs(drawConfig) {\n        const nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(nodeStyle); // nodeDef);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n        }\n        nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${this.curClassName} ${className}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color);\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode, this.bufferGNode);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        let tmp = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmp;\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        const d = [\"M\", this._x(zA.x), this._y(zA.y)];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        const node = this.makeNode(\"path\");\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubierBezier\", color, lineWidth);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth) {\n        const node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, 0.5);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polyline\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    text(text, x, y, options) {\n        options = options || {};\n        const color = options.color || \"black\";\n        const node = this.makeNode(\"text\");\n        node.setAttribute(\"x\", `${this._x(x)}`);\n        node.setAttribute(\"y\", `${this._y(y)}`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${this.offset.x},${this.offset.y}), rotate(${(rotation / Math.PI) * 180})`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // // Clearing an SVG is equivalent to removing all its child elements.\n        // for (var i = 0; i < this.gNode.childNodes.length; i++) {\n        //   // Hide all nodes here. Don't throw them away.\n        //   // We can probably re-use them in the next draw cycle.\n        //   var child: SVGElement = this.gNode.childNodes[i] as SVGElement;\n        //   this.cache.set(child.getAttribute(\"id\"), child);\n        // }\n        // this.removeAllChildNodes();\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        const stx = (value) => {\n            return offset.x + scale.x * value;\n        };\n        const sty = (value) => {\n            return offset.y + scale.y * value;\n        };\n        // scale only {x,y}\n        const sx = (value) => {\n            return scale.x * value;\n        };\n        const sy = (value) => {\n            return scale.y * value;\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.9.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {Vertex} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    text(text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  0.0.5\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    label(text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    ;\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius ) \n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    }\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    }\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n    },\n    min3(a, b, c) {\n        return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && (1 - s - t) > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    }\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = (e) => { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = (e) => { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = (e) => { _self.fireUpEvent(e, _self); });\n    }\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    }\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\nKeyHandler.KEY_CODES = {\n    'break': 3,\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29,\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46,\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91,\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93,\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108,\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169,\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173,\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181,\n    'unmute': 181,\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191,\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251,\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers['mousemove'] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX,\n            y: e.offsetY\n        };\n    }\n    ;\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(e, eventName) {\n        const rel = this.relPos(e);\n        const xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    }\n    ;\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    ;\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    toSVGString(options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    }\n    ;\n}\n//# sourceMappingURL=PBImage.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @version  1.2.2\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector(point, endPointB);\n        }\n        else {\n            return new Vector(point, endPointA);\n        }\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<ellipse\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author  Ikaros Kappler\n * @date    2021-02-26\n * @version 1.0.0\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    },\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        const M = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @version  1.14.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    constructor(config) {\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas == \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear)\n            pb.config.preClear();\n        tosvgDraw.clear(pb.config.backgroundColor);\n        if (pb.config.preDraw)\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, \"#000000\");\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].startPoint.attr.visible) {\n                            draw.setCurrentId(`${d.uid}_h0`);\n                            draw.setCurrentClassName(`${d.className}-start-handle`);\n                            draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    }\n                    if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].endPoint.attr.visible) {\n                            draw.setCurrentId(`${d.uid}_h1`);\n                            draw.setCurrentClassName(`${d.className}-end-handle`);\n                            draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h2`);\n                        draw.setCurrentClassName(`${d.className}-start-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, \"#008888\"));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h3`);\n                        draw.setCurrentClassName(`${d.className}-end-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, \"#008888\"));\n                    }\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(undefined);\n        draw.setCurrentClassName(undefined);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        // var canvas : HTMLCanvasElement = _self.canvas;\n        _self.canvas.style.display = \"none\";\n        /* var\n        padding : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding') ) || 0,\n        border : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-width') ) || 0,\n        pl : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-left') ) || padding,\n        pr : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-right') ) || padding,\n        pt : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-top') ) || padding,\n        pb : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-bottom') ) || padding,\n        bl : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-left-width') ) || border,\n        br : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-right-width') ) || border,\n        bt : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-top-width') ) || border,\n        bb : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-bottom-width') ) || border;\n        */\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        const _self = this;\n        const _setSize = (w, h) => {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = _self.config.canvasWidthFactor * width + \"px\";\n            _self.canvas.style.height = _self.config.canvasWidthFactor * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"absolute\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = _self.config.canvasWidthFactor * space.width + \"px\";\n            _self.canvas.style.height = _self.config.canvasHeightFactor * space.height + \"px\";\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        // x:number,y:number) {\n        const _self = this;\n        // const x:number = e.params.pos.x;\n        //const y:number = e.params.pos.y;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (p.typeName == \"bpath\") {\n                    let vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == \"vertex\") {\n                    let vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown(\"y\") /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == \"vertex\" && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == \"bpath\")\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == \"vertex\")\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\")) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            const fingerB = new Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"])\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    else\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k))\n                continue;\n            if (base.hasOwnProperty(k)) {\n                var typ = typeof base[k];\n                try {\n                    if (typ == \"boolean\")\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (typ == \"number\")\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (typ == \"function\" && typeof extension[k] == \"function\")\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extension[k], e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        element.style[\"transform-origin\"] = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0)\n            element.style.transform = null;\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    },\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","/**\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @deprecated THIS CLASS IS DEPRECATED. Please use the new `drawutilssvg` instead.\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-12-17 Added Circle and CircleSection style classes.\n * @modified 2021-01-26 DEPRECATION\n * @version  1.0.5\n **/\n/**\n * @classdesc A default SVG builder.\n *\n * @requires SVGSerializable\n * @requires Vertex\n */\nexport class SVGBuilder {\n    /**\n     * @constructor\n     **/\n    constructor() {\n        console.warn(\"THIS CLASS IS DEPRECATED. Please use the new 'drawutilssvg' instead.\");\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    build(drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Circle { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .CircleSector { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=SVGBuilder.js.map"],"names":["UIDGenerator","[object Object]","current","VertexAttr","key","this","draggable","selectable","isSelected","visible","model","VertexListeners","vertex","click","drag","dragStart","dragEnd","listener","_addListener","_removeListener","e","_fireEvent","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vertex","x","y","className","uid","next","tuple","NaN","attr","amountX","amountY","eqX","Math","abs","EPSILON","eqY","vert","sqrt","pow","origin","a","PI","atan2","factor","center","angle","sub","len","distance","ZERO","cos","sin","add","scalar","round","options","buffer","join","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","Polygon","isOpen","index","inside","j","xi","yi","xj","yj","area","signedArea","scale","console","log","rotate","Bounds","computeFromVertices","qbezier","cc0","cc1","edgeCenter","limit","t","qdata","toQuadraticBezierData","threshold","cbezier","b","c","aCenter","bCenter","a2","b0","toCubicBezierData","pathdata","BezierPath","fromArray","toString","total","l","sum","n","width","height","xMin","xMax","yMin","yMax","VertTuple","factory","amount","set","newA","diff","difference","line","v0","clone","v1","denominator","p","l2","vtutils","dist2","point","insideBoundsOnly","getClosestT","vertAt","v","w","Vector","vertA","vertB","super","tmp","numerator1","numerator2","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","pointA","pointB","curveStep","newLength","tmpLength","getPointAt","result","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","dist","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","id","Error","u","d","t2","nt2","tX","tY","startVec","getTangentAt","endVec","inv","convertU2T","getPerpendicularAt","tangentVector","curve","equals","obj","prettyFormat","jsonString","JSON","parse","fromObject","arr","Array","isArray","pathPoints","totalArcLength","adjustCircular","bezierCurves","adjustSuccessorControlPoint","getLength","curveIndex","anchor","scaling","curveT","uMin","warn","uTemp","relativeU","getPoint","getTangent","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","path","uBefore","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","curves","reverse","getCurveAt","moveCurvePoint","adjustPredecessorControlPoint","getCurveCount","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","getBounds","undefined","toSVGPathData","toJSON","bPath","lastCurve","isInstance","digits","toFixed","listJSON","pointArray","fromReducedList","bezierPath","Line","isNaN","Circle","radius","circle","getClosestPoint","circleUtils","perp","p0","p1","h","p2","x3","y3","x4","y4","CircleSector","startAngle","endAngle","data","circleSectorUtils","describeSVGArc","polarToCartesian","centerX","centerY","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","drawlibConfiguration","cache","Map","setSize","addStyleDefs","createSVGNode","appendChild","nodeStyle","keys","polygon","triangle","ellipse","ellipseSector","circleSector","vector","image","rules","k","drawSettings","color","lineWidth","innerHTML","nodeName","node","get","toUpperCase","delete","document","createElementNS","findElement","curId","blendMode","style","curClassName","setAttribute","parentNode","configuration","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","makeNode","_x","_y","_bindFillDraw","position","size","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","cubicBezier","square","arcData","radiusX","radiusY","rotation","sizeX","sizeY","ceil","polyline","text","inplace","copyPathData","transformPathData","lastChild","removeChild","copy","_stx","_sty","_sx","_sy","_slp","HEAD_XML","drawutils","context","ctx","globalCompositeOperation","save","beginPath","moveTo","lineTo","strokeStyle","stroke","restore","_fillOrDraw","complete","drawImage","closePath","fillStyle","fill","bezierCurveTo","controlPoint","quadraticCurveTo","arc","asSegment","rect","setLineDash","fillText","strokeText","translate","Path2D","clearRect","canvas","fillRect","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","Float32Array","_x2rel","_y2rel","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","centroid","getCentroid","tri","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","min3","max3","pointIsInTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","intersection","circleIntersA","circleIntersB","circleIntersC","getIncircularTriangle","getCircumcircle","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","determinant","scaleFactor","wrapMax","wrapMinMax","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","hasListener","lis","keyCode","handler","fireEvent","KEY_CODES","_keyDownListener","fireDownEvent","_keyPressListener","firePressEvent","_keyUpListener","fireUpEvent","removeEventListener","key2code","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","callback","throwAlreadyInstalled","listenFor","unlistenFor","PBImage","upperLeft","lowerRight","getLen","getRotateAngle","v2","mr","dot","acos","getAngle","cross","HandlerAdmin","el","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","move","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","Date","pageX","pageY","dispatch","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","del","VEllipse","axis","signedRadiusH","signedRadiusV","radiusH","radiusV","foci","getFoci","angleA","centerAngle","endPointA","addX","endPointB","normal","normalAt","rh","rv","sdiff","addY","pointCount","angles","equidistantVertAngles","quarterSegmentCount","segmentCount","curAngle","nextAngle","addXY","startTangent","tangentAt","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","_a","r2d","fullEllipsePointCount","ellipseAngles","map","filter","startIndex","findClosestToStartAngle","ea","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","sign","M","_cx","_cy","PlotBoilerplate","config","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","handleLine","selectedVertex","grid","canvasElement","tagName","toLowerCase","eventCatcher","getContext","draw","copyInstance","parentElement","createElement","left","top","cursor","body","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","beginDrawCycle","drawAll","endDrawCycle","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","con","setCSSscale","drawable","addDragListener","enableBezierPathAutoAdjust","removeWithVertices","remove","removeVertex","keepVertices","Boolean","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","setCurrentClassName","setCurrentId","raster","crosshair","drawDrawable","diamondHandle","_handleColor","circleHandle","circleArc","arrow","error","squareHandle","drawDrawables","drawSelectPolygon","elem","propName","parseFloat","getComputedStyle","getPropertyValue","container","display","padding","getFProp","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","getAvailableContainerSpace","containsVert","tolerance","Draggable","VERTEX","setVIndex","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","isDown","paths","pindex","cindex","getPointByID","pid","fireDragStartEvent","oldDragAmount","fireDragEvent","handleClick","fireDragEndEvent","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","down","mouseDownHandler","mouseDragHandler","up","mouseUpHandler","mouseWheelHandler","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","fingerA","item","fingerB","window","clearSelection","selectVerticesInPolygon","props","createGUI","safeMergeByKeys","extension","hasOwnProperty","typ","transform","fallback","locateCurveByStartPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","locateCurveByEndPoint","nl","indent","toSVGString"],"mappings":"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"}