{"version":3,"file":"index.esm.min.js","sources":["../src/esm/VertexAttr.js","../src/esm/UIDGenerator.js","../src/esm/VertexListeners.js","../src/esm/Circle.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Vertex.js","../src/esm/VertTuple.js","../src/esm/Vector.js","../src/esm/Line.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../src/esm/PBText.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js"],"sourcesContent":["/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2024-03-10 Fixed some types for Typescript 5 compatibility.\n * @version  1.1.2\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    removeAllListeners() {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    }\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @modified 2025-04-09 Added the `Circle.move(amount: XYCoords)` method.\n * @modified 2025-04-16 Class `Circle` now implements interface `Intersectable`.\n * @version  1.5.0\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Move the circle by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Circle\n     * @return {Circle} this for chaining\n     **/\n    move(amount) {\n        this.center.add(amount);\n        return this;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    containsPoint(point) {\n        return this.center.distance(point) < this.radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n        // return (new Vector(this.center.clone(), pointA).add(pointA) as Vector).perp() as Vector;\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the bounding box (bounds) of this Circle.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Circle\n     * @return {Bounds} The rectangular bounds of this Circle.\n     **/\n    getBounds() {\n        return new Bounds(this.center.clone().subXY(Math.abs(this.radius), Math.abs(this.radius)), this.center.clone().addXY(Math.abs(this.radius), Math.abs(this.radius)));\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {XYCoords} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    lineIntersection(a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        const interA = new Vertex();\n        const interB = new Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        const transA = new Vertex(a).sub(this.center);\n        const transB = new Vertex(b).sub(this.center);\n        const diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        const dist = transA.distance(transB);\n        const det = transA.x * transB.y - transA.y * transB.x;\n        const distSquared = dist * dist;\n        const radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        const belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        const sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line(interA.add(this.center), interB.add(this.center));\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this circle.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the circle outline.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersectioLine = this.lineIntersection(line.a, line.b);\n        if (!intersectioLine) {\n            return [];\n        }\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return [intersectioLine.a, intersectioLine.b].filter((vert) => line.hasPoint(vert, true));\n        }\n        else {\n            return [intersectioLine.a, intersectioLine.b];\n        }\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        const interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map((vert) => {\n            // Calculate angle\n            const lineFromCenter = new Line(this.center, vert);\n            const angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return this.tangentAt(angle);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    closestPoint(vert) {\n        const lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                     Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified  2024-11-22 Added static utility function Triangle.utils.determinant; adapted method `determinant`.\n * @modified  2024-11-22 Changing visibility of `Triangle.utils` from `private` to `public`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `Intersectable`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `IBounded`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `Intersectable`.\n * @modified  2025-14-16 Added method `Triangle.move`.\n * @version   2.10.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Triangle.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Triangle\n     * @return {Bounds} The rectangular bounds of this Triangle.\n     **/\n    getBounds() {\n        // return Bounds.computeFromVertices([this.a, this.b, this.c]);\n        return this.bounds();\n    }\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Move the Triangle's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Triangle\n     * @return {Triangle} this for chaining\n     **/\n    move(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        this.c.add(amount);\n        return this;\n    }\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    } // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    }\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        return Polygon.utils\n            .locateLineIntersecion(line, [this.a, this.b, this.c], false, inVectorBoundsOnly)\n            .map(intersectionTuple => intersectionTuple.intersectionPoint);\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon.utils\n            .locateLineIntersecion(line, [this.a, this.b, this.c], false, inVectorBoundsOnly)\n            .map(intersectionTuple => {\n            // const polyLine = this.getEdgeAt(intersectionTuple.edgeIndex);\n            const polyLine = this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersectionPoint);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    getEdgeAt(edgeIndex) {\n        var modIndex = edgeIndex % 3;\n        return modIndex === 0 ? new Line(this.a, this.b) : modIndex === 1 ? new Line(this.b, this.c) : new Line(this.c, this.a);\n    }\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        // return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n        return Triangle.utils.determinant(this.a, this.b, this.c);\n    }\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        // Cast to non-null here because we know there _is_ an intersection\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n    },\n    min3(a, b, c) {\n        return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && 1 - s - t > 0;\n    },\n    /**\n     * Calculate the determinant of the three vertices a, b and c (in this order).\n     * @param {XYCords} a - The first vertex.\n     * @param {XYCords} b - The first vertex.\n     * @param {XYCords} c - The first vertex.\n     * @returns {nmber}\n     */\n    determinant(a, b, c) {\n        return (b.y - a.y) * (c.x - b.x) - (c.y - b.y) * (b.x - a.x);\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @modified 2024-11-15 Adding helper function `geomutils.mapAngleTo2PI(number)` for mapping any value into the interval [0,2*PI).\n * @modified 2024-11-22 Adding helper function `geomutils.dotProduct(number)` for calculating the dot product of two vertices (as vectors).\n *\n * @version  1.2.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * @param {number} angle - The numeric value to map.\n     * @return {number} The mapped angle inside [0,PI*2].\n     **/\n    mapAngleTo2PI(angle) {\n        // Source: https://forums.codeguru.com/showthread.php?384172-get-angle-into-range-0-2*pi\n        const new_angle = Math.asin(Math.sin(angle));\n        if (Math.cos(angle) < 0) {\n            return Math.PI - new_angle;\n        }\n        else if (new_angle < 0) {\n            return new_angle + 2 * Math.PI;\n        }\n        else {\n            return new_angle;\n        }\n    },\n    /**\n     * Calculate the euclidean distance between two points given by four coordinates (two coordinates each).\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @returns {number}\n     */\n    dist4(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y1 - y2, 2));\n    },\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * A × B := (A.x * B.x) + (A.y * B.y)\n     *\n     * @param {XYCoords} vertA - The first vertex.\n     * @param {XYCoords} vertB - The second vertex.\n     * @return {number} The dot product of the two vertices.\n     **/\n    dotProduct(vertA, vertB) {\n        return vertA.x * vertB.x + vertA.y * vertB.y;\n    },\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * -1;\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate(-i * (insideAngle / n), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-11-28 Added the `subXY`, `subX` and `subY` methods to the `Vertex` class.\n * @modified 2023-09-29 Downgraded types for the `Vertex.utils.buildArrowHead` function (replacing Vertex params by more generic XYCoords type).\n * @modified 2023-09-29 Added the `Vertex.abs()` method as it seems useful.\n * @modified 2024-03-08 Added the optional `precision` param to the `toString` method.\n * @modified 2024-12-17 Outsourced the euclidean distance calculation of `Vertex.distance` to `geomutils.dist4`.\n * @modified 2025-03-24 Making the second parameter `center` of the `Vertex.rotate` method optional.\n * @modified 2025-04-13 Adding the `Vertex.move(amount: XYCoords)` method (does the same as `add`, added by naming convention).\n * @version  2.10.0\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Move this point by the given amount.\n     *\n     * This method just calls `add(amount).\n     *\n     *\n     * @method move\n     * @param {Vertex} amount - The amount to move this vertex.\n     * @return {Vertex} this - For chaining.\n     * @instance\n     * @memberof Vertex\n     */\n    move(amount) {\n        return this.add(amount);\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x- and y- components of this vertex.\n     *\n     * @method subXY\n     * @param {number} x - The amount to substract from x.\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subXY(amountX, amountY) {\n        this.x -= amountX;\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to substract from x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subX(amountX) {\n        this.x -= amountX;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the y-component of this vertex.\n     *\n     * @method subY\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subY(amountY) {\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        // return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n        return geomutils.dist4(this.x, this.y, vert.x, vert.y);\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    lerp(target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    lerpAbs(target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scaleXY(factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Set both coordinates of this vertex to their absolute value (abs(x), abs(y)).\n     *\n     * @method abs\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     */\n    abs() {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString(precision) {\n        if (typeof precision === \"undefined\") {\n            return \"(\" + this.x + \",\" + this.y + \")\";\n        }\n        else {\n            return \"(\" + this.x.toFixed(precision) + \",\" + this.y.toFixed(precision) + \")\";\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        console.warn(\"[DEPRECATION] Vertex.utils.buildArrowHead is deprecated. Please use Vector.utils.buildArrowHead instead.\");\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    },\n    /**\n     * Convert the given vertices (array) to a JSON string.\n     *\n     * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n     * @returns {string}\n     */\n    arrayToJSON(vertices, precision) {\n        return JSON.stringify(vertices.map(function (vert) {\n            return typeof precision === undefined\n                ? { x: vert.x, y: vert.y }\n                : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n        }));\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-29 Fixed a calculation error in the VertTuple.hasPoint() function; distance measure was broken!\n * @modified 2024-09-10 Chaging the first param of `pointDistance` from `Vertex` to less strict type `XYCoords`. This should not break anything.\n * @modified 2024-09-10 Adding the optional `epsilon` param to the `hasPoint` method.\n * @modified 2024-12-02 Added the `epsilon` param to the `colinear` method. Default is 1.0e-6.\n * @modified 2025-03-31 Added the `VertTuple.revert` method.\n * @modified 2025-04-15 Changed param of `VertTuple.moveTo` method from `Vertex` to `XYCoords`.\n * @modified 2025-04-15 Added method `VertTuple.move` method.\n * @version 1.4.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    /**\n     * Reverse this vertex tuple: a becomes b, and b becomes a.\n     * This operation is in-place.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     */\n    revert() {\n        const tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {XYCoords} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    /**\n     * Move this line by the given amount\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move both point of this tuple.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    move(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    }\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @param {epsilon?=1.0e-6} epsilon - The epsilon to use (default is 1.0e-6).\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line, epsilon) {\n        return Math.abs(this.denominator(line)) < (typeof epsilon === \"undefined\" ? Vertex.EPSILON : epsilon);\n    }\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point - The point to check.\n     * @param {boolean=} insideBoundsOnly - [optional] If set to to true (default=false) the point must be between start and end point of the line.\n     * @param {number=Vertex.EPSILON} epsilon - [optional] A tolerance.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly, epsilon) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex.EPSILON) && t >= 0 && t <= 1;\n        }\n        else {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex.EPSILON); // t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {XYCoords} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-25 Added the `getOrthogonal` method.\n * @modified 2025-04-14 Added the `Vector.rotate(number)` method.\n * @version  1.6.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    /**\n     * The inverse of a vector is a vector with the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    }\n    /**\n     * Get the orthogonal \"vector\" of this vector (rotated by 90° clockwise).\n     *\n     * @name getOrthogonal\n     * @method getOrthogonal\n     * @return {Vector} A new vector with the same length that stands on this vector's point a.\n     * @instance\n     * @memberof Vector\n     **/\n    getOrthogonal() {\n        // Orthogonal of vector (0,0)->(x,y) is (0,0)->(-y,x)\n        const linePoint = this.a.clone();\n        const startPoint = this.b.clone().sub(this.a);\n        const tmp = startPoint.x;\n        startPoint.x = -startPoint.y;\n        startPoint.y = tmp;\n        return new Vector(linePoint, startPoint.add(this.a));\n    }\n    /**\n     * Rotate this vector by the given angle around the first point `a`.\n     *\n     * @name rotate\n     * @method rotate\n     * @return {Vector} this - for chaining.\n     * @instance\n     * @memberof Vector\n     */\n    rotate(angle) {\n        this.b.rotate(angle, this.a);\n        return this;\n    }\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        const angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        const vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @modified 2023-09-25 Changed param type of `intersection()` from Line to VertTuple.\n * @modified 2025-04-15 Class `Line` now implements interface `Intersectable`.\n * @modified 2025-04-16 Class `Line` now implements interface `IBounded`.\n * @version  2.4.0\n *\n * @file Line\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Vector } from \"./Vector\";\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        const numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + a * (this.b.x - this.a.x);\n        const y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Line.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Line\n     * @return {Bounds} The rectangular bounds of this Line.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices([this.a, this.b]);\n    }\n    //--- END --- Implement interface `IBounded`\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    getStartPoint() {\n        return this.a;\n    }\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    getEndPoint() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.a;\n    }\n    /**\n     * Inverse this path segment (in-place) and return this same instance (useful for chaining).\n     *\n     * @method reverse\n     * @memberof PathSegment\n     * @return {PathSegment} This path segment instance (for chaining).\n     */\n    reverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    //--- END Implement PathSegment ---\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersection = this.intersection(line);\n        if (!intersection) {\n            return []; // Both lines parallel\n        }\n        if (this.hasPoint(intersection, true) && (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n            return [intersection];\n        }\n        else {\n            return [];\n        }\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersection tangents of all lines inside the edge bounds\n        const intersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (intersections.length === 0) {\n            return [];\n        }\n        const intrsctn = intersections[0];\n        return [new Vector(this.a.clone(), this.b.clone()).moveTo(intrsctn)];\n    }\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @modified 2023-09-25 Added the `Polygon.getInterpolationPolygon(number)` function.\n * @modified 2023-09-25 Added the `Polygon.lineIntersections(Line,boolean)` function.\n * @modified 2023-09-29 Added the `Polygon.closestLineIntersection(Line,boolean)` function.\n * @modified 2023-11-24 Added the `Polygon.containsPolygon(Polygon)' function.\n * @modified 2024-10-12 Added the `getEdgeAt` method.\n * @modified 2024-10-30 Added the `getEdges` method.\n * @modified 2024-12-02 Added the `elimitateColinearEdges` method.\n * @modified 2025-02-12 Added the `containsVerts` method to test multiple vertices for containment.\n * @modified 2025-03-28 Added the `Polygon.utils.locateLineIntersecion` static helper method.\n * @modified 2025-03-28 Added the `Polygon.lineIntersectionTangents` method.\n * @modified 2025-04-09 Added the `Polygon.getCentroid` method.\n * @modified 2025-05-16 Class `Polygon` now implements `IBounded`.\n * @version 1.15.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == \"undefined\") {\n            vertices = [];\n        }\n        this.vertices = vertices;\n        this.isOpen = isOpen || false;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVertex\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    /**\n     * Add a vertex at a particular position of the `vertices` array.\n     *\n     * @method addVertexAt\n     * @param {Vertex} vert - The vertex to add.\n     * @param {number} index - The position to add the vertex at. Will be handled modulo.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertexAt(vert, index) {\n        // var moduloIndex = index % (this.vertices.length + 1);\n        this.vertices.splice(index, 0, vert);\n    }\n    /**\n     * Get a new instance of the line at the given start index. The returned line will consist\n     * of the vertex at `vertIndex` and `vertIndex+1` (will be handled modulo).\n     *\n     * @method getEdgeAt\n     * @param {number} vertIndex - The vertex index of the line to start.\n     * @instance\n     * @memberof Polygon\n     * @return {Line}\n     **/\n    getEdgeAt(vertIndex) {\n        return new Line(this.getVertexAt(vertIndex), this.getVertexAt(vertIndex + 1));\n    }\n    /**\n     * Converts this polygon into a sequence of lines. Please note that each time\n     * this method is called new lines are created. The underlying line vertices are no clones\n     * (instances).\n     *\n     * @method getEdges\n     * @instance\n     * @memberof Polygon\n     * @return {Array<Line>}\n     */\n    getEdges() {\n        const lines = [];\n        for (var i = 0; i + 1 < this.vertices.length; i++) {\n            // var line = this.getLineAt(i).clone();\n            lines.push(this.getEdgeAt(i));\n        }\n        if (!this.isOpen && this.vertices.length > 0) {\n            lines.push(this.getEdgeAt(this.vertices.length - 1));\n        }\n        return lines;\n    }\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute. Please not that this is\n     * only working for clockwise polygons. If this polygon is not clockwise please use the\n     * `isClockwise` method and reverse polygon vertices if needed.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    getInnerAngleAt(vertIndex) {\n        const p2 = this.vertices[vertIndex];\n        const p1 = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        const p3 = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // See\n        //    https://math.stackexchange.com/questions/149959/how-to-find-the-interior-angle-of-an-irregular-pentagon-or-polygon\n        // π−arccos((P2−P1)⋅(P3−P2)|P2−P1||P3−P2|)\n        // Check if triangle is acute (will be used later)\n        // Acute angles and obtuse angles need to be handled differently.\n        const isAcute = this.isAngleAcute(vertIndex);\n        // Differences\n        const zero = new Vertex(0, 0);\n        const p2mp1 = new Vertex(p2.x - p1.x, p2.y - p1.y);\n        const p3mp2 = new Vertex(p3.x - p2.x, p3.y - p2.y);\n        const p2mp1_len = zero.distance(p2mp1);\n        const p3mp2_len = zero.distance(p3mp2);\n        // Dot products\n        const dotProduct = geomutils.dotProduct(p2mp1, p3mp2);\n        const lengthProduct = p2mp1_len * p3mp2_len;\n        if (isAcute) {\n            return Math.PI - Math.acos(dotProduct / lengthProduct);\n        }\n        else {\n            return Math.PI + Math.acos(dotProduct / lengthProduct);\n        }\n    }\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    isAngleAcute(vertIndex) {\n        const A = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        const B = this.vertices[vertIndex];\n        const C = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // Find local winding number for triangle A B C\n        const windingNumber = Triangle.utils.determinant(A, B, C);\n        // console.log(\"vertIndex\", vertIndex, \"windingNumber\", windingNumber);\n        return windingNumber < 0;\n    }\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @method getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0) {\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        }\n        else {\n            return this.vertices[index % this.vertices.length];\n        }\n    }\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    }\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    /**\n     * Check if all given vertices are inside this polygon.<br>\n     * <br>\n     * This method just uses the `Polygon.containsVert` method.\n     *\n     * @method containsVerts\n     * @param {XYCoords[]} verts - The vertices to check.\n     * @return {boolean} True if all passed vertices are inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVerts(verts) {\n        return verts.every((vert) => this.containsVert(vert));\n    }\n    /**\n     * Check if the passed polygon is completly contained inside this polygon.\n     *\n     * This means:\n     *  - all polygon's vertices must be inside this polygon.\n     *  - the polygon has no edge intersections with this polygon.\n     *\n     * @param {Polygon} polygon - The polygon to check if contained.\n     * @return {boolean}\n     */\n    containsPolygon(polygon) {\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            if (!this.containsVert(polygon.vertices[i])) {\n                return false;\n            }\n        }\n        // All vertices are inside; check for intersections\n        const lineSegment = new Line(new Vertex(), new Vertex());\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            lineSegment.a.set(polygon.vertices[i]);\n            lineSegment.b.set(polygon.vertices[(i + 1) % polygon.vertices.length]);\n            if (this.lineIntersections(lineSegment, true).length > 0) {\n                // Current segment has intersection(s) with this polygon.\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        // return Polygon.utils.signedArea(this.vertices) < 0;\n        return Polygon.utils.isClockwise(this.vertices);\n    }\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    perimeter() {\n        let length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    }\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    }\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    /**\n     * Get the mean `center` of this polygon by calculating the mean value of all vertices.\n     *\n     * Mean: (v[0] + v[1] + ... v[n-1]) / n\n     *\n     * @method getMeanCenter\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex|null} `null` is no vertices are available.\n     */\n    getMeanCenter() {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        const center = this.vertices[0].clone();\n        for (var i = 1; i < this.vertices.length; i++) {\n            center.add(this.vertices[i]);\n        }\n        center.x /= this.vertices.length;\n        center.y /= this.vertices.length;\n        return center;\n    }\n    /**\n     * Get centroid.\n     * Centroids define the barycenter of any non self-intersecting convex polygon.\n     *\n     * If the polygon is self intersecting or non konvex then the barycenter is not well defined.\n     *\n     * https://mathworld.wolfram.com/PolygonCentroid.html\n     *\n     * @method getCentroid\n     * @instance\n     * @memberof Polygon\n     * @returns {Vertex|null}\n     */\n    getCentroid() {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        const center = new Vertex(0.0, 0.0);\n        const n = this.vertices.length;\n        for (var i = 0; i < n; i++) {\n            // center.add(this.vertices[i]);\n            const cur = this.vertices[i];\n            const next = this.vertices[(i + 1) % n];\n            var factor = cur.x * next.y - next.x * cur.y;\n            center.x += (cur.x + next.x) * factor;\n            center.y += (cur.y + next.y) * factor;\n        }\n        const area = this.area();\n        center.x *= 1 / (6 * area);\n        center.y *= 1 / (6 * area);\n        return center;\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        return Polygon.utils\n            .locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly)\n            .map(intersectionTuple => intersectionTuple.intersectionPoint);\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon.utils.locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly).map(intersectionTuple => {\n            const polyLine = this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersectionPoint);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A).\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    closestLineIntersection(line, inVectorBoundsOnly = false) {\n        const allIntersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (allIntersections.length <= 0) {\n            // Empty polygon -> no intersections\n            return null;\n        }\n        // Find the closest intersection\n        let closestIntersection = new Vertex(Number.MAX_VALUE, Number.MAX_VALUE);\n        let curDist = Number.MAX_VALUE;\n        for (var i in allIntersections) {\n            const curVert = allIntersections[i];\n            const dist = curVert.distance(line.a);\n            if (dist < curDist) {\n                // && line.hasPoint(curVert)) {\n                curDist = dist;\n                closestIntersection = curVert;\n            }\n        }\n        return closestIntersection;\n    }\n    /**\n     * Construct a new polygon from this polygon with more vertices on each edge. The\n     * interpolation count determines the number of additional vertices on each edge.\n     * An interpolation count of `0` will return a polygon that equals the source\n     * polygon.\n     *\n     * @param {number} interpolationCount\n     * @returns {Polygon} A polygon with `interpolationCount` more vertices (as as factor).\n     */\n    getInterpolationPolygon(interpolationCount) {\n        const verts = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            const curVert = this.vertices[i];\n            const nextVert = this.vertices[(i + 1) % this.vertices.length];\n            verts.push(curVert.clone());\n            // Add interpolation points\n            if (!this.isOpen || i + 1 !== this.vertices.length) {\n                const lerpAmount = 1.0 / (interpolationCount + 1);\n                for (var j = 1; j <= interpolationCount; j++) {\n                    verts.push(curVert.clone().lerp(nextVert, lerpAmount * j));\n                }\n            }\n        }\n        return new Polygon(verts, this.isOpen);\n    }\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    getEvenDistributionPolygon(pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        const result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        let polygonPoint = new Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        const perimeter = this.perimeter();\n        const stepSize = perimeter / pointCount;\n        const n = this.vertices.length;\n        let polygonIndex = 1;\n        let nextPolygonPoint = new Vertex(this.vertices[1]);\n        let segmentLength = polygonPoint.distance(nextPolygonPoint);\n        let loopMax = this.isOpen ? n : n + 1;\n        let curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                let newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @method clone\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} The cloned polygon.\n     */\n    clone() {\n        return new Polygon(this.vertices.map(vert => vert.clone()), this.isOpen);\n    }\n    /**\n     * Create a new polygon without colinear adjacent edges. This method does not midify the current polygon\n     * but creates a new one.\n     *\n     * Please note that this method does NOT create deep clones of the vertices. Use Polygon.clone() if you need to.\n     *\n     * Please also note that the `tolerance` may become really large here, as the denominator of two closely\n     * parallel lines is usually pretty large. See the demo `57-eliminate-colinear-polygon-edges` to get\n     * an impression of how denominators work.\n     *\n     * @method elimitateColinearEdges\n     * @instance\n     * @memberof Polygon\n     * @param {number?} tolerance - (default is 1.0) The epsilon to detect co-linear edges.\n     * @return {Polygon} A new polygon without co-linear adjacent edges – respective the given epsilon.\n     */\n    elimitateColinearEdges(tolerance) {\n        const eps = typeof tolerance === \"undefined\" ? 1.0 : tolerance;\n        const verts = this.vertices.slice(); // Creates a shallow copy\n        let i = 0;\n        var lineA = new Line(new Vertex(), new Vertex());\n        var lineB = new Line(new Vertex(), new Vertex());\n        while (i + 1 < verts.length && verts.length > 2) {\n            const vertA = verts[i];\n            const vertB = verts[(i + 1) % verts.length];\n            lineA.a = vertA;\n            lineA.b = vertB;\n            lineB.a = vertB;\n            let areColinear = false;\n            let j = i + 2;\n            do {\n                let vertC = verts[j % verts.length];\n                lineB.b = vertC;\n                areColinear = lineA.colinear(lineB, eps);\n                // console.log(\"are colinear?\", i, i + 1, j, areColinear);\n                if (areColinear) {\n                    j++;\n                }\n            } while (areColinear);\n            // Now j points to the first vertex that's NOT colinear to the current lineA\n            // -> delete all vertices in between\n            if (j - i > 2) {\n                // Means: there have been 'colinear vertices' in between\n                verts.splice(i + 1, j - i - 2);\n            }\n            i++;\n        }\n        return new Polygon(verts, this.isOpen);\n    }\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0) {\n            return \"\";\n        }\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += addX * addY * 0.5;\n            total -= subX * subY * 0.5;\n        }\n        return Math.abs(total);\n    },\n    isClockwise(vertices) {\n        return Polygon.utils.signedArea(vertices) < 0;\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    },\n    /**\n     * Find intersections of a line with a polygon (vertices).\n     *\n     * @param {VertTuple<any>} line - The line to find intersections with.\n     * @param {Array<Vertex>} vertices - The polygon's vertices.\n     * @param {boolean} isOpen - True if the polygon is open, false otherwise.\n     * @param {boolean} inVectorBoundsOnly - If only intersections in strict vector bounds should be returned.\n     * @returns\n     */\n    locateLineIntersecion(line, vertices, isOpen, inVectorBoundsOnly) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersectionPoints = [];\n        var n = isOpen ? vertices.length - 1 : vertices.length;\n        for (var i = 0; i < n; i++) {\n            const polyLine = new Line(vertices[i % n], vertices[(i + 1) % n]);\n            const intersection = polyLine.intersection(line);\n            // true => only inside bounds\n            // ignore last edge if open\n            if (intersection !== null &&\n                polyLine.hasPoint(intersection, true) &&\n                (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n                intersectionPoints.push({ edgeIndex: i, intersectionPoint: intersection });\n            }\n        }\n        return intersectionPoints;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @modified 2022-11-28 Added the `clone` method.\n * @modified 2023-09-29 Added the `randomPoint` method.\n * @modified 2025-03-23 Added the `getMinDimension` and `getMaxDimension` methods.\n * @modified 2025-04-18 Change parameter type in `Bounds.computeFromVertices` from `Vertex` to more general `XYCoords`.\n * @modified 2025-04-19 Added methods to `Bounds` class: `getNorthPoint`, `getSouthPoint`, `getEastPoint` and `getWestPoint`.\n * @modified 2025-04-26 Added static method `Bounds.computeFromBoundsSet` to calculate containing bounds for a set of bounding boxes.\n * @version  1.8.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Get the center point of the north bound.\n     *\n     * @method getNorthPoint\n     * @instance\n     * @memberof Bounds\n     * @return {Vertex} The \"northmost\" centered point of this bounding box.\n     */\n    getNorthPoint() {\n        return new Vertex(this.min.x + this.width / 2.0, this.min.y);\n    }\n    ;\n    /**\n     * Get the center point of the south bound.\n     *\n     * @method getNorthPoint\n     * @instance\n     * @memberof Bounds\n     * @return {Vertex} The \"southhmost\" centered point of this bounding box.\n     */\n    getSouthPoint() {\n        return new Vertex(this.min.x + this.width / 2.0, this.max.y);\n    }\n    ;\n    /**\n    * Get the center point of the west bound.\n    *\n    * @method getWestPoint\n    * @instance\n    * @memberof Bounds\n    * @return {Vertex} The \"westhmost\" centered point of this bounding box.\n    */\n    getWestPoint() {\n        return new Vertex(this.min.x, this.min.y + this.height / 2.0);\n    }\n    ;\n    /**\n    * Get the center point of the east bound.\n    *\n    * @method getEastPoint\n    * @instance\n    * @memberof Bounds\n    * @return {Vertex} The \"easthmost\" centered point of this bounding box.\n    */\n    getEastPoint() {\n        return new Vertex(this.max.x, this.min.y + this.height / 2.0);\n    }\n    ;\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    getMinDimension() {\n        return Math.min(this.width, this.height);\n    }\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    getMaxDimension() {\n        return Math.max(this.width, this.height);\n    }\n    /**\n     * Generate a random point inside this bounds object. Safe areas at the border to avoid\n     * included.\n     *\n     * @method randomPoint\n     * @instance\n     * @memberof Bounds\n     * @param {horizontalSafeArea} - (optional) The horizonal (left and right) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval.\n     * @param {verticalSafeArea} - (optional) The vertical (top and bottom) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval\n     * @returns {Vertex} A pseudo random point inside these bounds.\n     */\n    randomPoint(horizontalSafeArea = 0, verticalSafeArea = 0) {\n        // Check if the safe areas are meant as percent\n        const absHorizontalSafeArea = horizontalSafeArea > 0 && horizontalSafeArea < 1 ? this.width * horizontalSafeArea : horizontalSafeArea;\n        const absVerticalSafeArea = verticalSafeArea > 0 && verticalSafeArea < 1 ? this.height * verticalSafeArea : verticalSafeArea;\n        return new Vertex(this.min.x + absHorizontalSafeArea + Math.random() * (this.width - 2 * absHorizontalSafeArea), this.min.y + absVerticalSafeArea + Math.random() * (this.height - 2 * absVerticalSafeArea));\n    }\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    toString() {\n        return `{ min: ${this.min.toString()}, max : ${this.max.toString()}, width: ${this.width}, height : ${this.height} }`;\n    }\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {Bounds} Creates a deep clone of this bounds object.\n     */\n    clone() {\n        return new Bounds({ x: this.min.x, y: this.min.y }, { x: this.max.x, y: this.max.y });\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<XYCoords>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0) {\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        }\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    /**\n    * Compute the minimal bounding box for a given set of existing bounding boxes.\n    *\n    * An empty vertex array will return an empty bounding box located at (0,0).\n    *\n    * @static\n    * @method computeFromBoundsSet\n    * @memberof Bounds\n    * @param {Array<IBounds>} boundingBoxes - The set of existing bounding boxes to get the containing bounding box for.\n    * @return The minimal Bounds for the given bounds instances.\n    **/\n    static computeFromBoundsSet(boundingBoxes) {\n        if (boundingBoxes.length == 0) {\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        }\n        let xMin = boundingBoxes[0].min.x;\n        let xMax = boundingBoxes[0].max.x;\n        let yMin = boundingBoxes[0].min.y;\n        let yMax = boundingBoxes[0].min.y;\n        let bounds;\n        for (var i in boundingBoxes) {\n            bounds = boundingBoxes[i];\n            xMin = Math.min(xMin, bounds.min.x);\n            xMax = Math.max(xMax, bounds.max.x);\n            yMin = Math.min(yMin, bounds.min.y);\n            yMax = Math.max(yMax, bounds.min.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    static fromDimension(width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 The `CubicBezierCurve` class now implements the new `PathSegment` interface.\n * @modified 2023-09-30 Added the function `CubicbezierCurve.getSubCurve(number,number)` – similar to `getSubCurveAt(...)` but with absolute position parameters.\n * @modified 2023-10-07 Added the `trimEnd`, `trimEndAt`, `trimStart`, `trimStartAt` methods.\n * @modified 2025-04-09 Added the `CubicBezierCurve.move` method to match the convention – which just calls `translate`.\n * @modified 2025-04-09 Modified the `CubicBezierCurve.translate` method: chaning parameter `Vertex` to more generalized `XYCoords`.\n * @modified 2025-04-13 Changed visibility of `CubicBezierCurve.utils` from 'private' to  'public'.\n * @modified 2025-04-13 Added helper function `CubicBezierCurve.utils.bezierCoeffs`.\n * @modified 2025-04-13 Added helper functopn `CubicBezierCurve.utils.sgn(number)` for division safe sign calculation.\n * @modified 2025-03-13 Class `CubicBezierCurve` is now implementing interface `Intersectable`.\n * @modified 2025-04-18 Added evaluation method for cubic Bézier curves `CubicBezierCurve.utils.evaluateT`.\n * @modified 2025-04-18 Refactored method `CubicBezierCurve.getPointAt` to use `evaluateT`.\n * @modified 2025-04-18 Fixed the `CubicBezierCurve.getBounds` method: now returning the real bounding box. Before it was an approximated one.\n * @modified 2025-ß4-18 Added helper methods for bounding box calculation `CubucBezierCurve.util.cubicPolyMinMax` and `cubicPoly`.\n * @version 2.9.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    move(amount) {\n        return this.translate(amount);\n    }\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @method getClosestT\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getClosestT\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Bounds} The bounds of this ellipse.\n     **/\n    getBounds() {\n        // Thanks to Richard \"RM\" for the Bézier bounds calculatin\n        //    https://jsfiddle.net/SalixAlba/QQnvm/4/\n        const xMinMax = CubicBezierCurve.utils.cubicPolyMinMax(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x);\n        const xl = xMinMax.min;\n        const xh = xMinMax.max;\n        const yMinMax = CubicBezierCurve.utils.cubicPolyMinMax(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y);\n        const yl = yMinMax.min;\n        const yh = yMinMax.max;\n        return Bounds.computeFromVertices([\n            { x: xl, y: yl },\n            { x: xl, y: yh },\n            { x: xh, y: yh },\n            { x: xh, y: yl }\n        ]);\n    }\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        // TODO: cleanup\n        // const x: number =\n        //   this.startPoint.x * Math.pow(1.0 - t, 3) +\n        //   this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n        //   this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n        //   this.endPoint.x * Math.pow(t, 3);\n        // const y: number =\n        //   this.startPoint.y * Math.pow(1.0 - t, 3) +\n        //   this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n        //   this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n        //   this.endPoint.y * Math.pow(t, 3);\n        const x = CubicBezierCurve.utils.evaluateT(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x, t);\n        const y = CubicBezierCurve.utils.evaluateT(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y, t);\n        return new Vertex(x, y);\n    }\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        const tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    /**\n     * Trim off a start section of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimStartAt`.\n     *\n     * @method trimStart\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimStart(uValue) {\n        return this.trimStartAt(this.convertU2T(uValue));\n    }\n    /**\n     * Trim off a start section of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * @method trimStartAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimStartAt(t) {\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, t, 1.0);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Trim off the end of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[0,uValue]` (so `[1.0-uValue,1.0]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimEndAt`.\n     *\n     * @method trimEnd\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimEnd(uValue) {\n        return this.trimEndAt(this.convertU2T(uValue));\n    }\n    /**\n     * Trim off the end of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[0,t]` (so `[1.0-t,1.0]` is cut off).\n     *\n     * @method trimEndAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimEndAt(t) {\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, 0.0, t);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Get a sub curve at the given start end end positions (values on the curve's length, between 0 and curve.arcLength).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurve\n     * @param {number} tStart – The start position of the desired sub curve (must be in [0..arcLength]).\n     * @param {number} tEnd – The end position if the desired cub curve (must be in [0..arcLength]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurve(uStart, uEnd) {\n        return this.getSubCurveAt(this.convertU2T(uStart), this.convertU2T(uEnd));\n    }\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        // This 'splits' the curve at the given point at t.\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, tStart, tEnd);\n        return new CubicBezierCurve(subCurbePoints[0], subCurbePoints[1], subCurbePoints[2], subCurbePoints[3]);\n    }\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    }\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    //---BEGIN PathSegment-------------------------\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.endControlPoint;\n    }\n    //---END PathSegment-------------------------\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this shape.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the shape outline.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        const intersectionTs = this.lineIntersectionTs(line);\n        const intersectionPoints = intersectionTs.map((t) => {\n            return this.getPointAt(t);\n        });\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return intersectionPoints.filter((vert) => line.hasPoint(vert, true));\n        }\n        else {\n            return intersectionPoints;\n        }\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        const intersectionTs = this.lineIntersectionTs(line);\n        const intersectionTangents = intersectionTs.map((t) => {\n            const startPoint = this.getPointAt(t);\n            const endPoint = this.getTangentAt(t);\n            return new Vector(startPoint, endPoint.add(startPoint));\n        });\n        if (inVectorBoundsOnly) {\n            return intersectionTangents.filter((vec) => line.hasPoint(vec.a, true));\n        }\n        else {\n            return intersectionTangents;\n        }\n    }\n    //--- END --- Implement interface `Intersectable`\n    lineIntersectionTs(line) {\n        var A = line.b.y - line.a.y; // A=y2-y1\n        var B = line.a.x - line.b.x; // B=x1-x2\n        var C = line.a.x * (line.a.y - line.b.y) + line.a.y * (line.b.x - line.a.x); //C=x1*(y1-y2)+y1*(x2-x1)\n        // var bx = bezierCoeffs(px[0], px[1], px[2], px[3]);\n        // var by = bezierCoeffs(py[0], py[1], py[2], py[3]);\n        var bx = CubicBezierCurve.utils.bezierCoeffs(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x);\n        var by = CubicBezierCurve.utils.bezierCoeffs(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y);\n        const poly = Array(4);\n        poly[0] = A * bx[0] + B * by[0]; /*t^3*/\n        poly[1] = A * bx[1] + B * by[1]; /*t^2*/\n        poly[2] = A * bx[2] + B * by[2]; /*t*/\n        poly[3] = A * bx[3] + B * by[3] + C; /*1*/\n        var roots = CubicBezierCurve.utils.cubicRoots(poly);\n        return roots.filter((root) => root != -1);\n    }\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    }\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n/**\n * Helper utils.\n */\nCubicBezierCurve.utils = {\n    evaluateT: (p0, p1, p2, p3, t) => {\n        return p0 * Math.pow(1.0 - t, 3) +\n            p1 * 3 * t * Math.pow(1.0 - t, 2) +\n            p2 * 3 * Math.pow(t, 2) * (1.0 - t) +\n            p3 * Math.pow(t, 3);\n    },\n    cubicPolyMinMax: (p0, p1, p2, p3) => {\n        // var polyX = CubicBezierCurve.utils.cubicPoly2(\n        //   p0, // P[0].X, // bezierCurve.startPoint.x,\n        //   p1, // P[1].X, // bezierCurve.startControlPoint.x,\n        //   p2, // P[2].X, // bezierCurve.endControlPoint.x,\n        //   p3 // P[3].X // bezierCurve.endPoint.x\n        // );\n        // var a = polyX.a;\n        // var b = polyX.b;\n        // var c = polyX.c;\n        // var disc = polyX.b * polyX.b - 4 * polyX.a * polyX.c;\n        var polyX = CubicBezierCurve.utils.cubicPoly(p0, // P[0].X, // bezierCurve.startPoint.x,\n        p1, // P[1].X, // bezierCurve.startControlPoint.x,\n        p2, // P[2].X, // bezierCurve.endControlPoint.x,\n        p3 // P[3].X // bezierCurve.endPoint.x\n        );\n        var a = polyX[0]; // .a;\n        var b = polyX[1]; // .b;\n        var c = polyX[2]; // .c;\n        //alert(\"a \"+a+\" \"+b+\" \"+c);\n        // var disc = b * b - 4 * a * c;\n        var disc = polyX[1] * polyX[1] - 4 * polyX[0] * polyX[2];\n        // var polyX = CubicBezierCurve.utils.bezierCoeffs(p3,p2,p1,p0);\n        // var a = polyX[0]; //polyX.a;\n        // var b = polyX[1]; // .b;\n        // var c = polyX[2]; //.c;\n        // var disc = polyX[1] * polyX[1] - 4 * polyX[0] * polyX[2];\n        // var xl = Math.min(bCurve.endPoint.x, bCurve.startPoint.x); // P[0].X;\n        // var xh = Math.max(bCurve.endPoint.x, bCurve.startPoint.x); // P[0].X;\n        var xl = Math.min(p3, p0); // P[0].X;\n        var xh = Math.max(p3, p0); // P[0].X;\n        // if (P[3].X < xl) xl = P[3].X;\n        // if (P[3].X > xh) xh = P[3].X;\n        if (disc >= 0) {\n            var t1 = (-b + Math.sqrt(disc)) / (2 * a);\n            // alert(\"t1 \" + t1);\n            if (t1 > 0 && t1 < 1) {\n                // var x1 = evalBez(PX, t1);\n                // var x1 = bCurve.getPointAt(t1).x;\n                var x1 = CubicBezierCurve.utils.evaluateT(p0, p1, p2, p3, t1); // bCurve.getPointAt(t1).x;\n                if (x1 < xl)\n                    xl = x1;\n                if (x1 > xh)\n                    xh = x1;\n            }\n            var t2 = (-b - Math.sqrt(disc)) / (2 * a);\n            // alert(\"t2 \" + t2);\n            if (t2 > 0 && t2 < 1) {\n                // var x2 = evalBez(PX, t2);\n                // var x2 = bCurve.getPointAt(t2).x;\n                var x2 = CubicBezierCurve.utils.evaluateT(p0, p1, p2, p3, t2); //\n                if (x2 < xl)\n                    xl = x2;\n                if (x2 > xh)\n                    xh = x2;\n            }\n        }\n        return { min: xl, max: xh };\n    },\n    /**\n     * Get the points of a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurvePointsAt\n     * @param {CubicBezierCurve} curve – The curve to get the sub curve points from.\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurvePointsAt: (curve, tStart, tEnd) => {\n        const startVec = new Vector(curve.getPointAt(tStart), curve.getTangentAt(tStart));\n        const endVec = new Vector(curve.getPointAt(tEnd), curve.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        return [startVec.a, endVec.a, startVec.b, endVec.b];\n    },\n    /**\n     * Compute the cubic roots for the given cubic polynomial coefficients.\n     *\n     * Based on\n     *   http://mysite.verizon.net/res148h4j/javascript/script_exact_cubic.html#the%20source%20code\n     * Inspired by\n     *   https://www.particleincell.com/2013/cubic-line-intersection/\n     * Thanks to Stephan Schmitt and Particle-In-Cell!\n     *\n     * @param poly\n     * @returns\n     */\n    cubicRoots: (poly) => {\n        const a = poly[0];\n        const b = poly[1];\n        const c = poly[2];\n        const d = poly[3];\n        const A = b / a;\n        const B = c / a;\n        const C = d / a;\n        var S, T, Im;\n        const Q = (3 * B - Math.pow(A, 2)) / 9;\n        const R = (9 * A * B - 27 * C - 2 * Math.pow(A, 3)) / 54;\n        const D = Math.pow(Q, 3) + Math.pow(R, 2); // polynomial discriminant\n        const ts = []; // Array();\n        if (D >= 0) {\n            // complex or duplicate roots\n            S = CubicBezierCurve.utils.sgn(R + Math.sqrt(D)) * Math.pow(Math.abs(R + Math.sqrt(D)), 1 / 3);\n            T = CubicBezierCurve.utils.sgn(R - Math.sqrt(D)) * Math.pow(Math.abs(R - Math.sqrt(D)), 1 / 3);\n            ts[0] = -A / 3 + (S + T); // real root\n            ts[1] = -A / 3 - (S + T) / 2; // real part of complex root\n            ts[2] = -A / 3 - (S + T) / 2; // real part of complex root\n            Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // complex part of root pair\n            // Mark complex roots to be discarded\n            if (Im != 0) {\n                ts[1] = -1;\n                ts[2] = -1;\n            }\n        } // distinct real roots\n        else {\n            const th = Math.acos(R / Math.sqrt(-Math.pow(Q, 3)));\n            ts[0] = 2 * Math.sqrt(-Q) * Math.cos(th / 3) - A / 3;\n            ts[1] = 2 * Math.sqrt(-Q) * Math.cos((th + 2 * Math.PI) / 3) - A / 3;\n            ts[2] = 2 * Math.sqrt(-Q) * Math.cos((th + 4 * Math.PI) / 3) - A / 3;\n            Im = 0.0;\n        }\n        // Discard all t's out of spec and sort the rest\n        return ts.filter((t) => t >= 0 && t <= 1.0).sort();\n    },\n    /**\n     * Compute the Bézier coefficients from the given Bézier point coordinates.\n     *\n     * @param {number} p0 - The start point coordinate.\n     * @param {number} p1 - The start control point coordinate.\n     * @param {number} p2 - The end control point coordinate.\n     * @param {number} p3 - The end point coordinate.\n     * @returns {[number,number,number,number]}\n     */\n    bezierCoeffs: (p0, p1, p2, p3) => {\n        const coeffs = [NaN, NaN, NaN, NaN]; //Array(4);\n        coeffs[0] = -p0 + 3 * p1 + -3 * p2 + p3;\n        coeffs[1] = 3 * p0 - 6 * p1 + 3 * p2;\n        coeffs[2] = -3 * p0 + 3 * p1;\n        coeffs[3] = p0;\n        return coeffs;\n    },\n    /**\n     * Calculate the cubic polynomial coefficients used to find the bounding box.\n     *\n     * @param {number} p0 - The start point coordinate.\n     * @param {number} p1 - The start control point coordinate.\n     * @param {number} p2 - The end control point coordinate.\n     * @param {number} p3 - The end point coordinate.\n     * @returns {[number,number,number]}\n     */\n    cubicPoly: (p0, p1, p2, p3) => {\n        return [\n            3 * p3 - 9 * p2 + 9 * p1 - 3 * p0,\n            6 * p0 - 12 * p1 + 6 * p2,\n            3 * p1 - 3 * p0\n        ];\n    },\n    /**\n     * sign of number, but is division safe: no zero returned :)\n     */\n    sgn(x) {\n        return x < 0.0 ? -1 : 1;\n    }\n};\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2023-10-06 Adding the `BezierPath.toPathPoints()` method.\n * @modified 2023-10-07 Adding the `BezierPath.fromCurve(CubicBezierCurve)` static function.\n * @modified 2025-04-09 Added the `BezierPath.move` method to match the convention – which just calls `translate`.\n * @modified 2025-04-09 Modified the `BezierPath.translate` method: chaning parameter `Vertex` to more generalized `XYCoords`.\n * @modified 2025-04-14 Class `BezierPath` is now implementing interface `Intersectable`.\n * @version 2.7.0\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor() {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        // pathPoints: Array<Vertex> | undefined | null) {\n        this.uid = UIDGenerator.next();\n        // if (!pathPoints) {\n        //   pathPoints = [];\n        // }\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    move(amount) {\n        return this.translate(amount);\n    }\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaleFactor) {\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scaleXY(scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this shape.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the shape's outline.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        return this.bezierCurves.reduce((accu, curCurve) => {\n            return accu.concat(curCurve.lineIntersections(line, inVectorBoundsOnly));\n        }, []);\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        return this.bezierCurves.reduce((accu, curCurve) => {\n            return accu.concat(curCurve.lineIntersectionTangents(line, inVectorBoundsOnly));\n        }, []);\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    getEvenDistributionVertices(pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        const result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        const perimeter = this.totalArcLength;\n        const stepSize = perimeter / (pointCount - 1);\n        const n = this.bezierCurves.length;\n        let curveIndex = 0;\n        let segmentLength = this.bezierCurves[0].arcLength;\n        let curSegmentU = stepSize;\n        let i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(); // undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof BezierPath\n     */\n    destroy() {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n    /**\n     * Convert this path to an array of path points that can be drawn by the default DrawLib\n     * implementations.\n     *\n     * @method toPathPoints\n     * @instance\n     * @memberof BezierPath\n     * @return {Array<XYCoords>}\n     */\n    toPathPoints() {\n        if (this.bezierCurves.length === 0) {\n            return [];\n        }\n        if (this.bezierCurves.length === 1) {\n            return [\n                this.bezierCurves[0].startPoint,\n                this.bezierCurves[0].startControlPoint,\n                this.bezierCurves[0].endControlPoint,\n                this.bezierCurves[0].endPoint\n            ];\n        }\n        const arr = [];\n        arr.push(this.bezierCurves[0].startPoint);\n        arr.push(this.bezierCurves[0].startControlPoint);\n        for (var i = 1; i < this.bezierCurves.length; i++) {\n            arr.push(this.bezierCurves[i - 1].endControlPoint);\n            arr.push(this.bezierCurves[i - 1].endPoint);\n            arr.push(this.bezierCurves[i].startPoint);\n            arr.push(this.bezierCurves[i].startControlPoint);\n        }\n        arr.push(this.bezierCurves[0].endControlPoint);\n        arr.push(this.bezierCurves[0].endPoint);\n        return arr;\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Construct a new path with a single curve. Adding more curves is always possible.\n     *\n     * @method fromCurve\n     * @param {CubicBezierCurve} curve - The curve to construct a new path from.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The constructed bezier path instance.\n     */\n    static fromCurve(curve) {\n        const path = new BezierPath(); // []);\n        path.addCurve(curve);\n        return path;\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj)) {\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        }\n        const arr = obj; // FORCE?\n        if (arr.length < 1) {\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        }\n        // Create an empty bezier path\n        var bPath = new BezierPath(); // undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(); // null); // No points yet\n        var startPoint = new Vertex();\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular !== null && adjustCircular !== void 0 ? adjustCircular : false;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @modified 2024-01-30 Added a missing type in the `describeSVGArc` function.\n * @modified 2024-03-01 Added the `getStartPoint` and `getEndPoint` methods.\n * @modified 2024-03-08 Added the `containsAngle` method.\n * @modified 2024-03-09 Added the `circleSectorIntersection` method to find coherent sector intersections..\n * @modified 2024-03-09 Added the `angleAt` method to determine any angle at some ratio.\n * @modified 2025-04-02 Adding the `CircleSector.lineIntersections` and `CircleSector.lineIntersectionTangents` and implementing `Intersectable`.\n * @modified 2025-04-09 Adding the `CircleSector.move()` method.\n * @modified 2025-04-19 Tweaking the `CircleSector.containsAngle` method: all values (input angle, start- and end- angle) are wrapped into [0,2*PI) now.\n * @modified 2025-04-19 Class `CircleSector` implements interface `Bounded` now (method `getBounds` added).\n * @version  1.2.0\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this ellipse.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        const _self = this;\n        const circleBounds = this.circle.getBounds();\n        // Calculage angles from east, west, north and south box points and check if they are inside\n        const candidates = [\n            circleBounds.getNorthPoint(),\n            circleBounds.getSouthPoint(),\n            circleBounds.getWestPoint(),\n            circleBounds.getEastPoint()\n        ].filter((point) => {\n            // Check for each candidate points if they are contained in this sector. Drop if not.\n            const angle = new Line(_self.circle.center, point).angle();\n            return _self.containsAngle(angle);\n        });\n        // Compute bounds and inlcude start end end point (they are definitely part of the bounds)\n        return Bounds.computeFromVertices(candidates.concat([this.getStartPoint(), this.getEndPoint()]));\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Move the circle sector by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector} this for chaining\n     **/\n    move(amount) {\n        this.circle.move(amount);\n        return this;\n    }\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof CircleSector\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    containsAngle(angle) {\n        var wrappedAngle = geomutils.mapAngleTo2PI(angle);\n        var wrappedStart = geomutils.mapAngleTo2PI(this.startAngle);\n        var wrappedEnd = geomutils.mapAngleTo2PI(this.endAngle);\n        // TODO: cleanup\n        // if (this.startAngle <= this.endAngle) {\n        //   return angle >= this.startAngle && angle < this.endAngle;\n        // } else {\n        //   // startAngle > endAngle\n        //   return angle >= this.startAngle || angle < this.endAngle;\n        // }\n        if (wrappedStart <= wrappedEnd) {\n            return wrappedAngle >= wrappedStart && wrappedAngle < wrappedEnd;\n        }\n        else {\n            // startAngle > endAngle\n            return wrappedAngle >= wrappedStart || wrappedAngle < wrappedEnd;\n        }\n    }\n    /**\n     * Get the angle inside this sector for a given ratio. 0.0 means startAngle, and 1.0 means endAngle.\n     *\n     * @param {number} t - The ratio inside [0..1].\n     * @method angleAt\n     * @instance\n     * @memberof CircleSector\n     * @return {number} The angle inside this sector at a given ratio.\n     */\n    angleAt(t) {\n        if (this.startAngle <= this.endAngle) {\n            const angleAtRatio = this.startAngle + (this.endAngle - this.startAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n        else {\n            // startAngle > endAngle\n            const angleAtRatio = this.startAngle + (Math.PI * 2 - this.startAngle + this.endAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n    }\n    /**\n     * Get the sectors starting point (on the underlying circle, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's stating point.\n     */\n    getStartPoint() {\n        return this.circle.vertAt(this.startAngle);\n    }\n    /**\n     * Get the sectors ending point (on the underlying circle, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's ending point.\n     */\n    getEndPoint() {\n        return this.circle.vertAt(this.endAngle);\n    }\n    /**\n     * Calculate the intersection of this circle sector and some other sector.\n     *\n     * If the two sectors do not corerently intersect (when not both points of the\n     * radical line are containted in both source sectors) then null is returned.\n     *\n     * See demo/53-circle-sector-intersections for a geometric visualisation.\n     *\n     * @method circleSectorIntersection\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector | null} The intersecion of both sectors or null if they don't intersect.\n     */\n    circleSectorIntersection(sector) {\n        const radicalLine = this.circle.circleIntersection(sector.circle);\n        if (!radicalLine) {\n            // The circles to not intersect at all.\n            return null;\n        }\n        // Circles intersect. Check if this sector interval intersects, too.\n        const thisIntersectionAngleA = this.circle.center.angle(radicalLine.a);\n        const thisIntersectionAngleB = this.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!this.containsAngle(thisIntersectionAngleA) || !this.containsAngle(thisIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // Circles intersect. Check if the passed sector interval intersects, too.\n        const thatIntersectionAngleA = sector.circle.center.angle(radicalLine.a);\n        const thatIntersectionAngleB = sector.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!sector.containsAngle(thatIntersectionAngleA) || !sector.containsAngle(thatIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // The radical line has no direction. Thus the resulting sector _might_ be in reverse order.\n        // Make a quick logical check: the center of the gap must still be located inside the result sector.\n        // If not: reverse result.\n        var gapSector = new CircleSector(this.circle, this.endAngle, this.startAngle);\n        var centerOfOriginalGap = gapSector.angleAt(0.5);\n        const resultSector = new CircleSector(new Circle(this.circle.center.clone(), this.circle.radius), thisIntersectionAngleA, thisIntersectionAngleB);\n        if (resultSector.containsAngle(centerOfOriginalGap)) {\n            resultSector.startAngle = thisIntersectionAngleB;\n            resultSector.endAngle = thisIntersectionAngleA;\n        }\n        return resultSector;\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    lineIntersections(ray, inVectorBoundsOnly = false) {\n        // First get all line intersections from underlying ellipse.\n        const ellipseIntersections = this.circle.lineIntersections(ray, inVectorBoundsOnly);\n        // Drop all intersection points that are not contained in the circle sectors bounds.\n        const tmpLine = new Line(this.circle.center, new Vertex());\n        return ellipseIntersections.filter((intersectionPoint) => {\n            tmpLine.b.set(intersectionPoint);\n            const lineAngle = tmpLine.angle();\n            return this.containsAngle(geomutils.wrapMinMax(lineAngle, 0, Math.PI * 2));\n        });\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        const interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map((vert) => {\n            // Calculate angle\n            const lineFromCenter = new Line(this.circle.center, vert);\n            const angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return this.circle.tangentAt(angle);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof CircleSector\n     * @return {void}\n     */\n    destroy() {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n     */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle)\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-11-10 Tweaking some type issues.\n * @modified 2023-02-04 Fixed a typo in the CSS classname for cubic Bézier paths: cubicBezier (was cubierBezier).\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Added initialization checks for null parameters.\n * @modified 2023-09-29 Added a missing implementation to the `drawurilssvg.do(XYCoords,string)` function. Didn't draw anything.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-10-04 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2024-01-30 Fixing an issue with immutable style sets; changes to the global draw config did not reflect here (do now).\n * @modified 2024-03-10 Fixing some types for Typescript 5 compatibility.\n * @modified 2024-07-24 Caching custom style defs in a private buffer variable.\n * @version  1.6.10\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nconst RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * Passed from primary to secondary instance.\n     */\n    //private nodeStyle: SVGStyleElement;\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs, nodeStyle) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = Boolean(isSecondary);\n        this.drawConfig = drawConfig;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            if (!gNode || !bufferGNode || !nodeDefs || !bufferNodeDefs) {\n                throw \"Cannot create secondary svg draw lib with undefinde gNode|bufferGNode|nodeDefs|bufferNodeDefs.\";\n            }\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n            if (nodeStyle) {\n                this.nodeStyle = nodeStyle;\n            }\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    addStyleDefs(drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        this.rebuildStyleDefs(drawConfig);\n    }\n    /**\n     * This method is required to re-define the global style defs. It is needed\n     * if any value in the DrawConfig changed in the meantime.\n     * @param drawConfig\n     */\n    rebuildStyleDefs(drawConfig) {\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"bezier\": \"CubicBezierCurve\",\n            //\"bezierPath\": \"BezierPath\", // TODO: is this correct?\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        // console.log(\"drawConfig\", drawConfig);\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        if (this.customStyleDefs) {\n            rules.push(\"\\n/* Custom styles */\\n\");\n            this.customStyleDefs.forEach((value, key) => {\n                rules.push(key + \" { \" + value + \" }\");\n            });\n            // this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + rules.join(\"\\n\");\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Adds the internal <defs> node.\n     */\n    addDefsNode() {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    }\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    addCustomStyleDefs(defs) {\n        this.customStyleDefs = defs;\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        if (!key) {\n            return null;\n        }\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            // node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n            node.style[\"mix-blend-mode\"](this.drawlibConfiguration.blendMode);\n        }\n        // if (this.lineDashEnabled && this.lineDash && this.lineDash.length > 0 && drawutilssvg.nodeSupportsLineDash(nodeName)) {\n        //   node.setAttribute(\"stroke-dasharray\", this.lineDash.join(\" \"));\n        // }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth, strokeOptions) {\n        this._configureNode(node, className, this.fillShapes, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    }\n    /**\n     * Bind this given node to a parent. If no parent is passed then the global\n     * node buffer will be used.\n     *\n     * @method _bindNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {SVGElement=} bindingParent - (optional) You may pass node other than the glober buffer node.\n     * @returns {SVGElement} The passed node itself.\n     */\n    _bindNode(node, bindingParent) {\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            (bindingParent !== null && bindingParent !== void 0 ? bindingParent : this.bufferGNode).appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Add custom CSS class names and the globally defined CSS classname to the\n     * given node.\n     *\n     * @method addCSSClasses\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {string} className - The additional custom classname to add.\n     * @returns {void}\n     */\n    _addCSSClasses(node, className) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${className} ${this.curClassName}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n    }\n    _configureNode(node, className, fillMode, color, lineWidth, strokeOptions) {\n        this._addCSSClasses(node, className);\n        node.setAttribute(\"fill\", fillMode && color ? color : \"none\");\n        node.setAttribute(\"stroke\", fillMode ? \"none\" : color || \"none\");\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        this.applyStrokeOpts(node, strokeOptions);\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, this.drawConfig, // null as any as DrawConfig, // no DrawConfig – this will work as long as `isSecondary===true`\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs, this.nodeStyle);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        this.rebuildStyleDefs(this.drawConfig);\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        const tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        const tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    applyStrokeOpts(node, strokeOptions) {\n        if (strokeOptions &&\n            strokeOptions.dashArray &&\n            strokeOptions.dashArray.length > 0 &&\n            drawutilssvg.nodeSupportsLineDash(node.tagName)) {\n            node.setAttribute(\"stroke-dasharray\", strokeOptions.dashArray\n                .map((dashArayElem) => {\n                return dashArayElem * this.scale.x;\n            })\n                .join(\" \"));\n            if (strokeOptions.dashOffset) {\n                node.setAttribute(\"stroke-dashoffset\", `${strokeOptions.dashOffset * this.scale.x}`);\n            }\n        }\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth, strokeOptions) {\n        // const line: SVGElement = this.makeNode(\"line\");\n        // this.applyStrokeOpts(line, strokeOptions);\n        // line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        // line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        // line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        // line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        const line = this.makeLineNode(zA, zB, color, lineWidth, strokeOptions);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1, strokeOptions);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const group = this.makeNode(\"g\");\n        const arrowHeadBasePosition = { x: 0, y: 0 };\n        // Just create the child nodes, don't bind them to the root node.\n        const arrowHead = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const line = this.makeLineNode(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions);\n        group.appendChild(line);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"linear-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength = 8, strokeOptions) {\n        const group = this.makeNode(\"g\");\n        // Just create the child nodes, don't bind them to the root node.\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        const arrowHead = this.makeArrowHeadNode(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const diff = arrowHeadBasePosition.difference(endPoint);\n        const bezier = this.makeCubicBezierNode(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n        group.appendChild(bezier);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"cubicbezier-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const node = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, strokeOptions);\n        return this._bindFillDraw(node, \"arrowhead\", color, lineWidth || 1, strokeOptions);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size, alpha = 1.0) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", `${alpha}`);\n                // }\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // const basePolygonBounds: Bounds = polygon.getBounds();\n        const rotatedScalingOrigin = new Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        // const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        const clipPathNode = this.makeNode(\"clipPath\");\n        const clipPathId = `clippath_${UIDGenerator.next()}`; // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        const gNode = this.makeNode(\"g\");\n        const imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", `${this._x(rotatedScalingOrigin.x)}`);\n        imageNode.setAttribute(\"y\", `${this._y(rotatedScalingOrigin.y)}`);\n        imageNode.setAttribute(\"width\", `${textureSize.width}`);\n        imageNode.setAttribute(\"height\", `${textureSize.height}`);\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", `rotate(${rotation * RAD_TO_DEG}, ${this._x(rotatedScalingOrigin.x)}, ${this._y(rotatedScalingOrigin.y)})`);\n        const pathNode = this.makeNode(\"path\");\n        const pathData = [];\n        if (polygon.vertices.length > 0) {\n            const self = this;\n            pathData.push(\"M\", `${this._x(polygon.vertices[0].x)}`, `${this._y(polygon.vertices[0].y)}`);\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", `${this._x(polygon.vertices[i].x)}`, `${this._y(polygon.vertices[i].y)}`);\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", `${this._x(rotatedScalingOrigin.x)} ${this._y(rotatedScalingOrigin.y)}`);\n        gNode.setAttribute(\"transform\", `scale(${this.scale.x}, ${this.scale.y})`);\n        const clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", `url(#${clipPathId})`);\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        const node = this.makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (!path || path.length == 0) {\n            return node;\n        }\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(128,128,128,0.5)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        node.setAttribute(\"x1\", `${this._x(p.x)}`);\n        node.setAttribute(\"y1\", `${this._y(p.y)}`);\n        node.setAttribute(\"x2\", `${this._x(p.x)}`);\n        node.setAttribute(\"y2\", `${this._y(p.y)}`);\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth, strokeOptions) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"rectangle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    rect(position, width, height, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"rect\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // console.log(\"grid\");\n        // const node: SVGElement = this.makeNode(\"pattern\");\n        // var patternId = \"pattern_id_\" + Math.floor(Math.random() * 65365);\n        // node.setAttribute(\"id\", patternId);\n        // node.setAttribute(\"viewBox\", `0,0,${sizeX},${sizeY}`);\n        // node.setAttribute(\"width\", `${sizeX}`);\n        // node.setAttribute(\"height\", `${sizeX}`);\n        // var pattern: SVGElement = this.makeNode(\"path\");\n        // const d: SVGPathParams = [];\n        // d.push(\"M\", sizeX / 2.0, 0);\n        // d.push(\"L\", sizeX / 2.0, sizeY);\n        // d.push(\"M\", 0, sizeY / 2.0);\n        // d.push(\"L\", sizeX, sizeY / 2.0);\n        // node.setAttribute(\"d\", d.join(\" \"));\n        // this.bufferedNodeDefs.append(pattern);\n        // const fillNode: SVGElement = this.makeNode(\"rect\");\n        // // For some strange reason SVG rotation transforms use degrees instead of radians\n        // // Note that the background does not scale with the zoom level (always covers full element)\n        // fillNode.setAttribute(\"x\", \"0\");\n        // fillNode.setAttribute(\"y\", \"0\");\n        // fillNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        // fillNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // fillNode.setAttribute(\"fill\", `url(#${patternId})`);\n        // return this._bindFillDraw(fillNode, \"grid\", \"red\", 1);\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {XYCoords} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (vertices.length == 0) {\n            return node;\n        }\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        var _a, _b, _c;\n        options = options || {};\n        const color = options.color || \"black\";\n        const lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        const textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        const transformOrigin = `${this._x(x)}px ${this._y(y)}px`;\n        const translate = `translate(${this._x(x)} ${this._y(y) + lineHeight / 2})`;\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        const rotate = options.rotation ? `rotate(${options.rotation * RAD_TO_DEG} 0 0)` : ``;\n        const node = this.makeNode(\"g\");\n        const curId = this.curId;\n        this.curId = curId + \"_text\";\n        const textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", (_c = options.fontFamily) !== null && _c !== void 0 ? _c : \"\"); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? `${options.fontSize * this.scale.x}` : \"\");\n        textNode.setAttribute(\"font-style\", options.fontStyle ? `${options.fontStyle}` : \"\");\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? `${options.fontWeight}` : \"\");\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation, color) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${x},${y}), rotate(${((rotation || 0) / Math.PI) * 180})`);\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, options);\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = null; // undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = null; // undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n    static nodeSupportsLineDash(nodeName) {\n        return [\"line\", \"path\", \"circle\", \"ellipse\", \"rectangle\", \"rect\"].includes(nodeName);\n    }\n    /**\n     * Creates a basic <line> node with start and end coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeLineNode\n     * @param {XYCoords} zA - The line's start position.\n     * @param {XYCoords} zB - The line's start position.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGLineElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeLineNode(zA, zB, color, lineWidth, strokeOptions, classNameOverride) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        this._configureNode(line, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"line\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return line;\n    }\n    /**\n     * Creates a basic <path> node with given path string data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makePathNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makePathNode(pathString, color, lineWidth, strokeOptions, classNameOverride) {\n        const path = this.makeNode(\"path\");\n        path.setAttribute(\"d\", pathString);\n        this._configureNode(path, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"path\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return path;\n    }\n    /**\n     * Creates a basic arrow head node (<path> node) at the end of the given line coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeArrowHeadNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {number=8} headLength - (optional) The length of the arrow head; if none is specified then the head will be 8 absolute units long.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeArrowHeadNode(zA, zB, color, lineWidth, headLength = 8, strokeOptions, arrowHeadBasePositionBuffer) {\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        const d = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        for (var i = 1; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        const node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"arrowhead\");\n        return node;\n    }\n    /**\n     * Creates a basic cubic Bézier path node (<path> node) with the given cubic Bézier data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeCubicBezierNode\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        const node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"cubicBezier\");\n        return node;\n    }\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Removed unused method stub for texturedPoly helper function (cleanup).\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @modified 2023-09-30 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2023-10-07 Adding the optional `arrowHeadBasePositionBuffer` param to the arrowHead(...) method.\n * @modified 2024-09-13 Remoed the scaling of `lineWidth` in the `polygon` and `polyline` methods. This makes no sense here and doesn't match up with the behavior of other line functions.\n * @version  1.13.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { Vector } from \"./Vector\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        // this.lineDash = [];\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    applyStrokeOpts(strokeOptions) {\n        var _a, _b;\n        this.ctx.setLineDash(((_a = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashArray) !== null && _a !== void 0 ? _a : []).map((dashArrayElem) => {\n            // Note assume scale.x === scale.y\n            // Invariant scale makes funny stuff anyway.\n            return dashArrayElem * this.scale.x;\n        }));\n        this.ctx.lineDashOffset = ((_b = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashOffset) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    }\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDash: Array<number>) {\n    //   this.lineDash = lineDash;\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        this.arrowHead(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition); // Will NOT use dash configuration\n        this.line(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions); // Will use dash configuration\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        // Will NOT use dash configuration\n        this.arrowHead(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const diff = arrowHeadBasePosition.difference(endPoint);\n        // Will use dash configuration\n        this.cubicBezier(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8, strokeOptions, arrowHeadBasePositionBuffer) {\n        // var headLength: number = 8; // length of head in pixels\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        this.ctx.moveTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 1.0) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        // var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var targetCenterDifference = new Vertex(polygonPosition.x, polygonPosition.y).difference(basePolygonBounds.getCenter());\n        // var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    }\n    /*\n    _texturedPoly(\n      textureImage: HTMLImageElement,\n      textureSize: Bounds,\n      polygon: Polygon,\n      polygonPosition: XYCoords,\n      rotation: number,\n      rotationCenter: XYCoords = { x: 0, y: 0 }\n    ): void {\n      var basePolygonBounds = polygon.getBounds();\n      var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n      var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n      // var rotationalOffset = { x: 0, y: 0 };\n      var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n  \n      // Get the position offset of the polygon\n      var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n      var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n  \n      this.ctx.save();\n  \n      // this.ctx.translate(\n      //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n      //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      // );\n      this.ctx.translate(\n        this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      );\n      this.ctx.rotate(rotation);\n  \n      drawutils.helpers.clipPoly(\n        this.ctx,\n        {\n          x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n          y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        },\n        this.scale,\n        polygon.vertices\n      );\n      this.ctx.drawImage(\n        textureImage,\n        0,\n        0,\n        textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x,\n        (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y,\n        targetTextureSize.x * this.scale.x,\n        targetTextureSize.y * this.scale.y\n      );\n  \n      // const scaledTextureSize = new Bounds(\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n      //   ).scaleXY(this.scale, rotationCenter),\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n      //   ).scaleXY(this.scale, rotationCenter)\n      // );\n      // this.ctx.drawImage(\n      //   textureImage,\n      //   0,\n      //   0,\n      //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n      //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n      //   scaledTextureSize.min.x,\n      //   scaledTextureSize.min.y,\n      //   scaledTextureSize.width,\n      //   scaledTextureSize.height\n      // );\n  \n      this.ctx.restore();\n    }\n    */\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    rect(position, width, height, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {XYCoords} startPoint   - The start point of the cubic Bézier curve\n     * @param {XYCoords} controlPoint - The control point the cubic Bézier curve.\n     * @param {XYCoords} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth, strokeOptions) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth, strokeOptions) {\n        if (!path || path.length == 0) {\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgba(128,128,128, 0.5)\", undefined);\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.applyStrokeOpts(options);\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth, strokeOptions) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth, strokeOptions);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth, strokeOptions) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        let relX = this.offset.x + x * this.scale.x;\n        let relY = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : `\"${options.fontFamily}\"`\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        const rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        const lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        this.applyStrokeOpts(options);\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\ndrawutils.helpers = {\n    // A helper function to define the clipping path.\n    // This could be a candidate for the draw library.\n    clipPoly: (ctx, offset, scale, vertices) => {\n        ctx.beginPath();\n        // Set clip mask\n        ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n        for (var i = 1; i < vertices.length; i++) {\n            const vert = vertices[i];\n            ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n        }\n        ctx.closePath();\n        ctx.clip();\n    }\n};\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  0.0.10\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext|null} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDashes: Array<number>) {\n    //   // TODO\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 0.0) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {VertXYCoordsex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    }\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = (e) => {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = (e) => {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = (e) => {\n            _self.fireUpEvent(e, _self);\n        }));\n    }\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    }\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    destroy() {\n        this.releaseListeners();\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\n// prettier-ignore\nKeyHandler.KEY_CODES = {\n    'break': 3, // alternate: 19\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29, // alternate: 235?\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36, // alternate: 172?\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46, // alternate: 8\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91, // left ⌘\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93, // right ⌘\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108, // firefox, 194 on chrome\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169, // (AZERTY)\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173, // firefox\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181, // firefox, alternate: 173\n    'unmute': 181, // alternate: 173?\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191, // 231 alternate?\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251, // Chrome/Edge\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers[\"mousemove\"] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX, y: e.offsetY };\n    }\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(event, eventName) {\n        var _a, _b;\n        const rel = this.relPos(event);\n        const xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button, // this.mouseButton,\n            leftButton: event.button === 0, // this.mouseButton === 0,\n            middleButton: event.button === 1, // this.mouseButton === 1,\n            rightButton: event.button === 2, // this.mouseButton === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    }\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    }\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-25 Fixed a type error in the constructor. Nothing vital.\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class PBText {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex();\n        this.color = options === null || options === void 0 ? void 0 : options.color;\n        this.fontFamily = options === null || options === void 0 ? void 0 : options.fontFamily;\n        this.fontSize = options === null || options === void 0 ? void 0 : options.fontSize;\n        this.fontStyle = options === null || options === void 0 ? void 0 : options.fontStyle;\n        this.fontWeight = options === null || options === void 0 ? void 0 : options.fontWeight;\n        this.lineHeight = options === null || options === void 0 ? void 0 : options.lineHeight;\n        this.textAlign = options === null || options === void 0 ? void 0 : options.textAlign;\n        this.rotation = options === null || options === void 0 ? void 0 : options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\n//# sourceMappingURL=PBText.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2025-03-31 ATTENTION: modified the winding direction of the `tangentAt` method to match with the Circle method. This is a breaking change!\n * @modified 2025-03-31 Adding the `VEllipse.move(amount: XYCoords)` method.\n * @modified 2025-04-19 Adding the `VEllipse.getBounds()` method.\n * @modified 2025-04-24 Adding the `VEllipse.getExtremePoints()` method for calculating minima and maxima.\n * @version  1.4.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Circle } from \"./Circle\";\nimport { Bounds } from \"./Bounds\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // Rotate axis back to origin before calculating radius\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Get the the minima and maxima (points) of this (rotated) ellipse.\n     *\n     * @method getExtremePoints\n     * @instance\n     * @memberof VEllipse\n     * @return {[Vertex, Vertex, Vertex, Vertex]} Get the the minima and maxima (points) of this (rotated) ellipse.\n     */\n    getExtremePoints() {\n        const a = this.radiusH();\n        const b = this.radiusV();\n        // Calculate t_x values\n        const t_x1 = Math.atan2(-b * Math.sin(this.rotation), a * Math.cos(this.rotation));\n        const t_x2 = t_x1 + Math.PI;\n        // Calculate x values at t_x\n        const x_x1 = this.center.x + a * Math.cos(t_x1) * Math.cos(this.rotation) - b * Math.sin(t_x1) * Math.sin(this.rotation);\n        const y_x1 = this.center.y + a * Math.cos(t_x1) * Math.sin(this.rotation) + b * Math.sin(t_x1) * Math.cos(this.rotation);\n        const x_x2 = this.center.x + a * Math.cos(t_x2) * Math.cos(this.rotation) - b * Math.sin(t_x2) * Math.sin(this.rotation);\n        const y_x2 = this.center.y + a * Math.cos(t_x2) * Math.sin(this.rotation) + b * Math.sin(t_x2) * Math.cos(this.rotation);\n        let x_max, x_min;\n        if (x_x1 > x_x2) {\n            x_max = new Vertex(x_x1, y_x1);\n            x_min = new Vertex(x_x2, y_x2);\n        }\n        else {\n            x_max = new Vertex(x_x2, y_x2);\n            x_min = new Vertex(x_x1, y_x1);\n        }\n        // Calculate t_y values\n        const t_y1 = Math.atan2(b * Math.cos(this.rotation), a * Math.sin(this.rotation));\n        const t_y2 = t_y1 + Math.PI;\n        // Calculate y values at t_y\n        const x_y1 = this.center.x + a * Math.cos(t_y1) * Math.cos(this.rotation) - b * Math.sin(t_y1) * Math.sin(this.rotation);\n        const y_y1 = this.center.y + a * Math.cos(t_y1) * Math.sin(this.rotation) + b * Math.sin(t_y1) * Math.cos(this.rotation);\n        const x_y2 = this.center.x + a * Math.cos(t_y2) * Math.cos(this.rotation) - b * Math.sin(t_y2) * Math.sin(this.rotation);\n        const y_y2 = this.center.y + a * Math.cos(t_y2) * Math.sin(this.rotation) + b * Math.sin(t_y2) * Math.cos(this.rotation);\n        let y_max, y_min;\n        if (y_y1 > y_y2) {\n            y_max = new Vertex(x_y1, y_y1);\n            y_min = new Vertex(x_y2, y_y2);\n        }\n        else {\n            y_max = new Vertex(x_y2, y_y2);\n            y_min = new Vertex(x_y1, y_y1);\n        }\n        return [x_max, x_min, y_max, y_min];\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this ellipse.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this ellipse.\n     **/\n    getBounds() {\n        // Thanks to Cuixiping\n        //    https://stackoverflow.com/questions/87734/how-do-you-calculate-the-axis-aligned-bounding-box-of-an-ellipse\n        const r1 = this.radiusH();\n        const r2 = this.radiusV();\n        const ux = r1 * Math.cos(this.rotation);\n        const uy = r1 * Math.sin(this.rotation);\n        const vx = r2 * Math.cos(this.rotation + Math.PI / 2);\n        const vy = r2 * Math.sin(this.rotation + Math.PI / 2);\n        const bbox_halfwidth = Math.sqrt(ux * ux + vx * vx);\n        const bbox_halfheight = Math.sqrt(uy * uy + vy * vy);\n        return new Bounds({ x: this.center.x - bbox_halfwidth, y: this.center.y - bbox_halfheight }, { x: this.center.x + bbox_halfwidth, y: this.center.y + bbox_halfheight });\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Move the ellipse by the given amount. This is equivalent by moving the `center` and `axis` points.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipse\n     * @return {VEllipse} this for chaining\n     **/\n    move(amount) {\n        this.center.add(amount);\n        this.axis.add(amount);\n        return this;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle - this.rotation); // HERE IS THE CORRECT BEHAVIOR!\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        const resultVector = this.center.distance(endPointA) < this.center.distance(endPointB)\n            ? new Vector(point, endPointB)\n            : new Vector(point, endPointA);\n        if (typeof length === \"number\") {\n            resultVector.setLength(length);\n        }\n        return resultVector;\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        return normal.inv().perp();\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @method getEquidistantVertices\n     * @instance\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    lineIntersections(ray, inVectorBoundsOnly = false) {\n        // Question: what happens to extreme versions when ellipse is a line (width or height is zero)?\n        //           This would result in a Division_by_Zero exception!\n        // Step A: create clones for operations (keep originals unchanged)\n        const ellipseCopy = this.clone(); // VEllipse\n        const rayCopy = ray.clone(); // Vector\n        // Step B: move both so ellipse's center is located at (0,0)\n        const moveAmount = ellipseCopy.center.clone().inv();\n        ellipseCopy.move(moveAmount);\n        rayCopy.add(moveAmount);\n        // Step C: rotate eclipse backwards it's rotation, so that rotation is zero (0.0).\n        //         Rotate together with ray!\n        const rotationAmount = -ellipseCopy.rotation;\n        ellipseCopy.rotate(rotationAmount); // Rotation around (0,0) = center of translated ellipse\n        rayCopy.a.rotate(rotationAmount, ellipseCopy.center);\n        rayCopy.b.rotate(rotationAmount, ellipseCopy.center);\n        // Step D: find x/y factors to use for scaling to transform the ellipse to a circle.\n        //         Scale together with vector ray.\n        const radiusH = ellipseCopy.radiusH();\n        const radiusV = ellipseCopy.radiusV();\n        const scalingFactors = radiusH > radiusV ? { x: radiusV / radiusH, y: 1.0 } : { x: 1.0, y: radiusH / radiusV };\n        // Step E: scale ellipse AND ray by calculated factors.\n        ellipseCopy.axis.scaleXY(scalingFactors);\n        rayCopy.a.scaleXY(scalingFactors);\n        rayCopy.b.scaleXY(scalingFactors);\n        // Intermediate result: now the ellipse is transformed to a circle and we can calculate intersections :)\n        // Step F: calculate circle+line intersecions\n        const tmpCircle = new Circle(new Vertex(), ellipseCopy.radiusH()); // radiusH() === radiusV()\n        const intersections = tmpCircle.lineIntersections(rayCopy, inVectorBoundsOnly);\n        // Step G: transform intersecions back to original configuration\n        intersections.forEach(function (intersectionPoint) {\n            // Reverse transformation from above.\n            intersectionPoint.scaleXY({ x: 1 / scalingFactors.x, y: 1 / scalingFactors.y }, ellipseCopy.center);\n            intersectionPoint.rotate(-rotationAmount, ellipseCopy.center);\n            intersectionPoint.sub(moveAmount);\n        });\n        return intersections;\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        const interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map((vert) => {\n            // Calculate angle\n            const lineFromCenter = new Line(this.center, vert);\n            const angle = lineFromCenter.angle();\n            // Calculate tangent at angle\n            return this.tangentAt(angle);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)?\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0] + this.rotation;\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length] + this.rotation;\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle + this.rotation);\n                let endTangent = this.tangentAt(nextAngle + this.rotation);\n                // Find intersection (ignore that the result might be null in some extreme cases)\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author   Ikaros Kappler\n * @date     2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-11-01 Tweaked the `endpointToCenterParameters` function to handle negative values, too, without errors.\n * @modified 2025-04-01 Adapting a the `toCubicBezier` calculation to match an underlying change in the vertAt and tangentAt calculation of ellipses (was required to hamonize both methods with circles).\n * @modified 2025-04-02 Adding `VEllipseSector.containsAngle` method.\n * @modified 2025-04-02 Adding `VEllipseSector.lineIntersections` and `VEllipseSector.lineIntersectionTangents` and implementing `Intersectable`.\n * @modified 2025-04-07 Adding value wrapping (0 to TWO_PI) to the `VEllipseSector.containsAngle` method.\n * @modified 2025-04-09 Adding the `VEllipseSector.move` method.\n * @modified 2025-04-19 Added the `VEllipseSector.getStartPoint` and `getEndPoint` methods.\n * @modified 2025-04-23 Added the `VEllipseSector.getBounds` method.\n * @version  1.2.0\n */\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Move the ellipse sector by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipseSector\n     * @return {VEllipseSector} this for chaining\n     **/\n    move(amount) {\n        this.ellipse.move(amount);\n        return this;\n    }\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof VEllipseSectpr\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    containsAngle(angle) {\n        angle = geomutils.mapAngleTo2PI(angle); // wrapMinMax(angle, 0, Math.PI * 2);\n        const sAngle = geomutils.mapAngleTo2PI(this.startAngle);\n        const eAngle = geomutils.mapAngleTo2PI(this.endAngle);\n        // TODO: cleanup\n        // if (this.startAngle <= this.endAngle) {\n        //   return angle >= this.startAngle && angle < this.endAngle;\n        // } else {\n        //   // startAngle > endAngle\n        //   return angle >= this.startAngle || angle < this.endAngle;\n        // }\n        if (sAngle <= eAngle) {\n            return angle >= sAngle && angle < eAngle;\n        }\n        else {\n            // startAngle > endAngle\n            return angle >= sAngle || angle < eAngle;\n        }\n    }\n    /**\n     * Get the sectors starting point (on the underlying ellipse, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof VEllipseSector\n     * @return {Vertex} The sector's stating point.\n     */\n    getStartPoint() {\n        return this.ellipse.vertAt(this.startAngle);\n    }\n    /**\n     * Get the sectors ending point (on the underlying ellipse, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof VEllipseSector\n     * @return {Vertex} The sector's ending point.\n     */\n    getEndPoint() {\n        return this.ellipse.vertAt(this.endAngle);\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this elliptic sector.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this elliptic sector.\n     **/\n    getBounds() {\n        // Calculage angles from east, west, north and south box points and check if they are inside\n        const extremes = this.ellipse.getExtremePoints();\n        const candidates = extremes.filter(point => {\n            const angle = new Line(this.ellipse.center, point).angle() - this.ellipse.rotation;\n            return this.containsAngle(angle);\n        });\n        return Bounds.computeFromVertices([this.getStartPoint(), this.getEndPoint()].concat(candidates));\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @memberof VEllipseSectpr\n     * @param {VertTuple<Vector>} ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    lineIntersections(ray, inVectorBoundsOnly = false) {\n        // First get all line intersections from underlying ellipse.\n        const ellipseIntersections = this.ellipse.lineIntersections(ray, inVectorBoundsOnly);\n        // Drop all intersection points that are not contained in the circle sectors bounds.\n        const tmpLine = new Line(this.ellipse.center, new Vertex());\n        return ellipseIntersections.filter((intersectionPoint) => {\n            tmpLine.b.set(intersectionPoint);\n            const lineAngle = tmpLine.angle();\n            return this.containsAngle(lineAngle - this.ellipse.rotation);\n        });\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @method lineIntersections\n     * @memberof VEllipseSectpr\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        const interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map((vert) => {\n            // Calculate angle\n            const lineFromCenter = new Line(this.ellipse.center, vert);\n            const angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return this.ellipse.tangentAt(angle);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle + this.ellipse.rotation);\n            let endTangent = this.ellipse.tangentAt(nextAngle + this.ellipse.rotation);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                if (intersection) {\n                    // It's VERY LIKELY hat this ALWAYS happens; it's just a typesave variant.\n                    // Intersection cannot be null.\n                    let startDiff = startPoint.difference(intersection);\n                    let endDiff = endPoint.difference(intersection);\n                    let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                    curves.push(curve);\n                }\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }, // END function describeSVGArc\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        const angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        const startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        const angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        // const M: number = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const M = sqrt(Math.abs((prx * pry - prx * py - pry * px) / (prx * py + pry * px))) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        // console.log(\"VELLIPSE::::::\", ellipse);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @modified 2022-10-25 Added the `origin` to the default draw config.\n * @modified 2022-11-06 Adding an XML declaration to the SVG export routine.\n * @modified 2022-11-23 Added the `drawRaster` (default=true) option to the config/drawconfig.\n * @modified 2023-02-04 Fixed a bug in the `drawDrawable` function; fill's current classname was not set.\n * @modified 2023-02-10 Fixing an issue of the `style.position` setting when `fitToParent=true` from `absolute` to `static` (default).\n * @modified 2023-02-10 Cleaning up most type errors in the main class (mostly null checks).\n * @modified 2023-02-10 Adding `enableZoom` and `enablePan` (both default true) to have the option to disable these functions.\n * @modified 2023-09-29 Adding proper dicionary key and value types to the params of `PlotBoilerplate.utils.safeMergeByKeys` (was `object` before).\n * @modified 2024-07-08 Adding `PlotBoilerplate.getGUI()` to retrieve the GUI instance.\n * @modified 2024-08-25 Extending main class `PlotBoilerplate` optional param `isBackdropFiltersEnabled`.\n * @modified 2024-12-02 Adding the `triggerRedraw` to the `removeAll` method.\n *\n * @version  1.20.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { PBText } from \"./PBText\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enablePan=true] - (default true) Set to false if you want to disable panning completely.\n     * @param {boolean=} [config.enableZoom=true] - (default true) Set to false if you want to disable zooming completely.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    constructor(config, drawConfig) {\n        var _b, _c;\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        /**\n         * A storage variable for retrieving the GUI instance once it was created.\n         */\n        this._gui = null;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas === \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            enableZoom: f.bool(config, \"enableZoom\", true), // default=true\n            enablePan: f.bool(config, \"enablePan\", true), // default=true\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false),\n            isBackdropFiltersEnabled: f.bool(config, \"isBackdropFiltersEnabled\", true)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            // bezierPath: {\n            //   color: \"#0022a8\",\n            //   lineWidth: 1\n            // },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            },\n            origin: {\n                color: \"#000000\"\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas === \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        if (typeof canvasElement === \"undefined\") {\n            throw `Cannot initialize PlotBoilerplate with a null canvas (element \"${config.canvas} not found).`;\n        }\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                // Override the case 'null' here. If GL is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                // Override the case 'null' here. If context creation is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set((_b = this.config.scaleX) !== null && _b !== void 0 ? _b : 1.0, this.config.scaleY);\n        this.fill.scale.set((_c = this.config.scaleX) !== null && _c !== void 0 ? _c : 1.0, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear) {\n            pb.config.preClear();\n        }\n        tosvgDraw.clear(pb.config.backgroundColor || \"white\");\n        if (pb.config.preDraw) {\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        }\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        // Add: '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' ?\n        var blob = new Blob(['<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\") {\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        }\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        var _b, _c, _d, _e;\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleX) !== null && _c !== void 0 ? _c : 1.0);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_d = this.config.cssScaleX) !== null && _d !== void 0 ? _d : 1.0, (_e = this.config.cssScaleY) !== null && _e !== void 0 ? _e : 1.0);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            for (var i = 0; i < drawable.vertices.length; i++) {\n                this.vertices.push(drawable.vertices[i]);\n            }\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0) {\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                }\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else if (drawable instanceof PBText) {\n            this.vertices.push(drawable.anchor);\n            this.drawables.push(drawable);\n            drawable.anchor.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                    else if (drawable instanceof PBText) {\n                        this.removeVertex(drawable.anchor, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @param {boolean=true} triggerRedraw - By default this method triggers the redraw routine; passing `false` will suppress redrawing.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices, triggerRedraw) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        if (triggerRedraw || typeof triggerRedraw === \"undefined\") {\n            this.redraw();\n        }\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var _b, _c;\n        const p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, this.drawConfig.origin.color);\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.fill.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            var curveIndex = 0;\n            for (var c in d.bezierCurves) {\n                // Restore these settings again in each loop (will be overwritten)\n                this.draw.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.fill.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.draw.setCurrentClassName(d.className);\n                this.fill.setCurrentClassName(d.className);\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h2`);\n                        df.setCurrentClassName(`${d.className}-start-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h3`);\n                        df.setCurrentClassName(`${d.className}-end-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.handleLine(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.handleLine(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint);\n                }\n                curveIndex++;\n            } // END for\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                draw.handleLine(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                draw.handleLine(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(`${d.uid}_a0`);\n                draw.setCurrentClassName(`${d.className}-anchor`);\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        if (this.config.drawRaster) {\n            this.drawGrid(draw);\n        }\n        if (this.config.drawOrigin) {\n            this.drawOrigin(draw);\n        }\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(null);\n        draw.setCurrentClassName(null);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor || \"white\");\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        var _b, _c;\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * ((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0), this.canvasSize.height * ((_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0)));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        var _b, _c, _d, _e, _f, _g;\n        const _self = this;\n        const _setSize = (w, h) => {\n            var _b, _c;\n            w *= (_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0;\n            h *= (_c = _self.config.canvasHeightFactor) !== null && _c !== void 0 ? _c : 1.0;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = ((_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0) * width + \"px\";\n            _self.canvas.style.height = ((_c = _self.config.canvasWidthFactor) !== null && _c !== void 0 ? _c : 1.0) * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"static\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = ((_d = _self.config.canvasWidthFactor) !== null && _d !== void 0 ? _d : 1.0) * space.width + \"px\";\n            _self.canvas.style.height = ((_e = _self.config.canvasHeightFactor) !== null && _e !== void 0 ? _e : 1.0) * space.height + \"px\";\n            _self.canvas.style.top = \"\";\n            _self.canvas.style.left = \"\";\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = \"\";\n            _self.canvas.style.height = \"\";\n            _setSize((_f = _self.config.defaultCanvasWidth) !== null && _f !== void 0 ? _f : 1024, (_g = _self.config.defaultCanvasHeight) !== null && _g !== void 0 ? _g : 768);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        const _self = this;\n        var point = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX || 1.0, _self.config.cssScaleY || 1.0));\n        if (point) {\n            _self.vertices[point.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (point.typeName == \"bpath\") {\n                    let vert = _self.paths[point.pindex].bezierCurves[point.cindex].getPointByID(point.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (point.typeName == \"vertex\") {\n                    let vert = _self.vertices[point.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler && this.keyHandler.isDown(\"y\")) {\n                _self.vertices[point.vindex].attr.bezierAutoAdjust = !_self.vertices[point.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var draggablePoint = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!draggablePoint)\n            return;\n        // Drag all selected elements?\n        if (draggablePoint.typeName == \"vertex\" && _self.vertices[draggablePoint.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[draggablePoint.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(draggablePoint);\n            if (draggablePoint.typeName == \"bpath\")\n                _self.paths[draggablePoint.pindex].bezierCurves[draggablePoint.cindex]\n                    .getPointByID(draggablePoint.pid)\n                    .listeners.fireDragStartEvent(e);\n            else if (draggablePoint.typeName == \"vertex\")\n                _self.vertices[draggablePoint.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler && (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\"))) {\n            if (!this.config.enablePan) {\n                return;\n            }\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        if (!this.config.enableZoom) {\n            return;\n        }\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" ||\n                typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                if (!touchDownPos || !touchMovePos) {\n                                    return;\n                                }\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                if (!this.config.enablePan) {\n                                    return;\n                                }\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                if (!touchDownPos) {\n                                    return;\n                                }\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            if (!this.config.enableZoom) {\n                                return;\n                            }\n                            const touchItem0 = evt.touches.item(0);\n                            const touchItem1 = evt.touches.item(1);\n                            if (!evt.touches || !multiTouchStartScale || !touchItem0 || !touchItem1) {\n                                return;\n                            }\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(touchItem0.clientX, touchItem0.clientY);\n                            const fingerB = new Vertex(touchItem1.clientX, touchItem1.clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        // window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                        const createAlloyFinger = window[\"createAlloyFinger\"];\n                        createAlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        const utils = globalThis[\"utils\"];\n        // if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\") {\n        //   return (globalThis[\"utils\" as keyof Object] as any as ({createGUI : (pb:PlotBoilerplate,props:DatGuiProps|undefined)=>GUI })).createGUI(this, props);\n        if (utils && typeof utils.createGUI === \"function\") {\n            return (this._gui = utils.createGUI(this, props));\n        }\n        else {\n            throw \"Cannot create dat.GUI or lil-gui instance; did you load the ./utils/creategui helper function an the dat.GUI/lil-gui library?\";\n        }\n    }\n    /**\n     * Retriebe the GUI once it was created. If the `createGUI` method was not called or failed to create any\n     * GUI then null is returned.\n     * @returns {GUI | null}\n     */\n    getGUI() {\n        return this._gui;\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    __setFunctionName(_a, \"Draggable\"),\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k)) {\n                continue;\n            }\n            if (base.hasOwnProperty(k)) {\n                const typ = typeof base[k];\n                const extVal = extension[k];\n                try {\n                    if (typ == \"boolean\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Boolean(!!JSON.parse(extVal));\n                        else\n                            base[k] = extVal;\n                    }\n                    else if (typ == \"number\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Number(JSON.parse(extVal) * 1);\n                        else\n                            base[k] = extension[k];\n                    }\n                    else if (typ == \"function\" && typeof extVal == \"function\") {\n                        base[k] = extension[k];\n                    }\n                    else {\n                        // Probably a sting\n                        base[k] = extension[k];\n                    }\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extVal, e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /*\n    __safeMergeByKeys: <KeyType extends string | number | symbol, ValueType extends boolean | number | string | Function>(\n      base: Record<KeyType, ValueType>,\n      extension: Record<KeyType, string>\n    ): Record<KeyType, ValueType> => {\n      for (var k in extension) {\n        if (!extension.hasOwnProperty(k)) continue;\n        if (base.hasOwnProperty(k)) {\n          var typ = typeof base[k];\n          try {\n            if (typ == \"boolean\") base[k] = !!JSON.parse(extension[k]);\n            else if (typ == \"number\") base[k] = JSON.parse(extension[k]) * 1;\n            else if (typ == \"function\" && typeof extension[k] == \"function\") base[k] = extension[k];\n            else base[k] = extension[k];\n          } catch (e) {\n            console.error(\"error in key \", k, extension[k], e);\n          }\n        } else {\n          base[k] = extension[k];\n        }\n      }\n      return base;\n    },\n    *()\n\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        // element.style[\"transform-origin\"] = \"0 0\";\n        element.style.transformOrigin = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0) {\n            // element.style.transform = null;\n            element.style.removeProperty(\"transform\");\n        }\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    }, // END fetch\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map"],"names":["VertexAttr","constructor","key","this","draggable","selectable","isSelected","visible","model","UIDGenerator","next","current","VertexListeners","vertex","click","drag","dragStart","dragEnd","addClickListener","listener","_addListener","removeClickListener","_removeListener","addDragListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireClickEvent","e","_fireEvent","fireDragEvent","fireDragStartEvent","fireDragEndEvent","removeAllListeners","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Circle","center","radius","className","uid","move","amount","add","containsPoint","point","distance","containsCircle","circle","lineDistance","line","getClosestPoint","vertAt","angle","circleUtils","tangentAt","pointA","Vector","Vertex","perp","getBounds","Bounds","clone","subXY","Math","abs","addXY","circleIntersection","p0","p1","d","a","h","sqrt","p2","scale","x3","x","y","y3","x4","y4","Line","lineIntersection","b","interA","interB","transA","sub","transB","diff","difference","dist","det","distSquared","belowSqrt","sign","lineIntersections","inVectorBoundsOnly","intersectioLine","filter","vert","hasPoint","lineIntersectionTangents","map","closestPoint","destroy","isDestroyed","cos","sin","Triangle","c","calcCircumcircle","fromArray","arr","getArea","utils","signedArea","getCentroid","scaleToCentroid","factor","centroid","bounds","getCircumcircle","isAdjacent","tri","equals","getThirdVertex","vert1","vert2","A","B","C","D","E","F","G","dx","dy","EPSILON","min","max","cx","cy","radius_squared","inCircumcircle","v","min3","max3","Polygon","locateLineIntersecion","intersectionTuple","intersectionPoint","polyLine","getEdgeAt","edgeIndex","moveTo","modIndex","toPolygon","determinant","p","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","intersection","circleIntersA","circleIntersB","circleIntersC","getIncircle","getIncenter","toString","p0x","p0y","p1x","p1y","p2x","p2y","px","py","area","s","t","mapAngleTo2PI","new_angle","asin","PI","dist4","x1","y1","x2","y2","pow","dotProduct","vertA","vertB","pA","pB","pC","n","triangle","lineAB","lineAC","insideAngle","clockwise","scaleFactor","result","rotate","wrapMax","wrapMinMax","tuple","NaN","attr","set","setX","setY","invX","invY","amountX","amountY","addX","addY","subX","subY","eqX","eqY","origin","atan2","scaleXY","lerp","target","lerpAbs","u","step","factors","len","ZERO","multiplyScalar","scalar","round","inv","precision","toFixed","randomVertex","viewPort","random","buildArrowHead","zA","zB","headlen","scaleX","scaleY","console","warn","vertices","arrayToJSON","JSON","stringify","undefined","Number","VertTuple","factory","setLength","revert","tmp","normalize","newA","v0","v1","denominator","colinear","epsilon","getClosestT","l2","vtutils","dist2","insideBoundsOnly","pointDistance","w","super","inverse","numerator1","numerator2","getOrthogonal","linePoint","startPoint","isNaN","computeFromVertices","getStartPoint","getEndPoint","getStartTangent","getEndTangent","reverse","intersections","intrsctn","isOpen","addVertex","addVertexAt","index","vertIndex","getVertexAt","getEdges","lines","getInnerAngleAt","p3","isAcute","isAngleAcute","zero","p2mp1","p3mp2","p2mp1_len","p3mp2_len","lengthProduct","acos","containsVert","inside","j","xi","yi","xj","yj","containsVerts","verts","every","containsPolygon","polygon","lineSegment","isClockwise","perimeter","log","getMeanCenter","cur","closestLineIntersection","allIntersections","closestIntersection","MAX_VALUE","curDist","curVert","getInterpolationPolygon","interpolationCount","nextVert","lerpAmount","getEvenDistributionPolygon","pointCount","Error","polygonPoint","stepSize","polygonIndex","nextPolygonPoint","segmentLength","loopMax","curSegmentU","newPoint","elimitateColinearEdges","tolerance","eps","slice","areColinear","vertC","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","buffer","join","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","BezierPath","total","l","sum","intersectionPoints","width","height","getNorthPoint","getSouthPoint","getWestPoint","getEastPoint","getCenter","getMinDimension","getMaxDimension","randomPoint","horizontalSafeArea","verticalSafeArea","absHorizontalSafeArea","absVerticalSafeArea","xMin","xMax","yMin","yMax","computeFromBoundsSet","boundingBoxes","fromDimension","CubicBezierCurve","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartControlPoint","getEndControlPoint","translate","getLength","arcLength","pointB","curveStep","newLength","tmpLength","getPointAt","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","xMinMax","cubicPolyMinMax","xl","xh","yMinMax","yl","yh","getPointByID","id","evaluateT","getPoint","getTangentAt","t2","nt2","tX","tY","trimStart","uValue","trimStartAt","convertU2T","subCurbePoints","getSubCurvePointsAt","trimEnd","trimEndAt","getSubCurve","uStart","uEnd","getSubCurveAt","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","lineIntersectionTs","intersectionTangents","vec","bx","bezierCoeffs","by","poly","Array","cubicRoots","root","curve","isInstance","obj","toJSON","prettyFormat","fromJSON","jsonString","parse","fromObject","isArray","polyX","cubicPoly","disc","t1","startVec","endVec","S","T","Q","R","ts","sgn","th","sort","coeffs","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaleFactors","curveT","uMin","uTemp","relativeU","uResult","_locateUIndex","bCurve","uPart","reduce","accu","curCurve","concat","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","POSITIVE_INFINITY","NEGATIVE_INFINITY","getEvenDistributionVertices","toPathPoints","fromCurve","bPath","lastCurve","toReducedListRepresentation","digits","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","bezierPath","CircleSector","startAngle","endAngle","circleBounds","candidates","containsAngle","wrappedAngle","wrappedStart","wrappedEnd","angleAt","circleSectorIntersection","sector","radicalLine","thisIntersectionAngleA","thisIntersectionAngleB","thatIntersectionAngleA","thatIntersectionAngleB","centerOfOriginalGap","resultSector","ray","ellipseIntersections","tmpLine","lineAngle","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","end","start","firstHalf","secondHalf","largeArcFlag","sweepFlag","pathData","RAD_TO_DEG","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","nodeStyle","Boolean","drawlibConfiguration","cache","Map","setSize","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","appendChild","rebuildStyleDefs","keys","bezier","ellipse","ellipseSector","circleSector","vector","image","text","rules","k","drawSettings","color","lineWidth","customStyleDefs","forEach","value","innerHTML","addCustomStyleDefs","defs","findElement","nodeName","node","get","toUpperCase","delete","document","createElementNS","makeNode","curId","blendMode","style","_bindFillDraw","strokeOptions","_configureNode","_bindNode","bindingParent","parentNode","_addCSSClasses","curClassName","setAttribute","fillMode","applyStrokeOpts","copyInstance","setConfiguration","configuration","setCurrentId","setCurrentClassName","beginDrawCycle","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","endDrawCycle","replaceChild","tmpGNode","tmpDefsNode","dashArray","nodeSupportsLineDash","tagName","dashArayElem","dashOffset","_x","_y","makeLineNode","arrow","headLength","group","arrowHeadBasePosition","arrowHead","makeArrowHeadNode","cubicBezierArrow","makeCubicBezierNode","position","size","alpha","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","texturedPoly","textureImage","textureSize","polygonPosition","rotation","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","cubicBezier","cubicBezierPath","handle","square","handleLine","dot","circleArc","arcData","radiusX","radiusY","rect","grid","sizeX","sizeY","ceil","raster","diamondHandle","squareHandle","circleHandle","crosshair","cross","polyline","_a","_b","_c","lineHeight","fontSize","textAlign","transformOrigin","textNode","fontFamily","fontStyle","fontWeight","label","inplace","copyPathData","transformPathData","lastChild","removeChild","createSvg","data","copy","_stx","_sty","_sx","_sy","_slp","includes","classNameOverride","makePathNode","pathString","arrowHeadBasePositionBuffer","HEAD_XML","drawutils","context","ctx","setLineDash","dashArrayElem","lineDashOffset","_fillOrDraw","fillStyle","fill","strokeStyle","stroke","globalCompositeOperation","save","beginPath","lineTo","restore","complete","globalAlpha","drawImage","basePolygonBounds","targetTextureSize","targetTextureOffset","helpers","clipPoly","closePath","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","arc","asSegment","relX","relY","font","indexOf","fillText","strokeText","Path2D","clearRect","canvas","fillRect","clip","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","fireEvent","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","press","up","isDown","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","$","pagebackward","pageforward","refresh","closingparen","minus","decreasevolumelevel","increasevolumelevel","previous","stop","email","mute","unmute","semicolon","equal","comma","dash","period","forwardslash","openbracket","backslash","closebracket","singlequote","altgr","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","PBImage","upperLeft","lowerRight","PBText","getLen","getRotateAngle","v2","mr","getAngle","HandlerAdmin","el","del","dispatch","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","preTapPosition","evt","touches","Date","pageX","pageY","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","on","off","VEllipse","axis","radiusH","signedRadiusH","radiusV","signedRadiusV","getExtremePoints","t_x1","t_x2","x_x1","y_x1","x_x2","y_x2","x_max","x_min","t_y1","t_y2","x_y1","y_y1","x_y2","y_y2","y_max","y_min","r1","r2","ux","uy","vx","vy","bbox_halfwidth","bbox_halfheight","normalAt","foci","getFoci","angleA","centerAngle","endPointA","endPointB","resultVector","rh","rv","sdiff","getEquidistantVertices","angles","equidistantVertAngles","ellipseCopy","rayCopy","rotationAmount","scalingFactors","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","sAngle","eAngle","ellipseSectorUtils","normalizeAngle","r2d","fullEllipsePointCount","ellipseAngles","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","__setFunctionName","prefix","description","Object","defineProperty","configurable","PlotBoilerplate","config","_gui","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","drawRaster","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableZoom","enablePan","enableGL","isBackdropFiltersEnabled","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","pathVertex","controlVertex","selectedVertex","canvasElement","toLowerCase","eventCatcher","getContext","draw","parentElement","createElement","left","top","cursor","body","title","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","_d","_e","setCSSscale","drawable","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","triggerRedraw","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","drawDrawable","df","error","drawSelectPolygon","clearSelection","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","display","padding","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_f","_g","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","draggablePoint","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","touchItem0","item","touchItem1","fingerA","fingerB","window","createAlloyFinger","createGUI","props","getGUI","isVertex","safeMergeByKeys","extension","hasOwnProperty","typ","extVal","removeProperty","transform","fallback"],"mappings":"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"}