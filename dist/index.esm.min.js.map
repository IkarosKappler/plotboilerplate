{"version":3,"file":"index.esm.min.js","sources":["../src/esm/VertexAttr.js","../src/esm/UIDGenerator.js","../src/esm/VertexListeners.js","../src/esm/Vector.js","../src/esm/Circle.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Vertex.js","../src/esm/VertTuple.js","../src/esm/Line.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../src/esm/PBText.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js"],"sourcesContent":["/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2024-03-10 Fixed some types for Typescript 5 compatibility.\n * @version  1.1.2\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    removeAllListeners() {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    }\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-25 Added the `getOrthogonal` method.\n * @version  1.5.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    /**\n     * The inverse of a vector is a vector with the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    }\n    /**\n     * Get the orthogonal \"vector\" of this vector (rotated by 90° clockwise).\n     *\n     * @name getOrthogonal\n     * @method getOrthogonal\n     * @return {Vector} A new vector with the same length that stands on this vector's point a.\n     * @instance\n     * @memberof Vector\n     **/\n    getOrthogonal() {\n        // Orthogonal of vector (0,0)->(x,y) is (0,0)->(-y,x)\n        const linePoint = this.a.clone();\n        const startPoint = this.b.clone().sub(this.a);\n        const tmp = startPoint.x;\n        startPoint.x = -startPoint.y;\n        startPoint.y = tmp;\n        return new Vector(linePoint, startPoint.add(this.a));\n    }\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        const angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        const vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @version  1.4.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    containsPoint(point) {\n        return this.center.distance(point) < this.radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n        // return (new Vector(this.center.clone(), pointA).add(pointA) as Vector).perp() as Vector;\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {XYCoords} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    lineIntersection(a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        const interA = new Vertex();\n        const interB = new Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        const transA = new Vertex(a).sub(this.center);\n        const transB = new Vertex(b).sub(this.center);\n        const diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        const dist = transA.distance(transB);\n        const det = transA.x * transB.y - transA.y * transB.x;\n        const distSquared = dist * dist;\n        const radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        const belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        const sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line(interA.add(this.center), interB.add(this.center));\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this circle.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the circle outline.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersectioLine = this.lineIntersection(line.a, line.b);\n        if (!intersectioLine) {\n            return [];\n        }\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return [intersectioLine.a, intersectioLine.b].filter((vert) => line.hasPoint(vert, true));\n        }\n        else {\n            return [intersectioLine.a, intersectioLine.b];\n        }\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        const interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map((vert) => {\n            // Calculate angle\n            const lineFromCenter = new Line(this.center, vert);\n            const angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return this.tangentAt(angle);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    closestPoint(vert) {\n        const lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                     Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified  2024-11-22 Added static utility function Triangle.utils.determinant; adapted method `determinant`.\n * @modified  2024-11-22 Changing visibility of `Triangle.utils` from `private` to `public`.\n * @version   2.8.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    } // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    }\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        // return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n        return Triangle.utils.determinant(this.a, this.b, this.c);\n    }\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        // Cast to non-null here because we know there _is_ an intersection\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n    },\n    min3(a, b, c) {\n        return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && 1 - s - t > 0;\n    },\n    /**\n     * Calculate the determinant of the three vertices a, b and c (in this order).\n     * @param {XYCords} a - The first vertex.\n     * @param {XYCords} b - The first vertex.\n     * @param {XYCords} c - The first vertex.\n     * @returns {nmber}\n     */\n    determinant(a, b, c) {\n        return (b.y - a.y) * (c.x - b.x) - (c.y - b.y) * (b.x - a.x);\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @modified 2024-11-15 Adding helper function `geomutils.mapAngleTo2PI(number)` for mapping any value into the interval [0,2*PI).\n * @modified 2024-11-22 Adding helper function `geomutils.dotProduct(number)` for calculating the dot product of two vertices (as vectors).\n *\n * @version  1.2.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * @param {number} angle - The numeric value to map.\n     * @return {number} The mapped angle inside [0,PI*2].\n     **/\n    mapAngleTo2PI(angle) {\n        // Source: https://forums.codeguru.com/showthread.php?384172-get-angle-into-range-0-2*pi\n        const new_angle = Math.asin(Math.sin(angle));\n        if (Math.cos(angle) < 0) {\n            return Math.PI - new_angle;\n        }\n        else if (new_angle < 0) {\n            return new_angle + 2 * Math.PI;\n        }\n        else {\n            return new_angle;\n        }\n    },\n    /**\n     * Calculate the euclidean distance between two points given by four coordinates (two coordinates each).\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @returns {number}\n     */\n    dist4(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y1 - y2, 2));\n    },\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * A × B := (A.x * B.x) + (A.y * B.y)\n     *\n     * @param {XYCoords} vertA - The first vertex.\n     * @param {XYCoords} vertB - The second vertex.\n     * @return {number} The dot product of the two vertices.\n     **/\n    dotProduct(vertA, vertB) {\n        return vertA.x * vertB.x + vertA.y * vertB.y;\n    },\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * -1;\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate(-i * (insideAngle / n), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-11-28 Added the `subXY`, `subX` and `subY` methods to the `Vertex` class.\n * @modified 2023-09-29 Downgraded types for the `Vertex.utils.buildArrowHead` function (replacing Vertex params by more generic XYCoords type).\n * @modified 2023-09-29 Added the `Vertex.abs()` method as it seems useful.\n * @modified 2024-03-08 Added the optional `precision` param to the `toString` method.\n * @modified 2024-12-17 Outsourced the euclidean distance calculation of `Vertex.distance` to `geomutils.dist4`.\n * @modified 2025-03-24 Making the second parameter `center` of the `Vertex.rotate` method optional.\n * @version  2.9.2\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x- and y- components of this vertex.\n     *\n     * @method subXY\n     * @param {number} x - The amount to substract from x.\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subXY(amountX, amountY) {\n        this.x -= amountX;\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to substract from x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subX(amountX) {\n        this.x -= amountX;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the y-component of this vertex.\n     *\n     * @method subY\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subY(amountY) {\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        // return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n        return geomutils.dist4(this.x, this.y, vert.x, vert.y);\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    lerp(target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    lerpAbs(target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scaleXY(factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Set both coordinates of this vertex to their absolute value (abs(x), abs(y)).\n     *\n     * @method abs\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     */\n    abs() {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString(precision) {\n        if (typeof precision === \"undefined\") {\n            return \"(\" + this.x + \",\" + this.y + \")\";\n        }\n        else {\n            return \"(\" + this.x.toFixed(precision) + \",\" + this.y.toFixed(precision) + \")\";\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        console.warn(\"[DEPRECATION] Vertex.utils.buildArrowHead is deprecated. Please use Vector.utils.buildArrowHead instead.\");\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    },\n    /**\n     * Convert the given vertices (array) to a JSON string.\n     *\n     * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n     * @returns {string}\n     */\n    arrayToJSON(vertices, precision) {\n        return JSON.stringify(vertices.map(function (vert) {\n            return typeof precision === undefined\n                ? { x: vert.x, y: vert.y }\n                : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n        }));\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-29 Fixed a calculation error in the VertTuple.hasPoint() function; distance measure was broken!\n * @modified 2024-09-10 Chaging the first param of `pointDistance` from `Vertex` to less strict type `XYCoords`. This should not break anything.\n * @modified 2024-09-10 Adding the optional `epsilon` param to the `hasPoint` method.\n * @modified 2024-12-02 Added the `epsilon` param to the `colinear` method. Default is 1.0e-6.\n * @modified 2025-03-31 Added the `VertTuple.revert` method.\n * @version 1.4.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    /**\n     * Reverse this vertex tuple: a becomes b, and b becomes a.\n     * This operation is in-place.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     */\n    revert() {\n        const tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    }\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @param {epsilon?=1.0e-6} epsilon - The epsilon to use (default is 1.0e-6).\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line, epsilon) {\n        return Math.abs(this.denominator(line)) < (typeof epsilon === \"undefined\" ? Vertex.EPSILON : epsilon);\n    }\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point - The point to check.\n     * @param {boolean=} insideBoundsOnly - [optional] If set to to true (default=false) the point must be between start and end point of the line.\n     * @param {number=Vertex.EPSILON} epsilon - [optional] A tolerance.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly, epsilon) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex.EPSILON) && t >= 0 && t <= 1;\n        }\n        else {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex.EPSILON); // t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {XYCoords} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @modified 2023-09-25 Changed param type of `intersection()` from Line to VertTuple.\n * @version  2.3.0\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        const numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + a * (this.b.x - this.a.x);\n        const y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    getStartPoint() {\n        return this.a;\n    }\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    getEndPoint() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.a;\n    }\n    /**\n     * Inverse this path segment (in-place) and return this same instance (useful for chaining).\n     *\n     * @method reverse\n     * @memberof PathSegment\n     * @return {PathSegment} This path segment instance (for chaining).\n     */\n    reverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @modified 2023-09-25 Added the `Polygon.getInterpolationPolygon(number)` function.\n * @modified 2023-09-25 Added the `Polygon.lineIntersections(Line,boolean)` function.\n * @modified 2023-09-29 Added the `Polygon.closestLineIntersection(Line,boolean)` function.\n * @modified 2023-11-24 Added the `Polygon.containsPolygon(Polygon)' function.\n * @modified 2024-10-12 Added the `getEdgeAt` method.\n * @modified 2024-10-30 Added the `getEdges` method.\n * @modified 2024-12-02 Added the `elimitateColinearEdges` method.\n * @modified 2025-02-12 Added the `containsVerts` method to test multiple vertices for containment.\n * @modified 2025-03-28 Added the `Polygon.utils.locateLineIntersecion` static helper method.\n * @modified 2025-03-28 Added the `Polygon.lineIntersectionTangents` method.\n * @version 1.15.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == \"undefined\") {\n            vertices = [];\n        }\n        this.vertices = vertices;\n        this.isOpen = isOpen || false;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVertex\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    /**\n     * Add a vertex at a particular position of the `vertices` array.\n     *\n     * @method addVertexAt\n     * @param {Vertex} vert - The vertex to add.\n     * @param {number} index - The position to add the vertex at. Will be handled modulo.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertexAt(vert, index) {\n        // var moduloIndex = index % (this.vertices.length + 1);\n        this.vertices.splice(index, 0, vert);\n    }\n    /**\n     * Get a new instance of the line at the given start index. The returned line will consist\n     * of the vertex at `vertIndex` and `vertIndex+1` (will be handled modulo).\n     *\n     * @method getEdgeAt\n     * @param {number} vertIndex - The vertex index of the line to start.\n     * @instance\n     * @memberof Polygon\n     * @return {Line}\n     **/\n    getEdgeAt(vertIndex) {\n        return new Line(this.getVertexAt(vertIndex), this.getVertexAt(vertIndex + 1));\n    }\n    /**\n     * Converts this polygon into a sequence of lines. Please note that each time\n     * this method is called new lines are created. The underlying line vertices are no clones\n     * (instances).\n     *\n     * @method getEdges\n     * @instance\n     * @memberof Polygon\n     * @return {Array<Line>}\n     */\n    getEdges() {\n        const lines = [];\n        for (var i = 0; i + 1 < this.vertices.length; i++) {\n            // var line = this.getLineAt(i).clone();\n            lines.push(this.getEdgeAt(i));\n        }\n        if (!this.isOpen && this.vertices.length > 0) {\n            lines.push(this.getEdgeAt(this.vertices.length - 1));\n        }\n        return lines;\n    }\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute. Please not that this is\n     * only working for clockwise polygons. If this polygon is not clockwise please use the\n     * `isClockwise` method and reverse polygon vertices if needed.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    getInnerAngleAt(vertIndex) {\n        const p2 = this.vertices[vertIndex];\n        const p1 = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        const p3 = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // See\n        //    https://math.stackexchange.com/questions/149959/how-to-find-the-interior-angle-of-an-irregular-pentagon-or-polygon\n        // π−arccos((P2−P1)⋅(P3−P2)|P2−P1||P3−P2|)\n        // Check if triangle is acute (will be used later)\n        // Acute angles and obtuse angles need to be handled differently.\n        const isAcute = this.isAngleAcute(vertIndex);\n        // Differences\n        const zero = new Vertex(0, 0);\n        const p2mp1 = new Vertex(p2.x - p1.x, p2.y - p1.y);\n        const p3mp2 = new Vertex(p3.x - p2.x, p3.y - p2.y);\n        const p2mp1_len = zero.distance(p2mp1);\n        const p3mp2_len = zero.distance(p3mp2);\n        // Dot products\n        const dotProduct = geomutils.dotProduct(p2mp1, p3mp2);\n        const lengthProduct = p2mp1_len * p3mp2_len;\n        if (isAcute) {\n            return Math.PI - Math.acos(dotProduct / lengthProduct);\n        }\n        else {\n            return Math.PI + Math.acos(dotProduct / lengthProduct);\n        }\n    }\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    isAngleAcute(vertIndex) {\n        const A = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        const B = this.vertices[vertIndex];\n        const C = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // Find local winding number for triangle A B C\n        const windingNumber = Triangle.utils.determinant(A, B, C);\n        // console.log(\"vertIndex\", vertIndex, \"windingNumber\", windingNumber);\n        return windingNumber < 0;\n    }\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @method getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0) {\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        }\n        else {\n            return this.vertices[index % this.vertices.length];\n        }\n    }\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    }\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    /**\n     * Check if all given vertices are inside this polygon.<br>\n     * <br>\n     * This method just uses the `Polygon.containsVert` method.\n     *\n     * @method containsVerts\n     * @param {XYCoords[]} verts - The vertices to check.\n     * @return {boolean} True if all passed vertices are inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVerts(verts) {\n        return verts.every((vert) => this.containsVert(vert));\n    }\n    /**\n     * Check if the passed polygon is completly contained inside this polygon.\n     *\n     * This means:\n     *  - all polygon's vertices must be inside this polygon.\n     *  - the polygon has no edge intersections with this polygon.\n     *\n     * @param {Polygon} polygon - The polygon to check if contained.\n     * @return {boolean}\n     */\n    containsPolygon(polygon) {\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            if (!this.containsVert(polygon.vertices[i])) {\n                return false;\n            }\n        }\n        // All vertices are inside; check for intersections\n        const lineSegment = new Line(new Vertex(), new Vertex());\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            lineSegment.a.set(polygon.vertices[i]);\n            lineSegment.b.set(polygon.vertices[(i + 1) % polygon.vertices.length]);\n            if (this.lineIntersections(lineSegment, true).length > 0) {\n                // Current segment has intersection(s) with this polygon.\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        // return Polygon.utils.signedArea(this.vertices) < 0;\n        return Polygon.utils.isClockwise(this.vertices);\n    }\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    perimeter() {\n        let length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    }\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    }\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    /**\n     * Get the mean `center` of this polygon by calculating the mean value of all vertices.\n     *\n     * Mean: (v[0] + v[1] + ... v[n-1]) / n\n     *\n     * @method getMeanCenter\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex|null} `null` is no vertices are available.\n     */\n    getMeanCenter() {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        const center = this.vertices[0].clone();\n        for (var i = 1; i < this.vertices.length; i++) {\n            center.add(this.vertices[i]);\n        }\n        center.x /= this.vertices.length;\n        center.y /= this.vertices.length;\n        return center;\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // // Find the intersections of all lines inside the edge bounds\n        // const intersectionPoints: Array<Vertex> = [];\n        // for (var i = 0; i < this.vertices.length; i++) {\n        //   const polyLine = new Line(this.vertices[i], this.vertices[(i + 1) % this.vertices.length]);\n        //   const intersection = polyLine.intersection(line);\n        //   // true => only inside bounds\n        //   // ignore last edge if open\n        //   if (\n        //     (!this.isOpen || i + 1 !== this.vertices.length) &&\n        //     intersection !== null &&\n        //     polyLine.hasPoint(intersection, true) &&\n        //     (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))\n        //   ) {\n        //     intersectionPoints.push(intersection);\n        //   }\n        // }\n        // return intersectionPoints;\n        return Polygon.utils\n            .locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly)\n            .map(intersectionTuple => intersectionTuple.intersectionPoint);\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // // Find the intersections of all lines inside the edge bounds\n        // const intersectionPoints: Array<Vector> = [];\n        // for (var i = 0; i < this.vertices.length; i++) {\n        //   const polyLine = new Line(this.vertices[i], this.vertices[(i + 1) % this.vertices.length]);\n        //   const intersection = polyLine.intersection(line);\n        //   // true => only inside bounds\n        //   // ignore last edge if open\n        //   if (\n        //     (!this.isOpen || i + 1 !== this.vertices.length) &&\n        //     intersection !== null &&\n        //     polyLine.hasPoint(intersection, true) &&\n        //     (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))\n        //   ) {\n        //     const intersectionVector: Vector = new Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersection) as Vector;\n        //     //  intersectionPoints.push(intersection);\n        //     intersectionPoints.push(intersectionVector);\n        //   }\n        // }\n        // return intersectionPoints;\n        return Polygon.utils.locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly).map(intersectionTuple => {\n            const polyLine = this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersectionPoint);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A).\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    closestLineIntersection(line, inVectorBoundsOnly = false) {\n        const allIntersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (allIntersections.length <= 0) {\n            // Empty polygon -> no intersections\n            return null;\n        }\n        // Find the closest intersection\n        let closestIntersection = new Vertex(Number.MAX_VALUE, Number.MAX_VALUE);\n        let curDist = Number.MAX_VALUE;\n        for (var i in allIntersections) {\n            const curVert = allIntersections[i];\n            const dist = curVert.distance(line.a);\n            if (dist < curDist) {\n                // && line.hasPoint(curVert)) {\n                curDist = dist;\n                closestIntersection = curVert;\n            }\n        }\n        return closestIntersection;\n    }\n    /**\n     * Construct a new polygon from this polygon with more vertices on each edge. The\n     * interpolation count determines the number of additional vertices on each edge.\n     * An interpolation count of `0` will return a polygon that equals the source\n     * polygon.\n     *\n     * @param {number} interpolationCount\n     * @returns {Polygon} A polygon with `interpolationCount` more vertices (as as factor).\n     */\n    getInterpolationPolygon(interpolationCount) {\n        const verts = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            const curVert = this.vertices[i];\n            const nextVert = this.vertices[(i + 1) % this.vertices.length];\n            verts.push(curVert.clone());\n            // Add interpolation points\n            if (!this.isOpen || i + 1 !== this.vertices.length) {\n                const lerpAmount = 1.0 / (interpolationCount + 1);\n                for (var j = 1; j <= interpolationCount; j++) {\n                    verts.push(curVert.clone().lerp(nextVert, lerpAmount * j));\n                }\n            }\n        }\n        return new Polygon(verts, this.isOpen);\n    }\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    getEvenDistributionPolygon(pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        const result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        let polygonPoint = new Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        const perimeter = this.perimeter();\n        const stepSize = perimeter / pointCount;\n        const n = this.vertices.length;\n        let polygonIndex = 1;\n        let nextPolygonPoint = new Vertex(this.vertices[1]);\n        let segmentLength = polygonPoint.distance(nextPolygonPoint);\n        let loopMax = this.isOpen ? n : n + 1;\n        let curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                let newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @method clone\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} The cloned polygon.\n     */\n    clone() {\n        return new Polygon(this.vertices.map(vert => vert.clone()), this.isOpen);\n    }\n    /**\n     * Create a new polygon without colinear adjacent edges. This method does not midify the current polygon\n     * but creates a new one.\n     *\n     * Please note that this method does NOT create deep clones of the vertices. Use Polygon.clone() if you need to.\n     *\n     * Please also note that the `tolerance` may become really large here, as the denominator of two closely\n     * parallel lines is usually pretty large. See the demo `57-eliminate-colinear-polygon-edges` to get\n     * an impression of how denominators work.\n     *\n     * @method elimitateColinearEdges\n     * @instance\n     * @memberof Polygon\n     * @param {number?} tolerance - (default is 1.0) The epsilon to detect co-linear edges.\n     * @return {Polygon} A new polygon without co-linear adjacent edges – respective the given epsilon.\n     */\n    elimitateColinearEdges(tolerance) {\n        const eps = typeof tolerance === \"undefined\" ? 1.0 : tolerance;\n        const verts = this.vertices.slice(); // Creates a shallow copy\n        let i = 0;\n        var lineA = new Line(new Vertex(), new Vertex());\n        var lineB = new Line(new Vertex(), new Vertex());\n        while (i + 1 < verts.length && verts.length > 2) {\n            const vertA = verts[i];\n            const vertB = verts[(i + 1) % verts.length];\n            lineA.a = vertA;\n            lineA.b = vertB;\n            lineB.a = vertB;\n            let areColinear = false;\n            let j = i + 2;\n            do {\n                let vertC = verts[j % verts.length];\n                lineB.b = vertC;\n                areColinear = lineA.colinear(lineB, eps);\n                // console.log(\"are colinear?\", i, i + 1, j, areColinear);\n                if (areColinear) {\n                    j++;\n                }\n            } while (areColinear);\n            // Now j points to the first vertex that's NOT colinear to the current lineA\n            // -> delete all vertices in between\n            if (j - i > 2) {\n                // Means: there have been 'colinear vertices' in between\n                // console.log(\"Splice\", \"i\", i, \"j\", j, i + 1, j - i - 1);\n                verts.splice(i + 1, j - i - 2);\n            }\n            i++;\n        }\n        return new Polygon(verts, this.isOpen);\n    }\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0) {\n            return \"\";\n        }\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += addX * addY * 0.5;\n            total -= subX * subY * 0.5;\n        }\n        return Math.abs(total);\n    },\n    isClockwise(vertices) {\n        return Polygon.utils.signedArea(vertices) < 0;\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    },\n    locateLineIntersecion(line, vertices, isOpen, inVectorBoundsOnly) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersectionPoints = [];\n        var n = isOpen ? vertices.length - 1 : vertices.length;\n        for (var i = 0; i < n; i++) {\n            const polyLine = new Line(vertices[i % n], vertices[(i + 1) % n]);\n            const intersection = polyLine.intersection(line);\n            // true => only inside bounds\n            // ignore last edge if open\n            if (\n            // (!isOpen || i + 1 !== vertices.length) &&\n            intersection !== null &&\n                polyLine.hasPoint(intersection, true) &&\n                (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n                // const intersectionVector: Vector = new Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersection) as Vector;\n                //  intersectionPoints.push(intersection);\n                intersectionPoints.push({ edgeIndex: i, intersectionPoint: intersection });\n            }\n        }\n        return intersectionPoints;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @modified 2022-11-28 Added the `clone` method.\n * @modified 2023-09-29 Added the `randomPoint` method.\n * @modified 2025-03-23 Added the `getMinDimension` and `getMaxDimension` methods.\n * @version  1.8.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    getMinDimension() {\n        return Math.min(this.width, this.height);\n    }\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    getMaxDimension() {\n        return Math.max(this.width, this.height);\n    }\n    /**\n     * Generate a random point inside this bounds object. Safe areas at the border to avoid\n     * included.\n     *\n     * @method randomPoint\n     * @instance\n     * @memberof Bounds\n     * @param {horizontalSafeArea} - (optional) The horizonal (left and right) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval.\n     * @param {verticalSafeArea} - (optional) The vertical (top and bottom) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval\n     * @returns {Vertex} A pseudo random point inside these bounds.\n     */\n    randomPoint(horizontalSafeArea = 0, verticalSafeArea = 0) {\n        // Check if the safe areas are meant as percent\n        const absHorizontalSafeArea = horizontalSafeArea > 0 && horizontalSafeArea < 1 ? this.width * horizontalSafeArea : horizontalSafeArea;\n        const absVerticalSafeArea = verticalSafeArea > 0 && verticalSafeArea < 1 ? this.height * verticalSafeArea : verticalSafeArea;\n        return new Vertex(this.min.x + absHorizontalSafeArea + Math.random() * (this.width - 2 * absHorizontalSafeArea), this.min.y + absVerticalSafeArea + Math.random() * (this.height - 2 * absVerticalSafeArea));\n    }\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    toString() {\n        return `{ min: ${this.min.toString()}, max : ${this.max.toString()}, width: ${this.width}, height : ${this.height} }`;\n    }\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {Bounds} Creates a deep clone of this bounds object.\n     */\n    clone() {\n        return new Bounds({ x: this.min.x, y: this.min.y }, { x: this.max.x, y: this.max.y });\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    static fromDimension(width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 The `CubicBezierCurve` class now implements the new `PathSegment` interface.\n * @modified 2023-09-30 Added the function `CubicbezierCurve.getSubCurve(number,number)` – similar to `getSubCurveAt(...)` but with absolute position parameters.\n * @modified 2023-10-07 Added the `trimEnd`, `trimEndAt`, `trimStart`, `trimStartAt` methods.\n * @version 2.8.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        const tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    /**\n     * Trim off a start section of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimStartAt`.\n     *\n     * @method trimStart\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimStart(uValue) {\n        return this.trimStartAt(this.convertU2T(uValue));\n    }\n    /**\n     * Trim off a start section of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * @method trimStartAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimStartAt(t) {\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, t, 1.0);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Trim off the end of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[0,uValue]` (so `[1.0-uValue,1.0]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimEndAt`.\n     *\n     * @method trimEnd\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimEnd(uValue) {\n        return this.trimEndAt(this.convertU2T(uValue));\n    }\n    /**\n     * Trim off the end of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[0,t]` (so `[1.0-t,1.0]` is cut off).\n     *\n     * @method trimEndAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimEndAt(t) {\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, 0.0, t);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Get a sub curve at the given start end end positions (values on the curve's length, between 0 and curve.arcLength).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurve\n     * @param {number} tStart – The start position of the desired sub curve (must be in [0..arcLength]).\n     * @param {number} tEnd – The end position if the desired cub curve (must be in [0..arcLength]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurve(uStart, uEnd) {\n        return this.getSubCurveAt(this.convertU2T(uStart), this.convertU2T(uEnd));\n    }\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        // const startVec: Vector = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        // const endVec: Vector = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // // Tangents are relative. Make absolute.\n        // startVec.b.add(startVec.a);\n        // endVec.b.add(endVec.a);\n        // // This 'splits' the curve at the given point at t.\n        // startVec.scale(0.33333333 * (tEnd - tStart));\n        // endVec.scale(0.33333333 * (tEnd - tStart));\n        // // Draw the bezier curve\n        // // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        // return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, tStart, tEnd);\n        return new CubicBezierCurve(subCurbePoints[0], subCurbePoints[1], subCurbePoints[2], subCurbePoints[3]);\n    }\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    }\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    //---BEGIN PathSegment-------------------------\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.endControlPoint;\n    }\n    //---END PathSegment-------------------------\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    }\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n/**\n * Helper utils.\n */\nCubicBezierCurve.utils = {\n    /**\n     * Get the points of a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurvePointsAt\n     * @param {CubicBezierCurve} curve – The curve to get the sub curve points from.\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurvePointsAt: (curve, tStart, tEnd) => {\n        const startVec = new Vector(curve.getPointAt(tStart), curve.getTangentAt(tStart));\n        const endVec = new Vector(curve.getPointAt(tEnd), curve.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        return [startVec.a, endVec.a, startVec.b, endVec.b];\n    }\n};\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2023-10-06 Adding the `BezierPath.toPathPoints()` method.\n * @modified 2023-10-07 Adding the `BezierPath.fromCurve(CubicBezierCurve)` static function.\n * @version 2.6.0\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor() {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        // pathPoints: Array<Vertex> | undefined | null) {\n        this.uid = UIDGenerator.next();\n        // if (!pathPoints) {\n        //   pathPoints = [];\n        // }\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaleFactor) {\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scaleXY(scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    getEvenDistributionVertices(pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        const result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        const perimeter = this.totalArcLength;\n        const stepSize = perimeter / (pointCount - 1);\n        const n = this.bezierCurves.length;\n        let curveIndex = 0;\n        let segmentLength = this.bezierCurves[0].arcLength;\n        let curSegmentU = stepSize;\n        let i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(); // undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof BezierPath\n     */\n    destroy() {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n    /**\n     * Convert this path to an array of path points that can be drawn by the default DrawLib\n     * implementations.\n     *\n     * @method toPathPoints\n     * @instance\n     * @memberof BezierPath\n     * @return {Array<XYCoords>}\n     */\n    toPathPoints() {\n        if (this.bezierCurves.length === 0) {\n            return [];\n        }\n        if (this.bezierCurves.length === 1) {\n            return [\n                this.bezierCurves[0].startPoint,\n                this.bezierCurves[0].startControlPoint,\n                this.bezierCurves[0].endControlPoint,\n                this.bezierCurves[0].endPoint\n            ];\n        }\n        const arr = [];\n        arr.push(this.bezierCurves[0].startPoint);\n        arr.push(this.bezierCurves[0].startControlPoint);\n        for (var i = 1; i < this.bezierCurves.length; i++) {\n            arr.push(this.bezierCurves[i - 1].endControlPoint);\n            arr.push(this.bezierCurves[i - 1].endPoint);\n            arr.push(this.bezierCurves[i].startPoint);\n            arr.push(this.bezierCurves[i].startControlPoint);\n        }\n        arr.push(this.bezierCurves[0].endControlPoint);\n        arr.push(this.bezierCurves[0].endPoint);\n        return arr;\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Construct a new path with a single curve. Adding more curves is always possible.\n     *\n     * @method fromCurve\n     * @param {CubicBezierCurve} curve - The curve to construct a new path from.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The constructed bezier path instance.\n     */\n    static fromCurve(curve) {\n        const path = new BezierPath(); // []);\n        path.addCurve(curve);\n        return path;\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj)) {\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        }\n        const arr = obj; // FORCE?\n        if (arr.length < 1) {\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        }\n        // Create an empty bezier path\n        var bPath = new BezierPath(); // undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(); // null); // No points yet\n        var startPoint = new Vertex();\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular !== null && adjustCircular !== void 0 ? adjustCircular : false;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @modified 2024-01-30 Added a missing type in the `describeSVGArc` function.\n * @modified 2024-03-01 Added the `getStartPoint` and `getEndPoint` methods.\n * @modified 2024-03-08 Added the `containsAngle` method.\n * @modified 2024-03-09 Added the `circleSectorIntersection` method to find coherent sector intersections..\n * @modified 2024-03-09 Added the `angleAt` method to determine any angle at some ratio.\n * @version  1.2.0\n **/\nimport { Circle } from \"./Circle\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof CircleSector\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    containsAngle(angle) {\n        if (this.startAngle <= this.endAngle) {\n            return angle >= this.startAngle && angle < this.endAngle;\n        }\n        else {\n            // startAngle > endAngle\n            return angle >= this.startAngle || angle < this.endAngle;\n        }\n    }\n    /**\n     * Get the angle inside this sector for a given ratio. 0.0 means startAngle, and 1.0 means endAngle.\n     *\n     * @param {number} t - The ratio inside [0..1].\n     * @method angleAt\n     * @instance\n     * @memberof CircleSector\n     * @return {number} The angle inside this sector at a given ratio.\n     */\n    angleAt(t) {\n        if (this.startAngle <= this.endAngle) {\n            const angleAtRatio = this.startAngle + (this.endAngle - this.startAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n        else {\n            // startAngle > endAngle\n            const angleAtRatio = this.startAngle + (Math.PI * 2 - this.startAngle + this.endAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n    }\n    /**\n     * Get the sectors starting point (on the underlying circle, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's stating point.\n     */\n    getStartPoint() {\n        return this.circle.vertAt(this.startAngle);\n    }\n    /**\n     * Get the sectors ending point (on the underlying circle, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's ending point.\n     */\n    getEndPoint() {\n        return this.circle.vertAt(this.endAngle);\n    }\n    /**\n     * Calculate the intersection of this circle sector and some other sector.\n     *\n     * If the two sectors do not corerently intersect (when not both points of the\n     * radical line are containted in both source sectors) then null is returned.\n     *\n     * See demo/53-circle-sector-intersections for a geometric visualisation.\n     *\n     * @method circleSectorIntersection\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector | null} The intersecion of both sectors or null if they don't intersect.\n     */\n    circleSectorIntersection(sector) {\n        const radicalLine = this.circle.circleIntersection(sector.circle);\n        if (!radicalLine) {\n            // The circles to not intersect at all.\n            return null;\n        }\n        // Circles intersect. Check if this sector interval intersects, too.\n        const thisIntersectionAngleA = this.circle.center.angle(radicalLine.a);\n        const thisIntersectionAngleB = this.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!this.containsAngle(thisIntersectionAngleA) || !this.containsAngle(thisIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // Circles intersect. Check if the passed sector interval intersects, too.\n        const thatIntersectionAngleA = sector.circle.center.angle(radicalLine.a);\n        const thatIntersectionAngleB = sector.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!sector.containsAngle(thatIntersectionAngleA) || !sector.containsAngle(thatIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // The radical line has no direction. Thus the resulting sector _might_ be in reverse order.\n        // Make a quick logical check: the center of the gap must still be located inside the result sector.\n        // If not: reverse result.\n        var gapSector = new CircleSector(this.circle, this.endAngle, this.startAngle);\n        var centerOfOriginalGap = gapSector.angleAt(0.5);\n        const resultSector = new CircleSector(new Circle(this.circle.center.clone(), this.circle.radius), thisIntersectionAngleA, thisIntersectionAngleB);\n        if (resultSector.containsAngle(centerOfOriginalGap)) {\n            resultSector.startAngle = thisIntersectionAngleB;\n            resultSector.endAngle = thisIntersectionAngleA;\n        }\n        return resultSector;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof CircleSector\n     * @return {void}\n     */\n    destroy() {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n     */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle)\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-11-10 Tweaking some type issues.\n * @modified 2023-02-04 Fixed a typo in the CSS classname for cubic Bézier paths: cubicBezier (was cubierBezier).\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Added initialization checks for null parameters.\n * @modified 2023-09-29 Added a missing implementation to the `drawurilssvg.do(XYCoords,string)` function. Didn't draw anything.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-10-04 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2024-01-30 Fixing an issue with immutable style sets; changes to the global draw config did not reflect here (do now).\n * @modified 2024-03-10 Fixing some types for Typescript 5 compatibility.\n * @modified 2024-07-24 Caching custom style defs in a private buffer variable.\n * @version  1.6.10\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nconst RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * Passed from primary to secondary instance.\n     */\n    //private nodeStyle: SVGStyleElement;\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs, nodeStyle) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = Boolean(isSecondary);\n        this.drawConfig = drawConfig;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            if (!gNode || !bufferGNode || !nodeDefs || !bufferNodeDefs) {\n                throw \"Cannot create secondary svg draw lib with undefinde gNode|bufferGNode|nodeDefs|bufferNodeDefs.\";\n            }\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n            if (nodeStyle) {\n                this.nodeStyle = nodeStyle;\n            }\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    addStyleDefs(drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        this.rebuildStyleDefs(drawConfig);\n    }\n    /**\n     * This method is required to re-define the global style defs. It is needed\n     * if any value in the DrawConfig changed in the meantime.\n     * @param drawConfig\n     */\n    rebuildStyleDefs(drawConfig) {\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"bezier\": \"CubicBezierCurve\",\n            //\"bezierPath\": \"BezierPath\", // TODO: is this correct?\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        // console.log(\"drawConfig\", drawConfig);\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        if (this.customStyleDefs) {\n            rules.push(\"\\n/* Custom styles */\\n\");\n            this.customStyleDefs.forEach((value, key) => {\n                rules.push(key + \" { \" + value + \" }\");\n            });\n            // this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + rules.join(\"\\n\");\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Adds the internal <defs> node.\n     */\n    addDefsNode() {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    }\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    addCustomStyleDefs(defs) {\n        this.customStyleDefs = defs;\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        if (!key) {\n            return null;\n        }\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            // node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n            node.style[\"mix-blend-mode\"](this.drawlibConfiguration.blendMode);\n        }\n        // if (this.lineDashEnabled && this.lineDash && this.lineDash.length > 0 && drawutilssvg.nodeSupportsLineDash(nodeName)) {\n        //   node.setAttribute(\"stroke-dasharray\", this.lineDash.join(\" \"));\n        // }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth, strokeOptions) {\n        this._configureNode(node, className, this.fillShapes, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    }\n    /**\n     * Bind this given node to a parent. If no parent is passed then the global\n     * node buffer will be used.\n     *\n     * @method _bindNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {SVGElement=} bindingParent - (optional) You may pass node other than the glober buffer node.\n     * @returns {SVGElement} The passed node itself.\n     */\n    _bindNode(node, bindingParent) {\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            (bindingParent !== null && bindingParent !== void 0 ? bindingParent : this.bufferGNode).appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Add custom CSS class names and the globally defined CSS classname to the\n     * given node.\n     *\n     * @method addCSSClasses\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {string} className - The additional custom classname to add.\n     * @returns {void}\n     */\n    _addCSSClasses(node, className) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${className} ${this.curClassName}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n    }\n    _configureNode(node, className, fillMode, color, lineWidth, strokeOptions) {\n        this._addCSSClasses(node, className);\n        node.setAttribute(\"fill\", fillMode && color ? color : \"none\");\n        node.setAttribute(\"stroke\", fillMode ? \"none\" : color || \"none\");\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        this.applyStrokeOpts(node, strokeOptions);\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, this.drawConfig, // null as any as DrawConfig, // no DrawConfig – this will work as long as `isSecondary===true`\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs, this.nodeStyle);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        this.rebuildStyleDefs(this.drawConfig);\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        const tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        const tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    applyStrokeOpts(node, strokeOptions) {\n        if (strokeOptions &&\n            strokeOptions.dashArray &&\n            strokeOptions.dashArray.length > 0 &&\n            drawutilssvg.nodeSupportsLineDash(node.tagName)) {\n            node.setAttribute(\"stroke-dasharray\", strokeOptions.dashArray\n                .map((dashArayElem) => {\n                return dashArayElem * this.scale.x;\n            })\n                .join(\" \"));\n            if (strokeOptions.dashOffset) {\n                node.setAttribute(\"stroke-dashoffset\", `${strokeOptions.dashOffset * this.scale.x}`);\n            }\n        }\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth, strokeOptions) {\n        // const line: SVGElement = this.makeNode(\"line\");\n        // this.applyStrokeOpts(line, strokeOptions);\n        // line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        // line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        // line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        // line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        const line = this.makeLineNode(zA, zB, color, lineWidth, strokeOptions);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1, strokeOptions);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const group = this.makeNode(\"g\");\n        const arrowHeadBasePosition = { x: 0, y: 0 };\n        // Just create the child nodes, don't bind them to the root node.\n        const arrowHead = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const line = this.makeLineNode(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions);\n        group.appendChild(line);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"linear-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength = 8, strokeOptions) {\n        const group = this.makeNode(\"g\");\n        // Just create the child nodes, don't bind them to the root node.\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        const arrowHead = this.makeArrowHeadNode(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const diff = arrowHeadBasePosition.difference(endPoint);\n        const bezier = this.makeCubicBezierNode(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n        group.appendChild(bezier);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"cubicbezier-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const node = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, strokeOptions);\n        return this._bindFillDraw(node, \"arrowhead\", color, lineWidth || 1, strokeOptions);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size, alpha = 1.0) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", `${alpha}`);\n                // }\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // const basePolygonBounds: Bounds = polygon.getBounds();\n        const rotatedScalingOrigin = new Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        // const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        const clipPathNode = this.makeNode(\"clipPath\");\n        const clipPathId = `clippath_${UIDGenerator.next()}`; // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        const gNode = this.makeNode(\"g\");\n        const imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", `${this._x(rotatedScalingOrigin.x)}`);\n        imageNode.setAttribute(\"y\", `${this._y(rotatedScalingOrigin.y)}`);\n        imageNode.setAttribute(\"width\", `${textureSize.width}`);\n        imageNode.setAttribute(\"height\", `${textureSize.height}`);\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", `rotate(${rotation * RAD_TO_DEG}, ${this._x(rotatedScalingOrigin.x)}, ${this._y(rotatedScalingOrigin.y)})`);\n        const pathNode = this.makeNode(\"path\");\n        const pathData = [];\n        if (polygon.vertices.length > 0) {\n            const self = this;\n            pathData.push(\"M\", `${this._x(polygon.vertices[0].x)}`, `${this._y(polygon.vertices[0].y)}`);\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", `${this._x(polygon.vertices[i].x)}`, `${this._y(polygon.vertices[i].y)}`);\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", `${this._x(rotatedScalingOrigin.x)} ${this._y(rotatedScalingOrigin.y)}`);\n        gNode.setAttribute(\"transform\", `scale(${this.scale.x}, ${this.scale.y})`);\n        const clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", `url(#${clipPathId})`);\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        const node = this.makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (!path || path.length == 0) {\n            return node;\n        }\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(128,128,128,0.5)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        node.setAttribute(\"x1\", `${this._x(p.x)}`);\n        node.setAttribute(\"y1\", `${this._y(p.y)}`);\n        node.setAttribute(\"x2\", `${this._x(p.x)}`);\n        node.setAttribute(\"y2\", `${this._y(p.y)}`);\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth, strokeOptions) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"rectangle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    rect(position, width, height, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"rect\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // console.log(\"grid\");\n        // const node: SVGElement = this.makeNode(\"pattern\");\n        // var patternId = \"pattern_id_\" + Math.floor(Math.random() * 65365);\n        // node.setAttribute(\"id\", patternId);\n        // node.setAttribute(\"viewBox\", `0,0,${sizeX},${sizeY}`);\n        // node.setAttribute(\"width\", `${sizeX}`);\n        // node.setAttribute(\"height\", `${sizeX}`);\n        // var pattern: SVGElement = this.makeNode(\"path\");\n        // const d: SVGPathParams = [];\n        // d.push(\"M\", sizeX / 2.0, 0);\n        // d.push(\"L\", sizeX / 2.0, sizeY);\n        // d.push(\"M\", 0, sizeY / 2.0);\n        // d.push(\"L\", sizeX, sizeY / 2.0);\n        // node.setAttribute(\"d\", d.join(\" \"));\n        // this.bufferedNodeDefs.append(pattern);\n        // const fillNode: SVGElement = this.makeNode(\"rect\");\n        // // For some strange reason SVG rotation transforms use degrees instead of radians\n        // // Note that the background does not scale with the zoom level (always covers full element)\n        // fillNode.setAttribute(\"x\", \"0\");\n        // fillNode.setAttribute(\"y\", \"0\");\n        // fillNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        // fillNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // fillNode.setAttribute(\"fill\", `url(#${patternId})`);\n        // return this._bindFillDraw(fillNode, \"grid\", \"red\", 1);\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {XYCoords} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (vertices.length == 0) {\n            return node;\n        }\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        var _a, _b, _c;\n        options = options || {};\n        const color = options.color || \"black\";\n        const lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        const textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        const transformOrigin = `${this._x(x)}px ${this._y(y)}px`;\n        const translate = `translate(${this._x(x)} ${this._y(y) + lineHeight / 2})`;\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        const rotate = options.rotation ? `rotate(${options.rotation * RAD_TO_DEG} 0 0)` : ``;\n        const node = this.makeNode(\"g\");\n        const curId = this.curId;\n        this.curId = curId + \"_text\";\n        const textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", (_c = options.fontFamily) !== null && _c !== void 0 ? _c : \"\"); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? `${options.fontSize * this.scale.x}` : \"\");\n        textNode.setAttribute(\"font-style\", options.fontStyle ? `${options.fontStyle}` : \"\");\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? `${options.fontWeight}` : \"\");\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation, color) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${x},${y}), rotate(${((rotation || 0) / Math.PI) * 180})`);\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, options);\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = null; // undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = null; // undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n    static nodeSupportsLineDash(nodeName) {\n        return [\"line\", \"path\", \"circle\", \"ellipse\", \"rectangle\", \"rect\"].includes(nodeName);\n    }\n    /**\n     * Creates a basic <line> node with start and end coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeLineNode\n     * @param {XYCoords} zA - The line's start position.\n     * @param {XYCoords} zB - The line's start position.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGLineElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeLineNode(zA, zB, color, lineWidth, strokeOptions, classNameOverride) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        this._configureNode(line, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"line\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return line;\n    }\n    /**\n     * Creates a basic <path> node with given path string data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makePathNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makePathNode(pathString, color, lineWidth, strokeOptions, classNameOverride) {\n        const path = this.makeNode(\"path\");\n        path.setAttribute(\"d\", pathString);\n        this._configureNode(path, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"path\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return path;\n    }\n    /**\n     * Creates a basic arrow head node (<path> node) at the end of the given line coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeArrowHeadNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {number=8} headLength - (optional) The length of the arrow head; if none is specified then the head will be 8 absolute units long.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeArrowHeadNode(zA, zB, color, lineWidth, headLength = 8, strokeOptions, arrowHeadBasePositionBuffer) {\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        const d = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        for (var i = 1; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        const node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"arrowhead\");\n        return node;\n    }\n    /**\n     * Creates a basic cubic Bézier path node (<path> node) with the given cubic Bézier data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeCubicBezierNode\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        const node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"cubicBezier\");\n        return node;\n    }\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Removed unused method stub for texturedPoly helper function (cleanup).\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @modified 2023-09-30 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2023-10-07 Adding the optional `arrowHeadBasePositionBuffer` param to the arrowHead(...) method.\n * @modified 2024-09-13 Remoed the scaling of `lineWidth` in the `polygon` and `polyline` methods. This makes no sense here and doesn't match up with the behavior of other line functions.\n * @version  1.13.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { Vector } from \"./Vector\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        // this.lineDash = [];\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    applyStrokeOpts(strokeOptions) {\n        var _a, _b;\n        this.ctx.setLineDash(((_a = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashArray) !== null && _a !== void 0 ? _a : []).map((dashArrayElem) => {\n            // Note assume scale.x === scale.y\n            // Invariant scale makes funny stuff anyway.\n            return dashArrayElem * this.scale.x;\n        }));\n        this.ctx.lineDashOffset = ((_b = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashOffset) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    }\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDash: Array<number>) {\n    //   this.lineDash = lineDash;\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        this.arrowHead(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition); // Will NOT use dash configuration\n        this.line(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions); // Will use dash configuration\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        // Will NOT use dash configuration\n        this.arrowHead(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const diff = arrowHeadBasePosition.difference(endPoint);\n        // Will use dash configuration\n        this.cubicBezier(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8, strokeOptions, arrowHeadBasePositionBuffer) {\n        // var headLength: number = 8; // length of head in pixels\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        this.ctx.moveTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 1.0) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        // var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var targetCenterDifference = new Vertex(polygonPosition.x, polygonPosition.y).difference(basePolygonBounds.getCenter());\n        // var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    }\n    /*\n    _texturedPoly(\n      textureImage: HTMLImageElement,\n      textureSize: Bounds,\n      polygon: Polygon,\n      polygonPosition: XYCoords,\n      rotation: number,\n      rotationCenter: XYCoords = { x: 0, y: 0 }\n    ): void {\n      var basePolygonBounds = polygon.getBounds();\n      var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n      var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n      // var rotationalOffset = { x: 0, y: 0 };\n      var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n  \n      // Get the position offset of the polygon\n      var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n      var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n  \n      this.ctx.save();\n  \n      // this.ctx.translate(\n      //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n      //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      // );\n      this.ctx.translate(\n        this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      );\n      this.ctx.rotate(rotation);\n  \n      drawutils.helpers.clipPoly(\n        this.ctx,\n        {\n          x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n          y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        },\n        this.scale,\n        polygon.vertices\n      );\n      this.ctx.drawImage(\n        textureImage,\n        0,\n        0,\n        textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x,\n        (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y,\n        targetTextureSize.x * this.scale.x,\n        targetTextureSize.y * this.scale.y\n      );\n  \n      // const scaledTextureSize = new Bounds(\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n      //   ).scaleXY(this.scale, rotationCenter),\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n      //   ).scaleXY(this.scale, rotationCenter)\n      // );\n      // this.ctx.drawImage(\n      //   textureImage,\n      //   0,\n      //   0,\n      //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n      //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n      //   scaledTextureSize.min.x,\n      //   scaledTextureSize.min.y,\n      //   scaledTextureSize.width,\n      //   scaledTextureSize.height\n      // );\n  \n      this.ctx.restore();\n    }\n    */\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    rect(position, width, height, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {XYCoords} startPoint   - The start point of the cubic Bézier curve\n     * @param {XYCoords} controlPoint - The control point the cubic Bézier curve.\n     * @param {XYCoords} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth, strokeOptions) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth, strokeOptions) {\n        if (!path || path.length == 0) {\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgba(128,128,128, 0.5)\", undefined);\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.applyStrokeOpts(options);\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth, strokeOptions) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth, strokeOptions);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth, strokeOptions) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        let relX = this.offset.x + x * this.scale.x;\n        let relY = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : `\"${options.fontFamily}\"`\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        const rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        const lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        this.applyStrokeOpts(options);\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\ndrawutils.helpers = {\n    // A helper function to define the clipping path.\n    // This could be a candidate for the draw library.\n    clipPoly: (ctx, offset, scale, vertices) => {\n        ctx.beginPath();\n        // Set clip mask\n        ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n        for (var i = 1; i < vertices.length; i++) {\n            const vert = vertices[i];\n            ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n        }\n        ctx.closePath();\n        ctx.clip();\n    }\n};\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  0.0.10\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext|null} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDashes: Array<number>) {\n    //   // TODO\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 0.0) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {VertXYCoordsex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    }\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = (e) => {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = (e) => {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = (e) => {\n            _self.fireUpEvent(e, _self);\n        }));\n    }\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    }\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    destroy() {\n        this.releaseListeners();\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\n// prettier-ignore\nKeyHandler.KEY_CODES = {\n    'break': 3, // alternate: 19\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29, // alternate: 235?\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36, // alternate: 172?\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46, // alternate: 8\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91, // left ⌘\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93, // right ⌘\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108, // firefox, 194 on chrome\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169, // (AZERTY)\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173, // firefox\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181, // firefox, alternate: 173\n    'unmute': 181, // alternate: 173?\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191, // 231 alternate?\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251, // Chrome/Edge\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers[\"mousemove\"] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX, y: e.offsetY };\n    }\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(event, eventName) {\n        var _a, _b;\n        const rel = this.relPos(event);\n        const xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button, // this.mouseButton,\n            leftButton: event.button === 0, // this.mouseButton === 0,\n            middleButton: event.button === 1, // this.mouseButton === 1,\n            rightButton: event.button === 2, // this.mouseButton === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    }\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    }\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-25 Fixed a type error in the constructor. Nothing vital.\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class PBText {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex();\n        this.color = options === null || options === void 0 ? void 0 : options.color;\n        this.fontFamily = options === null || options === void 0 ? void 0 : options.fontFamily;\n        this.fontSize = options === null || options === void 0 ? void 0 : options.fontSize;\n        this.fontStyle = options === null || options === void 0 ? void 0 : options.fontStyle;\n        this.fontWeight = options === null || options === void 0 ? void 0 : options.fontWeight;\n        this.lineHeight = options === null || options === void 0 ? void 0 : options.lineHeight;\n        this.textAlign = options === null || options === void 0 ? void 0 : options.textAlign;\n        this.rotation = options === null || options === void 0 ? void 0 : options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\n//# sourceMappingURL=PBText.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2025-03-31 ATTENTION: modified the winding direction of the `tangentAt` method to match with the Circle method. This is a breaking change!\n * @modified 2025-03-31 Adding the `VEllipse.move(amount: XYCoords)` method.\n * @version  1.4.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Circle } from \"./Circle\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Move the ellipse by the given amount. This is equivalent by moving the `center` and `axis` points.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipse\n     * @return {VEllipse} this for chaining\n     **/\n    move(amount) {\n        this.center.add(amount);\n        this.axis.add(amount);\n        return this;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        const resultVector = this.center.distance(endPointA) < this.center.distance(endPointB)\n            ? new Vector(point, endPointB)\n            : new Vector(point, endPointA);\n        if (typeof length === \"number\") {\n            resultVector.setLength(length);\n        }\n        return resultVector;\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // const normal: Vector = this.normalAt(angle - this.rotation, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        // normal.b.rotate(Math.PI / 2, normal.a);\n        // return normal;\n        return normal.inv().perp();\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @method getEquidistantVertices\n     * @instance\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    lineIntersections(ray, inVectorBoundsOnly = false) {\n        // Question: what happens to extreme versions when ellipse is a line (width or height is zero)?\n        //           This would result in a Division_by_Zero exception!\n        // Step A: create clones for operations (keep originals unchanged)\n        const ellipseCopy = this.clone(); // VEllipse\n        const rayCopy = ray.clone(); // Vector\n        // Step B: move both so ellipse's center is located at (0,0)\n        const moveAmount = ellipseCopy.center.clone().inv();\n        ellipseCopy.move(moveAmount);\n        rayCopy.add(moveAmount);\n        // Step C: rotate eclipse backwards it's rotation, so that rotation is zero (0.0).\n        //         Rotate together with ray!\n        const rotationAmount = -ellipseCopy.rotation;\n        ellipseCopy.rotate(rotationAmount); // Rotation around (0,0) = center of translated ellipse\n        rayCopy.a.rotate(rotationAmount, ellipseCopy.center);\n        rayCopy.b.rotate(rotationAmount, ellipseCopy.center);\n        // Step D: find x/y factors to use for scaling to transform the ellipse to a circle.\n        //         Scale together with vector ray.\n        const radiusH = ellipseCopy.radiusH();\n        const radiusV = ellipseCopy.radiusV();\n        const scalingFactors = radiusH > radiusV ? { x: radiusV / radiusH, y: 1.0 } : { x: 1.0, y: radiusH / radiusV };\n        // Step E: scale ellipse AND ray by calculated factors.\n        ellipseCopy.axis.scaleXY(scalingFactors);\n        rayCopy.a.scaleXY(scalingFactors);\n        rayCopy.b.scaleXY(scalingFactors);\n        // Intermediate result: now the ellipse is transformed to a circle and we can calculate intersections :)\n        // Step F: calculate circle+line intersecions\n        const tmpCircle = new Circle(new Vertex(), ellipseCopy.radiusH()); // radiusH() === radiusV()\n        const intersections = tmpCircle.lineIntersections(rayCopy, inVectorBoundsOnly);\n        // Step G: transform intersecions back to original configuration\n        intersections.forEach(function (intersectionPoint) {\n            // Reverse transformation from above.\n            intersectionPoint.scaleXY({ x: 1 / scalingFactors.x, y: 1 / scalingFactors.y }, ellipseCopy.center);\n            intersectionPoint.rotate(-rotationAmount, ellipseCopy.center);\n            intersectionPoint.sub(moveAmount);\n        });\n        return intersections;\n    }\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    lineIntersectionTangents(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        const interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map((vert) => {\n            // Calculate angle\n            const lineFromCenter = new Line(this.center, vert);\n            const angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return this.tangentAt(angle);\n        });\n    }\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection (ignore that the result might be null in some extreme cases)\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author   Ikaros Kappler\n * @date     2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-11-01 Tweaked the `endpointToCenterParameters` function to handle negative values, too, without errors.\n * @version  1.1.1\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                if (intersection) {\n                    // It's VERY LIKELY hat this ALWAYS happens; it's just a typesave variant.\n                    // Intersection cannot be null.\n                    let startDiff = startPoint.difference(intersection);\n                    let endDiff = endPoint.difference(intersection);\n                    let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                    curves.push(curve);\n                }\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }, // END function describeSVGArc\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        // const M: number = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const M = sqrt(Math.abs((prx * pry - prx * py - pry * px) / (prx * py + pry * px))) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        // console.log(\"VELLIPSE::::::\", ellipse);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @modified 2022-10-25 Added the `origin` to the default draw config.\n * @modified 2022-11-06 Adding an XML declaration to the SVG export routine.\n * @modified 2022-11-23 Added the `drawRaster` (default=true) option to the config/drawconfig.\n * @modified 2023-02-04 Fixed a bug in the `drawDrawable` function; fill's current classname was not set.\n * @modified 2023-02-10 Fixing an issue of the `style.position` setting when `fitToParent=true` from `absolute` to `static` (default).\n * @modified 2023-02-10 Cleaning up most type errors in the main class (mostly null checks).\n * @modified 2023-02-10 Adding `enableZoom` and `enablePan` (both default true) to have the option to disable these functions.\n * @modified 2023-09-29 Adding proper dicionary key and value types to the params of `PlotBoilerplate.utils.safeMergeByKeys` (was `object` before).\n * @modified 2024-07-08 Adding `PlotBoilerplate.getGUI()` to retrieve the GUI instance.\n * @modified 2024-08-25 Extending main class `PlotBoilerplate` optional param `isBackdropFiltersEnabled`.\n * @modified 2024-12-02 Adding the `triggerRedraw` to the `removeAll` method.\n *\n * @version  1.20.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { PBText } from \"./PBText\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enablePan=true] - (default true) Set to false if you want to disable panning completely.\n     * @param {boolean=} [config.enableZoom=true] - (default true) Set to false if you want to disable zooming completely.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    constructor(config, drawConfig) {\n        var _b, _c;\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        /**\n         * A storage variable for retrieving the GUI instance once it was created.\n         */\n        this._gui = null;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas === \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            enableZoom: f.bool(config, \"enableZoom\", true), // default=true\n            enablePan: f.bool(config, \"enablePan\", true), // default=true\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false),\n            isBackdropFiltersEnabled: f.bool(config, \"isBackdropFiltersEnabled\", true)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            // bezierPath: {\n            //   color: \"#0022a8\",\n            //   lineWidth: 1\n            // },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            },\n            origin: {\n                color: \"#000000\"\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas === \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        if (typeof canvasElement === \"undefined\") {\n            throw `Cannot initialize PlotBoilerplate with a null canvas (element \"${config.canvas} not found).`;\n        }\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                // Override the case 'null' here. If GL is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                // Override the case 'null' here. If context creation is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set((_b = this.config.scaleX) !== null && _b !== void 0 ? _b : 1.0, this.config.scaleY);\n        this.fill.scale.set((_c = this.config.scaleX) !== null && _c !== void 0 ? _c : 1.0, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear) {\n            pb.config.preClear();\n        }\n        tosvgDraw.clear(pb.config.backgroundColor || \"white\");\n        if (pb.config.preDraw) {\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        }\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        // Add: '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' ?\n        var blob = new Blob(['<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\") {\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        }\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        var _b, _c, _d, _e;\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleX) !== null && _c !== void 0 ? _c : 1.0);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_d = this.config.cssScaleX) !== null && _d !== void 0 ? _d : 1.0, (_e = this.config.cssScaleY) !== null && _e !== void 0 ? _e : 1.0);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            for (var i = 0; i < drawable.vertices.length; i++) {\n                this.vertices.push(drawable.vertices[i]);\n            }\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0) {\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                }\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else if (drawable instanceof PBText) {\n            this.vertices.push(drawable.anchor);\n            this.drawables.push(drawable);\n            drawable.anchor.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                    else if (drawable instanceof PBText) {\n                        this.removeVertex(drawable.anchor, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @param {boolean=true} triggerRedraw - By default this method triggers the redraw routine; passing `false` will suppress redrawing.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices, triggerRedraw) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        if (triggerRedraw || typeof triggerRedraw === \"undefined\") {\n            this.redraw();\n        }\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var _b, _c;\n        const p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, this.drawConfig.origin.color);\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.fill.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            var curveIndex = 0;\n            for (var c in d.bezierCurves) {\n                // Restore these settings again in each loop (will be overwritten)\n                this.draw.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.fill.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.draw.setCurrentClassName(d.className);\n                this.fill.setCurrentClassName(d.className);\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h2`);\n                        df.setCurrentClassName(`${d.className}-start-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h3`);\n                        df.setCurrentClassName(`${d.className}-end-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.handleLine(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.handleLine(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint);\n                }\n                curveIndex++;\n            } // END for\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.handleLine(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.handleLine(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(`${d.uid}_a0`);\n                draw.setCurrentClassName(`${d.className}-anchor`);\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        if (this.config.drawRaster) {\n            this.drawGrid(draw);\n        }\n        if (this.config.drawOrigin) {\n            this.drawOrigin(draw);\n        }\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(null);\n        draw.setCurrentClassName(null);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor || \"white\");\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        var _b, _c;\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * ((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0), this.canvasSize.height * ((_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0)));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        var _b, _c, _d, _e, _f, _g;\n        const _self = this;\n        const _setSize = (w, h) => {\n            var _b, _c;\n            w *= (_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0;\n            h *= (_c = _self.config.canvasHeightFactor) !== null && _c !== void 0 ? _c : 1.0;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = ((_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0) * width + \"px\";\n            _self.canvas.style.height = ((_c = _self.config.canvasWidthFactor) !== null && _c !== void 0 ? _c : 1.0) * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"static\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = ((_d = _self.config.canvasWidthFactor) !== null && _d !== void 0 ? _d : 1.0) * space.width + \"px\";\n            _self.canvas.style.height = ((_e = _self.config.canvasHeightFactor) !== null && _e !== void 0 ? _e : 1.0) * space.height + \"px\";\n            _self.canvas.style.top = \"\";\n            _self.canvas.style.left = \"\";\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = \"\";\n            _self.canvas.style.height = \"\";\n            _setSize((_f = _self.config.defaultCanvasWidth) !== null && _f !== void 0 ? _f : 1024, (_g = _self.config.defaultCanvasHeight) !== null && _g !== void 0 ? _g : 768);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        const _self = this;\n        var point = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX || 1.0, _self.config.cssScaleY || 1.0));\n        if (point) {\n            _self.vertices[point.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (point.typeName == \"bpath\") {\n                    let vert = _self.paths[point.pindex].bezierCurves[point.cindex].getPointByID(point.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (point.typeName == \"vertex\") {\n                    let vert = _self.vertices[point.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler && this.keyHandler.isDown(\"y\")) {\n                _self.vertices[point.vindex].attr.bezierAutoAdjust = !_self.vertices[point.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var draggablePoint = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!draggablePoint)\n            return;\n        // Drag all selected elements?\n        if (draggablePoint.typeName == \"vertex\" && _self.vertices[draggablePoint.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[draggablePoint.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(draggablePoint);\n            if (draggablePoint.typeName == \"bpath\")\n                _self.paths[draggablePoint.pindex].bezierCurves[draggablePoint.cindex]\n                    .getPointByID(draggablePoint.pid)\n                    .listeners.fireDragStartEvent(e);\n            else if (draggablePoint.typeName == \"vertex\")\n                _self.vertices[draggablePoint.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler && (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\"))) {\n            if (!this.config.enablePan) {\n                return;\n            }\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        if (!this.config.enableZoom) {\n            return;\n        }\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" ||\n                typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                if (!touchDownPos || !touchMovePos) {\n                                    return;\n                                }\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                if (!this.config.enablePan) {\n                                    return;\n                                }\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                if (!touchDownPos) {\n                                    return;\n                                }\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            if (!this.config.enableZoom) {\n                                return;\n                            }\n                            const touchItem0 = evt.touches.item(0);\n                            const touchItem1 = evt.touches.item(1);\n                            if (!evt.touches || !multiTouchStartScale || !touchItem0 || !touchItem1) {\n                                return;\n                            }\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(touchItem0.clientX, touchItem0.clientY);\n                            const fingerB = new Vertex(touchItem1.clientX, touchItem1.clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        // window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                        const createAlloyFinger = window[\"createAlloyFinger\"];\n                        createAlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        const utils = globalThis[\"utils\"];\n        // if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\") {\n        //   return (globalThis[\"utils\" as keyof Object] as any as ({createGUI : (pb:PlotBoilerplate,props:DatGuiProps|undefined)=>GUI })).createGUI(this, props);\n        if (utils && typeof utils.createGUI === \"function\") {\n            return (this._gui = utils.createGUI(this, props));\n        }\n        else {\n            throw \"Cannot create dat.GUI or lil-gui instance; did you load the ./utils/creategui helper function an the dat.GUI/lil-gui library?\";\n        }\n    }\n    /**\n     * Retriebe the GUI once it was created. If the `createGUI` method was not called or failed to create any\n     * GUI then null is returned.\n     * @returns {GUI | null}\n     */\n    getGUI() {\n        return this._gui;\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    __setFunctionName(_a, \"Draggable\"),\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k)) {\n                continue;\n            }\n            if (base.hasOwnProperty(k)) {\n                const typ = typeof base[k];\n                const extVal = extension[k];\n                try {\n                    if (typ == \"boolean\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Boolean(!!JSON.parse(extVal));\n                        else\n                            base[k] = extVal;\n                    }\n                    else if (typ == \"number\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Number(JSON.parse(extVal) * 1);\n                        else\n                            base[k] = extension[k];\n                    }\n                    else if (typ == \"function\" && typeof extVal == \"function\") {\n                        base[k] = extension[k];\n                    }\n                    else {\n                        // Probably a sting\n                        base[k] = extension[k];\n                    }\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extVal, e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /*\n    __safeMergeByKeys: <KeyType extends string | number | symbol, ValueType extends boolean | number | string | Function>(\n      base: Record<KeyType, ValueType>,\n      extension: Record<KeyType, string>\n    ): Record<KeyType, ValueType> => {\n      for (var k in extension) {\n        if (!extension.hasOwnProperty(k)) continue;\n        if (base.hasOwnProperty(k)) {\n          var typ = typeof base[k];\n          try {\n            if (typ == \"boolean\") base[k] = !!JSON.parse(extension[k]);\n            else if (typ == \"number\") base[k] = JSON.parse(extension[k]) * 1;\n            else if (typ == \"function\" && typeof extension[k] == \"function\") base[k] = extension[k];\n            else base[k] = extension[k];\n          } catch (e) {\n            console.error(\"error in key \", k, extension[k], e);\n          }\n        } else {\n          base[k] = extension[k];\n        }\n      }\n      return base;\n    },\n    *()\n\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        // element.style[\"transform-origin\"] = \"0 0\";\n        element.style.transformOrigin = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0) {\n            // element.style.transform = null;\n            element.style.removeProperty(\"transform\");\n        }\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    }, // END fetch\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map"],"names":["VertexAttr","constructor","key","this","draggable","selectable","isSelected","visible","model","UIDGenerator","next","current","VertexListeners","vertex","click","drag","dragStart","dragEnd","addClickListener","listener","_addListener","removeClickListener","_removeListener","addDragListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireClickEvent","e","_fireEvent","fireDragEvent","fireDragStartEvent","fireDragEndEvent","removeAllListeners","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vector","VertTuple","vertA","vertB","super","a","b","className","perp","v","clone","sub","Vertex","y","x","add","inverse","tmp","inv","intersection","line","denominator","numerator1","numerator2","getOrthogonal","linePoint","startPoint","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","angle","Math","atan2","vertices","cos","sin","PI","Circle","center","radius","uid","containsPoint","point","distance","containsCircle","circle","lineDistance","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","circleIntersection","abs","p0","p1","d","h","sqrt","p2","scale","x3","y3","x4","y4","Line","lineIntersection","interA","interB","transA","transB","diff","difference","dist","det","distSquared","belowSqrt","sign","lineIntersections","inVectorBoundsOnly","intersectioLine","filter","vert","hasPoint","lineIntersectionTangents","map","closestPoint","destroy","isDestroyed","Triangle","c","calcCircumcircle","fromArray","arr","getArea","signedArea","getCentroid","scaleToCentroid","factor","centroid","getCircumcircle","isAdjacent","tri","equals","getThirdVertex","vert1","vert2","A","B","C","D","E","F","G","dx","dy","EPSILON","bounds","min","max","cx","cy","radius_squared","inCircumcircle","Bounds","min3","max3","toPolygon","Polygon","determinant","p","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","circleIntersB","circleIntersC","getIncircle","getIncenter","toString","p0x","p0y","p1x","p1y","p2x","p2y","px","py","area","s","t","mapAngleTo2PI","new_angle","asin","dist4","x1","y1","x2","y2","pow","dotProduct","pA","pB","pC","n","triangle","lineAB","lineAC","insideAngle","clockwise","scaleFactor","result","rotate","wrapMax","wrapMinMax","tuple","NaN","attr","set","setX","setY","invX","invY","addXY","amountX","amountY","addX","addY","subXY","subX","subY","eqX","eqY","origin","scaleXY","lerp","target","lerpAbs","u","step","factors","len","ZERO","multiplyScalar","scalar","round","precision","toFixed","randomVertex","viewPort","random","console","warn","arrayToJSON","JSON","stringify","undefined","Number","factory","setLength","amount","revert","normalize","moveTo","newA","v0","v1","colinear","epsilon","getClosestT","l2","vtutils","dist2","insideBoundsOnly","pointDistance","w","isNaN","getStartPoint","getEndPoint","getStartTangent","getEndTangent","reverse","isOpen","addVertex","addVertexAt","index","getEdgeAt","vertIndex","getVertexAt","getEdges","lines","getInnerAngleAt","p3","isAcute","isAngleAcute","zero","p2mp1","p3mp2","p2mp1_len","p3mp2_len","lengthProduct","acos","move","containsVert","inside","j","xi","yi","xj","yj","containsVerts","verts","every","containsPolygon","polygon","lineSegment","isClockwise","perimeter","log","getMeanCenter","locateLineIntersecion","intersectionTuple","intersectionPoint","polyLine","edgeIndex","closestLineIntersection","allIntersections","closestIntersection","MAX_VALUE","curDist","curVert","getInterpolationPolygon","interpolationCount","nextVert","lerpAmount","getEvenDistributionPolygon","pointCount","Error","polygonPoint","stepSize","polygonIndex","nextPolygonPoint","segmentLength","loopMax","curSegmentU","newPoint","getBounds","computeFromVertices","elimitateColinearEdges","tolerance","eps","slice","areColinear","vertC","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","buffer","join","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","BezierPath","total","l","sum","intersectionPoints","width","height","getCenter","getMinDimension","getMaxDimension","randomPoint","horizontalSafeArea","verticalSafeArea","absHorizontalSafeArea","absVerticalSafeArea","xMin","xMax","yMin","yMax","fromDimension","CubicBezierCurve","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartControlPoint","getEndControlPoint","translate","getLength","arcLength","pointB","curveStep","newLength","tmpLength","getPointAt","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","POSITIVE_INFINITY","NEGATIVE_INFINITY","getPointByID","id","getPoint","getTangentAt","t2","nt2","tX","tY","trimStart","uValue","trimStartAt","convertU2T","subCurbePoints","getSubCurvePointsAt","trimEnd","trimEndAt","getSubCurve","uStart","uEnd","getSubCurveAt","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","isInstance","obj","toJSON","prettyFormat","fromJSON","jsonString","parse","fromObject","Array","isArray","startVec","endVec","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaleFactors","curveT","uMin","uTemp","relativeU","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","getEvenDistributionVertices","toPathPoints","fromCurve","bPath","lastCurve","toReducedListRepresentation","digits","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","bezierPath","CircleSector","startAngle","endAngle","containsAngle","angleAt","circleSectorIntersection","sector","radicalLine","thisIntersectionAngleA","thisIntersectionAngleB","thatIntersectionAngleA","thatIntersectionAngleB","centerOfOriginalGap","resultSector","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","RAD_TO_DEG","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","nodeStyle","Boolean","drawlibConfiguration","cache","Map","setSize","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","appendChild","rebuildStyleDefs","keys","bezier","ellipse","ellipseSector","circleSector","vector","image","text","rules","k","drawSettings","color","lineWidth","customStyleDefs","forEach","value","innerHTML","addCustomStyleDefs","defs","findElement","nodeName","node","get","toUpperCase","delete","document","createElementNS","makeNode","curId","blendMode","style","_bindFillDraw","strokeOptions","_configureNode","_bindNode","bindingParent","parentNode","_addCSSClasses","curClassName","setAttribute","fillMode","applyStrokeOpts","copyInstance","setConfiguration","configuration","setCurrentId","setCurrentClassName","beginDrawCycle","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","endDrawCycle","replaceChild","tmpGNode","tmpDefsNode","dashArray","nodeSupportsLineDash","tagName","dashArayElem","dashOffset","_x","_y","makeLineNode","arrow","headLength","group","arrowHeadBasePosition","arrowHead","makeArrowHeadNode","cubicBezierArrow","makeCubicBezierNode","position","size","alpha","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","texturedPoly","textureImage","textureSize","polygonPosition","rotation","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","cubicBezier","cubicBezierPath","handle","square","handleLine","dot","circleArc","arcData","radiusX","radiusY","rect","grid","sizeX","sizeY","ceil","raster","diamondHandle","squareHandle","circleHandle","crosshair","cross","polyline","_a","_b","_c","lineHeight","fontSize","textAlign","transformOrigin","textNode","fontFamily","fontStyle","fontWeight","label","inplace","copyPathData","transformPathData","lastChild","removeChild","createSvg","data","copy","_stx","_sty","_sx","_sy","_slp","includes","classNameOverride","makePathNode","pathString","arrowHeadBasePositionBuffer","HEAD_XML","drawutils","context","ctx","setLineDash","dashArrayElem","lineDashOffset","_fillOrDraw","fillStyle","fill","strokeStyle","stroke","globalCompositeOperation","save","beginPath","lineTo","restore","complete","globalAlpha","drawImage","basePolygonBounds","targetTextureSize","targetTextureOffset","helpers","clipPoly","closePath","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","arc","asSegment","relX","relY","font","indexOf","fillText","strokeText","Path2D","clearRect","canvas","fillRect","clip","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","fireEvent","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","press","up","isDown","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","$","pagebackward","pageforward","refresh","closingparen","minus","decreasevolumelevel","increasevolumelevel","previous","stop","email","mute","unmute","semicolon","equal","comma","dash","period","forwardslash","openbracket","backslash","closebracket","singlequote","altgr","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","PBImage","upperLeft","lowerRight","PBText","getLen","getRotateAngle","v2","mr","getAngle","HandlerAdmin","el","del","dispatch","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","preTapPosition","evt","touches","Date","pageX","pageY","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","on","off","VEllipse","axis","radiusH","signedRadiusH","radiusV","signedRadiusV","normalAt","foci","getFoci","angleA","centerAngle","endPointA","endPointB","resultVector","rh","rv","sdiff","getEquidistantVertices","angles","equidistantVertAngles","ray","ellipseCopy","rayCopy","rotationAmount","scalingFactors","intersections","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","r2d","fullEllipsePointCount","ellipseAngles","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","__setFunctionName","prefix","description","Object","defineProperty","configurable","PlotBoilerplate","config","_gui","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","drawRaster","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableZoom","enablePan","enableGL","isBackdropFiltersEnabled","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","pathVertex","controlVertex","selectedVertex","canvasElement","toLowerCase","eventCatcher","getContext","draw","parentElement","createElement","left","top","cursor","body","title","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","_d","_e","setCSSscale","drawable","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","triggerRedraw","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","drawDrawable","df","error","drawSelectPolygon","clearSelection","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","display","padding","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_f","_g","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","draggablePoint","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","touchItem0","item","touchItem1","fingerA","fingerB","window","createAlloyFinger","createGUI","props","getGUI","isVertex","safeMergeByKeys","extension","hasOwnProperty","typ","extVal","removeProperty","transform","fallback"],"mappings":"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"}