{"version":3,"file":"index.esm.min.js","sources":["../src/esm/VertexAttr.js","../src/esm/UIDGenerator.js","../src/esm/VertexListeners.js","../src/esm/Vertex.js","../src/esm/VertTuple.js","../src/esm/Line.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/Vector.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/Circle.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../src/esm/PBText.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js"],"sourcesContent":["/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    removeAllListeners() {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    }\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-11-28 Added the `subXY`, `subX` and `subY` methods to the `Vertex` class.\n * @modified 2023-09-29 Downgraded types for the `Vertex.utils.buildArrowHead` function (replacing Vertex params by more generic XYCoords type).\n * @modified 2023-09-29 Added the `Vertex.abs()` method as it seems useful.\n * @version  2.8.0\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x- and y- components of this vertex.\n     *\n     * @method subXY\n     * @param {number} x - The amount to substract from x.\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subXY(amountX, amountY) {\n        this.x -= amountX;\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to substract from x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subX(amountX) {\n        this.x -= amountX;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the y-component of this vertex.\n     *\n     * @method subY\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subY(amountY) {\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    lerp(target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    lerpAbs(target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scaleXY(factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Set both coordinates of this vertex to their absolute value (abs(x), abs(y)).\n     *\n     * @method abs\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     */\n    abs() {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        console.warn(\"[DEPRECATION] Vertex.utils.buildArrowHead is deprecated. Please use Vector.utils.buildArrowHead instead.\");\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    },\n    /**\n     * Convert the given vertices (array) to a JSON string.\n     *\n     * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n     * @returns {string}\n     */\n    arrayToJSON(vertices, precision) {\n        return JSON.stringify(vertices.map(function (vert) {\n            return typeof precision === undefined\n                ? { x: vert.x, y: vert.y }\n                : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n        }));\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-29 Fixed a calculation error in the VertTuple.hasPoint() function; distance measure was broken!\n * @version 1.2.1\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    }\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return distance < Vertex.EPSILON; // t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @modified 2023-09-25 Changed param type of `intersection()` from Line to VertTuple.\n * @version  2.3.0\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        const numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + a * (this.b.x - this.a.x);\n        const y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    getStartPoint() {\n        return this.a;\n    }\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    getEndPoint() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.a;\n    }\n    /**\n     * Inverse this path segment (in-place) and return this same instance (useful for chaining).\n     *\n     * @method reverse\n     * @memberof PathSegment\n     * @return {PathSegment} This path segment instance (for chaining).\n     */\n    reverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @modified 2023-09-25 Added the `Polygon.getInterpolationPolygon(number)` function.\n * @modified 2023-09-25 Added the `Polygon.lineIntersections(Line,boolean)` function.\n * @modified 2023-09-29 Added the `Polygon.closestLineIntersection(Line,boolean)` function.\n * @version 1.11.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == \"undefined\")\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen || false;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    }\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    perimeter() {\n        let length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    }\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    }\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersectionPoints = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            const polyLine = new Line(this.vertices[i], this.vertices[(i + 1) % this.vertices.length]);\n            const intersection = polyLine.intersection(line);\n            // true => only inside bounds\n            // ignore last edge if open\n            if ((!this.isOpen || i + 1 !== this.vertices.length) &&\n                intersection !== null &&\n                polyLine.hasPoint(intersection, true) &&\n                (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n                intersectionPoints.push(intersection);\n            }\n        }\n        return intersectionPoints;\n    }\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A).\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    closestLineIntersection(line, inVectorBoundsOnly = false) {\n        const allIntersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (allIntersections.length <= 0) {\n            // Empty polygon -> no intersections\n            return null;\n        }\n        // Find the closest intersection\n        let closestIntersection = new Vertex(Number.MAX_VALUE, Number.MAX_VALUE);\n        let curDist = Number.MAX_VALUE;\n        for (var i in allIntersections) {\n            const curVert = allIntersections[i];\n            const dist = curVert.distance(line.a);\n            if (dist < curDist) {\n                // && line.hasPoint(curVert)) {\n                curDist = dist;\n                closestIntersection = curVert;\n            }\n        }\n        return closestIntersection;\n    }\n    /**\n     * Construct a new polygon from this polygon with more vertices on each edge. The\n     * interpolation count determines the number of additional vertices on each edge.\n     * An interpolation count of `0` will return a polygon that equals the source\n     * polygon.\n     *\n     * @param {number} interpolationCount\n     * @returns {Polygon} A polygon with `interpolationCount` more vertices (as as factor).\n     */\n    getInterpolationPolygon(interpolationCount) {\n        const verts = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            const curVert = this.vertices[i];\n            const nextVert = this.vertices[(i + 1) % this.vertices.length];\n            verts.push(curVert.clone());\n            // Add interpolation points\n            if (!this.isOpen || i + 1 !== this.vertices.length) {\n                const lerpAmount = 1.0 / (interpolationCount + 1);\n                for (var j = 1; j <= interpolationCount; j++) {\n                    verts.push(curVert.clone().lerp(nextVert, lerpAmount * j));\n                }\n            }\n        }\n        return new Polygon(verts, this.isOpen);\n    }\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    getEvenDistributionPolygon(pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        const result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        let polygonPoint = new Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        const perimeter = this.perimeter();\n        const stepSize = perimeter / pointCount;\n        const n = this.vertices.length;\n        let polygonIndex = 1;\n        let nextPolygonPoint = new Vertex(this.vertices[1]);\n        let segmentLength = polygonPoint.distance(nextPolygonPoint);\n        let loopMax = this.isOpen ? n : n + 1;\n        let curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                let newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @return {Polygon} The cloned polygon.\n     */\n    clone() {\n        return new Polygon(this.vertices.map(vert => vert.clone()), this.isOpen);\n    }\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += addX * addY * 0.5;\n            total -= subX * subY * 0.5;\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @modified 2022-11-28 Added the `clone` method.\n * @modified 2023-09-29 Added the `randomPoint` method.\n * @version  1.7.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Generate a random point inside this bounds object. Safe areas at the border to avoid\n     * included.\n     *\n     * @method randomPoint\n     * @instance\n     * @memberof Bounds\n     * @param {horizontalSafeArea} - (optional) The horizonal (left and right) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval.\n     * @param {verticalSafeArea} - (optional) The vertical (top and bottom) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval\n     * @returns {Vertex} A pseudo random point inside these bounds.\n     */\n    randomPoint(horizontalSafeArea = 0, verticalSafeArea = 0) {\n        // Check if the safe areas are meant as percent\n        const absHorizontalSafeArea = horizontalSafeArea > 0 && horizontalSafeArea < 1 ? this.width * horizontalSafeArea : horizontalSafeArea;\n        const absVerticalSafeArea = verticalSafeArea > 0 && verticalSafeArea < 1 ? this.height * verticalSafeArea : verticalSafeArea;\n        return new Vertex(this.min.x + absHorizontalSafeArea + Math.random() * (this.width - 2 * absHorizontalSafeArea), this.min.y + absVerticalSafeArea + Math.random() * (this.height - 2 * absVerticalSafeArea));\n    }\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    toString() {\n        return `{ min: ${this.min.toString()}, max : ${this.max.toString()}, width: ${this.width}, height : ${this.height} }`;\n    }\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {Bounds} Creates a deep clone of this bounds object.\n     */\n    clone() {\n        return new Bounds({ x: this.min.x, y: this.min.y }, { x: this.max.x, y: this.max.y });\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    static fromDimension(width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-25 Added the `getOrthogonal` method.\n * @version  1.5.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    /**\n     * The inverse of a vector is a vector with the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    }\n    /**\n     * Get the orthogonal \"vector\" of this vector (rotated by 90° clockwise).\n     *\n     * @name getOrthogonal\n     * @method getOrthogonal\n     * @return {Vector} A new vector with the same length that stands on this vector's point a.\n     * @instance\n     * @memberof Vector\n     **/\n    getOrthogonal() {\n        // Orthogonal of vector (0,0)->(x,y) is (0,0)->(-y,x)\n        const linePoint = this.a.clone();\n        const startPoint = this.b.clone().sub(this.a);\n        const tmp = startPoint.x;\n        startPoint.x = -startPoint.y;\n        startPoint.y = tmp;\n        return new Vector(linePoint, startPoint.add(this.a));\n    }\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        const angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        const vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 The `CubicBezierCurve` class now implements the new `PathSegment` interface.\n * @version 2.7.1\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        const tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        const startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        const endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    }\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    }\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    //---BEGIN PathSegment-------------------------\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.endControlPoint;\n    }\n    //---END PathSegment-------------------------\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    }\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 2.5.0\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaleFactor) {\n        // var scaleFactors : XYCoords = { x : scaleFactor, y : scaleFactor };\n        // for (var i = 0; i < this.bezierCurves.length; i++) {\n        //   var curve = this.bezierCurves[i];\n        //   curve.getStartPoint().scale(scaleFactor, anchor);\n        //   curve.getStartControlPoint().scale(scaleFactor, anchor);\n        //   curve.getEndControlPoint().scale(scaleFactor, anchor);\n        //   // Do NOT scale the end point here!\n        //   // Don't forget that the curves are connected and on curve's end point\n        //   // the the successor's start point (same instance)!\n        // }\n        // // Finally move the last end point (was not scaled yet)\n        // if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n        //   this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaleFactor, anchor);\n        // }\n        // this.updateArcLengths();\n        // return this;\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scaleXY(scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    getEvenDistributionVertices(pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        const result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        const perimeter = this.totalArcLength;\n        const stepSize = perimeter / (pointCount - 1);\n        const n = this.bezierCurves.length;\n        let curveIndex = 0;\n        let segmentLength = this.bezierCurves[0].arcLength;\n        let curSegmentU = stepSize;\n        let i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        const arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = new Vertex();\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular !== null && adjustCircular !== void 0 ? adjustCircular : false;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @version  1.4.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    containsPoint(point) {\n        return this.center.distance(point) < this.radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {Vertex} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    lineIntersection(a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        const interA = new Vertex();\n        const interB = new Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        const transA = new Vertex(a).sub(this.center);\n        const transB = new Vertex(b).sub(this.center);\n        const diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        const dist = transA.distance(transB);\n        const det = transA.x * transB.y - transA.y * transB.x;\n        const distSquared = dist * dist;\n        const radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        const belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        const sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line(interA.add(this.center), interB.add(this.center));\n        // return new Line(interA, interB);\n    }\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    closestPoint(vert) {\n        const lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                     Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n     */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle)\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-11-10 Tweaking some type issues.\n * @modified 2023-02-04 Fixed a typo in the CSS classname for cubic Bézier paths: cubicBezier (was cubierBezier).\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Added initialization checks for null parameters.\n * @modified 2023-09-29 Added a missing implementation to the `drawurilssvg.do(XYCoords,string)` function. Didn't draw anything.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  1.6.7\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nconst RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs) {\n        /**\n         * Use this flag for internally enabling/disabling line dashes.\n         */\n        this.lineDashEnabled = true;\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = Boolean(isSecondary);\n        this.lineDash = [];\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            if (!gNode || !bufferGNode || !nodeDefs || !bufferNodeDefs) {\n                throw \"Cannot create secondary svg draw lib with undefinde gNode|bufferGNode|nodeDefs|bufferNodeDefs.\";\n            }\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    addStyleDefs(drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            // \"bezier\": \"CubicBezierCurve\", // TODO: is this correct?\n            \"bezierPath\": \"BezierPath\",\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Adds the internal <defs> node.\n     */\n    addDefsNode() {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    }\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    addCustomStyleDefs(defs) {\n        const buffer = [];\n        defs.forEach((value, key) => {\n            buffer.push(key + \" { \" + value + \" }\");\n        });\n        this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + buffer.join(\"\\n\");\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        if (!key) {\n            return null;\n        }\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        if (this.lineDashEnabled && this.lineDash && this.lineDash.length > 0 && drawutilssvg.nodeSupportsLineDash(nodeName)) {\n            node.setAttribute(\"stroke-dasharray\", this.lineDash.join(\" \"));\n        }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${className} ${this.curClassName}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes && color ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color || \"none\");\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig – this will work as long as `isSecondary===true`\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n     * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n     * for how line dashes work.\n     *\n     * @method\n     * @param {Array<number> lineDashes - The line-dash array configuration.\n     * @returns {void}\n     */\n    setLineDash(lineDashes) {\n        this.lineDash = lineDashes;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        const tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        const tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8) {\n        // // this.lineDashEnabled = false;\n        // const node: SVGElement = this.makeNode(\"path\");\n        // // var headLength: number = 8; // length of head in pixels\n        // var vertices: Array<Vertex> = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        // const d: Array<string | number> = [\"M\", this._x(zA.x), this._y(zA.y)];\n        // for (var i = 0; i <= vertices.length; i++) {\n        //   d.push(\"L\");\n        //   // Note: only use offset here (the vertices are already scaled)\n        //   d.push(this.offset.x + vertices[i % vertices.length].x);\n        //   d.push(this.offset.y + vertices[i % vertices.length].y);\n        // }\n        // node.setAttribute(\"d\", d.join(\" \"));\n        // return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n        const group = this.makeNode(\"g\");\n        const line = this.line(zA, zB, color, lineWidth);\n        const arrowHead = this.arrowHead(zA, zB, color, lineWidth, headLength);\n        group.appendChild(line);\n        group.appendChild(arrowHead);\n        return this._bindFillDraw(group, \"arrow\", color, lineWidth || 1);\n        return group;\n        // return line; // OR RETURN ARROW OR GROUP; TODO\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength = 8) {\n        const node = this.makeNode(\"path\");\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        // var headLength: number = 8; // length of head in pixels\n        var vertices = Vector.utils.buildArrowHead(endControlPoint, endPoint, headLength, this.scale.x, this.scale.y);\n        // const d: Array<string | number> = [\"M\", this._x(zA.x), this._y(zA.y)];\n        // const d: Array<string | number> = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicbezierarrow\", color, lineWidth || 1);\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8) {\n        const node = this.makeNode(\"path\");\n        // var headLength: number = 8; // length of head in pixels\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        // const d: Array<string | number> = [\"M\", this._x(zA.x), this._y(zA.y)];\n        const d = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        for (var i = 1; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrowhead\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size, alpha = 1.0) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", `${alpha}`);\n                // }\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // const basePolygonBounds: Bounds = polygon.getBounds();\n        const rotatedScalingOrigin = new Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        // const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        const clipPathNode = this.makeNode(\"clipPath\");\n        const clipPathId = `clippath_${UIDGenerator.next()}`; // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        const gNode = this.makeNode(\"g\");\n        const imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", `${this._x(rotatedScalingOrigin.x)}`);\n        imageNode.setAttribute(\"y\", `${this._y(rotatedScalingOrigin.y)}`);\n        imageNode.setAttribute(\"width\", `${textureSize.width}`);\n        imageNode.setAttribute(\"height\", `${textureSize.height}`);\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", `rotate(${rotation * RAD_TO_DEG}, ${this._x(rotatedScalingOrigin.x)}, ${this._y(rotatedScalingOrigin.y)})`);\n        const pathNode = this.makeNode(\"path\");\n        const pathData = [];\n        if (polygon.vertices.length > 0) {\n            const self = this;\n            pathData.push(\"M\", `${this._x(polygon.vertices[0].x)}`, `${this._y(polygon.vertices[0].y)}`);\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", `${this._x(polygon.vertices[i].x)}`, `${this._y(polygon.vertices[i].y)}`);\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", `${this._x(rotatedScalingOrigin.x)} ${this._y(rotatedScalingOrigin.y)}`);\n        gNode.setAttribute(\"transform\", `scale(${this.scale.x}, ${this.scale.y})`);\n        const clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", `url(#${clipPathId})`);\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        const node = this.makeNode(\"path\");\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezier\", color, lineWidth);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.lineDashEnabled = false;\n        this.line(startPoint, endPoint, \"rgb(128,128,128,0.5)\");\n        this.lineDashEnabled = true;\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        node.setAttribute(\"x1\", `${this._x(p.x)}`);\n        node.setAttribute(\"y1\", `${this._y(p.y)}`);\n        node.setAttribute(\"x2\", `${this._x(p.x)}`);\n        node.setAttribute(\"y2\", `${this._y(p.y)}`);\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth) {\n        const node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {XYCoords} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        var _a, _b, _c;\n        options = options || {};\n        const color = options.color || \"black\";\n        const lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        const textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        const transformOrigin = `${this._x(x)}px ${this._y(y)}px`;\n        const translate = `translate(${this._x(x)} ${this._y(y) + lineHeight / 2})`;\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        const rotate = options.rotation ? `rotate(${options.rotation * RAD_TO_DEG} 0 0)` : ``;\n        const node = this.makeNode(\"g\");\n        const curId = this.curId;\n        this.curId = curId + \"_text\";\n        const textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", (_c = options.fontFamily) !== null && _c !== void 0 ? _c : \"\"); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? `${options.fontSize * this.scale.x}` : \"\");\n        textNode.setAttribute(\"font-style\", options.fontStyle ? `${options.fontStyle}` : \"\");\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? `${options.fontWeight}` : \"\");\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation, color) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${x},${y}), rotate(${((rotation || 0) / Math.PI) * 180})`);\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = null; // undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = null; // undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n    static nodeSupportsLineDash(nodeName) {\n        return [\"line\", \"path\", \"circle\", \"ellipse\"].includes(nodeName);\n    }\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Removed unused method stub for texturedPoly helper function (cleanup).\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  1.13.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { Vector } from \"./Vector\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        /**\n         * Use this flag for internally enabling/disabling line dashes.\n         */\n        this.lineDashEnabled = true;\n        this.ctx = context;\n        this.lineDash = [];\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    }\n    /**\n     * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n     * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n     * for how line dashes work.\n     *\n     * @method\n     * @param {Array<number> lineDashes - The line-dash array configuration.\n     * @returns {void}\n     */\n    setLineDash(lineDash) {\n        this.lineDash = lineDash;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8) {\n        // var headLength: number = 8; // length of head in pixels\n        // this.ctx.save();\n        // this.ctx.beginPath();\n        // var vertices: Array<Vertex> = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        // this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        // for (var i = 0; i < vertices.length; i++) {\n        //   this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        // }\n        // this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        // this.ctx.lineWidth = lineWidth || 1;\n        // this._fillOrDraw(color);\n        // this.ctx.restore();\n        this.line(zA, zB, color, lineWidth); // Will use dash configuration\n        this.arrowHead(zA, zB, color, lineWidth, headLength);\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        this.cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth);\n        this.arrowHead(endControlPoint, endPoint, color, lineWidth, headLength);\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8) {\n        // var headLength: number = 8; // length of head in pixels\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line dash for arrow heads\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        // this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        // for (var i = 0; i < vertices.length; i++) {\n        //   this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        // }\n        this.ctx.moveTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 1.0) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        // var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var targetCenterDifference = new Vertex(polygonPosition.x, polygonPosition.y).difference(basePolygonBounds.getCenter());\n        // var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    }\n    /*\n    _texturedPoly(\n      textureImage: HTMLImageElement,\n      textureSize: Bounds,\n      polygon: Polygon,\n      polygonPosition: XYCoords,\n      rotation: number,\n      rotationCenter: XYCoords = { x: 0, y: 0 }\n    ): void {\n      var basePolygonBounds = polygon.getBounds();\n      var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n      var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n      // var rotationalOffset = { x: 0, y: 0 };\n      var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n  \n      // Get the position offset of the polygon\n      var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n      var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n  \n      this.ctx.save();\n  \n      // this.ctx.translate(\n      //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n      //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      // );\n      this.ctx.translate(\n        this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      );\n      this.ctx.rotate(rotation);\n  \n      drawutils.helpers.clipPoly(\n        this.ctx,\n        {\n          x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n          y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        },\n        this.scale,\n        polygon.vertices\n      );\n      this.ctx.drawImage(\n        textureImage,\n        0,\n        0,\n        textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x,\n        (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y,\n        targetTextureSize.x * this.scale.x,\n        targetTextureSize.y * this.scale.y\n      );\n  \n      // const scaledTextureSize = new Bounds(\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n      //   ).scaleXY(this.scale, rotationCenter),\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n      //   ).scaleXY(this.scale, rotationCenter)\n      // );\n      // this.ctx.drawImage(\n      //   textureImage,\n      //   0,\n      //   0,\n      //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n      //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n      //   scaledTextureSize.min.x,\n      //   scaledTextureSize.min.y,\n      //   scaledTextureSize.width,\n      //   scaledTextureSize.height\n      // );\n  \n      this.ctx.restore();\n    }\n    */\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {XYCoords} startPoint   - The start point of the cubic Bézier curve\n     * @param {XYCoords} controlPoint - The control point the cubic Bézier curve.\n     * @param {XYCoords} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        if (!path || path.length == 0) {\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        // console.log(\"Draw handle line\");\n        this.lineDashEnabled = false;\n        this.line(startPoint, endPoint, \"rgba(128,128,128, 0.5)\");\n        this.lineDashEnabled = true;\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {XYCoords} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        this.ctx.beginPath();\n        this.ctx.lineWidth = (lineWidth || 1.0) * this.scale.x;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        let relX = this.offset.x + x * this.scale.x;\n        let relY = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : `\"${options.fontFamily}\"`\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        const rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        const lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.setLineDash(this.lineDashEnabled ? this.lineDash : []);\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\ndrawutils.helpers = {\n    // A helper function to define the clipping path.\n    // This could be a candidate for the draw library.\n    clipPoly: (ctx, offset, scale, vertices) => {\n        ctx.beginPath();\n        // Set clip mask\n        ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n        for (var i = 1; i < vertices.length; i++) {\n            const vert = vertices[i];\n            ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n        }\n        ctx.closePath();\n        ctx.clip();\n    }\n};\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  0.0.10\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext|null} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    /**\n     * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n     * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n     * for how line dashes work.\n     *\n     * @method\n     * @param {Array<number> lineDashes - The line-dash array configuration.\n     * @returns {void}\n     */\n    setLineDash(lineDashes) {\n        // TODO\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 0.0) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {VertXYCoordsex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version   2.6.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    } // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    }\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        // Cast to non-null here because we know there _is_ an intersection\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n    },\n    min3(a, b, c) {\n        return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && 1 - s - t > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    }\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = (e) => {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = (e) => {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = (e) => {\n            _self.fireUpEvent(e, _self);\n        }));\n    }\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    }\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    destroy() {\n        this.releaseListeners();\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\n// prettier-ignore\nKeyHandler.KEY_CODES = {\n    'break': 3,\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29,\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46,\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91,\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93,\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108,\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169,\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173,\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181,\n    'unmute': 181,\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191,\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251,\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers[\"mousemove\"] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX, y: e.offsetY };\n    }\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(event, eventName) {\n        var _a, _b;\n        const rel = this.relPos(event);\n        const xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button,\n            leftButton: event.button === 0,\n            middleButton: event.button === 1,\n            rightButton: event.button === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    }\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    }\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-25 Fixed a type error in the constructor. Nothing vital.\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class PBText {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex();\n        this.color = options === null || options === void 0 ? void 0 : options.color;\n        this.fontFamily = options === null || options === void 0 ? void 0 : options.fontFamily;\n        this.fontSize = options === null || options === void 0 ? void 0 : options.fontSize;\n        this.fontStyle = options === null || options === void 0 ? void 0 : options.fontStyle;\n        this.fontWeight = options === null || options === void 0 ? void 0 : options.fontWeight;\n        this.lineHeight = options === null || options === void 0 ? void 0 : options.lineHeight;\n        this.textAlign = options === null || options === void 0 ? void 0 : options.textAlign;\n        this.rotation = options === null || options === void 0 ? void 0 : options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\n//# sourceMappingURL=PBText.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  1.3.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector(point, endPointB);\n        }\n        else {\n            return new Vector(point, endPointA);\n        }\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection (ignore that the result might be null in some extreme cases)\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author   Ikaros Kappler\n * @date     2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-11-01 Tweaked the `endpointToCenterParameters` function to handle negative values, too, without errors.\n * @version  1.1.1\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                if (intersection) {\n                    // It's VERY LIKELY hat this ALWAYS happens; it's just a typesave variant.\n                    // Intersection cannot be null.\n                    let startDiff = startPoint.difference(intersection);\n                    let endDiff = endPoint.difference(intersection);\n                    let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                    curves.push(curve);\n                }\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    },\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        // const M: number = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const M = sqrt(Math.abs((prx * pry - prx * py - pry * px) / (prx * py + pry * px))) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        // console.log(\"VELLIPSE::::::\", ellipse);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @modified 2022-10-25 Added the `origin` to the default draw config.\n * @modified 2022-11-06 Adding an XML declaration to the SVG export routine.\n * @modified 2022-11-23 Added the `drawRaster` (default=true) option to the config/drawconfig.\n * @modified 2023-02-04 Fixed a bug in the `drawDrawable` function; fill's current classname was not set.\n * @modified 2023-02-10 Fixing an issue of the `style.position` setting when `fitToParent=true` from `absolute` to `static` (default).\n * @modified 2023-02-10 Cleaning up most type errors in the main class (mostly null checks).\n * @modified 2023-02-10 Adding `enableZoom` and `enablePan` (both default true) to have the option to disable these functions.\n * @modified 2023-09-29 Adding proper dicionary key and value types to the params of `PlotBoilerplate.utils.safeMergeByKeys` (was `object` before).\n * @version  1.17.3\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { PBText } from \"./PBText\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enablePan=true] - (default true) Set to false if you want to disable panning completely.\n     * @param {boolean=} [config.enableZoom=true] - (default true) Set to false if you want to disable zooming completely.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    constructor(config) {\n        var _a, _b;\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas === \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            enableZoom: f.bool(config, \"enableZoom\", true),\n            enablePan: f.bool(config, \"enablePan\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            // bezierPath: {\n            //   color: \"#0022a8\",\n            //   lineWidth: 1\n            // },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            },\n            origin: {\n                color: \"#000000\"\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas === \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        if (typeof canvasElement === \"undefined\") {\n            throw `Cannot initialize PlotBoilerplate with a null canvas (element \"${config.canvas} not found).`;\n        }\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                // Override the case 'null' here. If GL is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                // Override the case 'null' here. If context creation is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set((_a = this.config.scaleX) !== null && _a !== void 0 ? _a : 1.0, this.config.scaleY);\n        this.fill.scale.set((_b = this.config.scaleX) !== null && _b !== void 0 ? _b : 1.0, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear) {\n            pb.config.preClear();\n        }\n        tosvgDraw.clear(pb.config.backgroundColor || \"white\");\n        if (pb.config.preDraw) {\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        }\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        // Add: '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' ?\n        var blob = new Blob(['<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        var _a, _b, _c, _d;\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_a = this.config.cssScaleX) !== null && _a !== void 0 ? _a : 1.0, (_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_c = this.config.cssScaleX) !== null && _c !== void 0 ? _c : 1.0, (_d = this.config.cssScaleY) !== null && _d !== void 0 ? _d : 1.0);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            for (var i = 0; i < drawable.vertices.length; i++) {\n                this.vertices.push(drawable.vertices[i]);\n            }\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0) {\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                }\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else if (drawable instanceof PBText) {\n            this.vertices.push(drawable.anchor);\n            this.drawables.push(drawable);\n            drawable.anchor.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                    else if (drawable instanceof PBText) {\n                        this.removeVertex(drawable.anchor, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var _a, _b;\n        const p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min((_a = this.config.cssScaleX) !== null && _a !== void 0 ? _a : 1.0, (_b = this.config.cssScaleY) !== null && _b !== void 0 ? _b : 1.0));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, this.drawConfig.origin.color);\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.fill.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            var curveIndex = 0;\n            for (var c in d.bezierCurves) {\n                // Restore these settings again in each loop (will be overwritten)\n                this.draw.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.fill.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.draw.setCurrentClassName(d.className);\n                this.fill.setCurrentClassName(d.className);\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h2`);\n                        df.setCurrentClassName(`${d.className}-start-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h3`);\n                        df.setCurrentClassName(`${d.className}-end-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.handleLine(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.handleLine(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint);\n                }\n                curveIndex++;\n            } // END for\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.handleLine(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.handleLine(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(`${d.uid}_a0`);\n                draw.setCurrentClassName(`${d.className}-anchor`);\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        if (this.config.drawRaster) {\n            this.drawGrid(draw);\n        }\n        if (this.config.drawOrigin) {\n            this.drawOrigin(draw);\n        }\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(null);\n        draw.setCurrentClassName(null);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor || \"white\");\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        var _a, _b;\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * ((_a = this.config.cssScaleX) !== null && _a !== void 0 ? _a : 1.0), this.canvasSize.height * ((_b = this.config.cssScaleY) !== null && _b !== void 0 ? _b : 1.0)));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        var _a, _b, _c, _d, _e, _f;\n        const _self = this;\n        const _setSize = (w, h) => {\n            var _a, _b;\n            w *= (_a = _self.config.canvasWidthFactor) !== null && _a !== void 0 ? _a : 1.0;\n            h *= (_b = _self.config.canvasHeightFactor) !== null && _b !== void 0 ? _b : 1.0;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = ((_a = _self.config.canvasWidthFactor) !== null && _a !== void 0 ? _a : 1.0) * width + \"px\";\n            _self.canvas.style.height = ((_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0) * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"static\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = ((_c = _self.config.canvasWidthFactor) !== null && _c !== void 0 ? _c : 1.0) * space.width + \"px\";\n            _self.canvas.style.height = ((_d = _self.config.canvasHeightFactor) !== null && _d !== void 0 ? _d : 1.0) * space.height + \"px\";\n            _self.canvas.style.top = \"\";\n            _self.canvas.style.left = \"\";\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = \"\";\n            _self.canvas.style.height = \"\";\n            _setSize((_e = _self.config.defaultCanvasWidth) !== null && _e !== void 0 ? _e : 1024, (_f = _self.config.defaultCanvasHeight) !== null && _f !== void 0 ? _f : 768);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        const _self = this;\n        var point = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX || 1.0, _self.config.cssScaleY || 1.0));\n        if (point) {\n            _self.vertices[point.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (point.typeName == \"bpath\") {\n                    let vert = _self.paths[point.pindex].bezierCurves[point.cindex].getPointByID(point.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (point.typeName == \"vertex\") {\n                    let vert = _self.vertices[point.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler && this.keyHandler.isDown(\"y\")) {\n                _self.vertices[point.vindex].attr.bezierAutoAdjust = !_self.vertices[point.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var draggablePoint = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!draggablePoint)\n            return;\n        // Drag all selected elements?\n        if (draggablePoint.typeName == \"vertex\" && _self.vertices[draggablePoint.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[draggablePoint.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(draggablePoint);\n            if (draggablePoint.typeName == \"bpath\")\n                _self.paths[draggablePoint.pindex].bezierCurves[draggablePoint.cindex]\n                    .getPointByID(draggablePoint.pid)\n                    .listeners.fireDragStartEvent(e);\n            else if (draggablePoint.typeName == \"vertex\")\n                _self.vertices[draggablePoint.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler && (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\"))) {\n            if (!this.config.enablePan) {\n                return;\n            }\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        if (!this.config.enableZoom) {\n            return;\n        }\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                if (!touchDownPos || !touchMovePos) {\n                                    return;\n                                }\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                if (!this.config.enablePan) {\n                                    return;\n                                }\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                if (!touchDownPos) {\n                                    return;\n                                }\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            if (!this.config.enableZoom) {\n                                return;\n                            }\n                            const touchItem0 = evt.touches.item(0);\n                            const touchItem1 = evt.touches.item(1);\n                            if (!evt.touches || !multiTouchStartScale || !touchItem0 || !touchItem1) {\n                                return;\n                            }\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(touchItem0.clientX, touchItem0.clientY);\n                            const fingerB = new Vertex(touchItem1.clientX, touchItem1.clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k)) {\n                continue;\n            }\n            if (base.hasOwnProperty(k)) {\n                const typ = typeof base[k];\n                const extVal = extension[k];\n                try {\n                    if (typ == \"boolean\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Boolean(!!JSON.parse(extVal));\n                        else\n                            base[k] = extVal;\n                    }\n                    else if (typ == \"number\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Number(JSON.parse(extVal) * 1);\n                        else\n                            base[k] = extension[k];\n                    }\n                    else if (typ == \"function\" && typeof extVal == \"function\") {\n                        base[k] = extension[k];\n                    }\n                    else {\n                        // Probably a sting\n                        base[k] = extension[k];\n                    }\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extVal, e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /*\n    __safeMergeByKeys: <KeyType extends string | number | symbol, ValueType extends boolean | number | string | Function>(\n      base: Record<KeyType, ValueType>,\n      extension: Record<KeyType, string>\n    ): Record<KeyType, ValueType> => {\n      for (var k in extension) {\n        if (!extension.hasOwnProperty(k)) continue;\n        if (base.hasOwnProperty(k)) {\n          var typ = typeof base[k];\n          try {\n            if (typ == \"boolean\") base[k] = !!JSON.parse(extension[k]);\n            else if (typ == \"number\") base[k] = JSON.parse(extension[k]) * 1;\n            else if (typ == \"function\" && typeof extension[k] == \"function\") base[k] = extension[k];\n            else base[k] = extension[k];\n          } catch (e) {\n            console.error(\"error in key \", k, extension[k], e);\n          }\n        } else {\n          base[k] = extension[k];\n        }\n      }\n      return base;\n    },\n    *()\n\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        element.style[\"transform-origin\"] = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0) {\n            // element.style.transform = null;\n            element.style.removeProperty(\"transform\");\n        }\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    },\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map"],"names":["VertexAttr","[object Object]","key","this","draggable","selectable","isSelected","visible","model","UIDGenerator","current","VertexListeners","vertex","click","drag","dragStart","dragEnd","listener","_addListener","_removeListener","e","_fireEvent","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vertex","x","y","className","uid","next","tuple","NaN","attr","amountX","amountY","eqX","Math","abs","EPSILON","eqY","vert","sqrt","pow","origin","a","PI","atan2","factor","center","scaleXY","target","t","diff","difference","u","dist","distance","step","factors","angle","sub","len","ZERO","cos","sin","add","scalar","round","removeAllListeners","isDestroyed","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","console","warn","vertices","arrayToJSON","precision","JSON","stringify","map","undefined","Number","toFixed","VertTuple","b","factory","scale","amount","set","newA","line","v0","clone","v1","denominator","p","l2","vtutils","dist2","point","insideBoundsOnly","getClosestT","vertAt","toString","destroy","v","w","Line","super","numerator1","numerator2","isNaN","tmp","Polygon","isOpen","index","inside","j","xi","yi","xj","yj","area","signedArea","log","rotate","inVectorBoundsOnly","intersectionPoints","polyLine","intersection","hasPoint","allIntersections","lineIntersections","closestIntersection","MAX_VALUE","curDist","curVert","interpolationCount","verts","nextVert","lerpAmount","lerp","pointCount","Error","result","polygonPoint","stepSize","perimeter","n","polygonIndex","nextPolygonPoint","segmentLength","loopMax","curSegmentU","newPoint","lerpAbs","Bounds","computeFromVertices","qbezier","cc0","cc1","edgeCenter","limit","qdata","toQuadraticBezierData","buffer","join","threshold","cbezier","c","aCenter","bCenter","a2","b0","toCubicBezierData","pathdata","BezierPath","fromArray","total","l","sum","width","height","horizontalSafeArea","verticalSafeArea","absHorizontalSafeArea","absVerticalSafeArea","xMin","xMax","yMin","yMax","Vector","vertA","vertB","linePoint","startPoint","CubicBezierCurve","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","updateArcLengths","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","arcLength","pointA","pointB","curveStep","newLength","tmpLength","getPointAt","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","POSITIVE_INFINITY","NEGATIVE_INFINITY","id","d","t2","nt2","tX","tY","startVec","getTangentAt","endVec","inv","convertU2T","getPerpendicularAt","tangentVector","curve","equals","obj","prettyFormat","jsonString","parse","fromObject","arr","Array","isArray","pathPoints","totalArcLength","adjustCircular","bezierCurves","adjustSuccessorControlPoint","getLength","curveIndex","anchor","scaleFactor","scaleFactors","curveT","uMin","uTemp","relativeU","getPoint","getTangent","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","path","uBefore","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","curves","reverse","getCurveAt","moveCurvePoint","adjustPredecessorControlPoint","getCurveCount","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","getBounds","toJSON","bPath","lastCurve","isInstance","digits","listJSON","pointArray","fromReducedList","bezierPath","Circle","radius","circle","getClosestPoint","circleUtils","perp","p0","p1","h","p2","x3","y3","x4","y4","interA","interB","transA","transB","det","distSquared","belowSqrt","sign","lineIntersection","CircleSector","startAngle","endAngle","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","RAD_TO_DEG","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","lineDashEnabled","Boolean","lineDash","drawlibConfiguration","cache","Map","setSize","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","appendChild","nodeStyle","keys","polygon","triangle","ellipse","ellipseSector","circleSector","vector","image","text","rules","k","drawSettings","color","lineWidth","innerHTML","defs","forEach","value","nodeName","node","get","toUpperCase","delete","document","createElementNS","findElement","curId","blendMode","style","nodeSupportsLineDash","setAttribute","curClassName","parentNode","configuration","lineDashes","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","tmpGNode","tmpDefsNode","makeNode","_x","_y","_bindFillDraw","headLength","group","arrowHead","position","size","alpha","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","textureImage","textureSize","polygonPosition","rotation","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","cubicBezier","square","arcData","radiusX","radiusY","sizeX","sizeY","ceil","polyline","_a","_b","_c","lineHeight","fontSize","textAlign","transformOrigin","translate","textNode","fontFamily","fontStyle","fontWeight","inplace","copyPathData","transformPathData","lastChild","removeChild","data","copy","_stx","_sty","_sx","_sy","_slp","includes","HEAD_XML","drawutils","context","ctx","globalCompositeOperation","save","beginPath","setLineDash","moveTo","lineTo","strokeStyle","stroke","restore","_fillOrDraw","complete","globalAlpha","drawImage","basePolygonBounds","getCenter","targetTextureSize","targetTextureOffset","helpers","clipPoly","closePath","fillStyle","fill","bezierCurveTo","controlPoint","quadraticCurveTo","arc","asSegment","rect","relX","relY","font","indexOf","fillText","strokeText","Path2D","clearRect","canvas","fillRect","clip","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","Float32Array","_x2rel","_y2rel","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","centroid","getCentroid","tri","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","min3","max3","pointIsInTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","circleIntersB","circleIntersC","getIncircularTriangle","getCircumcircle","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","determinant","wrapMax","wrapMinMax","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","hasListener","lis","keyCode","handler","fireEvent","KEY_CODES","_keyDownListener","fireDownEvent","_keyPressListener","firePressEvent","_keyUpListener","fireUpEvent","removeEventListener","key2code","releaseListeners","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","callback","throwAlreadyInstalled","listenFor","unlistenFor","PBImage","upperLeft","lowerRight","PBText","getLen","getRotateAngle","v2","mr","dot","acos","getAngle","cross","HandlerAdmin","el","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","move","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","Date","pageX","pageY","dispatch","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","del","VEllipse","axis","signedRadiusH","signedRadiusV","radiusH","radiusV","foci","getFoci","angleA","centerAngle","endPointA","addX","endPointB","normal","normalAt","rh","rv","sdiff","addY","angles","equidistantVertAngles","quarterSegmentCount","segmentCount","curAngle","nextAngle","addXY","startTangent","tangentAt","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","r2d","fullEllipsePointCount","ellipseAngles","filter","startIndex","findClosestToStartAngle","ea","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","PlotBoilerplate","config","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","drawRaster","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableZoom","enablePan","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","handleLine","pathVertex","controlVertex","selectedVertex","grid","canvasElement","tagName","toLowerCase","eventCatcher","getContext","draw","copyInstance","parentElement","createElement","left","top","cursor","body","title","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","beginDrawCycle","drawAll","endDrawCycle","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","con","_d","setCSSscale","drawable","addDragListener","enableBezierPathAutoAdjust","removeWithVertices","remove","removeVertex","keepVertices","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","setCurrentClassName","setCurrentId","raster","crosshair","drawDrawable","df","squareHandle","_handleColor","diamondHandle","circleHandle","circleArc","arrow","error","drawDrawables","drawSelectPolygon","elem","propName","parseFloat","getComputedStyle","getPropertyValue","container","display","padding","getFProp","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_e","_f","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","getAvailableContainerSpace","containsVert","tolerance","Draggable","VERTEX","setVIndex","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","isDown","paths","pindex","cindex","getPointByID","pid","draggablePoint","fireDragStartEvent","oldDragAmount","fireDragEvent","handleClick","fireDragEndEvent","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","down","mouseDownHandler","mouseDragHandler","up","mouseUpHandler","mouseWheelHandler","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","touchItem0","item","touchItem1","fingerA","fingerB","window","clearSelection","selectVerticesInPolygon","props","createGUI","safeMergeByKeys","extension","hasOwnProperty","typ","extVal","removeProperty","transform","fallback","locateCurveByStartPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","locateCurveByEndPoint"],"mappings":"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"}