{"version":3,"file":"index.esm.min.js","sources":["../src/esm/VertexAttr.js","../src/esm/UIDGenerator.js","../src/esm/VertexListeners.js","../src/esm/Vertex.js","../src/esm/VertTuple.js","../src/esm/Line.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/Vector.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/Circle.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../src/esm/PBText.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js"],"sourcesContent":["/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2024-03-10 Fixed some types for Typescript 5 compatibility.\n * @version  1.1.2\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    removeAllListeners() {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    }\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-11-28 Added the `subXY`, `subX` and `subY` methods to the `Vertex` class.\n * @modified 2023-09-29 Downgraded types for the `Vertex.utils.buildArrowHead` function (replacing Vertex params by more generic XYCoords type).\n * @modified 2023-09-29 Added the `Vertex.abs()` method as it seems useful.\n * @modified 2024-03-08 Added the optional `precision` param to the `toString` method.\n * @version  2.9.0\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x- and y- components of this vertex.\n     *\n     * @method subXY\n     * @param {number} x - The amount to substract from x.\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subXY(amountX, amountY) {\n        this.x -= amountX;\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to substract from x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subX(amountX) {\n        this.x -= amountX;\n        return this;\n    }\n    /**\n     * Substract the passed amounts from the y-component of this vertex.\n     *\n     * @method subY\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    subY(amountY) {\n        this.y -= amountY;\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    lerp(target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    lerpAbs(target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scaleXY(factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Set both coordinates of this vertex to their absolute value (abs(x), abs(y)).\n     *\n     * @method abs\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     */\n    abs() {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString(precision) {\n        if (typeof precision === \"undefined\") {\n            return \"(\" + this.x + \",\" + this.y + \")\";\n        }\n        else {\n            return \"(\" + this.x.toFixed(precision) + \",\" + this.y.toFixed(precision) + \")\";\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        console.warn(\"[DEPRECATION] Vertex.utils.buildArrowHead is deprecated. Please use Vector.utils.buildArrowHead instead.\");\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    },\n    /**\n     * Convert the given vertices (array) to a JSON string.\n     *\n     * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n     * @returns {string}\n     */\n    arrayToJSON(vertices, precision) {\n        return JSON.stringify(vertices.map(function (vert) {\n            return typeof precision === undefined\n                ? { x: vert.x, y: vert.y }\n                : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n        }));\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-29 Fixed a calculation error in the VertTuple.hasPoint() function; distance measure was broken!\n * @version 1.2.1\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    }\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return distance < Vertex.EPSILON; // t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @modified 2023-09-25 Changed param type of `intersection()` from Line to VertTuple.\n * @version  2.3.0\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        const numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + a * (this.b.x - this.a.x);\n        const y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    getStartPoint() {\n        return this.a;\n    }\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    getEndPoint() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.b;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.a;\n    }\n    /**\n     * Inverse this path segment (in-place) and return this same instance (useful for chaining).\n     *\n     * @method reverse\n     * @memberof PathSegment\n     * @return {PathSegment} This path segment instance (for chaining).\n     */\n    reverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @modified 2023-09-25 Added the `Polygon.getInterpolationPolygon(number)` function.\n * @modified 2023-09-25 Added the `Polygon.lineIntersections(Line,boolean)` function.\n * @modified 2023-09-29 Added the `Polygon.closestLineIntersection(Line,boolean)` function.\n * @modified 2023-11-24 Added the `Polygon.containsPolygon(Polygon)' function.\n * @version 1.12.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == \"undefined\")\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen || false;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    }\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    /**\n     * Check if the passed polygon is completly contained inside this polygon.\n     *\n     * This means:\n     *  - all polygon's vertices must be inside this polygon.\n     *  - the polygon has no edge intersections with this polygon.\n     *\n     * @param {Polygon} polygon - The polygon to check if contained.\n     * @return {boolean}\n     */\n    containsPolygon(polygon) {\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            if (!this.containsVert(polygon.vertices[i])) {\n                return false;\n            }\n        }\n        // All vertices are inside; check for intersections\n        const lineSegment = new Line(new Vertex(), new Vertex());\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            lineSegment.a.set(polygon.vertices[i]);\n            lineSegment.b.set(polygon.vertices[(i + 1) % polygon.vertices.length]);\n            if (this.lineIntersections(lineSegment, true).length > 0) {\n                // Current segment has intersection(s) with this polygon.\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    perimeter() {\n        let length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    }\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    }\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    lineIntersections(line, inVectorBoundsOnly = false) {\n        // Find the intersections of all lines inside the edge bounds\n        const intersectionPoints = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            const polyLine = new Line(this.vertices[i], this.vertices[(i + 1) % this.vertices.length]);\n            const intersection = polyLine.intersection(line);\n            // true => only inside bounds\n            // ignore last edge if open\n            if ((!this.isOpen || i + 1 !== this.vertices.length) &&\n                intersection !== null &&\n                polyLine.hasPoint(intersection, true) &&\n                (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n                intersectionPoints.push(intersection);\n            }\n        }\n        return intersectionPoints;\n    }\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A).\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    closestLineIntersection(line, inVectorBoundsOnly = false) {\n        const allIntersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (allIntersections.length <= 0) {\n            // Empty polygon -> no intersections\n            return null;\n        }\n        // Find the closest intersection\n        let closestIntersection = new Vertex(Number.MAX_VALUE, Number.MAX_VALUE);\n        let curDist = Number.MAX_VALUE;\n        for (var i in allIntersections) {\n            const curVert = allIntersections[i];\n            const dist = curVert.distance(line.a);\n            if (dist < curDist) {\n                // && line.hasPoint(curVert)) {\n                curDist = dist;\n                closestIntersection = curVert;\n            }\n        }\n        return closestIntersection;\n    }\n    /**\n     * Construct a new polygon from this polygon with more vertices on each edge. The\n     * interpolation count determines the number of additional vertices on each edge.\n     * An interpolation count of `0` will return a polygon that equals the source\n     * polygon.\n     *\n     * @param {number} interpolationCount\n     * @returns {Polygon} A polygon with `interpolationCount` more vertices (as as factor).\n     */\n    getInterpolationPolygon(interpolationCount) {\n        const verts = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            const curVert = this.vertices[i];\n            const nextVert = this.vertices[(i + 1) % this.vertices.length];\n            verts.push(curVert.clone());\n            // Add interpolation points\n            if (!this.isOpen || i + 1 !== this.vertices.length) {\n                const lerpAmount = 1.0 / (interpolationCount + 1);\n                for (var j = 1; j <= interpolationCount; j++) {\n                    verts.push(curVert.clone().lerp(nextVert, lerpAmount * j));\n                }\n            }\n        }\n        return new Polygon(verts, this.isOpen);\n    }\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    getEvenDistributionPolygon(pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        const result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        let polygonPoint = new Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        const perimeter = this.perimeter();\n        const stepSize = perimeter / pointCount;\n        const n = this.vertices.length;\n        let polygonIndex = 1;\n        let nextPolygonPoint = new Vertex(this.vertices[1]);\n        let segmentLength = polygonPoint.distance(nextPolygonPoint);\n        let loopMax = this.isOpen ? n : n + 1;\n        let curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                let newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @return {Polygon} The cloned polygon.\n     */\n    clone() {\n        return new Polygon(this.vertices.map(vert => vert.clone()), this.isOpen);\n    }\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += addX * addY * 0.5;\n            total -= subX * subY * 0.5;\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @modified 2022-11-28 Added the `clone` method.\n * @modified 2023-09-29 Added the `randomPoint` method.\n * @version  1.7.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Generate a random point inside this bounds object. Safe areas at the border to avoid\n     * included.\n     *\n     * @method randomPoint\n     * @instance\n     * @memberof Bounds\n     * @param {horizontalSafeArea} - (optional) The horizonal (left and right) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval.\n     * @param {verticalSafeArea} - (optional) The vertical (top and bottom) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval\n     * @returns {Vertex} A pseudo random point inside these bounds.\n     */\n    randomPoint(horizontalSafeArea = 0, verticalSafeArea = 0) {\n        // Check if the safe areas are meant as percent\n        const absHorizontalSafeArea = horizontalSafeArea > 0 && horizontalSafeArea < 1 ? this.width * horizontalSafeArea : horizontalSafeArea;\n        const absVerticalSafeArea = verticalSafeArea > 0 && verticalSafeArea < 1 ? this.height * verticalSafeArea : verticalSafeArea;\n        return new Vertex(this.min.x + absHorizontalSafeArea + Math.random() * (this.width - 2 * absHorizontalSafeArea), this.min.y + absVerticalSafeArea + Math.random() * (this.height - 2 * absVerticalSafeArea));\n    }\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    toString() {\n        return `{ min: ${this.min.toString()}, max : ${this.max.toString()}, width: ${this.width}, height : ${this.height} }`;\n    }\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {Bounds} Creates a deep clone of this bounds object.\n     */\n    clone() {\n        return new Bounds({ x: this.min.x, y: this.min.y }, { x: this.max.x, y: this.max.y });\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    static fromDimension(width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-25 Added the `getOrthogonal` method.\n * @version  1.5.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    /**\n     * The inverse of a vector is a vector with the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    }\n    /**\n     * Get the orthogonal \"vector\" of this vector (rotated by 90° clockwise).\n     *\n     * @name getOrthogonal\n     * @method getOrthogonal\n     * @return {Vector} A new vector with the same length that stands on this vector's point a.\n     * @instance\n     * @memberof Vector\n     **/\n    getOrthogonal() {\n        // Orthogonal of vector (0,0)->(x,y) is (0,0)->(-y,x)\n        const linePoint = this.a.clone();\n        const startPoint = this.b.clone().sub(this.a);\n        const tmp = startPoint.x;\n        startPoint.x = -startPoint.y;\n        startPoint.y = tmp;\n        return new Vector(linePoint, startPoint.add(this.a));\n    }\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {XYCoords} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        const angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        const vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 The `CubicBezierCurve` class now implements the new `PathSegment` interface.\n * @modified 2023-09-30 Added the function `CubicbezierCurve.getSubCurve(number,number)` – similar to `getSubCurveAt(...)` but with absolute position parameters.\n * @modified 2023-10-07 Added the `trimEnd`, `trimEndAt`, `trimStart`, `trimStartAt` methods.\n * @version 2.8.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        const tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    /**\n     * Trim off a start section of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimStartAt`.\n     *\n     * @method trimStart\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimStart(uValue) {\n        return this.trimStartAt(this.convertU2T(uValue));\n    }\n    /**\n     * Trim off a start section of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * @method trimStartAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimStartAt(t) {\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, t, 1.0);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Trim off the end of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[0,uValue]` (so `[1.0-uValue,1.0]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimEndAt`.\n     *\n     * @method trimEnd\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimEnd(uValue) {\n        return this.trimEndAt(this.convertU2T(uValue));\n    }\n    /**\n     * Trim off the end of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[0,t]` (so `[1.0-t,1.0]` is cut off).\n     *\n     * @method trimEndAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    trimEndAt(t) {\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, 0.0, t);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Get a sub curve at the given start end end positions (values on the curve's length, between 0 and curve.arcLength).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurve\n     * @param {number} tStart – The start position of the desired sub curve (must be in [0..arcLength]).\n     * @param {number} tEnd – The end position if the desired cub curve (must be in [0..arcLength]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurve(uStart, uEnd) {\n        return this.getSubCurveAt(this.convertU2T(uStart), this.convertU2T(uEnd));\n    }\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        // const startVec: Vector = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        // const endVec: Vector = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // // Tangents are relative. Make absolute.\n        // startVec.b.add(startVec.a);\n        // endVec.b.add(endVec.a);\n        // // This 'splits' the curve at the given point at t.\n        // startVec.scale(0.33333333 * (tEnd - tStart));\n        // endVec.scale(0.33333333 * (tEnd - tStart));\n        // // Draw the bezier curve\n        // // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        // return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n        const subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, tStart, tEnd);\n        return new CubicBezierCurve(subCurbePoints[0], subCurbePoints[1], subCurbePoints[2], subCurbePoints[3]);\n    }\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    }\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    //---BEGIN PathSegment-------------------------\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    getStartTangent() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    getEndTangent() {\n        return this.endControlPoint;\n    }\n    //---END PathSegment-------------------------\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    }\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n/**\n * Helper utils.\n */\nCubicBezierCurve.utils = {\n    /**\n     * Get the points of a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurvePointsAt\n     * @param {CubicBezierCurve} curve – The curve to get the sub curve points from.\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurvePointsAt: (curve, tStart, tEnd) => {\n        const startVec = new Vector(curve.getPointAt(tStart), curve.getTangentAt(tStart));\n        const endVec = new Vector(curve.getPointAt(tEnd), curve.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        return [startVec.a, endVec.a, startVec.b, endVec.b];\n    }\n};\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2023-10-06 Adding the `BezierPath.toPathPoints()` method.\n * @modified 2023-10-07 Adding the `BezierPath.fromCurve(CubicBezierCurve)` static function.\n * @version 2.6.0\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor() {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        // pathPoints: Array<Vertex> | undefined | null) {\n        this.uid = UIDGenerator.next();\n        // if (!pathPoints) {\n        //   pathPoints = [];\n        // }\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaleFactor) {\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scaleXY(scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    getEvenDistributionVertices(pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        const result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        const perimeter = this.totalArcLength;\n        const stepSize = perimeter / (pointCount - 1);\n        const n = this.bezierCurves.length;\n        let curveIndex = 0;\n        let segmentLength = this.bezierCurves[0].arcLength;\n        let curSegmentU = stepSize;\n        let i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(); // undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof BezierPath\n     */\n    destroy() {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n    /**\n     * Convert this path to an array of path points that can be drawn by the default DrawLib\n     * implementations.\n     *\n     * @method toPathPoints\n     * @instance\n     * @memberof BezierPath\n     * @return {Array<XYCoords>}\n     */\n    toPathPoints() {\n        if (this.bezierCurves.length === 0) {\n            return [];\n        }\n        if (this.bezierCurves.length === 1) {\n            return [\n                this.bezierCurves[0].startPoint,\n                this.bezierCurves[0].startControlPoint,\n                this.bezierCurves[0].endControlPoint,\n                this.bezierCurves[0].endPoint\n            ];\n        }\n        const arr = [];\n        arr.push(this.bezierCurves[0].startPoint);\n        arr.push(this.bezierCurves[0].startControlPoint);\n        for (var i = 1; i < this.bezierCurves.length; i++) {\n            arr.push(this.bezierCurves[i - 1].endControlPoint);\n            arr.push(this.bezierCurves[i - 1].endPoint);\n            arr.push(this.bezierCurves[i].startPoint);\n            arr.push(this.bezierCurves[i].startControlPoint);\n        }\n        arr.push(this.bezierCurves[0].endControlPoint);\n        arr.push(this.bezierCurves[0].endPoint);\n        return arr;\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Construct a new path with a single curve. Adding more curves is always possible.\n     *\n     * @method fromCurve\n     * @param {CubicBezierCurve} curve - The curve to construct a new path from.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The constructed bezier path instance.\n     */\n    static fromCurve(curve) {\n        const path = new BezierPath(); // []);\n        path.addCurve(curve);\n        return path;\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj)) {\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        }\n        const arr = obj; // FORCE?\n        if (arr.length < 1) {\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        }\n        // Create an empty bezier path\n        var bPath = new BezierPath(); // undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(); // null); // No points yet\n        var startPoint = new Vertex();\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular !== null && adjustCircular !== void 0 ? adjustCircular : false;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @version  1.4.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    containsPoint(point) {\n        return this.center.distance(point) < this.radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {Vertex} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    lineIntersection(a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        const interA = new Vertex();\n        const interB = new Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        const transA = new Vertex(a).sub(this.center);\n        const transB = new Vertex(b).sub(this.center);\n        const diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        const dist = transA.distance(transB);\n        const det = transA.x * transB.y - transA.y * transB.x;\n        const distSquared = dist * dist;\n        const radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        const belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        const sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line(interA.add(this.center), interB.add(this.center));\n        // return new Line(interA, interB);\n    }\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    closestPoint(vert) {\n        const lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                     Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @modified 2024-01-30 Added a missing type in the `describeSVGArc` function.\n * @modified 2024-03-01 Added the `getStartPoint` and `getEndPoint` methods.\n * @modified 2024-03-08 Added the `containsAngle` method.\n * @modified 2024-03-09 Added the `circleSectorIntersection` method to find coherent sector intersections..\n * @modified 2024-03-09 Added the `angleAt` method to determine any angle at some ratio.\n * @version  1.2.0\n **/\nimport { Circle } from \"./Circle\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof CircleSector\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    containsAngle(angle) {\n        if (this.startAngle <= this.endAngle) {\n            return angle >= this.startAngle && angle < this.endAngle;\n        }\n        else {\n            // startAngle > endAngle\n            return angle >= this.startAngle || angle < this.endAngle;\n        }\n    }\n    /**\n     * Get the angle inside this sector for a given ratio. 0.0 means startAngle, and 1.0 means endAngle.\n     *\n     * @param {number} t - The ratio inside [0..1].\n     * @method angleAt\n     * @instance\n     * @memberof CircleSector\n     * @return {number} The angle inside this sector at a given ratio.\n     */\n    angleAt(t) {\n        if (this.startAngle <= this.endAngle) {\n            const angleAtRatio = this.startAngle + (this.endAngle - this.startAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n        else {\n            // startAngle > endAngle\n            const angleAtRatio = this.startAngle + (Math.PI * 2 - this.startAngle + this.endAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n    }\n    /**\n     * Get the sectors starting point (on the underlying circle, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's stating point.\n     */\n    getStartPoint() {\n        return this.circle.vertAt(this.startAngle);\n    }\n    /**\n     * Get the sectors ending point (on the underlying circle, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's ending point.\n     */\n    getEndPoint() {\n        return this.circle.vertAt(this.endAngle);\n    }\n    /**\n     * Calculate the intersection of this circle sector and some other sector.\n     *\n     * If the two sectors do not corerently intersect (when not both points of the\n     * radical line are containted in both source sectors) then null is returned.\n     *\n     * See demo/53-circle-sector-intersections for a geometric visualisation.\n     *\n     * @method circleSectorIntersection\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector | null} The intersecion of both sectors or null if they don't intersect.\n     */\n    circleSectorIntersection(sector) {\n        const radicalLine = this.circle.circleIntersection(sector.circle);\n        if (!radicalLine) {\n            // The circles to not intersect at all.\n            return null;\n        }\n        // Circles intersect. Check if this sector interval intersects, too.\n        const thisIntersectionAngleA = this.circle.center.angle(radicalLine.a);\n        const thisIntersectionAngleB = this.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!this.containsAngle(thisIntersectionAngleA) || !this.containsAngle(thisIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // Circles intersect. Check if the passed sector interval intersects, too.\n        const thatIntersectionAngleA = sector.circle.center.angle(radicalLine.a);\n        const thatIntersectionAngleB = sector.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!sector.containsAngle(thatIntersectionAngleA) || !sector.containsAngle(thatIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // The radical line has no direction. Thus the resulting sector _might_ be in reverse order.\n        // Make a quick logical check: the center of the gap must still be located inside the result sector.\n        // If not: reverse result.\n        var gapSector = new CircleSector(this.circle, this.endAngle, this.startAngle);\n        var centerOfOriginalGap = gapSector.angleAt(0.5);\n        const resultSector = new CircleSector(new Circle(this.circle.center.clone(), this.circle.radius), thisIntersectionAngleA, thisIntersectionAngleB);\n        if (resultSector.containsAngle(centerOfOriginalGap)) {\n            resultSector.startAngle = thisIntersectionAngleB;\n            resultSector.endAngle = thisIntersectionAngleA;\n        }\n        return resultSector;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof CircleSector\n     * @return {void}\n     */\n    destroy() {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n     */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle)\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-11-10 Tweaking some type issues.\n * @modified 2023-02-04 Fixed a typo in the CSS classname for cubic Bézier paths: cubicBezier (was cubierBezier).\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Added initialization checks for null parameters.\n * @modified 2023-09-29 Added a missing implementation to the `drawurilssvg.do(XYCoords,string)` function. Didn't draw anything.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-10-04 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2024-01-30 Fixing an issue with immutable style sets; changes to the global draw config did not reflect here (do now).\n * @modified 2024-03-10 Fixing some types for Typescript 5 compatibility.\n * @version  1.6.9\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nconst RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * Passed from primary to secondary instance.\n     */\n    //private nodeStyle: SVGStyleElement;\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs, nodeStyle) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = Boolean(isSecondary);\n        this.drawConfig = drawConfig;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            if (!gNode || !bufferGNode || !nodeDefs || !bufferNodeDefs) {\n                throw \"Cannot create secondary svg draw lib with undefinde gNode|bufferGNode|nodeDefs|bufferNodeDefs.\";\n            }\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n            if (nodeStyle) {\n                this.nodeStyle = nodeStyle;\n            }\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    addStyleDefs(drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        this.rebuildStyleDefs(drawConfig);\n    }\n    /**\n     * This method is required to re-define the global style defs. It is needed\n     * if any value in the DrawConfig changed in the meantime.\n     * @param drawConfig\n     */\n    rebuildStyleDefs(drawConfig) {\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"bezier\": \"CubicBezierCurve\",\n            //\"bezierPath\": \"BezierPath\", // TODO: is this correct?\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        // console.log(\"drawConfig\", drawConfig);\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Adds the internal <defs> node.\n     */\n    addDefsNode() {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    }\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    addCustomStyleDefs(defs) {\n        const buffer = [];\n        defs.forEach((value, key) => {\n            buffer.push(key + \" { \" + value + \" }\");\n        });\n        this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + buffer.join(\"\\n\");\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        if (!key) {\n            return null;\n        }\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            // node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n            node.style[\"mix-blend-mode\"](this.drawlibConfiguration.blendMode);\n        }\n        // if (this.lineDashEnabled && this.lineDash && this.lineDash.length > 0 && drawutilssvg.nodeSupportsLineDash(nodeName)) {\n        //   node.setAttribute(\"stroke-dasharray\", this.lineDash.join(\" \"));\n        // }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth, strokeOptions) {\n        this._configureNode(node, className, this.fillShapes, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    }\n    /**\n     * Bind this given node to a parent. If no parent is passed then the global\n     * node buffer will be used.\n     *\n     * @method _bindNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {SVGElement=} bindingParent - (optional) You may pass node other than the glober buffer node.\n     * @returns {SVGElement} The passed node itself.\n     */\n    _bindNode(node, bindingParent) {\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            (bindingParent !== null && bindingParent !== void 0 ? bindingParent : this.bufferGNode).appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Add custom CSS class names and the globally defined CSS classname to the\n     * given node.\n     *\n     * @method addCSSClasses\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {string} className - The additional custom classname to add.\n     * @returns {void}\n     */\n    _addCSSClasses(node, className) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${className} ${this.curClassName}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n    }\n    _configureNode(node, className, fillMode, color, lineWidth, strokeOptions) {\n        this._addCSSClasses(node, className);\n        node.setAttribute(\"fill\", fillMode && color ? color : \"none\");\n        node.setAttribute(\"stroke\", fillMode ? \"none\" : color || \"none\");\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        this.applyStrokeOpts(node, strokeOptions);\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, this.drawConfig, // null as any as DrawConfig, // no DrawConfig – this will work as long as `isSecondary===true`\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs, this.nodeStyle);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        this.rebuildStyleDefs(this.drawConfig);\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        const tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        const tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    applyStrokeOpts(node, strokeOptions) {\n        if (strokeOptions &&\n            strokeOptions.dashArray &&\n            strokeOptions.dashArray.length > 0 &&\n            drawutilssvg.nodeSupportsLineDash(node.tagName)) {\n            node.setAttribute(\"stroke-dasharray\", strokeOptions.dashArray\n                .map((dashArayElem) => {\n                return dashArayElem * this.scale.x;\n            })\n                .join(\" \"));\n            if (strokeOptions.dashOffset) {\n                node.setAttribute(\"stroke-dashoffset\", `${strokeOptions.dashOffset * this.scale.x}`);\n            }\n        }\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth, strokeOptions) {\n        // const line: SVGElement = this.makeNode(\"line\");\n        // this.applyStrokeOpts(line, strokeOptions);\n        // line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        // line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        // line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        // line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        const line = this.makeLineNode(zA, zB, color, lineWidth, strokeOptions);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1, strokeOptions);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const group = this.makeNode(\"g\");\n        const arrowHeadBasePosition = { x: 0, y: 0 };\n        // Just create the child nodes, don't bind them to the root node.\n        const arrowHead = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const line = this.makeLineNode(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions);\n        group.appendChild(line);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"linear-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength = 8, strokeOptions) {\n        const group = this.makeNode(\"g\");\n        // Just create the child nodes, don't bind them to the root node.\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        const arrowHead = this.makeArrowHeadNode(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const diff = arrowHeadBasePosition.difference(endPoint);\n        const bezier = this.makeCubicBezierNode(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n        group.appendChild(bezier);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"cubicbezier-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const node = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, strokeOptions);\n        return this._bindFillDraw(node, \"arrowhead\", color, lineWidth || 1, strokeOptions);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size, alpha = 1.0) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", `${alpha}`);\n                // }\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // const basePolygonBounds: Bounds = polygon.getBounds();\n        const rotatedScalingOrigin = new Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        // const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        const clipPathNode = this.makeNode(\"clipPath\");\n        const clipPathId = `clippath_${UIDGenerator.next()}`; // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        const gNode = this.makeNode(\"g\");\n        const imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", `${this._x(rotatedScalingOrigin.x)}`);\n        imageNode.setAttribute(\"y\", `${this._y(rotatedScalingOrigin.y)}`);\n        imageNode.setAttribute(\"width\", `${textureSize.width}`);\n        imageNode.setAttribute(\"height\", `${textureSize.height}`);\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", `rotate(${rotation * RAD_TO_DEG}, ${this._x(rotatedScalingOrigin.x)}, ${this._y(rotatedScalingOrigin.y)})`);\n        const pathNode = this.makeNode(\"path\");\n        const pathData = [];\n        if (polygon.vertices.length > 0) {\n            const self = this;\n            pathData.push(\"M\", `${this._x(polygon.vertices[0].x)}`, `${this._y(polygon.vertices[0].y)}`);\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", `${this._x(polygon.vertices[i].x)}`, `${this._y(polygon.vertices[i].y)}`);\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", `${this._x(rotatedScalingOrigin.x)} ${this._y(rotatedScalingOrigin.y)}`);\n        gNode.setAttribute(\"transform\", `scale(${this.scale.x}, ${this.scale.y})`);\n        const clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", `url(#${clipPathId})`);\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        const node = this.makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (!path || path.length == 0) {\n            return node;\n        }\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(128,128,128,0.5)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        node.setAttribute(\"x1\", `${this._x(p.x)}`);\n        node.setAttribute(\"y1\", `${this._y(p.y)}`);\n        node.setAttribute(\"x2\", `${this._x(p.x)}`);\n        node.setAttribute(\"y2\", `${this._y(p.y)}`);\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth, strokeOptions) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"rectangle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    rect(position, width, height, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"rect\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {XYCoords} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth, strokeOptions) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (vertices.length == 0) {\n            return node;\n        }\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        var _a, _b, _c;\n        options = options || {};\n        const color = options.color || \"black\";\n        const lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        const textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        const transformOrigin = `${this._x(x)}px ${this._y(y)}px`;\n        const translate = `translate(${this._x(x)} ${this._y(y) + lineHeight / 2})`;\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        const rotate = options.rotation ? `rotate(${options.rotation * RAD_TO_DEG} 0 0)` : ``;\n        const node = this.makeNode(\"g\");\n        const curId = this.curId;\n        this.curId = curId + \"_text\";\n        const textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", (_c = options.fontFamily) !== null && _c !== void 0 ? _c : \"\"); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? `${options.fontSize * this.scale.x}` : \"\");\n        textNode.setAttribute(\"font-style\", options.fontStyle ? `${options.fontStyle}` : \"\");\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? `${options.fontWeight}` : \"\");\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation, color) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${x},${y}), rotate(${((rotation || 0) / Math.PI) * 180})`);\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, options);\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = null; // undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = null; // undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n    static nodeSupportsLineDash(nodeName) {\n        return [\"line\", \"path\", \"circle\", \"ellipse\", \"rectangle\", \"rect\"].includes(nodeName);\n    }\n    /**\n     * Creates a basic <line> node with start and end coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeLineNode\n     * @param {XYCoords} zA - The line's start position.\n     * @param {XYCoords} zB - The line's start position.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGLineElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeLineNode(zA, zB, color, lineWidth, strokeOptions, classNameOverride) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        this._configureNode(line, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"line\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return line;\n    }\n    /**\n     * Creates a basic <path> node with given path string data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makePathNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makePathNode(pathString, color, lineWidth, strokeOptions, classNameOverride) {\n        const path = this.makeNode(\"path\");\n        path.setAttribute(\"d\", pathString);\n        this._configureNode(path, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"path\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return path;\n    }\n    /**\n     * Creates a basic arrow head node (<path> node) at the end of the given line coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeArrowHeadNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {number=8} headLength - (optional) The length of the arrow head; if none is specified then the head will be 8 absolute units long.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeArrowHeadNode(zA, zB, color, lineWidth, headLength = 8, strokeOptions, arrowHeadBasePositionBuffer) {\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        const d = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        for (var i = 1; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        const node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"arrowhead\");\n        return node;\n    }\n    /**\n     * Creates a basic cubic Bézier path node (<path> node) with the given cubic Bézier data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeCubicBezierNode\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        const node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"cubicBezier\");\n        return node;\n    }\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Removed unused method stub for texturedPoly helper function (cleanup).\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @modified 2023-09-30 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2023-10-07 Adding the optional `arrowHeadBasePositionBuffer` param to the arrowHead(...) method.\n * @version  1.13.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { Vector } from \"./Vector\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        // this.lineDash = [];\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    applyStrokeOpts(strokeOptions) {\n        var _a, _b;\n        this.ctx.setLineDash(((_a = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashArray) !== null && _a !== void 0 ? _a : []).map((dashArrayElem) => {\n            // Note assume scale.x === scale.y\n            // Invariant scale makes funny stuff anyway.\n            return dashArrayElem * this.scale.x;\n        }));\n        this.ctx.lineDashOffset = ((_b = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashOffset) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    }\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDash: Array<number>) {\n    //   this.lineDash = lineDash;\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth, headLength = 8, strokeOptions) {\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        this.arrowHead(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition); // Will NOT use dash configuration\n        this.line(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions); // Will use dash configuration\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        const arrowHeadBasePosition = new Vertex(0, 0);\n        // Will NOT use dash configuration\n        this.arrowHead(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        const diff = arrowHeadBasePosition.difference(endPoint);\n        // Will use dash configuration\n        this.cubicBezier(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength = 8, strokeOptions, arrowHeadBasePositionBuffer) {\n        // var headLength: number = 8; // length of head in pixels\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        var vertices = Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        this.ctx.moveTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 1.0) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        // var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var targetCenterDifference = new Vertex(polygonPosition.x, polygonPosition.y).difference(basePolygonBounds.getCenter());\n        // var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    }\n    /*\n    _texturedPoly(\n      textureImage: HTMLImageElement,\n      textureSize: Bounds,\n      polygon: Polygon,\n      polygonPosition: XYCoords,\n      rotation: number,\n      rotationCenter: XYCoords = { x: 0, y: 0 }\n    ): void {\n      var basePolygonBounds = polygon.getBounds();\n      var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n      var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n      // var rotationalOffset = { x: 0, y: 0 };\n      var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n  \n      // Get the position offset of the polygon\n      var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n      var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n  \n      this.ctx.save();\n  \n      // this.ctx.translate(\n      //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n      //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      // );\n      this.ctx.translate(\n        this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      );\n      this.ctx.rotate(rotation);\n  \n      drawutils.helpers.clipPoly(\n        this.ctx,\n        {\n          x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n          y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        },\n        this.scale,\n        polygon.vertices\n      );\n      this.ctx.drawImage(\n        textureImage,\n        0,\n        0,\n        textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x,\n        (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y,\n        targetTextureSize.x * this.scale.x,\n        targetTextureSize.y * this.scale.y\n      );\n  \n      // const scaledTextureSize = new Bounds(\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n      //   ).scaleXY(this.scale, rotationCenter),\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n      //   ).scaleXY(this.scale, rotationCenter)\n      // );\n      // this.ctx.drawImage(\n      //   textureImage,\n      //   0,\n      //   0,\n      //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n      //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n      //   scaledTextureSize.min.x,\n      //   scaledTextureSize.min.y,\n      //   scaledTextureSize.width,\n      //   scaledTextureSize.height\n      // );\n  \n      this.ctx.restore();\n    }\n    */\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    rect(position, width, height, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {XYCoords} startPoint   - The start point of the cubic Bézier curve\n     * @param {XYCoords} controlPoint - The control point the cubic Bézier curve.\n     * @param {XYCoords} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth, strokeOptions) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth, strokeOptions) {\n        if (!path || path.length == 0) {\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgba(128,128,128, 0.5)\", undefined);\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.applyStrokeOpts(options);\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth, strokeOptions) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth, strokeOptions);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth, strokeOptions) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.lineWidth = (lineWidth || 1.0) * this.scale.x;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        let relX = this.offset.x + x * this.scale.x;\n        let relY = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : `\"${options.fontFamily}\"`\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        const rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        const lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        this.applyStrokeOpts(options);\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\ndrawutils.helpers = {\n    // A helper function to define the clipping path.\n    // This could be a candidate for the draw library.\n    clipPoly: (ctx, offset, scale, vertices) => {\n        ctx.beginPath();\n        // Set clip mask\n        ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n        for (var i = 1; i < vertices.length; i++) {\n            const vert = vertices[i];\n            ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n        }\n        ctx.closePath();\n        ctx.clip();\n    }\n};\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  0.0.10\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext|null} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDashes: Array<number>) {\n    //   // TODO\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    cubicBezierArrow(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    arrowHead(zA, zB, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 0.0) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {VertXYCoordsex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version   2.6.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    } // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    }\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        // Cast to non-null here because we know there _is_ an intersection\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n    },\n    min3(a, b, c) {\n        return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && 1 - s - t > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * -1;\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate(-i * (insideAngle / n), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    }\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = (e) => {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = (e) => {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = (e) => {\n            _self.fireUpEvent(e, _self);\n        }));\n    }\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    }\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    destroy() {\n        this.releaseListeners();\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\n// prettier-ignore\nKeyHandler.KEY_CODES = {\n    'break': 3, // alternate: 19\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29, // alternate: 235?\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36, // alternate: 172?\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46, // alternate: 8\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91, // left ⌘\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93, // right ⌘\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108, // firefox, 194 on chrome\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169, // (AZERTY)\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173, // firefox\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181, // firefox, alternate: 173\n    'unmute': 181, // alternate: 173?\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191, // 231 alternate?\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251, // Chrome/Edge\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers[\"mousemove\"] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX, y: e.offsetY };\n    }\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(event, eventName) {\n        var _a, _b;\n        const rel = this.relPos(event);\n        const xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button, // this.mouseButton,\n            leftButton: event.button === 0, // this.mouseButton === 0,\n            middleButton: event.button === 1, // this.mouseButton === 1,\n            rightButton: event.button === 2, // this.mouseButton === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    }\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    }\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-25 Fixed a type error in the constructor. Nothing vital.\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class PBText {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex();\n        this.color = options === null || options === void 0 ? void 0 : options.color;\n        this.fontFamily = options === null || options === void 0 ? void 0 : options.fontFamily;\n        this.fontSize = options === null || options === void 0 ? void 0 : options.fontSize;\n        this.fontStyle = options === null || options === void 0 ? void 0 : options.fontStyle;\n        this.fontWeight = options === null || options === void 0 ? void 0 : options.fontWeight;\n        this.lineHeight = options === null || options === void 0 ? void 0 : options.lineHeight;\n        this.textAlign = options === null || options === void 0 ? void 0 : options.textAlign;\n        this.rotation = options === null || options === void 0 ? void 0 : options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\n//# sourceMappingURL=PBText.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  1.3.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector(point, endPointB);\n        }\n        else {\n            return new Vector(point, endPointA);\n        }\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection (ignore that the result might be null in some extreme cases)\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author   Ikaros Kappler\n * @date     2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-11-01 Tweaked the `endpointToCenterParameters` function to handle negative values, too, without errors.\n * @version  1.1.1\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                if (intersection) {\n                    // It's VERY LIKELY hat this ALWAYS happens; it's just a typesave variant.\n                    // Intersection cannot be null.\n                    let startDiff = startPoint.difference(intersection);\n                    let endDiff = endPoint.difference(intersection);\n                    let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                    curves.push(curve);\n                }\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }, // END function describeSVGArc\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        // const M: number = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const M = sqrt(Math.abs((prx * pry - prx * py - pry * px) / (prx * py + pry * px))) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        // console.log(\"VELLIPSE::::::\", ellipse);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @modified 2022-10-25 Added the `origin` to the default draw config.\n * @modified 2022-11-06 Adding an XML declaration to the SVG export routine.\n * @modified 2022-11-23 Added the `drawRaster` (default=true) option to the config/drawconfig.\n * @modified 2023-02-04 Fixed a bug in the `drawDrawable` function; fill's current classname was not set.\n * @modified 2023-02-10 Fixing an issue of the `style.position` setting when `fitToParent=true` from `absolute` to `static` (default).\n * @modified 2023-02-10 Cleaning up most type errors in the main class (mostly null checks).\n * @modified 2023-02-10 Adding `enableZoom` and `enablePan` (both default true) to have the option to disable these functions.\n * @modified 2023-09-29 Adding proper dicionary key and value types to the params of `PlotBoilerplate.utils.safeMergeByKeys` (was `object` before).\n * @modified 2024-07-08 Adding `PlotBoilerplate.getGUI()` to retrieve the GUI instance.\n *\n * @version  1.18.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { PBText } from \"./PBText\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enablePan=true] - (default true) Set to false if you want to disable panning completely.\n     * @param {boolean=} [config.enableZoom=true] - (default true) Set to false if you want to disable zooming completely.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    constructor(config, drawConfig) {\n        var _b, _c;\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        /**\n         * A storage variable for retrieving the GUI instance once it was created.\n         */\n        this._gui = null;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas === \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            enableZoom: f.bool(config, \"enableZoom\", true), // default=true\n            enablePan: f.bool(config, \"enablePan\", true), // default=true\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            // bezierPath: {\n            //   color: \"#0022a8\",\n            //   lineWidth: 1\n            // },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            },\n            origin: {\n                color: \"#000000\"\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas === \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        if (typeof canvasElement === \"undefined\") {\n            throw `Cannot initialize PlotBoilerplate with a null canvas (element \"${config.canvas} not found).`;\n        }\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                // Override the case 'null' here. If GL is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                // Override the case 'null' here. If context creation is not supported, well then nothing works.\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set((_b = this.config.scaleX) !== null && _b !== void 0 ? _b : 1.0, this.config.scaleY);\n        this.fill.scale.set((_c = this.config.scaleX) !== null && _c !== void 0 ? _c : 1.0, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear) {\n            pb.config.preClear();\n        }\n        tosvgDraw.clear(pb.config.backgroundColor || \"white\");\n        if (pb.config.preDraw) {\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        }\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        // Add: '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' ?\n        var blob = new Blob(['<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\") {\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        }\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        var _b, _c, _d, _e;\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleX) !== null && _c !== void 0 ? _c : 1.0);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_d = this.config.cssScaleX) !== null && _d !== void 0 ? _d : 1.0, (_e = this.config.cssScaleY) !== null && _e !== void 0 ? _e : 1.0);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            for (var i = 0; i < drawable.vertices.length; i++) {\n                this.vertices.push(drawable.vertices[i]);\n            }\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0) {\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                }\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else if (drawable instanceof PBText) {\n            this.vertices.push(drawable.anchor);\n            this.drawables.push(drawable);\n            drawable.anchor.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                    else if (drawable instanceof PBText) {\n                        this.removeVertex(drawable.anchor, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var _b, _c;\n        const p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, this.drawConfig.origin.color);\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.fill.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            var curveIndex = 0;\n            for (var c in d.bezierCurves) {\n                // Restore these settings again in each loop (will be overwritten)\n                this.draw.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.fill.setCurrentId(`${d.uid}-${curveIndex}`);\n                this.draw.setCurrentClassName(d.className);\n                this.fill.setCurrentClassName(d.className);\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h2`);\n                        df.setCurrentClassName(`${d.className}-start-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h3`);\n                        df.setCurrentClassName(`${d.className}-end-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.handleLine(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.handleLine(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint);\n                }\n                curveIndex++;\n            } // END for\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.handleLine(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.handleLine(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(`${d.uid}_a0`);\n                draw.setCurrentClassName(`${d.className}-anchor`);\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        if (this.config.drawRaster) {\n            this.drawGrid(draw);\n        }\n        if (this.config.drawOrigin) {\n            this.drawOrigin(draw);\n        }\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(null);\n        draw.setCurrentClassName(null);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor || \"white\");\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        var _b, _c;\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * ((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0), this.canvasSize.height * ((_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0)));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        var _b, _c, _d, _e, _f, _g;\n        const _self = this;\n        const _setSize = (w, h) => {\n            var _b, _c;\n            w *= (_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0;\n            h *= (_c = _self.config.canvasHeightFactor) !== null && _c !== void 0 ? _c : 1.0;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = ((_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0) * width + \"px\";\n            _self.canvas.style.height = ((_c = _self.config.canvasWidthFactor) !== null && _c !== void 0 ? _c : 1.0) * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"static\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = ((_d = _self.config.canvasWidthFactor) !== null && _d !== void 0 ? _d : 1.0) * space.width + \"px\";\n            _self.canvas.style.height = ((_e = _self.config.canvasHeightFactor) !== null && _e !== void 0 ? _e : 1.0) * space.height + \"px\";\n            _self.canvas.style.top = \"\";\n            _self.canvas.style.left = \"\";\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = \"\";\n            _self.canvas.style.height = \"\";\n            _setSize((_f = _self.config.defaultCanvasWidth) !== null && _f !== void 0 ? _f : 1024, (_g = _self.config.defaultCanvasHeight) !== null && _g !== void 0 ? _g : 768);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        const _self = this;\n        var point = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX || 1.0, _self.config.cssScaleY || 1.0));\n        if (point) {\n            _self.vertices[point.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (point.typeName == \"bpath\") {\n                    let vert = _self.paths[point.pindex].bezierCurves[point.cindex].getPointByID(point.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (point.typeName == \"vertex\") {\n                    let vert = _self.vertices[point.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler && this.keyHandler.isDown(\"y\")) {\n                _self.vertices[point.vindex].attr.bezierAutoAdjust = !_self.vertices[point.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var draggablePoint = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!draggablePoint)\n            return;\n        // Drag all selected elements?\n        if (draggablePoint.typeName == \"vertex\" && _self.vertices[draggablePoint.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[draggablePoint.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(draggablePoint);\n            if (draggablePoint.typeName == \"bpath\")\n                _self.paths[draggablePoint.pindex].bezierCurves[draggablePoint.cindex]\n                    .getPointByID(draggablePoint.pid)\n                    .listeners.fireDragStartEvent(e);\n            else if (draggablePoint.typeName == \"vertex\")\n                _self.vertices[draggablePoint.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler && (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\"))) {\n            if (!this.config.enablePan) {\n                return;\n            }\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        if (!this.config.enableZoom) {\n            return;\n        }\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" ||\n                typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                if (!touchDownPos || !touchMovePos) {\n                                    return;\n                                }\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                if (!this.config.enablePan) {\n                                    return;\n                                }\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                if (!touchDownPos) {\n                                    return;\n                                }\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            if (!this.config.enableZoom) {\n                                return;\n                            }\n                            const touchItem0 = evt.touches.item(0);\n                            const touchItem1 = evt.touches.item(1);\n                            if (!evt.touches || !multiTouchStartScale || !touchItem0 || !touchItem1) {\n                                return;\n                            }\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(touchItem0.clientX, touchItem0.clientY);\n                            const fingerB = new Vertex(touchItem1.clientX, touchItem1.clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        // window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                        const createAlloyFinger = window[\"createAlloyFinger\"];\n                        createAlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        const utils = globalThis[\"utils\"];\n        // if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\") {\n        //   return (globalThis[\"utils\" as keyof Object] as any as ({createGUI : (pb:PlotBoilerplate,props:DatGuiProps|undefined)=>GUI })).createGUI(this, props);\n        if (utils && typeof utils.createGUI === \"function\") {\n            return (this._gui = utils.createGUI(this, props));\n        }\n        else {\n            throw \"Cannot create dat.GUI or lil-gui instance; did you load the ./utils/creategui helper function an the dat.GUI/lil-gui library?\";\n        }\n    }\n    /**\n     * Retriebe the GUI once it was created. If the `createGUI` method was not called or failed to create any\n     * GUI then null is returned.\n     * @returns {GUI | null}\n     */\n    getGUI() {\n        return this._gui;\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    __setFunctionName(_a, \"Draggable\"),\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k)) {\n                continue;\n            }\n            if (base.hasOwnProperty(k)) {\n                const typ = typeof base[k];\n                const extVal = extension[k];\n                try {\n                    if (typ == \"boolean\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Boolean(!!JSON.parse(extVal));\n                        else\n                            base[k] = extVal;\n                    }\n                    else if (typ == \"number\") {\n                        if (typeof extVal === \"string\")\n                            base[k] = Number(JSON.parse(extVal) * 1);\n                        else\n                            base[k] = extension[k];\n                    }\n                    else if (typ == \"function\" && typeof extVal == \"function\") {\n                        base[k] = extension[k];\n                    }\n                    else {\n                        // Probably a sting\n                        base[k] = extension[k];\n                    }\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extVal, e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /*\n    __safeMergeByKeys: <KeyType extends string | number | symbol, ValueType extends boolean | number | string | Function>(\n      base: Record<KeyType, ValueType>,\n      extension: Record<KeyType, string>\n    ): Record<KeyType, ValueType> => {\n      for (var k in extension) {\n        if (!extension.hasOwnProperty(k)) continue;\n        if (base.hasOwnProperty(k)) {\n          var typ = typeof base[k];\n          try {\n            if (typ == \"boolean\") base[k] = !!JSON.parse(extension[k]);\n            else if (typ == \"number\") base[k] = JSON.parse(extension[k]) * 1;\n            else if (typ == \"function\" && typeof extension[k] == \"function\") base[k] = extension[k];\n            else base[k] = extension[k];\n          } catch (e) {\n            console.error(\"error in key \", k, extension[k], e);\n          }\n        } else {\n          base[k] = extension[k];\n        }\n      }\n      return base;\n    },\n    *()\n\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        // element.style[\"transform-origin\"] = \"0 0\";\n        element.style.transformOrigin = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0) {\n            // element.style.transform = null;\n            element.style.removeProperty(\"transform\");\n        }\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    }, // END fetch\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map"],"names":["VertexAttr","constructor","key","this","draggable","selectable","isSelected","visible","model","UIDGenerator","next","current","VertexListeners","vertex","click","drag","dragStart","dragEnd","addClickListener","listener","_addListener","removeClickListener","_removeListener","addDragListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireClickEvent","e","_fireEvent","fireDragEvent","fireDragStartEvent","fireDragEndEvent","removeAllListeners","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vertex","x","y","className","uid","tuple","NaN","attr","set","setX","setY","invX","invY","add","addXY","amountX","amountY","addX","addY","sub","subXY","subX","subY","equals","eqX","Math","abs","EPSILON","eqY","clone","distance","vert","sqrt","pow","angle","origin","a","PI","atan2","difference","scale","factor","center","scaleXY","lerp","target","t","diff","lerpAbs","u","dist","step","factors","rotate","len","ZERO","cos","sin","multiplyScalar","scalar","round","inv","toString","precision","toFixed","destroy","isDestroyed","randomVertex","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","console","warn","vertices","arrayToJSON","JSON","stringify","map","undefined","Number","VertTuple","b","factory","setLength","amount","normalize","moveTo","newA","line","v0","v1","vertAt","denominator","colinear","getClosestT","p","l2","vtutils","dist2","hasPoint","point","insideBoundsOnly","getClosestPoint","pointDistance","v","w","Line","super","intersection","numerator1","numerator2","isNaN","getStartPoint","getEndPoint","getStartTangent","getEndTangent","reverse","tmp","Polygon","isOpen","addVertex","getVertexAt","index","move","containsVert","inside","j","xi","yi","xj","yj","containsPolygon","polygon","lineSegment","lineIntersections","area","signedArea","isClockwise","perimeter","log","inVectorBoundsOnly","intersectionPoints","polyLine","closestLineIntersection","allIntersections","closestIntersection","MAX_VALUE","curDist","curVert","getInterpolationPolygon","interpolationCount","verts","nextVert","lerpAmount","getEvenDistributionPolygon","pointCount","Error","result","polygonPoint","stepSize","n","polygonIndex","nextPolygonPoint","segmentLength","loopMax","curSegmentU","newPoint","getBounds","Bounds","computeFromVertices","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","buffer","join","toCubicBezierData","threshold","cbezier","c","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","BezierPath","fromArray","total","l","sum","width","height","toPolygon","getCenter","randomPoint","horizontalSafeArea","verticalSafeArea","absHorizontalSafeArea","absVerticalSafeArea","xMin","xMax","yMin","yMax","fromDimension","Vector","vertA","vertB","perp","inverse","getOrthogonal","linePoint","startPoint","CubicBezierCurve","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartControlPoint","getEndControlPoint","translate","getLength","arcLength","pointA","pointB","curveStep","newLength","tmpLength","getPointAt","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","POSITIVE_INFINITY","NEGATIVE_INFINITY","getPointByID","id","getPoint","getTangentAt","d","t2","nt2","tX","tY","trimStart","uValue","trimStartAt","convertU2T","subCurbePoints","getSubCurvePointsAt","trimEnd","trimEndAt","getSubCurve","uStart","uEnd","getSubCurveAt","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","isInstance","obj","toJSON","prettyFormat","fromJSON","jsonString","parse","fromObject","arr","Array","isArray","startVec","endVec","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaleFactor","scaleFactors","curveT","uMin","uTemp","relativeU","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","getEvenDistributionVertices","toPathPoints","fromCurve","bPath","lastCurve","toReducedListRepresentation","digits","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","bezierPath","Circle","radius","containsPoint","containsCircle","circle","lineDistance","circleUtils","tangentAt","circleIntersection","p0","p1","h","p2","x3","y3","x4","y4","lineIntersection","interA","interB","transA","transB","det","distSquared","belowSqrt","sign","closestPoint","CircleSector","startAngle","endAngle","containsAngle","angleAt","circleSectorIntersection","sector","radicalLine","thisIntersectionAngleA","thisIntersectionAngleB","thatIntersectionAngleA","thatIntersectionAngleB","centerOfOriginalGap","resultSector","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","RAD_TO_DEG","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","nodeStyle","Boolean","drawlibConfiguration","cache","Map","setSize","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","appendChild","rebuildStyleDefs","keys","bezier","triangle","ellipse","ellipseSector","circleSector","vector","image","text","rules","k","drawSettings","color","lineWidth","innerHTML","addCustomStyleDefs","defs","forEach","value","findElement","nodeName","node","get","toUpperCase","delete","document","createElementNS","makeNode","curId","blendMode","style","_bindFillDraw","strokeOptions","_configureNode","_bindNode","bindingParent","parentNode","_addCSSClasses","curClassName","setAttribute","fillMode","applyStrokeOpts","copyInstance","setConfiguration","configuration","setCurrentId","setCurrentClassName","beginDrawCycle","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","endDrawCycle","replaceChild","tmpGNode","tmpDefsNode","dashArray","nodeSupportsLineDash","tagName","dashArayElem","dashOffset","_x","_y","makeLineNode","arrow","headLength","group","arrowHeadBasePosition","arrowHead","makeArrowHeadNode","cubicBezierArrow","makeCubicBezierNode","position","size","alpha","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","texturedPoly","textureImage","textureSize","polygonPosition","rotation","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","cubicBezier","cubicBezierPath","handle","square","handleLine","dot","circleArc","arcData","radiusX","radiusY","rect","grid","sizeX","sizeY","ceil","raster","diamondHandle","squareHandle","circleHandle","crosshair","cross","polyline","_a","_b","_c","lineHeight","fontSize","textAlign","transformOrigin","textNode","fontFamily","fontStyle","fontWeight","label","inplace","copyPathData","transformPathData","lastChild","removeChild","createSvg","data","copy","_stx","_sty","_sx","_sy","_slp","includes","classNameOverride","makePathNode","pathString","arrowHeadBasePositionBuffer","HEAD_XML","drawutils","context","ctx","setLineDash","dashArrayElem","lineDashOffset","_fillOrDraw","fillStyle","fill","strokeStyle","stroke","globalCompositeOperation","save","beginPath","lineTo","restore","complete","globalAlpha","drawImage","basePolygonBounds","targetTextureSize","targetTextureOffset","helpers","clipPoly","closePath","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","arc","asSegment","relX","relY","font","indexOf","fillText","strokeText","Path2D","clearRect","canvas","fillRect","clip","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","getArea","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","inCircumcircle","min3","max3","determinant","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","circleIntersB","circleIntersC","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","wrapMax","wrapMinMax","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","fireEvent","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","press","up","isDown","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","$","pagebackward","pageforward","refresh","closingparen","minus","decreasevolumelevel","increasevolumelevel","previous","stop","email","mute","unmute","semicolon","equal","comma","dash","period","forwardslash","openbracket","backslash","closebracket","singlequote","altgr","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","PBImage","upperLeft","lowerRight","PBText","getLen","getRotateAngle","v2","mr","acos","getAngle","HandlerAdmin","el","del","dispatch","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","Date","pageX","pageY","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","on","off","VEllipse","axis","radiusH","signedRadiusH","radiusV","signedRadiusV","normalAt","foci","getFoci","angleA","centerAngle","endPointA","endPointB","normal","rh","rv","sdiff","getEquidistantVertices","angles","equidistantVertAngles","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","r2d","fullEllipsePointCount","ellipseAngles","filter","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","__setFunctionName","prefix","description","Object","defineProperty","configurable","PlotBoilerplate","config","_gui","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","drawRaster","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableZoom","enablePan","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","pathVertex","controlVertex","selectedVertex","canvasElement","toLowerCase","eventCatcher","getContext","draw","parentElement","createElement","left","top","cursor","body","title","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","_d","_e","setCSSscale","drawable","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","drawDrawable","df","error","drawSelectPolygon","clearSelection","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","display","padding","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_f","_g","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","draggablePoint","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","touchItem0","item","touchItem1","fingerA","fingerB","window","createAlloyFinger","createGUI","props","getGUI","isVertex","safeMergeByKeys","extension","hasOwnProperty","typ","extVal","removeProperty","transform","fallback"],"mappings":"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"}