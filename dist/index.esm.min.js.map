{"version":3,"file":"index.esm.min.js","sources":["../src/esm/UIDGenerator.js","../src/esm/VertexAttr.js","../src/esm/VertexListeners.js","../src/esm/Vertex.js","../src/esm/Polygon.js","../src/esm/Bounds.js","../src/esm/VertTuple.js","../src/esm/Vector.js","../src/esm/CubicBezierCurve.js","../src/esm/BezierPath.js","../src/esm/Line.js","../src/esm/Circle.js","../src/esm/CircleSector.js","../src/esm/drawutilssvg.js","../src/esm/draw.js","../src/esm/drawgl.js","../src/esm/Triangle.js","../src/esm/geomutils.js","../src/esm/Grid.js","../src/esm/KeyHandler.js","../src/esm/MouseHandler.js","../src/esm/PBImage.js","../src/esm/PBText.js","../node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","../src/esm/VEllipse.js","../src/esm/VEllipseSector.js","../src/esm/PlotBoilerplate.js"],"sourcesContent":["/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    removeAllListeners() {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    }\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  2.7.0\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    lerp(target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    }\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    lerpAbs(target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scaleXY(factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    },\n    /**\n     * Convert the given vertices (array) to a JSON string.\n     *\n     * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n     * @returns {string}\n     */\n    arrayToJSON(vertices, precision) {\n        return JSON.stringify(vertices.map(function (vert) {\n            return typeof precision === undefined\n                ? { x: vert.x, y: vert.y }\n                : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n        }));\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @version 1.10.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == \"undefined\")\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    }\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    perimeter() {\n        let length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    }\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    }\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    getEvenDistributionPolygon(pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        const result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        let polygonPoint = new Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        const perimeter = this.perimeter();\n        const stepSize = perimeter / pointCount;\n        const n = this.vertices.length;\n        let polygonIndex = 1;\n        let nextPolygonPoint = new Vertex(this.vertices[1]);\n        let segmentLength = polygonPoint.distance(nextPolygonPoint);\n        let loopMax = this.isOpen ? n : n + 1;\n        let curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                let newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @return {Polygon} The cloned polygon.\n     */\n    clone() {\n        return new Polygon(this.vertices.map(vert => vert.clone()), this.isOpen);\n    }\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    }\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += addX * addY * 0.5;\n            total -= subX * subY * 0.5;\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @version  1.5.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    toString() {\n        return `{ min: ${this.min.toString()}, max : ${this.max.toString()}, width: ${this.width}, height : ${this.height} }`;\n    }\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Creates a deep clone of this bounds object. The returned object's `min` and `max` instances are `Vertex` instances.\n     */\n    // clone() {\n    //   return new Bounds(new Vertex(this.min.x, this.min.y), new Vertex(this.max.x, this.max.y));\n    // }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    static fromDimension(width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version 1.2.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    }\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  1.4.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    }\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 Addint these method from the `PathSegment` interface: revert.\n * @version 2.7.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        const tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        const startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        const endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    }\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    }\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    // TODO: docs?\n    revert() {\n        const sp = this.startPoint;\n        const scp = this.startControlPoint;\n        const ep = this.endPoint;\n        const ecp = this.endControlPoint;\n        this.startPoint = ep;\n        this.startControlPoint = ecp;\n        this.endPoint = sp;\n        this.endControlPoint = scp;\n        return this;\n    }\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    }\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 2.5.0\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaleFactor) {\n        // var scaleFactors : XYCoords = { x : scaleFactor, y : scaleFactor };\n        // for (var i = 0; i < this.bezierCurves.length; i++) {\n        //   var curve = this.bezierCurves[i];\n        //   curve.getStartPoint().scale(scaleFactor, anchor);\n        //   curve.getStartControlPoint().scale(scaleFactor, anchor);\n        //   curve.getEndControlPoint().scale(scaleFactor, anchor);\n        //   // Do NOT scale the end point here!\n        //   // Don't forget that the curves are connected and on curve's end point\n        //   // the the successor's start point (same instance)!\n        // }\n        // // Finally move the last end point (was not scaled yet)\n        // if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n        //   this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaleFactor, anchor);\n        // }\n        // this.updateArcLengths();\n        // return this;\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scaleXY(scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    getEvenDistributionVertices(pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        const result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        const perimeter = this.totalArcLength;\n        const stepSize = perimeter / (pointCount - 1);\n        const n = this.bezierCurves.length;\n        let curveIndex = 0;\n        let segmentLength = this.bezierCurves[0].arcLength;\n        let curSegmentU = stepSize;\n        let i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        const arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        // var firstStartPoint: Vertex;\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @version  2.3.0\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        const numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + a * (this.b.x - this.a.x);\n        const y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    getStartPoint() {\n        return this.a;\n    }\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    getEndPoint() {\n        return this.b;\n    }\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @version  1.4.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    containsPoint(point) {\n        return this.center.distance(point) < this.radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {Vertex} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    lineIntersection(a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        const interA = new Vertex();\n        const interB = new Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        const transA = new Vertex(a).sub(this.center);\n        const transB = new Vertex(b).sub(this.center);\n        const diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        const dist = transA.distance(transB);\n        const det = transA.x * transB.y - transA.y * transB.x;\n        const distSquared = dist * dist;\n        const radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        const belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        const sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line(interA.add(this.center), interB.add(this.center));\n        // return new Line(interA, interB);\n    }\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    closestPoint(vert) {\n        const lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                     Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n     */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + radius * Math.cos(angle),\n            y: centerY + radius * Math.sin(angle)\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @version  1.6.1\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nconst RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    addStyleDefs(drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * Adds the internal <defs> node.\n     */\n    addDefsNode() {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    }\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    addCustomStyleDefs(defs) {\n        const buffer = [];\n        defs.forEach((value, key) => {\n            buffer.push(key + \" { \" + value + \" }\");\n        });\n        this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + buffer.join(\"\\n\");\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${className} ${this.curClassName}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color);\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        const tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        const tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        const d = [\"M\", this._x(zA.x), this._y(zA.y)];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size, alpha = 1.0) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", `${alpha}`);\n                // }\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {Vertex} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        const basePolygonBounds = polygon.getBounds();\n        const rotatedScalingOrigin = new Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        const clipPathNode = this.makeNode(\"clipPath\");\n        const clipPathId = `clippath_${UIDGenerator.next()}`; // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        const gNode = this.makeNode(\"g\");\n        const imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", `${this._x(rotatedScalingOrigin.x)}`);\n        imageNode.setAttribute(\"y\", `${this._y(rotatedScalingOrigin.y)}`);\n        imageNode.setAttribute(\"width\", `${textureSize.width}`);\n        imageNode.setAttribute(\"height\", `${textureSize.height}`);\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", `rotate(${rotation * RAD_TO_DEG}, ${this._x(rotatedScalingOrigin.x)}, ${this._y(rotatedScalingOrigin.y)})`);\n        const pathNode = this.makeNode(\"path\");\n        const pathData = [];\n        if (polygon.vertices.length > 0) {\n            const self = this;\n            pathData.push(\"M\", `${this._x(polygon.vertices[0].x)}`, `${this._y(polygon.vertices[0].y)}`);\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", `${this._x(polygon.vertices[i].x)}`, `${this._y(polygon.vertices[i].y)}`);\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", `${this._x(rotatedScalingOrigin.x)} ${this._y(rotatedScalingOrigin.y)}`);\n        gNode.setAttribute(\"transform\", `scale(${this.scale.x}, ${this.scale.y})`);\n        const clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", `url(#${clipPathId})`);\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        const node = this.makeNode(\"path\");\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubierBezier\", color, lineWidth);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth) {\n        const node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        var _a, _b;\n        options = options || {};\n        const color = options.color || \"black\";\n        const lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        const textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        const transformOrigin = `${this._x(x)}px ${this._y(y)}px`;\n        const translate = `translate(${this._x(x)} ${this._y(y) + lineHeight / 2})`;\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        const rotate = options.rotation ? `rotate(${options.rotation * RAD_TO_DEG} 0 0)` : ``;\n        const node = this.makeNode(\"g\");\n        const curId = this.curId;\n        this.curId = curId + \"_text\";\n        const textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", options.fontFamily); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? `${options.fontSize * this.scale.x}` : null);\n        textNode.setAttribute(\"font-style\", options.fontStyle ? `${options.fontStyle}` : null);\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? `${options.fontWeight}` : null);\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation, color) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${x},${y}), rotate(${((rotation || 0) / Math.PI) * 180})`);\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        const stx = (value) => {\n            return offset.x + scale.x * value;\n        };\n        const sty = (value) => {\n            return offset.y + scale.y * value;\n        };\n        // scale only {x,y}\n        const sx = (value) => {\n            return scale.x * value;\n        };\n        const sy = (value) => {\n            return scale.y * value;\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @version  1.12.3\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 1.0) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {Vertex} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        // var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n        // var rotationalOffset = { x: 0, y: 0 };\n        var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    }\n    _texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation, rotationCenter = { x: 0, y: 0 }) {\n        var basePolygonBounds = polygon.getBounds();\n        var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n        // var rotationalOffset = { x: 0, y: 0 };\n        var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n        var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        this.ctx.save();\n        // this.ctx.translate(\n        //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n        // );\n        this.ctx.translate(this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x, this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y);\n        this.ctx.rotate(rotation);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n            y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x, (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y, targetTextureSize.x * this.scale.x, targetTextureSize.y * this.scale.y);\n        // const scaledTextureSize = new Bounds(\n        //   new Vertex(\n        //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n        //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n        //   ).scaleXY(this.scale, rotationCenter),\n        //   new Vertex(\n        //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n        //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n        //   ).scaleXY(this.scale, rotationCenter)\n        // );\n        // this.ctx.drawImage(\n        //   textureImage,\n        //   0,\n        //   0,\n        //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        //   scaledTextureSize.min.x,\n        //   scaledTextureSize.min.y,\n        //   scaledTextureSize.width,\n        //   scaledTextureSize.height\n        // );\n        this.ctx.restore();\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {Vertex} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = (lineWidth || 1.0) * this.scale.x;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        let relX = this.offset.x + x * this.scale.x;\n        let relY = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : `\"${options.fontFamily}\"`\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        const rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        const lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\ndrawutils.helpers = {\n    // A helper function to define the clipping path.\n    // This could be a candidate for the draw library.\n    clipPoly: (ctx, offset, scale, vertices) => {\n        ctx.beginPath();\n        // Set clip mask\n        ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n        for (var i = 1; i < vertices.length; i++) {\n            const vert = vertices[i];\n            ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n        }\n        ctx.closePath();\n        ctx.clip();\n    }\n};\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @version  0.0.8\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size, alpha = 0.0) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {Vertex} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    texturedPoly(textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cross(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version   2.6.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    } // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    }\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n    },\n    min3(a, b, c) {\n        return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && 1 - s - t > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    }\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = (e) => {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = (e) => {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = (e) => {\n            _self.fireUpEvent(e, _self);\n        }));\n    }\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    }\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    destroy() {\n        this.releaseListeners();\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\n// prettier-ignore\nKeyHandler.KEY_CODES = {\n    'break': 3,\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29,\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46,\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91,\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93,\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108,\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169,\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173,\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181,\n    'unmute': 181,\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191,\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251,\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers[\"mousemove\"] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX, y: e.offsetY };\n    }\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(event, eventName) {\n        var _a, _b;\n        const rel = this.relPos(event);\n        const xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button,\n            leftButton: event.button === 0,\n            middleButton: event.button === 1,\n            rightButton: event.button === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    }\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    }\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class PBText {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex();\n        this.color = options.color;\n        this.fontFamily = options.fontFamily;\n        this.fontSize = options.fontSize;\n        this.fontStyle = options.fontStyle;\n        this.fontWeight = options.fontWeight;\n        this.lineHeight = options.lineHeight;\n        this.textAlign = options.textAlign;\n        this.rotation = options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    }\n} // END class\n//# sourceMappingURL=PBText.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  1.3.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector(point, endPointB);\n        }\n        else {\n            return new Vector(point, endPointA);\n        }\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author  Ikaros Kappler\n * @date    2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @version 1.1.0\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    destroy() {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    },\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        const M = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @version  1.15.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { PBText } from \"./PBText\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    constructor(config) {\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas == \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear)\n            pb.config.preClear();\n        tosvgDraw.clear(pb.config.backgroundColor);\n        if (pb.config.preDraw)\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            for (var i = 0; i < drawable.vertices.length; i++) {\n                this.vertices.push(drawable.vertices[i]);\n            }\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0) {\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                }\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else if (drawable instanceof PBText) {\n            this.vertices.push(drawable.anchor);\n            this.drawables.push(drawable);\n            drawable.anchor.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                    else if (drawable instanceof PBText) {\n                        this.removeVertex(drawable.anchor, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, \"#000000\");\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h0`);\n                        df.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h2`);\n                        df.setCurrentClassName(`${d.className}-start-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        const df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(`${d.uid}_h3`);\n                        df.setCurrentClassName(`${d.className}-end-control-handle`);\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(`${d.uid}_a0`);\n                draw.setCurrentClassName(`${d.className}-anchor`);\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(undefined);\n        draw.setCurrentClassName(undefined);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        const _self = this;\n        const _setSize = (w, h) => {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = _self.config.canvasWidthFactor * width + \"px\";\n            _self.canvas.style.height = _self.config.canvasWidthFactor * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"absolute\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = _self.config.canvasWidthFactor * space.width + \"px\";\n            _self.canvas.style.height = _self.config.canvasHeightFactor * space.height + \"px\";\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        const _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (p.typeName == \"bpath\") {\n                    let vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == \"vertex\") {\n                    let vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown(\"y\")) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == \"vertex\" && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == \"bpath\")\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == \"vertex\")\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\")) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            const fingerB = new Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k))\n                continue;\n            if (base.hasOwnProperty(k)) {\n                var typ = typeof base[k];\n                try {\n                    if (typ == \"boolean\")\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (typ == \"number\")\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (typ == \"function\" && typeof extension[k] == \"function\")\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extension[k], e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        element.style[\"transform-origin\"] = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0)\n            element.style.transform = null;\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    },\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map"],"names":["UIDGenerator","[object Object]","current","VertexAttr","key","this","draggable","selectable","isSelected","visible","model","VertexListeners","vertex","click","drag","dragStart","dragEnd","listener","_addListener","_removeListener","e","_fireEvent","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vertex","x","y","className","uid","next","tuple","NaN","attr","amountX","amountY","eqX","Math","abs","EPSILON","eqY","vert","sqrt","pow","origin","a","PI","atan2","factor","center","scaleXY","target","t","diff","difference","u","dist","distance","step","factors","angle","sub","len","ZERO","cos","sin","add","scalar","round","removeAllListeners","isDestroyed","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","arrayToJSON","precision","JSON","stringify","map","undefined","Number","toFixed","Polygon","isOpen","index","amount","inside","j","xi","yi","xj","yj","area","signedArea","scale","console","log","rotate","pointCount","Error","result","polygonPoint","stepSize","perimeter","n","polygonIndex","nextPolygonPoint","segmentLength","loopMax","curSegmentU","newPoint","clone","lerpAbs","Bounds","computeFromVertices","qbezier","cc0","cc1","edgeCenter","limit","qdata","toQuadraticBezierData","buffer","join","threshold","cbezier","b","c","aCenter","bCenter","a2","b0","toCubicBezierData","pathdata","BezierPath","fromArray","destroy","total","l","sum","width","height","toString","xMin","xMax","yMin","yMax","VertTuple","factory","set","newA","line","v0","v1","denominator","p","l2","vtutils","dist2","point","insideBoundsOnly","getClosestT","vertAt","v","w","Vector","vertA","vertB","super","tmp","numerator1","numerator2","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","updateArcLengths","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","arcLength","pointA","pointB","curveStep","newLength","tmpLength","getPointAt","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","POSITIVE_INFINITY","NEGATIVE_INFINITY","id","d","t2","nt2","tX","tY","startVec","getTangentAt","endVec","inv","convertU2T","getPerpendicularAt","tangentVector","sp","scp","ep","ecp","curve","equals","obj","prettyFormat","jsonString","parse","fromObject","arr","Array","isArray","pathPoints","totalArcLength","adjustCircular","bezierCurves","adjustSuccessorControlPoint","getLength","curveIndex","anchor","scaleFactor","scaleFactors","curveT","uMin","warn","uTemp","relativeU","getPoint","getTangent","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","path","uBefore","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","curves","reverse","getCurveAt","moveCurvePoint","adjustPredecessorControlPoint","getCurveCount","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","getBounds","toJSON","bPath","lastCurve","isInstance","digits","listJSON","pointArray","fromReducedList","bezierPath","Line","isNaN","Circle","radius","circle","getClosestPoint","circleUtils","perp","p0","p1","h","p2","x3","y3","x4","y4","interA","interB","transA","transB","det","distSquared","belowSqrt","sign","lineIntersection","CircleSector","startAngle","endAngle","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","RAD_TO_DEG","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","drawlibConfiguration","cache","Map","setSize","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","appendChild","nodeStyle","keys","polygon","triangle","ellipse","ellipseSector","circleSector","vector","image","text","rules","k","drawSettings","color","lineWidth","innerHTML","defs","forEach","value","nodeName","node","get","toUpperCase","delete","document","createElementNS","findElement","curId","blendMode","style","curClassName","setAttribute","parentNode","configuration","renderTime","clear","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","tmpGNode","tmpDefsNode","makeNode","_x","_y","_bindFillDraw","position","size","alpha","setImageSize","naturalWidth","ratioX","ratioY","naturalHeight","addEventListener","event","src","textureImage","textureSize","polygonPosition","rotation","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","cubicBezier","square","arcData","radiusX","radiusY","sizeX","sizeY","ceil","polyline","_a","_b","lineHeight","fontSize","textAlign","transformOrigin","translate","textNode","fontFamily","fontStyle","fontWeight","inplace","copyPathData","transformPathData","lastChild","removeChild","data","copy","_stx","_sty","_sx","_sy","_slp","HEAD_XML","drawutils","context","ctx","globalCompositeOperation","save","beginPath","moveTo","lineTo","strokeStyle","stroke","restore","_fillOrDraw","complete","globalAlpha","drawImage","basePolygonBounds","targetCenterDifference","getCenter","targetTextureSize","targetTextureOffset","helpers","clipPoly","rotationCenter","rotationalOffset","tileCenter","closePath","fillStyle","fill","bezierCurveTo","controlPoint","quadraticCurveTo","arc","asSegment","rect","setLineDash","_c","relX","relY","font","indexOf","fillText","strokeText","Path2D","clearRect","canvas","fillRect","clip","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","Float32Array","_x2rel","_y2rel","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","centroid","getCentroid","tri","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","min3","max3","pointIsInTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","intersection","circleIntersA","circleIntersB","circleIntersC","getIncircularTriangle","getCircumcircle","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","determinant","wrapMax","wrapMinMax","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","hasListener","lis","keyCode","handler","fireEvent","KEY_CODES","_keyDownListener","fireDownEvent","_keyPressListener","firePressEvent","_keyUpListener","fireUpEvent","removeEventListener","key2code","releaseListeners","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","callback","throwAlreadyInstalled","listenFor","unlistenFor","PBImage","upperLeft","lowerRight","PBText","getLen","getRotateAngle","v2","mr","dot","acos","getAngle","cross","HandlerAdmin","el","_args","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","querySelector","bind","move","cancel","preV","pinchStartLen","zoom","isDoubleTap","noop","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","Date","pageX","pageY","dispatch","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","del","VEllipse","axis","signedRadiusH","signedRadiusV","radiusH","radiusV","foci","getFoci","angleA","centerAngle","endPointA","addX","endPointB","normal","normalAt","rh","rv","sdiff","addY","angles","equidistantVertAngles","quarterSegmentCount","segmentCount","curAngle","nextAngle","addXY","startTangent","tangentAt","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","r2d","fullEllipsePointCount","ellipseAngles","filter","startIndex","findClosestToStartAngle","ea","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","PlotBoilerplate","config","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","handleLine","pathVertex","controlVertex","selectedVertex","grid","canvasElement","tagName","toLowerCase","eventCatcher","getContext","draw","copyInstance","parentElement","createElement","left","top","cursor","body","title","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","beginDrawCycle","drawAll","endDrawCycle","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","con","setCSSscale","drawable","addDragListener","enableBezierPathAutoAdjust","removeWithVertices","remove","removeVertex","keepVertices","Boolean","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","setCurrentClassName","setCurrentId","raster","crosshair","drawDrawable","df","squareHandle","_handleColor","diamondHandle","circleHandle","circleArc","arrow","error","drawDrawables","drawSelectPolygon","elem","propName","parseFloat","getComputedStyle","getPropertyValue","container","display","padding","getFProp","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","getAvailableContainerSpace","containsVert","tolerance","Draggable","VERTEX","setVIndex","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","isDown","paths","pindex","cindex","getPointByID","pid","fireDragStartEvent","oldDragAmount","fireDragEvent","handleClick","fireDragEndEvent","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","down","mouseDownHandler","mouseDragHandler","up","mouseUpHandler","mouseWheelHandler","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","fingerA","item","fingerB","window","clearSelection","selectVerticesInPolygon","props","createGUI","safeMergeByKeys","extension","hasOwnProperty","typ","transform","fallback","locateCurveByStartPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","locateCurveByEndPoint"],"mappings":"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"}