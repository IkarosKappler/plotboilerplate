{"version":3,"file":"plotboilerplate.browser.min.js","mappings":"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","sources":["webpack://plotboilerplate/./src/cjs/Vector.js","webpack://plotboilerplate/./src/cjs/draw.js","webpack://plotboilerplate/./src/cjs/Bounds.js","webpack://plotboilerplate/./src/cjs/Circle.js","webpack://plotboilerplate/./src/cjs/CircleSector.js","webpack://plotboilerplate/./src/cjs/drawgl.js","webpack://plotboilerplate/./src/cjs/Grid.js","webpack://plotboilerplate/./src/cjs/geomutils.js","webpack://plotboilerplate/./src/cjs/drawutilssvg.js","webpack://plotboilerplate/./src/cjs/VertexAttr.js","webpack://plotboilerplate/./src/cjs/KeyHandler.js","webpack://plotboilerplate/./src/cjs/PlotBoilerplate.js","webpack://plotboilerplate/./src/cjs/VertTuple.js","webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/index.js","webpack://plotboilerplate/./src/cjs/PBText.js","webpack://plotboilerplate/./src/cjs/Polygon.js","webpack://plotboilerplate/./src/cjs/VEllipseSector.js","webpack://plotboilerplate/./src/cjs/BezierPath.js","webpack://plotboilerplate/./src/cjs/Triangle.js","webpack://plotboilerplate/./src/cjs/Vertex.js","webpack://plotboilerplate/./src/cjs/PBImage.js","webpack://plotboilerplate/./src/cjs/VEllipse.js","webpack://plotboilerplate/./src/cjs/MouseHandler.js","webpack://plotboilerplate/./src/cjs/VertexListeners.js","webpack://plotboilerplate/./src/cjs/UIDGenerator.js","webpack://plotboilerplate/./src/cjs/Line.js","webpack://plotboilerplate/./src/cjs/CubicBezierCurve.js","webpack://plotboilerplate/webpack/bootstrap","webpack://plotboilerplate/webpack/runtime/define property getters","webpack://plotboilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://plotboilerplate/webpack/runtime/make namespace object","webpack://plotboilerplate/./src/cjs/entry.js"],"sourcesContent":["\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-25 Added the `getOrthogonal` method.\n * @modified 2025-04-14 Added the `Vector.rotate(number)` method.\n * @version  1.6.0\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vector = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    /**\n     * The inverse of a vector is a vector with the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    };\n    /**\n     * Get the orthogonal \"vector\" of this vector (rotated by 90° clockwise).\n     *\n     * @name getOrthogonal\n     * @method getOrthogonal\n     * @return {Vector} A new vector with the same length that stands on this vector's point a.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.getOrthogonal = function () {\n        // Orthogonal of vector (0,0)->(x,y) is (0,0)->(-y,x)\n        var linePoint = this.a.clone();\n        var startPoint = this.b.clone().sub(this.a);\n        var tmp = startPoint.x;\n        startPoint.x = -startPoint.y;\n        startPoint.y = tmp;\n        return new Vector(linePoint, startPoint.add(this.a));\n    };\n    /**\n     * Rotate this vector by the given angle around the first point `a`.\n     *\n     * @name rotate\n     * @method rotate\n     * @return {Vector} this - for chaining.\n     * @instance\n     * @memberof Vector\n     */\n    Vector.prototype.rotate = function (angle) {\n        this.b.rotate(angle, this.a);\n        return this;\n    };\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {XYCoords} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Removed unused method stub for texturedPoly helper function (cleanup).\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @modified 2023-09-30 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2023-10-07 Adding the optional `arrowHeadBasePositionBuffer` param to the arrowHead(...) method.\n * @modified 2024-09-13 Remoed the scaling of `lineWidth` in the `polygon` and `polyline` methods. This makes no sense here and doesn't match up with the behavior of other line functions.\n * @version  1.13.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutils = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\nvar Vector_1 = require(\"./Vector\");\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        // this.lineDash = [];\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    drawutils.prototype.applyStrokeOpts = function (strokeOptions) {\n        var _this = this;\n        var _a, _b;\n        this.ctx.setLineDash(((_a = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashArray) !== null && _a !== void 0 ? _a : []).map(function (dashArrayElem) {\n            // Note assume scale.x === scale.y\n            // Invariant scale makes funny stuff anyway.\n            return dashArrayElem * _this.scale.x;\n        }));\n        this.ctx.lineDashOffset = ((_b = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashOffset) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.beginDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutils.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutils.prototype.setConfiguration = function (configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    };\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDash: Array<number>) {\n    //   this.lineDash = lineDash;\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.setCurrentId = function (uid) {\n        // NOOP\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    drawutils.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var arrowHeadBasePosition = new Vertex_1.Vertex(0, 0);\n        this.arrowHead(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition); // Will NOT use dash configuration\n        this.line(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions); // Will use dash configuration\n    };\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    drawutils.prototype.cubicBezierArrow = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        var arrowHeadBasePosition = new Vertex_1.Vertex(0, 0);\n        // Will NOT use dash configuration\n        this.arrowHead(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        var diff = arrowHeadBasePosition.difference(endPoint);\n        // Will use dash configuration\n        this.cubicBezier(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n    };\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    drawutils.prototype.arrowHead = function (zA, zB, color, lineWidth, headLength, strokeOptions, arrowHeadBasePositionBuffer) {\n        // var headLength: number = 8; // length of head in pixels\n        if (headLength === void 0) { headLength = 8; }\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        var vertices = Vector_1.Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        this.ctx.moveTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size, alpha) {\n        if (alpha === void 0) { alpha = 1.0; }\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        // var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var targetCenterDifference = new Vertex_1.Vertex(polygonPosition.x, polygonPosition.y).difference(basePolygonBounds.getCenter());\n        // var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex_1.Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex_1.Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    };\n    /*\n    _texturedPoly(\n      textureImage: HTMLImageElement,\n      textureSize: Bounds,\n      polygon: Polygon,\n      polygonPosition: XYCoords,\n      rotation: number,\n      rotationCenter: XYCoords = { x: 0, y: 0 }\n    ): void {\n      var basePolygonBounds = polygon.getBounds();\n      var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n      var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n      // var rotationalOffset = { x: 0, y: 0 };\n      var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n  \n      // Get the position offset of the polygon\n      var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n      var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n  \n      this.ctx.save();\n  \n      // this.ctx.translate(\n      //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n      //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      // );\n      this.ctx.translate(\n        this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      );\n      this.ctx.rotate(rotation);\n  \n      drawutils.helpers.clipPoly(\n        this.ctx,\n        {\n          x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n          y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        },\n        this.scale,\n        polygon.vertices\n      );\n      this.ctx.drawImage(\n        textureImage,\n        0,\n        0,\n        textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x,\n        (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y,\n        targetTextureSize.x * this.scale.x,\n        targetTextureSize.y * this.scale.y\n      );\n  \n      // const scaledTextureSize = new Bounds(\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n      //   ).scaleXY(this.scale, rotationCenter),\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n      //   ).scaleXY(this.scale, rotationCenter)\n      // );\n      // this.ctx.drawImage(\n      //   textureImage,\n      //   0,\n      //   0,\n      //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n      //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n      //   scaledTextureSize.min.x,\n      //   scaledTextureSize.min.y,\n      //   scaledTextureSize.width,\n      //   scaledTextureSize.height\n      // );\n  \n      this.ctx.restore();\n    }\n    */\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {XYCoords} startPoint   - The start point of the cubic Bézier curve\n     * @param {XYCoords} controlPoint - The control point the cubic Bézier curve.\n     * @param {XYCoords} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth, strokeOptions) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color, lineWidth, strokeOptions) {\n        if (!path || path.length == 0) {\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgba(128,128,128, 0.5)\", undefined);\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.applyStrokeOpts(options);\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cross = function (center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth, strokeOptions) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth, strokeOptions);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth, strokeOptions) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.text = function (text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        var relX = this.offset.x + x * this.scale.x;\n        var relY = this.offset.y + y * this.scale.y;\n        var color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : \"\\\"\".concat(options.fontFamily, \"\\\"\")\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        var rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        var lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutils.prototype.path = function (pathData, color, lineWidth, options) {\n        var d = options && options.inplace ? pathData : drawutilssvg_1.drawutilssvg.copyPathData(pathData);\n        drawutilssvg_1.drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        this.applyStrokeOpts(options);\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    drawutils.helpers = {\n        // A helper function to define the clipping path.\n        // This could be a candidate for the draw library.\n        clipPoly: function (ctx, offset, scale, vertices) {\n            ctx.beginPath();\n            // Set clip mask\n            ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n            for (var i = 1; i < vertices.length; i++) {\n                var vert = vertices[i];\n                ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n            }\n            ctx.closePath();\n            ctx.clip();\n        }\n    };\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @modified 2022-11-28 Added the `clone` method.\n * @modified 2023-09-29 Added the `randomPoint` method.\n * @modified 2025-03-23 Added the `getMinDimension` and `getMaxDimension` methods.\n * @modified 2025-04-18 Change parameter type in `Bounds.computeFromVertices` from `Vertex` to more general `XYCoords`.\n * @modified 2025-04-19 Added methods to `Bounds` class: `getNorthPoint`, `getSouthPoint`, `getEastPoint` and `getWestPoint`.\n * @modified 2025-04-26 Added static method `Bounds.computeFromBoundsSet` to calculate containing bounds for a set of bounding boxes.\n * @version  1.8.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bounds = void 0;\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Get the center point of the north bound.\n     *\n     * @method getNorthPoint\n     * @instance\n     * @memberof Bounds\n     * @return {Vertex} The \"northmost\" centered point of this bounding box.\n     */\n    Bounds.prototype.getNorthPoint = function () {\n        return new Vertex_1.Vertex(this.min.x + this.width / 2.0, this.min.y);\n    };\n    ;\n    /**\n     * Get the center point of the south bound.\n     *\n     * @method getNorthPoint\n     * @instance\n     * @memberof Bounds\n     * @return {Vertex} The \"southhmost\" centered point of this bounding box.\n     */\n    Bounds.prototype.getSouthPoint = function () {\n        return new Vertex_1.Vertex(this.min.x + this.width / 2.0, this.max.y);\n    };\n    ;\n    /**\n    * Get the center point of the west bound.\n    *\n    * @method getWestPoint\n    * @instance\n    * @memberof Bounds\n    * @return {Vertex} The \"westhmost\" centered point of this bounding box.\n    */\n    Bounds.prototype.getWestPoint = function () {\n        return new Vertex_1.Vertex(this.min.x, this.min.y + this.height / 2.0);\n    };\n    ;\n    /**\n    * Get the center point of the east bound.\n    *\n    * @method getEastPoint\n    * @instance\n    * @memberof Bounds\n    * @return {Vertex} The \"easthmost\" centered point of this bounding box.\n    */\n    Bounds.prototype.getEastPoint = function () {\n        return new Vertex_1.Vertex(this.max.x, this.min.y + this.height / 2.0);\n    };\n    ;\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    Bounds.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([new Vertex_1.Vertex(this.min), new Vertex_1.Vertex(this.max.x, this.min.y), new Vertex_1.Vertex(this.max), new Vertex_1.Vertex(this.min.x, this.max.y)], false);\n    };\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    Bounds.prototype.getCenter = function () {\n        return new Vertex_1.Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    };\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    Bounds.prototype.getMinDimension = function () {\n        return Math.min(this.width, this.height);\n    };\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    Bounds.prototype.getMaxDimension = function () {\n        return Math.max(this.width, this.height);\n    };\n    /**\n     * Generate a random point inside this bounds object. Safe areas at the border to avoid\n     * included.\n     *\n     * @method randomPoint\n     * @instance\n     * @memberof Bounds\n     * @param {horizontalSafeArea} - (optional) The horizonal (left and right) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval.\n     * @param {verticalSafeArea} - (optional) The vertical (top and bottom) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval\n     * @returns {Vertex} A pseudo random point inside these bounds.\n     */\n    Bounds.prototype.randomPoint = function (horizontalSafeArea, verticalSafeArea) {\n        if (horizontalSafeArea === void 0) { horizontalSafeArea = 0; }\n        if (verticalSafeArea === void 0) { verticalSafeArea = 0; }\n        // Check if the safe areas are meant as percent\n        var absHorizontalSafeArea = horizontalSafeArea > 0 && horizontalSafeArea < 1 ? this.width * horizontalSafeArea : horizontalSafeArea;\n        var absVerticalSafeArea = verticalSafeArea > 0 && verticalSafeArea < 1 ? this.height * verticalSafeArea : verticalSafeArea;\n        return new Vertex_1.Vertex(this.min.x + absHorizontalSafeArea + Math.random() * (this.width - 2 * absHorizontalSafeArea), this.min.y + absVerticalSafeArea + Math.random() * (this.height - 2 * absVerticalSafeArea));\n    };\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{ min: \".concat(this.min.toString(), \", max : \").concat(this.max.toString(), \", width: \").concat(this.width, \", height : \").concat(this.height, \" }\");\n    };\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {Bounds} Creates a deep clone of this bounds object.\n     */\n    Bounds.prototype.clone = function () {\n        return new Bounds({ x: this.min.x, y: this.min.y }, { x: this.max.x, y: this.max.y });\n    };\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<XYCoords>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    Bounds.computeFromVertices = function (vertices) {\n        if (vertices.length == 0) {\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        }\n        var xMin = vertices[0].x;\n        var xMax = vertices[0].x;\n        var yMin = vertices[0].y;\n        var yMax = vertices[0].y;\n        var vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    /**\n    * Compute the minimal bounding box for a given set of existing bounding boxes.\n    *\n    * An empty vertex array will return an empty bounding box located at (0,0).\n    *\n    * @static\n    * @method computeFromBoundsSet\n    * @memberof Bounds\n    * @param {Array<IBounds>} boundingBoxes - The set of existing bounding boxes to get the containing bounding box for.\n    * @return The minimal Bounds for the given bounds instances.\n    **/\n    Bounds.computeFromBoundsSet = function (boundingBoxes) {\n        if (boundingBoxes.length == 0) {\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        }\n        var xMin = boundingBoxes[0].min.x;\n        var xMax = boundingBoxes[0].max.x;\n        var yMin = boundingBoxes[0].min.y;\n        var yMax = boundingBoxes[0].min.y;\n        var bounds;\n        for (var i in boundingBoxes) {\n            bounds = boundingBoxes[i];\n            xMin = Math.min(xMin, bounds.min.x);\n            xMax = Math.max(xMax, bounds.max.x);\n            yMin = Math.min(yMin, bounds.min.y);\n            yMax = Math.max(yMax, bounds.min.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    Bounds.fromDimension = function (width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    };\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @modified 2025-04-09 Added the `Circle.move(amount: XYCoords)` method.\n * @modified 2025-04-16 Class `Circle` now implements interface `Intersectable`.\n * @version  1.5.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Circle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Move the circle by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Circle\n     * @return {Circle} this for chaining\n     **/\n    Circle.prototype.move = function (amount) {\n        this.center.add(amount);\n        return this;\n    };\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    Circle.prototype.containsPoint = function (point) {\n        return this.center.distance(point) < this.radius;\n    };\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    Circle.prototype.containsCircle = function (circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n        // return (new Vector(this.center.clone(), pointA).add(pointA) as Vector).perp() as Vector;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the bounding box (bounds) of this Circle.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Circle\n     * @return {Bounds} The rectangular bounds of this Circle.\n     **/\n    Circle.prototype.getBounds = function () {\n        return new Bounds_1.Bounds(this.center.clone().subXY(Math.abs(this.radius), Math.abs(this.radius)), this.center.clone().addXY(Math.abs(this.radius), Math.abs(this.radius)));\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {XYCoords} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    Circle.prototype.lineIntersection = function (a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        var interA = new Vertex_1.Vertex();\n        var interB = new Vertex_1.Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        var transA = new Vertex_1.Vertex(a).sub(this.center);\n        var transB = new Vertex_1.Vertex(b).sub(this.center);\n        var diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        var dist = transA.distance(transB);\n        var det = transA.x * transB.y - transA.y * transB.x;\n        var distSquared = dist * dist;\n        var radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        var belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        var sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line_1.Line(interA.add(this.center), interB.add(this.center));\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this circle.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the circle outline.\n     */\n    Circle.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        var intersectioLine = this.lineIntersection(line.a, line.b);\n        if (!intersectioLine) {\n            return [];\n        }\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return [intersectioLine.a, intersectioLine.b].filter(function (vert) { return line.hasPoint(vert, true); });\n        }\n        else {\n            return [intersectioLine.a, intersectioLine.b];\n        }\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    Circle.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.center, vert);\n            var angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return _this.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    Circle.prototype.closestPoint = function (vert) {\n        var lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex_1.Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Circle.prototype.destroy = function () {\n        this.center.destroy();\n        this.isDestroyed = true;\n    };\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                         Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @modified 2024-01-30 Added a missing type in the `describeSVGArc` function.\n * @modified 2024-03-01 Added the `getStartPoint` and `getEndPoint` methods.\n * @modified 2024-03-08 Added the `containsAngle` method.\n * @modified 2024-03-09 Added the `circleSectorIntersection` method to find coherent sector intersections..\n * @modified 2024-03-09 Added the `angleAt` method to determine any angle at some ratio.\n * @modified 2025-04-02 Adding the `CircleSector.lineIntersections` and `CircleSector.lineIntersectionTangents` and implementing `Intersectable`.\n * @modified 2025-04-09 Adding the `CircleSector.move()` method.\n * @modified 2025-04-19 Tweaking the `CircleSector.containsAngle` method: all values (input angle, start- and end- angle) are wrapped into [0,2*PI) now.\n * @modified 2025-04-19 Class `CircleSector` implements interface `Bounded` now (method `getBounds` added).\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleSector = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nvar CircleSector = /** @class */ (function () {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    function CircleSector(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this ellipse.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CircleSector.prototype.getBounds = function () {\n        var _self = this;\n        var circleBounds = this.circle.getBounds();\n        // Calculage angles from east, west, north and south box points and check if they are inside\n        var candidates = [\n            circleBounds.getNorthPoint(),\n            circleBounds.getSouthPoint(),\n            circleBounds.getWestPoint(),\n            circleBounds.getEastPoint()\n        ].filter(function (point) {\n            // Check for each candidate points if they are contained in this sector. Drop if not.\n            var angle = new Line_1.Line(_self.circle.center, point).angle();\n            return _self.containsAngle(angle);\n        });\n        // Compute bounds and inlcude start end end point (they are definitely part of the bounds)\n        return Bounds_1.Bounds.computeFromVertices(candidates.concat([this.getStartPoint(), this.getEndPoint()]));\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Move the circle sector by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector} this for chaining\n     **/\n    CircleSector.prototype.move = function (amount) {\n        this.circle.move(amount);\n        return this;\n    };\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof CircleSector\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    CircleSector.prototype.containsAngle = function (angle) {\n        var wrappedAngle = geomutils_1.geomutils.mapAngleTo2PI(angle);\n        var wrappedStart = geomutils_1.geomutils.mapAngleTo2PI(this.startAngle);\n        var wrappedEnd = geomutils_1.geomutils.mapAngleTo2PI(this.endAngle);\n        // TODO: cleanup\n        // if (this.startAngle <= this.endAngle) {\n        //   return angle >= this.startAngle && angle < this.endAngle;\n        // } else {\n        //   // startAngle > endAngle\n        //   return angle >= this.startAngle || angle < this.endAngle;\n        // }\n        if (wrappedStart <= wrappedEnd) {\n            return wrappedAngle >= wrappedStart && wrappedAngle < wrappedEnd;\n        }\n        else {\n            // startAngle > endAngle\n            return wrappedAngle >= wrappedStart || wrappedAngle < wrappedEnd;\n        }\n    };\n    /**\n     * Get the angle inside this sector for a given ratio. 0.0 means startAngle, and 1.0 means endAngle.\n     *\n     * @param {number} t - The ratio inside [0..1].\n     * @method angleAt\n     * @instance\n     * @memberof CircleSector\n     * @return {number} The angle inside this sector at a given ratio.\n     */\n    CircleSector.prototype.angleAt = function (t) {\n        if (this.startAngle <= this.endAngle) {\n            var angleAtRatio = this.startAngle + (this.endAngle - this.startAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n        else {\n            // startAngle > endAngle\n            var angleAtRatio = this.startAngle + (Math.PI * 2 - this.startAngle + this.endAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n    };\n    /**\n     * Get the sectors starting point (on the underlying circle, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's stating point.\n     */\n    CircleSector.prototype.getStartPoint = function () {\n        return this.circle.vertAt(this.startAngle);\n    };\n    /**\n     * Get the sectors ending point (on the underlying circle, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's ending point.\n     */\n    CircleSector.prototype.getEndPoint = function () {\n        return this.circle.vertAt(this.endAngle);\n    };\n    /**\n     * Calculate the intersection of this circle sector and some other sector.\n     *\n     * If the two sectors do not corerently intersect (when not both points of the\n     * radical line are containted in both source sectors) then null is returned.\n     *\n     * See demo/53-circle-sector-intersections for a geometric visualisation.\n     *\n     * @method circleSectorIntersection\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector | null} The intersecion of both sectors or null if they don't intersect.\n     */\n    CircleSector.prototype.circleSectorIntersection = function (sector) {\n        var radicalLine = this.circle.circleIntersection(sector.circle);\n        if (!radicalLine) {\n            // The circles to not intersect at all.\n            return null;\n        }\n        // Circles intersect. Check if this sector interval intersects, too.\n        var thisIntersectionAngleA = this.circle.center.angle(radicalLine.a);\n        var thisIntersectionAngleB = this.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!this.containsAngle(thisIntersectionAngleA) || !this.containsAngle(thisIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // Circles intersect. Check if the passed sector interval intersects, too.\n        var thatIntersectionAngleA = sector.circle.center.angle(radicalLine.a);\n        var thatIntersectionAngleB = sector.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!sector.containsAngle(thatIntersectionAngleA) || !sector.containsAngle(thatIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // The radical line has no direction. Thus the resulting sector _might_ be in reverse order.\n        // Make a quick logical check: the center of the gap must still be located inside the result sector.\n        // If not: reverse result.\n        var gapSector = new CircleSector(this.circle, this.endAngle, this.startAngle);\n        var centerOfOriginalGap = gapSector.angleAt(0.5);\n        var resultSector = new CircleSector(new Circle_1.Circle(this.circle.center.clone(), this.circle.radius), thisIntersectionAngleA, thisIntersectionAngleB);\n        if (resultSector.containsAngle(centerOfOriginalGap)) {\n            resultSector.startAngle = thisIntersectionAngleB;\n            resultSector.endAngle = thisIntersectionAngleA;\n        }\n        return resultSector;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    CircleSector.prototype.lineIntersections = function (ray, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // First get all line intersections from underlying ellipse.\n        var ellipseIntersections = this.circle.lineIntersections(ray, inVectorBoundsOnly);\n        // Drop all intersection points that are not contained in the circle sectors bounds.\n        var tmpLine = new Line_1.Line(this.circle.center, new Vertex_1.Vertex());\n        return ellipseIntersections.filter(function (intersectionPoint) {\n            tmpLine.b.set(intersectionPoint);\n            var lineAngle = tmpLine.angle();\n            return _this.containsAngle(geomutils_1.geomutils.wrapMinMax(lineAngle, 0, Math.PI * 2));\n        });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    CircleSector.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.circle.center, vert);\n            var angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return _this.circle.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof CircleSector\n     * @return {void}\n     */\n    CircleSector.prototype.destroy = function () {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    };\n    CircleSector.circleSectorUtils = {\n        /**\n         * Helper function to convert polar circle coordinates to cartesian coordinates.\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {number} angle - The angle in radians.\n         */\n        polarToCartesian: function (centerX, centerY, radius, angle) {\n            return {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        },\n        /**\n         * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n         * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radius, startAngle, endAngle, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            var end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n            var start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n            // Split full circles into two halves.\n            // Some browsers have problems to render full circles (described by start==end).\n            if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n                var firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n                var secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n                return firstHalf.concat(secondHalf);\n            }\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            var sweepFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }\n    };\n    return CircleSector;\n}()); // END class\nexports.CircleSector = CircleSector;\n//# sourceMappingURL=CircleSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  0.0.10\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilsgl = void 0;\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext|null} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    drawutilsgl.prototype._x2rel = function (x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    };\n    drawutilsgl.prototype._y2rel = function (y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function (renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilsgl.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilsgl.prototype.setConfiguration = function (configuration) {\n        // TODO\n    };\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDashes: Array<number>) {\n    //   // TODO\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    drawutilsgl.prototype.setCurrentId = function (uid) {\n        // NOOP\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    drawutilsgl.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    drawutilsgl.prototype.cubicBezierArrow = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    drawutilsgl.prototype.arrowHead = function (zA, zB, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size, alpha) {\n        if (alpha === void 0) { alpha = 0.0; }\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    drawutilsgl.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {VertXYCoordsex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutilsgl.prototype.rect = function (position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cross = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.text = function (text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.label = function (text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilsgl.prototype.path = function (pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grid = void 0;\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @modified 2024-11-15 Adding helper function `geomutils.mapAngleTo2PI(number)` for mapping any value into the interval [0,2*PI).\n * @modified 2024-11-22 Adding helper function `geomutils.dotProduct(number)` for calculating the dot product of two vertices (as vectors).\n *\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geomutils = void 0;\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * @param {number} angle - The numeric value to map.\n     * @return {number} The mapped angle inside [0,PI*2].\n     **/\n    mapAngleTo2PI: function (angle) {\n        // Source: https://forums.codeguru.com/showthread.php?384172-get-angle-into-range-0-2*pi\n        var new_angle = Math.asin(Math.sin(angle));\n        if (Math.cos(angle) < 0) {\n            return Math.PI - new_angle;\n        }\n        else if (new_angle < 0) {\n            return new_angle + 2 * Math.PI;\n        }\n        else {\n            return new_angle;\n        }\n    },\n    /**\n     * Calculate the euclidean distance between two points given by four coordinates (two coordinates each).\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @returns {number}\n     */\n    dist4: function (x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y1 - y2, 2));\n    },\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * A × B := (A.x * B.x) + (A.y * B.y)\n     *\n     * @param {XYCoords} vertA - The first vertex.\n     * @param {XYCoords} vertB - The second vertex.\n     * @return {number} The dot product of the two vertices.\n     **/\n    dotProduct: function (vertA, vertB) {\n        return vertA.x * vertB.x + vertA.y * vertB.y;\n    },\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * -1;\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate(-i * (insideAngle / n), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax: function (x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax: function (x, min, max) {\n        return min + exports.geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","\"use strict\";\n/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-11-10 Tweaking some type issues.\n * @modified 2023-02-04 Fixed a typo in the CSS classname for cubic Bézier paths: cubicBezier (was cubierBezier).\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Added initialization checks for null parameters.\n * @modified 2023-09-29 Added a missing implementation to the `drawurilssvg.do(XYCoords,string)` function. Didn't draw anything.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-10-04 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2024-01-30 Fixing an issue with immutable style sets; changes to the global draw config did not reflect here (do now).\n * @modified 2024-03-10 Fixing some types for Typescript 5 compatibility.\n * @modified 2024-07-24 Caching custom style defs in a private buffer variable.\n * @version  1.6.10\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilssvg = void 0;\nvar CircleSector_1 = require(\"./CircleSector\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilssvg = /** @class */ (function () {\n    /**\n     * Passed from primary to secondary instance.\n     */\n    //private nodeStyle: SVGStyleElement;\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    function drawutilssvg(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs, nodeStyle) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex_1.Vertex(0, 0).set(offset);\n        this.scale = new Vertex_1.Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = Boolean(isSecondary);\n        this.drawConfig = drawConfig;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            if (!gNode || !bufferGNode || !nodeDefs || !bufferNodeDefs) {\n                throw \"Cannot create secondary svg draw lib with undefinde gNode|bufferGNode|nodeDefs|bufferNodeDefs.\";\n            }\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n            if (nodeStyle) {\n                this.nodeStyle = nodeStyle;\n            }\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    drawutilssvg.prototype.addStyleDefs = function (drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        this.rebuildStyleDefs(drawConfig);\n    };\n    /**\n     * This method is required to re-define the global style defs. It is needed\n     * if any value in the DrawConfig changed in the meantime.\n     * @param drawConfig\n     */\n    drawutilssvg.prototype.rebuildStyleDefs = function (drawConfig) {\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        var keys = {\n            \"bezier\": \"CubicBezierCurve\",\n            //\"bezierPath\": \"BezierPath\", // TODO: is this correct?\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        var rules = [];\n        // console.log(\"drawConfig\", drawConfig);\n        for (var k in keys) {\n            var className = keys[k];\n            var drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(\".\".concat(className, \" { fill : none; stroke: \").concat(drawSettings.color, \"; stroke-width: \").concat(drawSettings.lineWidth, \"px }\"));\n            }\n            else {\n                console.warn(\"Warning: your draw config is missing the key '\".concat(k, \"' which is required.\"));\n            }\n        }\n        if (this.customStyleDefs) {\n            rules.push(\"\\n/* Custom styles */\\n\");\n            this.customStyleDefs.forEach(function (value, key) {\n                rules.push(key + \" { \" + value + \" }\");\n            });\n            // this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + rules.join(\"\\n\");\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    };\n    /**\n     * Adds the internal <defs> node.\n     */\n    drawutilssvg.prototype.addDefsNode = function () {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    };\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    drawutilssvg.prototype.addCustomStyleDefs = function (defs) {\n        this.customStyleDefs = defs;\n    };\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    drawutilssvg.prototype.findElement = function (key, nodeName) {\n        if (!key) {\n            return null;\n        }\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    };\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    drawutilssvg.prototype.createSVGNode = function (nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    };\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    drawutilssvg.prototype.makeNode = function (nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            // node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n            node.style[\"mix-blend-mode\"](this.drawlibConfiguration.blendMode);\n        }\n        // if (this.lineDashEnabled && this.lineDash && this.lineDash.length > 0 && drawutilssvg.nodeSupportsLineDash(nodeName)) {\n        //   node.setAttribute(\"stroke-dasharray\", this.lineDash.join(\" \"));\n        // }\n        return node;\n    };\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    drawutilssvg.prototype._bindFillDraw = function (node, className, color, lineWidth, strokeOptions) {\n        this._configureNode(node, className, this.fillShapes, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    };\n    /**\n     * Bind this given node to a parent. If no parent is passed then the global\n     * node buffer will be used.\n     *\n     * @method _bindNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {SVGElement=} bindingParent - (optional) You may pass node other than the glober buffer node.\n     * @returns {SVGElement} The passed node itself.\n     */\n    drawutilssvg.prototype._bindNode = function (node, bindingParent) {\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            (bindingParent !== null && bindingParent !== void 0 ? bindingParent : this.bufferGNode).appendChild(node);\n        }\n        return node;\n    };\n    /**\n     * Add custom CSS class names and the globally defined CSS classname to the\n     * given node.\n     *\n     * @method addCSSClasses\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {string} className - The additional custom classname to add.\n     * @returns {void}\n     */\n    drawutilssvg.prototype._addCSSClasses = function (node, className) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", \"\".concat(className, \" \").concat(this.curClassName));\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n    };\n    drawutilssvg.prototype._configureNode = function (node, className, fillMode, color, lineWidth, strokeOptions) {\n        this._addCSSClasses(node, className);\n        node.setAttribute(\"fill\", fillMode && color ? color : \"none\");\n        node.setAttribute(\"stroke\", fillMode ? \"none\" : color || \"none\");\n        node.setAttribute(\"stroke-width\", \"\".concat(lineWidth || 1));\n        if (this.curId) {\n            node.setAttribute(\"id\", \"\".concat(this.curId)); // Maybe React-style 'key' would be better?\n        }\n        this.applyStrokeOpts(node, strokeOptions);\n        return node;\n    };\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    drawutilssvg.prototype.setSize = function (canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", \"0 0 \".concat(this.canvasSize.width, \" \").concat(this.canvasSize.height));\n        this.svgNode.setAttribute(\"width\", \"\".concat(this.canvasSize.width));\n        this.svgNode.setAttribute(\"height\", \"\".concat(this.canvasSize.height));\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilssvg.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, this.drawConfig, // null as any as DrawConfig, // no DrawConfig – this will work as long as `isSecondary===true`\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs, this.nodeStyle);\n        return copy;\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilssvg.prototype.setConfiguration = function (configuration) {\n        this.drawlibConfiguration = configuration;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentId = function (uid) {\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentClassName = function (className) {\n        this.curClassName = className;\n    };\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.beginDrawCycle = function (renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilssvg.prototype.endDrawCycle = function (renderTime) {\n        this.rebuildStyleDefs(this.drawConfig);\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        var tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        var tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    };\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    drawutilssvg.prototype.applyStrokeOpts = function (node, strokeOptions) {\n        var _this = this;\n        if (strokeOptions &&\n            strokeOptions.dashArray &&\n            strokeOptions.dashArray.length > 0 &&\n            drawutilssvg.nodeSupportsLineDash(node.tagName)) {\n            node.setAttribute(\"stroke-dasharray\", strokeOptions.dashArray\n                .map(function (dashArayElem) {\n                return dashArayElem * _this.scale.x;\n            })\n                .join(\" \"));\n            if (strokeOptions.dashOffset) {\n                node.setAttribute(\"stroke-dashoffset\", \"\".concat(strokeOptions.dashOffset * this.scale.x));\n            }\n        }\n    };\n    drawutilssvg.prototype._x = function (x) {\n        return this.offset.x + this.scale.x * x;\n    };\n    drawutilssvg.prototype._y = function (y) {\n        return this.offset.y + this.scale.y * y;\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.line = function (zA, zB, color, lineWidth, strokeOptions) {\n        // const line: SVGElement = this.makeNode(\"line\");\n        // this.applyStrokeOpts(line, strokeOptions);\n        // line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        // line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        // line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        // line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        var line = this.makeLineNode(zA, zB, color, lineWidth, strokeOptions);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1, strokeOptions);\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.arrow = function (zA, zB, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var group = this.makeNode(\"g\");\n        var arrowHeadBasePosition = { x: 0, y: 0 };\n        // Just create the child nodes, don't bind them to the root node.\n        var arrowHead = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        var line = this.makeLineNode(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions);\n        group.appendChild(line);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"linear-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    };\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    drawutilssvg.prototype.cubicBezierArrow = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var group = this.makeNode(\"g\");\n        // Just create the child nodes, don't bind them to the root node.\n        var arrowHeadBasePosition = new Vertex_1.Vertex(0, 0);\n        var arrowHead = this.makeArrowHeadNode(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        var diff = arrowHeadBasePosition.difference(endPoint);\n        var bezier = this.makeCubicBezierNode(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n        group.appendChild(bezier);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"cubicbezier-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    };\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    drawutilssvg.prototype.arrowHead = function (zA, zB, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var node = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, strokeOptions);\n        return this._bindFillDraw(node, \"arrowhead\", color, lineWidth || 1, strokeOptions);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.image = function (image, position, size, alpha) {\n        var _this = this;\n        if (alpha === void 0) { alpha = 1.0; }\n        var node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        var setImageSize = function (image) {\n            if (image.naturalWidth) {\n                var ratioX = size.x / image.naturalWidth;\n                var ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", \"\".concat(image.naturalWidth * _this.scale.x));\n                node.setAttribute(\"height\", \"\".concat(image.naturalHeight * _this.scale.y));\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", \"\".concat(alpha));\n                // }\n                node.setAttribute(\"transform\", \"translate(\".concat(_this._x(position.x), \" \").concat(_this._y(position.y), \") scale(\").concat(ratioX, \" \").concat(ratioY, \")\"));\n            }\n        };\n        image.addEventListener(\"load\", function (event) {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", \"\".concat(0));\n        node.setAttribute(\"y\", \"\".concat(0));\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // const basePolygonBounds: Bounds = polygon.getBounds();\n        var rotatedScalingOrigin = new Vertex_1.Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        // const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        var clipPathNode = this.makeNode(\"clipPath\");\n        var clipPathId = \"clippath_\".concat(UIDGenerator_1.UIDGenerator.next()); // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        var gNode = this.makeNode(\"g\");\n        var imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", \"\".concat(this._x(rotatedScalingOrigin.x)));\n        imageNode.setAttribute(\"y\", \"\".concat(this._y(rotatedScalingOrigin.y)));\n        imageNode.setAttribute(\"width\", \"\".concat(textureSize.width));\n        imageNode.setAttribute(\"height\", \"\".concat(textureSize.height));\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", \"rotate(\".concat(rotation * RAD_TO_DEG, \", \").concat(this._x(rotatedScalingOrigin.x), \", \").concat(this._y(rotatedScalingOrigin.y), \")\"));\n        var pathNode = this.makeNode(\"path\");\n        var pathData = [];\n        if (polygon.vertices.length > 0) {\n            var self_1 = this;\n            pathData.push(\"M\", \"\".concat(this._x(polygon.vertices[0].x)), \"\".concat(this._y(polygon.vertices[0].y)));\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", \"\".concat(this._x(polygon.vertices[i].x)), \"\".concat(this._y(polygon.vertices[i].y)));\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", \"\".concat(this._x(rotatedScalingOrigin.x), \" \").concat(this._y(rotatedScalingOrigin.y)));\n        gNode.setAttribute(\"transform\", \"scale(\".concat(this.scale.x, \", \").concat(this.scale.y, \")\"));\n        var clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", \"url(#\".concat(clipPathId, \")\"));\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        var node = this.makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezierPath = function (path, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (!path || path.length == 0) {\n            return node;\n        }\n        // Draw curve\n        var d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handle = function (startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handleLine = function (startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(128,128,128,0.5)\");\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.dot = function (p, color) {\n        var node = this.makeNode(\"line\");\n        node.setAttribute(\"x1\", \"\".concat(this._x(p.x)));\n        node.setAttribute(\"y1\", \"\".concat(this._y(p.y)));\n        node.setAttribute(\"x2\", \"\".concat(this._x(p.x)));\n        node.setAttribute(\"y2\", \"\".concat(this._y(p.y)));\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.point = function (p, color) {\n        var radius = 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\".concat(this._x(p.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(p.y)));\n        node.setAttribute(\"r\", \"\".concat(radius));\n        return this._bindFillDraw(node, \"point\", color, 1);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circle = function (center, radius, color, lineWidth, strokeOptions) {\n        // Todo: draw ellipse when scalex!=scaley\n        var node = this.makeNode(\"circle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", \"\".concat(this._x(center.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(center.y)));\n        node.setAttribute(\"r\", \"\".concat(radius * this.scale.x)); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        var arcData = CircleSector_1.CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        var node = this.makeNode(\"ellipse\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", \"\".concat(this._x(center.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(center.y)));\n        node.setAttribute(\"rx\", \"\".concat(radiusX * this.scale.x));\n        node.setAttribute(\"ry\", \"\".concat(radiusY * this.scale.y));\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", \"rotate(\".concat((rotation * 180) / Math.PI, \" \").concat(this._x(center.x), \" \").concat(this._y(center.y), \")\"));\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.square = function (center, size, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"rectangle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", \"\".concat(this._x(center.x - size / 2.0)));\n        node.setAttribute(\"y\", \"\".concat(this._y(center.y - size / 2.0)));\n        node.setAttribute(\"width\", \"\".concat(size * this.scale.x));\n        node.setAttribute(\"height\", \"\".concat(size * this.scale.y));\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.rect = function (position, width, height, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"rect\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", \"\".concat(this._x(position.x)));\n        node.setAttribute(\"y\", \"\".concat(this._y(position.y)));\n        node.setAttribute(\"width\", \"\".concat(width * this.scale.x));\n        node.setAttribute(\"height\", \"\".concat(height * this.scale.y));\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // console.log(\"grid\");\n        // const node: SVGElement = this.makeNode(\"pattern\");\n        // var patternId = \"pattern_id_\" + Math.floor(Math.random() * 65365);\n        // node.setAttribute(\"id\", patternId);\n        // node.setAttribute(\"viewBox\", `0,0,${sizeX},${sizeY}`);\n        // node.setAttribute(\"width\", `${sizeX}`);\n        // node.setAttribute(\"height\", `${sizeX}`);\n        // var pattern: SVGElement = this.makeNode(\"path\");\n        // const d: SVGPathParams = [];\n        // d.push(\"M\", sizeX / 2.0, 0);\n        // d.push(\"L\", sizeX / 2.0, sizeY);\n        // d.push(\"M\", 0, sizeY / 2.0);\n        // d.push(\"L\", sizeX, sizeY / 2.0);\n        // node.setAttribute(\"d\", d.join(\" \"));\n        // this.bufferedNodeDefs.append(pattern);\n        // const fillNode: SVGElement = this.makeNode(\"rect\");\n        // // For some strange reason SVG rotation transforms use degrees instead of radians\n        // // Note that the background does not scale with the zoom level (always covers full element)\n        // fillNode.setAttribute(\"x\", \"0\");\n        // fillNode.setAttribute(\"y\", \"0\");\n        // fillNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        // fillNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // fillNode.setAttribute(\"fill\", `url(#${patternId})`);\n        // return this._bindFillDraw(fillNode, \"grid\", \"red\", 1);\n        var node = this.makeNode(\"path\");\n        var d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode(\"path\");\n        var d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.diamondHandle = function (center, size, color) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {XYCoords} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.squareHandle = function (center, size, color) {\n        var node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", \"\".concat(this._x(center.x) - size / 2.0));\n        node.setAttribute(\"y\", \"\".concat(this._y(center.y) - size / 2.0));\n        node.setAttribute(\"width\", \"\".concat(size));\n        node.setAttribute(\"height\", \"\".concat(size));\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\".concat(this._x(center.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(center.y)));\n        node.setAttribute(\"r\", \"\".concat(radius));\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.crosshair = function (center, radius, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilssvg.prototype.cross = function (center, radius, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polygon = function (polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polyline = function (vertices, isOpen, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (vertices.length == 0) {\n            return node;\n        }\n        // Draw curve\n        var d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilssvg.prototype.text = function (text, x, y, options) {\n        var _a, _b, _c;\n        options = options || {};\n        var color = options.color || \"black\";\n        var lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        var textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        var transformOrigin = \"\".concat(this._x(x), \"px \").concat(this._y(y), \"px\");\n        var translate = \"translate(\".concat(this._x(x), \" \").concat(this._y(y) + lineHeight / 2, \")\");\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        var rotate = options.rotation ? \"rotate(\".concat(options.rotation * RAD_TO_DEG, \" 0 0)\") : \"\";\n        var node = this.makeNode(\"g\");\n        var curId = this.curId;\n        this.curId = curId + \"_text\";\n        var textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", (_c = options.fontFamily) !== null && _c !== void 0 ? _c : \"\"); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? \"\".concat(options.fontSize * this.scale.x) : \"\");\n        textNode.setAttribute(\"font-style\", options.fontStyle ? \"\".concat(options.fontStyle) : \"\");\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? \"\".concat(options.fontWeight) : \"\");\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.label = function (text, x, y, rotation, color) {\n        var node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", \"translate(\".concat(x, \",\").concat(y, \"), rotate(\").concat(((rotation || 0) / Math.PI) * 180, \")\"));\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilssvg.prototype.path = function (pathData, color, lineWidth, options) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, options);\n        // Transform the path: in-place (fast) or copy (slower)\n        var d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.clear = function (color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = null; // undefined;\n        var node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", \"\".concat(this.canvasSize.width));\n        node.setAttribute(\"height\", \"\".concat(this.canvasSize.height));\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = null; // undefined;\n    };\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    drawutilssvg.prototype.removeAllChildNodes = function () {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    };\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    drawutilssvg.createSvg = function () {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    };\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.copyPathData = function (data) {\n        var copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    };\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    drawutilssvg.transformPathData = function (data, offset, scale) {\n        // Scale and translate {x,y}\n        var _stx = function (index) {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        var _sty = function (index) {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        var _sx = function (index) {\n            data[index] = scale.x * Number(data[index]);\n        };\n        var _sy = function (index) {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = function (index) {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            var cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    }; // END transformPathData\n    drawutilssvg.nodeSupportsLineDash = function (nodeName) {\n        return [\"line\", \"path\", \"circle\", \"ellipse\", \"rectangle\", \"rect\"].includes(nodeName);\n    };\n    /**\n     * Creates a basic <line> node with start and end coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeLineNode\n     * @param {XYCoords} zA - The line's start position.\n     * @param {XYCoords} zB - The line's start position.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGLineElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makeLineNode = function (zA, zB, color, lineWidth, strokeOptions, classNameOverride) {\n        var line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", \"\".concat(this._x(zA.x)));\n        line.setAttribute(\"y1\", \"\".concat(this._y(zA.y)));\n        line.setAttribute(\"x2\", \"\".concat(this._x(zB.x)));\n        line.setAttribute(\"y2\", \"\".concat(this._y(zB.y)));\n        this._configureNode(line, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"line\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return line;\n    };\n    /**\n     * Creates a basic <path> node with given path string data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makePathNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makePathNode = function (pathString, color, lineWidth, strokeOptions, classNameOverride) {\n        var path = this.makeNode(\"path\");\n        path.setAttribute(\"d\", pathString);\n        this._configureNode(path, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"path\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return path;\n    };\n    /**\n     * Creates a basic arrow head node (<path> node) at the end of the given line coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeArrowHeadNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {number=8} headLength - (optional) The length of the arrow head; if none is specified then the head will be 8 absolute units long.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makeArrowHeadNode = function (zA, zB, color, lineWidth, headLength, strokeOptions, arrowHeadBasePositionBuffer) {\n        if (headLength === void 0) { headLength = 8; }\n        var vertices = Vector_1.Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        var d = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        for (var i = 1; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        var node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"arrowhead\");\n        return node;\n    };\n    /**\n     * Creates a basic cubic Bézier path node (<path> node) with the given cubic Bézier data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeCubicBezierNode\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makeCubicBezierNode = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        // Draw curve\n        var d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        var node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"cubicBezier\");\n        return node;\n    };\n    drawutilssvg.HEAD_XML = [\n        '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n        '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n        \"\"\n    ].join(\"\\n\");\n    return drawutilssvg;\n}());\nexports.drawutilssvg = drawutilssvg;\n//# sourceMappingURL=drawutilssvg.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2024-03-10 Fixed some types for Typescript 5 compatibility.\n * @version  1.1.2\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexAttr = void 0;\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyHandler = void 0;\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    };\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = function (e) {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = function (e) {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = function (e) {\n            _self.fireUpEvent(e, _self);\n        }));\n    };\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    };\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    KeyHandler.prototype.destroy = function () {\n        this.releaseListeners();\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    // prettier-ignore\n    KeyHandler.KEY_CODES = {\n        'break': 3, // alternate: 19\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29, // alternate: 235?\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36, // alternate: 172?\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46, // alternate: 8\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91, // left ⌘\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93, // right ⌘\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108, // firefox, 194 on chrome\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169, // (AZERTY)\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173, // firefox\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181, // firefox, alternate: 173\n        'unmute': 181, // alternate: 173?\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191, // 231 alternate?\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251, // Chrome/Edge\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @modified 2022-10-25 Added the `origin` to the default draw config.\n * @modified 2022-11-06 Adding an XML declaration to the SVG export routine.\n * @modified 2022-11-23 Added the `drawRaster` (default=true) option to the config/drawconfig.\n * @modified 2023-02-04 Fixed a bug in the `drawDrawable` function; fill's current classname was not set.\n * @modified 2023-02-10 Fixing an issue of the `style.position` setting when `fitToParent=true` from `absolute` to `static` (default).\n * @modified 2023-02-10 Cleaning up most type errors in the main class (mostly null checks).\n * @modified 2023-02-10 Adding `enableZoom` and `enablePan` (both default true) to have the option to disable these functions.\n * @modified 2023-09-29 Adding proper dicionary key and value types to the params of `PlotBoilerplate.utils.safeMergeByKeys` (was `object` before).\n * @modified 2024-07-08 Adding `PlotBoilerplate.getGUI()` to retrieve the GUI instance.\n * @modified 2024-08-25 Extending main class `PlotBoilerplate` optional param `isBackdropFiltersEnabled`.\n * @modified 2024-12-02 Adding the `triggerRedraw` to the `removeAll` method.\n * @modified 2025-05-07 Changing the return type of `removeVertex` from `void` to `boolean`.\n * @modified 2025-05-07 Handling content changes now with `contentChangeListeners`.\n * @modified 2025-05-07 Added `PlogBoilerplate.addContentChangeListener` and `.removeContentChangeListener`.\n * @modified 2025-05-07 Moving full vectors now by default when vector point a is moved.\n * @modified 2025-05-20 Applying `lineWith` parameter in the draw routine for vectors (had been missing).\n *\n * @version  1.21.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlotBoilerplate = void 0;\nvar alloyfinger_typescript_1 = require(\"alloyfinger-typescript\");\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar CircleSector_1 = require(\"./CircleSector\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar VEllipseSector_1 = require(\"./VEllipseSector\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar PBText_1 = require(\"./PBText\");\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enablePan=true] - (default true) Set to false if you want to disable panning completely.\n     * @param {boolean=} [config.enableZoom=true] - (default true) Set to false if you want to disable zooming completely.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    function PlotBoilerplate(config, drawConfig) {\n        var _b, _c;\n        /**\n         * A list of content change listeners.\n         */\n        this.contentChangeListeners = [];\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        /**\n         * A storage variable for retrieving the GUI instance once it was created.\n         */\n        this._gui = null;\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas === \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        var f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: function () {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: function () {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            enableZoom: f.bool(config, \"enableZoom\", true), // default=true\n            enablePan: f.bool(config, \"enablePan\", true), // default=true\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false),\n            isBackdropFiltersEnabled: f.bool(config, \"isBackdropFiltersEnabled\", true)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            // bezierPath: {\n            //   color: \"#0022a8\",\n            //   lineWidth: 1\n            // },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            },\n            origin: {\n                color: \"#000000\"\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        var canvasElement = typeof config.canvas === \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        if (typeof canvasElement === \"undefined\") {\n            throw \"Cannot initialize PlotBoilerplate with a null canvas (element \\\"\".concat(config.canvas, \" not found).\");\n        }\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawgl_1.drawutilsgl === \"undefined\") {\n                console.warn(\"Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.\");\n                console.warn(\"Disabling GL and falling back to Canvas2D.\");\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                // Override the case 'null' here. If GL is not supported, well then nothing works.\n                var ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawgl_1.drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                // Override the case 'null' here. If context creation is not supported, well then nothing works.\n                var ctx = this.canvas.getContext(\"2d\");\n                this.draw = new draw_1.drawutils(ctx, false);\n                this.fill = new draw_1.drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg_1.drawutilssvg === \"undefined\")\n                throw \"The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.\";\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg_1.drawutilssvg(this.canvas, new Vertex_1.Vertex(), // offset\n            new Vertex_1.Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set((_b = this.config.scaleX) !== null && _b !== void 0 ? _b : 1.0, this.config.scaleY);\n        this.fill.scale.set((_c = this.config.scaleX) !== null && _c !== void 0 ? _c : 1.0, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        // Create fake SVG node\n        var svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg_1.drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear) {\n            pb.config.preClear();\n        }\n        tosvgDraw.clear(pb.config.backgroundColor || \"white\");\n        if (pb.config.preDraw) {\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        }\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        // Add: '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' ?\n        var blob = new Blob(['<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\") {\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        }\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        var _b, _c, _d, _e;\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleX) !== null && _c !== void 0 ? _c : 1.0);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_d = this.config.cssScaleX) !== null && _d !== void 0 ? _d : 1.0, (_e = this.config.cssScaleY) !== null && _e !== void 0 ? _e : 1.0);\n        }\n    };\n    /**\n     * Adds a new content change listener to this instance. Adding duplicates is not possible.\n     *\n     * @param {PBContentChangeListener} listener - The listenre to add.\n     * @method addContentChangeListener\n     * @instance\n     * @memberof PlotBoilerplate\n     * @returns {void}\n     */\n    PlotBoilerplate.prototype.addContentChangeListener = function (listener) {\n        for (var i in this.contentChangeListeners) {\n            if (this.contentChangeListeners[i] === listener) {\n                return;\n            }\n        }\n        this.contentChangeListeners.push(listener);\n    };\n    /**\n     * Removes an existing content change listener from this instance.\n     *\n     * @param {PBContentChangeListener} listener - The listenre to add.\n     * @method removeContentChangeListener\n     * @instance\n     * @memberof PlotBoilerplate\n     * @returns {void}\n     */\n    PlotBoilerplate.prototype.removeContentChangeListener = function (listener) {\n        for (var i = 0; i < this.contentChangeListeners.length; i++) {\n            if (this.contentChangeListeners[i] === listener) {\n                this.contentChangeListeners.splice(i, 1);\n                return;\n            }\n        }\n    };\n    PlotBoilerplate.prototype._fireContentChanged = function (addedDrawables, removedDrawables) {\n        for (var i in this.contentChangeListeners) {\n            var listener = this.contentChangeListeners[i];\n            if (listener && typeof listener === \"function\") {\n                listener({\n                    type: addedDrawables.length > 0 ? \"DRAWABLES_ADDED\" : \"DRAWABLES_REMOVED\",\n                    addedDrawables: addedDrawables,\n                    removedDrawables: removedDrawables\n                });\n            }\n        }\n    };\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw, doNotFireEvent) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false, doNotFireEvent);\n            }\n            // !doNotFireEvent && this._fireContentChanged(arr, []);\n        }\n        else {\n            var addedDrawables = [drawable];\n            if (drawable instanceof Vertex_1.Vertex) {\n                this.drawables.push(drawable);\n                this.vertices.push(drawable);\n            }\n            else if (drawable instanceof Line_1.Line) {\n                // Add some lines\n                this.drawables.push(drawable);\n                this.vertices.push(drawable.a);\n                this.vertices.push(drawable.b);\n                addedDrawables.push(drawable.a, drawable.b);\n            }\n            else if (drawable instanceof Vector_1.Vector) {\n                this.drawables.push(drawable);\n                this.vertices.push(drawable.a);\n                this.vertices.push(drawable.b);\n                addedDrawables.push(drawable.a, drawable.b);\n                drawable.a.listeners.addDragListener(function (event) {\n                    drawable.b.add(event.params.dragAmount);\n                });\n            }\n            else if (drawable instanceof VEllipse_1.VEllipse) {\n                this.vertices.push(drawable.center);\n                this.vertices.push(drawable.axis);\n                addedDrawables.push(drawable.center, drawable.axis);\n                this.drawables.push(drawable);\n                drawable.center.listeners.addDragListener(function (event) {\n                    drawable.axis.add(event.params.dragAmount);\n                });\n            }\n            else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n                this.vertices.push(drawable.ellipse.center);\n                this.vertices.push(drawable.ellipse.axis);\n                addedDrawables.push(drawable.ellipse.center, drawable.ellipse.axis);\n                this.drawables.push(drawable);\n                drawable.ellipse.center.listeners.addDragListener(function (event) {\n                    drawable.ellipse.axis.add(event.params.dragAmount);\n                });\n            }\n            else if (drawable instanceof Circle_1.Circle) {\n                this.vertices.push(drawable.center);\n                addedDrawables.push(drawable.center);\n                this.drawables.push(drawable);\n            }\n            else if (drawable instanceof CircleSector_1.CircleSector) {\n                this.vertices.push(drawable.circle.center);\n                addedDrawables.push(drawable.circle.center);\n                this.drawables.push(drawable);\n            }\n            else if (drawable instanceof Polygon_1.Polygon) {\n                this.drawables.push(drawable);\n                for (var i = 0; i < drawable.vertices.length; i++) {\n                    this.vertices.push(drawable.vertices[i]);\n                    addedDrawables.push(drawable.vertices[i]);\n                }\n            }\n            else if (drawable instanceof Triangle_1.Triangle) {\n                this.drawables.push(drawable);\n                this.vertices.push(drawable.a);\n                this.vertices.push(drawable.b);\n                this.vertices.push(drawable.c);\n                addedDrawables.push(drawable.a, drawable.b, drawable.c);\n            }\n            else if (drawable instanceof BezierPath_1.BezierPath) {\n                this.drawables.push(drawable);\n                var bezierPath = drawable;\n                for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                    if (!drawable.adjustCircular && i == 0) {\n                        this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                        addedDrawables.push(bezierPath.bezierCurves[i].startPoint);\n                    }\n                    this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                    this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                    this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                    addedDrawables.push(bezierPath.bezierCurves[i].endPoint, bezierPath.bezierCurves[i].startControlPoint, bezierPath.bezierCurves[i].endControlPoint);\n                    bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                    bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n                }\n                PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n            }\n            else if (drawable instanceof PBImage_1.PBImage) {\n                this.vertices.push(drawable.upperLeft);\n                this.vertices.push(drawable.lowerRight);\n                addedDrawables.push(drawable.upperLeft, drawable.lowerRight);\n                this.drawables.push(drawable);\n                // Todo: think about a IDragEvent interface\n                drawable.upperLeft.listeners.addDragListener(function (e) {\n                    drawable.lowerRight.add(e.params.dragAmount);\n                });\n                drawable.lowerRight.attr.selectable = false;\n            }\n            else if (drawable instanceof PBText_1.PBText) {\n                this.vertices.push(drawable.anchor);\n                addedDrawables.push(drawable.anchor);\n                this.drawables.push(drawable);\n                drawable.anchor.attr.selectable = false;\n            }\n            else {\n                throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n            }\n            !doNotFireEvent && this._fireContentChanged(addedDrawables, []);\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\") {\n            this.redraw();\n        }\n    };\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @param {removeWidth}\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices, doNotFireEvent) {\n        if (Array.isArray(drawable)) {\n            var removedDrawables_1 = [];\n            for (var i = 0; i < drawable.length; i++) {\n                if (this.remove(drawable[i], false, removeWithVertices, true)) {\n                    removedDrawables_1.push(drawable[i]);\n                }\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            !doNotFireEvent && this._fireContentChanged([], removedDrawables_1);\n            return removedDrawables_1.length > 0;\n        }\n        if (drawable instanceof Vertex_1.Vertex) {\n            var wasRemoved_1 = this.removeVertex(drawable, false, false);\n            if (redraw) {\n                this.redraw();\n            }\n            !doNotFireEvent && this._fireContentChanged([], [drawable]);\n            return wasRemoved_1;\n        }\n        var wasRemoved = false;\n        var removedDrawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                removedDrawables.push(drawable);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false, true);\n                        this.removeVertex(drawable.b, false, true);\n                        removedDrawables.push(drawable.a, drawable.b);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false, true);\n                        this.removeVertex(drawable.b, false, true);\n                        removedDrawables.push(drawable.a, drawable.b);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false, true);\n                        this.removeVertex(drawable.axis, false, true);\n                        removedDrawables.push(drawable.center, drawable.axis);\n                    }\n                    else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center, false, true);\n                        this.removeVertex(drawable.ellipse.axis, false, true);\n                        removedDrawables.push(drawable.ellipse.center, drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false, true);\n                    }\n                    else if (drawable instanceof CircleSector_1.CircleSector) {\n                        this.removeVertex(drawable.circle.center, false, true);\n                        removedDrawables.push(drawable.circle.center);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++) {\n                            this.removeVertex(drawable.vertices[i], false, true);\n                            removedDrawables.push(drawable.vertices[i]);\n                        }\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false, true);\n                        this.removeVertex(drawable.b, false, true);\n                        this.removeVertex(drawable.c, false, true);\n                        removedDrawables.push(drawable.a, drawable.b, drawable.c);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false, true);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false, true);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false, true);\n                            removedDrawables.push(drawable.bezierCurves[i].startPoint, drawable.bezierCurves[i].startControlPoint, drawable.bezierCurves[i].endControlPoint);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false, true);\n                                removedDrawables.push(drawable.bezierCurves[i].endPoint);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false, true);\n                        this.removeVertex(drawable.lowerRight, false, true);\n                        removedDrawables.push(drawable.upperLeft, drawable.lowerRight);\n                    }\n                    else if (drawable instanceof PBText_1.PBText) {\n                        this.removeVertex(drawable.anchor, false, true);\n                        removedDrawables.push(drawable.anchor);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n                !doNotFireEvent && this._fireContentChanged([], removedDrawables);\n                wasRemoved = true;\n            } // END if\n        } // END for\n        return wasRemoved;\n    };\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {boolean}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw, doNotFireEvent) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                !doNotFireEvent && this._fireContentChanged([], [vert]);\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @param {boolean=true} triggerRedraw - By default this method triggers the redraw routine; passing `false` will suppress redrawing.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    PlotBoilerplate.prototype.removeAll = function (keepVertices, triggerRedraw) {\n        var removedDrawables = this.drawables;\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            removedDrawables = removedDrawables.concat(this.vertices);\n            this.vertices = [];\n        }\n        if (triggerRedraw || typeof triggerRedraw === \"undefined\") {\n            this.redraw();\n        }\n        removedDrawables.length > 0 && this._fireContentChanged([], removedDrawables);\n    };\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var _b, _c;\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    };\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function (draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        var gScale = {\n            x: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    };\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function (draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, this.drawConfig.origin.color);\n    };\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.fill.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    };\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawable = function (d, renderTime, draw, fill) {\n        if (d instanceof BezierPath_1.BezierPath) {\n            var curveIndex = 0;\n            for (var c in d.bezierCurves) {\n                // Restore these settings again in each loop (will be overwritten)\n                this.draw.setCurrentId(\"\".concat(d.uid, \"-\").concat(curveIndex));\n                this.fill.setCurrentId(\"\".concat(d.uid, \"-\").concat(curveIndex));\n                this.draw.setCurrentClassName(d.className);\n                this.fill.setCurrentClassName(d.className);\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-start-handle\"));\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-start-handle\"));\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h2\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-start-control-handle\"));\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h3\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-end-control-handle\"));\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(\"\".concat(d.uid, \"_l0\"));\n                    draw.setCurrentClassName(\"\".concat(d.className, \"-start-line\"));\n                    draw.handleLine(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint);\n                    draw.setCurrentId(\"\".concat(d.uid, \"_l1\"));\n                    draw.setCurrentClassName(\"\".concat(d.className, \"-end-line\"));\n                    draw.handleLine(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint);\n                }\n                curveIndex++;\n            } // END for\n        }\n        else if (d instanceof Polygon_1.Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle_1.Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipse_1.VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_e0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-v-line\"));\n                draw.handleLine(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n                draw.setCurrentId(\"\".concat(d.uid, \"_e1\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-h-line\"));\n                draw.handleLine(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\".concat(d.className));\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector_1.VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\".concat(d.className));\n            var data = VEllipseSector_1.VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle_1.Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector_1.CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex_1.Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line_1.Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector_1.Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color, this.drawConfig.vector.lineWidth);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-handle\"));\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage_1.PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_l0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-line\"));\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-lower-right\"));\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText_1.PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_a0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-anchor\"));\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    };\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function (draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    };\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    };\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    };\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawAll = function (renderTime, draw, fill) {\n        if (this.config.drawRaster) {\n            this.drawGrid(draw);\n        }\n        if (this.config.drawOrigin) {\n            this.drawOrigin(draw);\n        }\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(null);\n        draw.setCurrentClassName(null);\n    }; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor || \"white\");\n    };\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        var _b, _c;\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * ((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0), this.canvasSize.height * ((_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0)));\n    };\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    PlotBoilerplate.prototype.getFProp = function (elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    };\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    };\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _this = this;\n        var _b, _c, _d, _e, _f, _g;\n        var _self = this;\n        var _setSize = function (w, h) {\n            var _b, _c;\n            w *= (_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0;\n            h *= (_c = _self.config.canvasHeightFactor) !== null && _c !== void 0 ? _c : 1.0;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                _this.canvas.setAttribute(\"viewBox\", \"0 0 \".concat(w, \" \").concat(h));\n                _this.canvas.setAttribute(\"width\", \"\".concat(w));\n                _this.canvas.setAttribute(\"height\", \"\".concat(h));\n                _this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                _this.eventCatcher.style.width = \"\".concat(w, \"px\");\n                _this.eventCatcher.style.height = \"\".concat(h, \"px\");\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = ((_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0) * width + \"px\";\n            _self.canvas.style.height = ((_c = _self.config.canvasWidthFactor) !== null && _c !== void 0 ? _c : 1.0) * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"static\";\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = ((_d = _self.config.canvasWidthFactor) !== null && _d !== void 0 ? _d : 1.0) * space.width + \"px\";\n            _self.canvas.style.height = ((_e = _self.config.canvasHeightFactor) !== null && _e !== void 0 ? _e : 1.0) * space.height + \"px\";\n            _self.canvas.style.top = \"\";\n            _self.canvas.style.left = \"\";\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = \"\";\n            _self.canvas.style.height = \"\";\n            _setSize((_f = _self.config.defaultCanvasWidth) !== null && _f !== void 0 ? _f : 1024, (_g = _self.config.defaultCanvasHeight) !== null && _g !== void 0 ? _g : 768);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (e) {\n        var _self = this;\n        var point = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX || 1.0, _self.config.cssScaleY || 1.0));\n        if (point) {\n            _self.vertices[point.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (point.typeName == \"bpath\") {\n                    var vert = _self.paths[point.pindex].bezierCurves[point.cindex].getPointByID(point.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (point.typeName == \"vertex\") {\n                    var vert = _self.vertices[point.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler && this.keyHandler.isDown(\"y\")) {\n                _self.vertices[point.vindex].attr.bezierAutoAdjust = !_self.vertices[point.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    };\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var draggablePoint = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!draggablePoint)\n            return;\n        // Drag all selected elements?\n        if (draggablePoint.typeName == \"vertex\" && _self.vertices[draggablePoint.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[draggablePoint.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(draggablePoint);\n            if (draggablePoint.typeName == \"bpath\")\n                _self.paths[draggablePoint.pindex].bezierCurves[draggablePoint.cindex]\n                    .getPointByID(draggablePoint.pid)\n                    .listeners.fireDragStartEvent(e);\n            else if (draggablePoint.typeName == \"vertex\")\n                _self.vertices[draggablePoint.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler && (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\"))) {\n            if (!this.config.enablePan) {\n                return;\n            }\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        if (!this.config.enableZoom) {\n            return;\n        }\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.adjustOffset = function (redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    };\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _this = this;\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down(function (e) {\n                _self.mouseDownHandler(e);\n            })\n                .drag(function (e) {\n                _self.mouseDragHandler(e);\n            })\n                .up(function (e) {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel(function (e) {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                var bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" ||\n                typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: function (evt) {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (evt) {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                if (!touchDownPos || !touchMovePos) {\n                                    return;\n                                }\n                                var rel = relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                if (!_this.config.enablePan) {\n                                    return;\n                                }\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (evt) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                if (!touchDownPos) {\n                                    return;\n                                }\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (evt) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (evt) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (evt) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (evt) {\n                            if (!_this.config.enableZoom) {\n                                return;\n                            }\n                            var touchItem0 = evt.touches.item(0);\n                            var touchItem1 = evt.touches.item(1);\n                            if (!evt.touches || !multiTouchStartScale || !touchItem0 || !touchItem1) {\n                                return;\n                            }\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(touchItem0.clientX, touchItem0.clientY);\n                            var fingerB = new Vertex_1.Vertex(touchItem1.clientX, touchItem1.clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        // window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                        var createAlloyFinger = window[\"createAlloyFinger\"];\n                        createAlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new alloyfinger_typescript_1.default(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function (props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        var utils = globalThis[\"utils\"];\n        // if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\") {\n        //   return (globalThis[\"utils\" as keyof Object] as any as ({createGUI : (pb:PlotBoilerplate,props:DatGuiProps|undefined)=>GUI })).createGUI(this, props);\n        if (utils && typeof utils.createGUI === \"function\") {\n            return (this._gui = utils.createGUI(this, props));\n        }\n        else {\n            throw \"Cannot create dat.GUI or lil-gui instance; did you load the ./utils/creategui helper function an the dat.GUI/lil-gui library?\";\n        }\n    };\n    /**\n     * Retriebe the GUI once it was created. If the `createGUI` method was not called or failed to create any\n     * GUI then null is returned.\n     * @returns {GUI | null}\n     */\n    PlotBoilerplate.prototype.getGUI = function () {\n        return this._gui;\n    };\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            class_1.prototype.isVertex = function () {\n                return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n            };\n            class_1.prototype.setVIndex = function (vindex) {\n                this.vindex = vindex;\n                return this;\n            };\n            return class_1;\n        }()),\n        __setFunctionName(_a, \"Draggable\"),\n        _a.VERTEX = \"vertex\",\n        _a);\n    /**\n     * A set of helper functions.\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k)) {\n                    continue;\n                }\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    var extVal = extension[k];\n                    try {\n                        if (typ == \"boolean\") {\n                            if (typeof extVal === \"string\")\n                                base[k] = Boolean(!!JSON.parse(extVal));\n                            else\n                                base[k] = extVal;\n                        }\n                        else if (typ == \"number\") {\n                            if (typeof extVal === \"string\")\n                                base[k] = Number(JSON.parse(extVal) * 1);\n                            else\n                                base[k] = extension[k];\n                        }\n                        else if (typ == \"function\" && typeof extVal == \"function\") {\n                            base[k] = extension[k];\n                        }\n                        else {\n                            // Probably a sting\n                            base[k] = extension[k];\n                        }\n                    }\n                    catch (e) {\n                        console.error(\"error in key \", k, extVal, e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /*\n        __safeMergeByKeys: <KeyType extends string | number | symbol, ValueType extends boolean | number | string | Function>(\n          base: Record<KeyType, ValueType>,\n          extension: Record<KeyType, string>\n        ): Record<KeyType, ValueType> => {\n          for (var k in extension) {\n            if (!extension.hasOwnProperty(k)) continue;\n            if (base.hasOwnProperty(k)) {\n              var typ = typeof base[k];\n              try {\n                if (typ == \"boolean\") base[k] = !!JSON.parse(extension[k]);\n                else if (typ == \"number\") base[k] = JSON.parse(extension[k]) * 1;\n                else if (typ == \"function\" && typeof extension[k] == \"function\") base[k] = extension[k];\n                else base[k] = extension[k];\n              } catch (e) {\n                console.error(\"error in key \", k, extension[k], e);\n              }\n            } else {\n              base[k] = extension[k];\n            }\n          }\n          return base;\n        },\n        *()\n    \n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            // element.style[\"transform-origin\"] = \"0 0\";\n            element.style.transformOrigin = \"0 0\";\n            if (scaleX == 1.0 && scaleY == 1.0) {\n                // element.style.transform = null;\n                element.style.removeProperty(\"transform\");\n            }\n            else\n                element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"undefined\")\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === \"number\")\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"boolean\")\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== \"function\")\n                    return fallback;\n                return obj[key];\n            }\n        }, // END fetch\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) {\n                    // && !bezierPath.adjustCircular ) {\n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\nexports.default = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-29 Fixed a calculation error in the VertTuple.hasPoint() function; distance measure was broken!\n * @modified 2024-09-10 Chaging the first param of `pointDistance` from `Vertex` to less strict type `XYCoords`. This should not break anything.\n * @modified 2024-09-10 Adding the optional `epsilon` param to the `hasPoint` method.\n * @modified 2024-12-02 Added the `epsilon` param to the `colinear` method. Default is 1.0e-6.\n * @modified 2025-03-31 Added the `VertTuple.revert` method.\n * @modified 2025-04-15 Changed param of `VertTuple.moveTo` method from `Vertex` to `XYCoords`.\n * @modified 2025-04-15 Added method `VertTuple.move` method.\n * @version 1.4.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertTuple = void 0;\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    /**\n     * Reverse this vertex tuple: a becomes b, and b becomes a.\n     * This operation is in-place.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     */\n    VertTuple.prototype.revert = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {XYCoords} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    /**\n     * Move this line by the given amount\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move both point of this tuple.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.move = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    };\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @param {epsilon?=1.0e-6} epsilon - The epsilon to use (default is 1.0e-6).\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line, epsilon) {\n        return Math.abs(this.denominator(line)) < (typeof epsilon === \"undefined\" ? Vertex_1.Vertex.EPSILON : epsilon);\n    };\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point - The point to check.\n     * @param {boolean=} insideBoundsOnly - [optional] If set to to true (default=false) the point must be between start and end point of the line.\n     * @param {number=Vertex.EPSILON} epsilon - [optional] A tolerance.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    VertTuple.prototype.hasPoint = function (point, insideBoundsOnly, epsilon) {\n        var t = this.getClosestT(point);\n        // Compare to pointDistance?\n        var distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex_1.Vertex.EPSILON) && t >= 0 && t <= 1;\n        }\n        else {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex_1.Vertex.EPSILON); // t >= 0 && t <= 1;\n        }\n    };\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {XYCoords} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VertTuple.prototype.destroy = function () {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * TypeScript port by Ikaros Kappler.\n *\n * Original file from https://github.com/AlloyTeam/AlloyFinger\n *\n * @date 2021-02-10\n */\nimport { AlloyFinger } from './alloy_finger';\nexport { AlloyFinger };\nexport default AlloyFinger;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-25 Fixed a type error in the constructor. Nothing vital.\n * @version  1.1.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBText = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar PBText = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function PBText(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex_1.Vertex();\n        this.color = options === null || options === void 0 ? void 0 : options.color;\n        this.fontFamily = options === null || options === void 0 ? void 0 : options.fontFamily;\n        this.fontSize = options === null || options === void 0 ? void 0 : options.fontSize;\n        this.fontStyle = options === null || options === void 0 ? void 0 : options.fontStyle;\n        this.fontWeight = options === null || options === void 0 ? void 0 : options.fontWeight;\n        this.lineHeight = options === null || options === void 0 ? void 0 : options.lineHeight;\n        this.textAlign = options === null || options === void 0 ? void 0 : options.textAlign;\n        this.rotation = options === null || options === void 0 ? void 0 : options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    PBText.prototype.destroy = function () {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    };\n    return PBText;\n}()); // END class\nexports.PBText = PBText;\n//# sourceMappingURL=PBText.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @modified 2023-09-25 Added the `Polygon.getInterpolationPolygon(number)` function.\n * @modified 2023-09-25 Added the `Polygon.lineIntersections(Line,boolean)` function.\n * @modified 2023-09-29 Added the `Polygon.closestLineIntersection(Line,boolean)` function.\n * @modified 2023-11-24 Added the `Polygon.containsPolygon(Polygon)' function.\n * @modified 2024-10-12 Added the `getEdgeAt` method.\n * @modified 2024-10-30 Added the `getEdges` method.\n * @modified 2024-12-02 Added the `elimitateColinearEdges` method.\n * @modified 2025-02-12 Added the `containsVerts` method to test multiple vertices for containment.\n * @modified 2025-03-28 Added the `Polygon.utils.locateLineIntersecion` static helper method.\n * @modified 2025-03-28 Added the `Polygon.lineIntersectionTangents` method.\n * @modified 2025-04-09 Added the `Polygon.getCentroid` method.\n * @modified 2025-05-16 Class `Polygon` now implements `IBounded`.\n * @modified 2025-05-20 Tweaking `Polygon.getInnerAngleAt` and `Polygo.isAngleAcute` to handle indices out of array bounds as well.\n * @modified 2025-06-07 Adding `Polygon.closestLineIntersectionIndex` to determine line intersections plus detected edge index.\n * @version 1.16.0\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polygon = void 0;\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof vertices == \"undefined\") {\n            vertices = [];\n        }\n        this.vertices = vertices;\n        this.isOpen = isOpen || false;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVertex\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertex = function (vert) {\n        this.vertices.push(vert);\n    };\n    /**\n     * Add a vertex at a particular position of the `vertices` array.\n     *\n     * @method addVertexAt\n     * @param {Vertex} vert - The vertex to add.\n     * @param {number} index - The position to add the vertex at. Will be handled modulo.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertexAt = function (vert, index) {\n        // var moduloIndex = index % (this.vertices.length + 1);\n        this.vertices.splice(index, 0, vert);\n    };\n    /**\n     * Get a new instance of the line at the given start index. The returned line will consist\n     * of the vertex at `vertIndex` and `vertIndex+1` (will be handled modulo).\n     *\n     * @method getEdgeAt\n     * @param {number} vertIndex - The vertex index of the line to start.\n     * @instance\n     * @memberof Polygon\n     * @return {Line}\n     **/\n    Polygon.prototype.getEdgeAt = function (vertIndex) {\n        return new Line_1.Line(this.getVertexAt(vertIndex), this.getVertexAt(vertIndex + 1));\n    };\n    /**\n     * Converts this polygon into a sequence of lines. Please note that each time\n     * this method is called new lines are created. The underlying line vertices are no clones\n     * (instances).\n     *\n     * @method getEdges\n     * @instance\n     * @memberof Polygon\n     * @return {Array<Line>}\n     */\n    Polygon.prototype.getEdges = function () {\n        var lines = [];\n        for (var i = 0; i + 1 < this.vertices.length; i++) {\n            // var line = this.getLineAt(i).clone();\n            lines.push(this.getEdgeAt(i));\n        }\n        if (!this.isOpen && this.vertices.length > 0) {\n            lines.push(this.getEdgeAt(this.vertices.length - 1));\n        }\n        return lines;\n    };\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute. Please not that this is\n     * only working for clockwise polygons. If this polygon is not clockwise please use the\n     * `isClockwise` method and reverse polygon vertices if needed.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    Polygon.prototype.getInnerAngleAt = function (vertIndex) {\n        var p2 = this.vertices[vertIndex % this.vertices.length];\n        var p1 = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        var p3 = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // See\n        //    https://math.stackexchange.com/questions/149959/how-to-find-the-interior-angle-of-an-irregular-pentagon-or-polygon\n        // π−arccos((P2−P1)⋅(P3−P2)|P2−P1||P3−P2|)\n        // Check if triangle is acute (will be used later)\n        // Acute angles and obtuse angles need to be handled differently.\n        var isAcute = this.isAngleAcute(vertIndex);\n        // Differences\n        var zero = new Vertex_1.Vertex(0, 0);\n        var p2mp1 = new Vertex_1.Vertex(p2.x - p1.x, p2.y - p1.y);\n        var p3mp2 = new Vertex_1.Vertex(p3.x - p2.x, p3.y - p2.y);\n        var p2mp1_len = zero.distance(p2mp1);\n        var p3mp2_len = zero.distance(p3mp2);\n        // Dot products\n        var dotProduct = geomutils_1.geomutils.dotProduct(p2mp1, p3mp2);\n        var lengthProduct = p2mp1_len * p3mp2_len;\n        if (isAcute) {\n            return Math.PI - Math.acos(dotProduct / lengthProduct);\n        }\n        else {\n            return Math.PI + Math.acos(dotProduct / lengthProduct);\n        }\n    };\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    Polygon.prototype.isAngleAcute = function (vertIndex) {\n        var A = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        var B = this.vertices[vertIndex % this.vertices.length];\n        var C = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // Find local winding number for triangle A B C\n        var windingNumber = Triangle_1.Triangle.utils.determinant(A, B, C);\n        // console.log(\"vertIndex\", vertIndex, \"windingNumber\", windingNumber);\n        return windingNumber < 0;\n    };\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @method getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    Polygon.prototype.getVertexAt = function (index) {\n        if (index < 0) {\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        }\n        else {\n            return this.vertices[index % this.vertices.length];\n        }\n    };\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    Polygon.prototype.move = function (amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    };\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n    /**\n     * Check if all given vertices are inside this polygon.<br>\n     * <br>\n     * This method just uses the `Polygon.containsVert` method.\n     *\n     * @method containsVerts\n     * @param {XYCoords[]} verts - The vertices to check.\n     * @return {boolean} True if all passed vertices are inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVerts = function (verts) {\n        var _this = this;\n        return verts.every(function (vert) { return _this.containsVert(vert); });\n    };\n    /**\n     * Check if the passed polygon is completly contained inside this polygon.\n     *\n     * This means:\n     *  - all polygon's vertices must be inside this polygon.\n     *  - the polygon has no edge intersections with this polygon.\n     *\n     * @param {Polygon} polygon - The polygon to check if contained.\n     * @return {boolean}\n     */\n    Polygon.prototype.containsPolygon = function (polygon) {\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            if (!this.containsVert(polygon.vertices[i])) {\n                return false;\n            }\n        }\n        // All vertices are inside; check for intersections\n        var lineSegment = new Line_1.Line(new Vertex_1.Vertex(), new Vertex_1.Vertex());\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            lineSegment.a.set(polygon.vertices[i]);\n            lineSegment.b.set(polygon.vertices[(i + 1) % polygon.vertices.length]);\n            if (this.lineIntersections(lineSegment, true).length > 0) {\n                // Current segment has intersection(s) with this polygon.\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.area = function () {\n        return Polygon.utils.area(this.vertices);\n    };\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.signedArea = function () {\n        return Polygon.utils.signedArea(this.vertices);\n    };\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    Polygon.prototype.isClockwise = function () {\n        // return Polygon.utils.signedArea(this.vertices) < 0;\n        return Polygon.utils.isClockwise(this.vertices);\n    };\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.perimeter = function () {\n        var length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    };\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    };\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    /**\n     * Get the mean `center` of this polygon by calculating the mean value of all vertices.\n     *\n     * Mean: (v[0] + v[1] + ... v[n-1]) / n\n     *\n     * @method getMeanCenter\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex|null} `null` is no vertices are available.\n     */\n    Polygon.prototype.getMeanCenter = function () {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        var center = this.vertices[0].clone();\n        for (var i = 1; i < this.vertices.length; i++) {\n            center.add(this.vertices[i]);\n        }\n        center.x /= this.vertices.length;\n        center.y /= this.vertices.length;\n        return center;\n    };\n    /**\n     * Get centroid.\n     * Centroids define the barycenter of any non self-intersecting convex polygon.\n     *\n     * If the polygon is self intersecting or non konvex then the barycenter is not well defined.\n     *\n     * https://mathworld.wolfram.com/PolygonCentroid.html\n     *\n     * @method getCentroid\n     * @instance\n     * @memberof Polygon\n     * @returns {Vertex|null}\n     */\n    Polygon.prototype.getCentroid = function () {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        var center = new Vertex_1.Vertex(0.0, 0.0);\n        var n = this.vertices.length;\n        for (var i = 0; i < n; i++) {\n            // center.add(this.vertices[i]);\n            var cur = this.vertices[i];\n            var next = this.vertices[(i + 1) % n];\n            var factor = cur.x * next.y - next.x * cur.y;\n            center.x += (cur.x + next.x) * factor;\n            center.y += (cur.y + next.y) * factor;\n        }\n        var area = this.area();\n        center.x *= 1 / (6 * area);\n        center.y *= 1 / (6 * area);\n        return center;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    Polygon.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        return Polygon.utils\n            .locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly)\n            .map(function (intersectionTuple) { return intersectionTuple.intersection; });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Polygon.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon.utils.locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly).map(function (intersectionTuple) {\n            var polyLine = _this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector_1.Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersection);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Polygon.prototype.lineIntersectionTangentsIndices = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon.utils.locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly).map(function (intersectionTuple) {\n            var polyLine = _this.getEdgeAt(intersectionTuple.edgeIndex);\n            return {\n                intersection: new Vector_1.Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersection),\n                edgeIndex: intersectionTuple.edgeIndex\n            };\n        });\n    };\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A).\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {Vertex | null} - The intersection point within the polygon bounds.\n     */\n    Polygon.prototype.closestLineIntersection = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var closestInterSectionIndex = this.closestLineIntersectionIndex(line, inVectorBoundsOnly);\n        if (closestInterSectionIndex) {\n            return closestInterSectionIndex.intersection;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A) plus the edge index..\n     *\n     * See demo `63-measure-angles-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {PolygonIntersectionTuple| null} - A pair containing the intersection point and the affected polygon edge index.\n     */\n    Polygon.prototype.closestLineIntersectionIndex = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var allIntersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (allIntersections.length <= 0) {\n            // Empty polygon -> no intersections\n            return null;\n        }\n        // Find the closest intersection\n        var closestIntersection = new Vertex_1.Vertex(Number.MAX_VALUE, Number.MAX_VALUE);\n        var closestInterSectionIndex = -1;\n        var curDist = Number.MAX_VALUE;\n        for (var i = 0; i < allIntersections.length; i++) {\n            var curVert = allIntersections[i];\n            var dist = curVert.distance(line.a);\n            if (dist < curDist) {\n                // && line.hasPoint(curVert)) {\n                curDist = dist;\n                closestIntersection = curVert;\n                closestInterSectionIndex = i;\n            }\n        }\n        // return [closestIntersection, closestInterSectionIndex];\n        return { edgeIndex: closestInterSectionIndex, intersection: closestIntersection };\n    };\n    /**\n     * Construct a new polygon from this polygon with more vertices on each edge. The\n     * interpolation count determines the number of additional vertices on each edge.\n     * An interpolation count of `0` will return a polygon that equals the source\n     * polygon.\n     *\n     * @param {number} interpolationCount\n     * @returns {Polygon} A polygon with `interpolationCount` more vertices (as as factor).\n     */\n    Polygon.prototype.getInterpolationPolygon = function (interpolationCount) {\n        var verts = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            var curVert = this.vertices[i];\n            var nextVert = this.vertices[(i + 1) % this.vertices.length];\n            verts.push(curVert.clone());\n            // Add interpolation points\n            if (!this.isOpen || i + 1 !== this.vertices.length) {\n                var lerpAmount = 1.0 / (interpolationCount + 1);\n                for (var j = 1; j <= interpolationCount; j++) {\n                    verts.push(curVert.clone().lerp(nextVert, lerpAmount * j));\n                }\n            }\n        }\n        return new Polygon(verts, this.isOpen);\n    };\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    Polygon.prototype.getEvenDistributionPolygon = function (pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        var result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex_1.Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        var perimeter = this.perimeter();\n        var stepSize = perimeter / pointCount;\n        var n = this.vertices.length;\n        var polygonIndex = 1;\n        var nextPolygonPoint = new Vertex_1.Vertex(this.vertices[1]);\n        var segmentLength = polygonPoint.distance(nextPolygonPoint);\n        var loopMax = this.isOpen ? n : n + 1;\n        var curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex_1.Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    Polygon.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices(this.vertices);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @method clone\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} The cloned polygon.\n     */\n    Polygon.prototype.clone = function () {\n        return new Polygon(this.vertices.map(function (vert) { return vert.clone(); }), this.isOpen);\n    };\n    /**\n     * Create a new polygon without colinear adjacent edges. This method does not midify the current polygon\n     * but creates a new one.\n     *\n     * Please note that this method does NOT create deep clones of the vertices. Use Polygon.clone() if you need to.\n     *\n     * Please also note that the `tolerance` may become really large here, as the denominator of two closely\n     * parallel lines is usually pretty large. See the demo `57-eliminate-colinear-polygon-edges` to get\n     * an impression of how denominators work.\n     *\n     * @method elimitateColinearEdges\n     * @instance\n     * @memberof Polygon\n     * @param {number?} tolerance - (default is 1.0) The epsilon to detect co-linear edges.\n     * @return {Polygon} A new polygon without co-linear adjacent edges – respective the given epsilon.\n     */\n    Polygon.prototype.elimitateColinearEdges = function (tolerance) {\n        var eps = typeof tolerance === \"undefined\" ? 1.0 : tolerance;\n        var verts = this.vertices.slice(); // Creates a shallow copy\n        var i = 0;\n        var lineA = new Line_1.Line(new Vertex_1.Vertex(), new Vertex_1.Vertex());\n        var lineB = new Line_1.Line(new Vertex_1.Vertex(), new Vertex_1.Vertex());\n        while (i + 1 < verts.length && verts.length > 2) {\n            var vertA = verts[i];\n            var vertB = verts[(i + 1) % verts.length];\n            lineA.a = vertA;\n            lineA.b = vertB;\n            lineB.a = vertB;\n            var areColinear = false;\n            var j = i + 2;\n            do {\n                var vertC = verts[j % verts.length];\n                lineB.b = vertC;\n                areColinear = lineA.colinear(lineB, eps);\n                // console.log(\"are colinear?\", i, i + 1, j, areColinear);\n                if (areColinear) {\n                    j++;\n                }\n            } while (areColinear);\n            // Now j points to the first vertex that's NOT colinear to the current lineA\n            // -> delete all vertices in between\n            if (j - i > 2) {\n                // Means: there have been 'colinear vertices' in between\n                verts.splice(i + 1, j - i - 2);\n            }\n            i++;\n        }\n        return new Polygon(verts, this.isOpen);\n    };\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    };\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0) {\n            return \"\";\n        }\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    };\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Polygon.prototype.destroy = function () {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    };\n    Polygon.utils = {\n        /**\n         * Calculate the area of the given polygon (unsigned).\n         *\n         * Note that this does not work for self-intersecting polygons.\n         *\n         * @name area\n         * @return {number}\n         */\n        area: function (vertices) {\n            // Found at:\n            //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n            var total = 0.0;\n            for (var i = 0, l = vertices.length; i < l; i++) {\n                var addX = vertices[i].x;\n                var addY = vertices[(i + 1) % l].y;\n                var subX = vertices[(i + 1) % l].x;\n                var subY = vertices[i].y;\n                total += addX * addY * 0.5;\n                total -= subX * subY * 0.5;\n            }\n            return Math.abs(total);\n        },\n        isClockwise: function (vertices) {\n            return Polygon.utils.signedArea(vertices) < 0;\n        },\n        /**\n         * Calulate the signed polyon area by interpreting the polygon as a matrix\n         * and calculating its determinant.\n         *\n         * @name signedArea\n         * @return {number}\n         */\n        signedArea: function (vertices) {\n            var sum = 0;\n            var n = vertices.length;\n            for (var i = 0; i < n; i++) {\n                var j = (i + 1) % n;\n                sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n            }\n            return sum;\n        },\n        /**\n         * Find intersections of a line with a polygon (vertices).\n         *\n         * @param {VertTuple<any>} line - The line to find intersections with.\n         * @param {Array<Vertex>} vertices - The polygon's vertices.\n         * @param {boolean} isOpen - True if the polygon is open, false otherwise.\n         * @param {boolean} inVectorBoundsOnly - If only intersections in strict vector bounds should be returned.\n         * @returns\n         */\n        locateLineIntersecion: function (line, vertices, isOpen, inVectorBoundsOnly) {\n            // Find the intersections of all lines inside the edge bounds\n            var intersectionPoints = [];\n            var n = isOpen ? vertices.length - 1 : vertices.length;\n            for (var i = 0; i < n; i++) {\n                var polyLine = new Line_1.Line(vertices[i % n], vertices[(i + 1) % n]);\n                var intersection = polyLine.intersection(line);\n                // true => only inside bounds\n                // ignore last edge if open\n                if (intersection !== null &&\n                    polyLine.hasPoint(intersection, true) &&\n                    (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n                    intersectionPoints.push({ edgeIndex: i, intersection: intersection });\n                }\n            }\n            return intersectionPoints;\n        }\n    };\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author   Ikaros Kappler\n * @date     2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-11-01 Tweaked the `endpointToCenterParameters` function to handle negative values, too, without errors.\n * @modified 2025-04-01 Adapting a the `toCubicBezier` calculation to match an underlying change in the vertAt and tangentAt calculation of ellipses (was required to hamonize both methods with circles).\n * @modified 2025-04-02 Adding `VEllipseSector.containsAngle` method.\n * @modified 2025-04-02 Adding `VEllipseSector.lineIntersections` and `VEllipseSector.lineIntersectionTangents` and implementing `Intersectable`.\n * @modified 2025-04-07 Adding value wrapping (0 to TWO_PI) to the `VEllipseSector.containsAngle` method.\n * @modified 2025-04-09 Adding the `VEllipseSector.move` method.\n * @modified 2025-04-19 Added the `VEllipseSector.getStartPoint` and `getEndPoint` methods.\n * @modified 2025-04-23 Added the `VEllipseSector.getBounds` method.\n * @version  1.2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipseSector = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar VEllipseSector = /** @class */ (function () {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    function VEllipseSector(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils_1.geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils_1.geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Move the ellipse sector by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipseSector\n     * @return {VEllipseSector} this for chaining\n     **/\n    VEllipseSector.prototype.move = function (amount) {\n        this.ellipse.move(amount);\n        return this;\n    };\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof VEllipseSectpr\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    VEllipseSector.prototype.containsAngle = function (angle) {\n        angle = geomutils_1.geomutils.mapAngleTo2PI(angle); // wrapMinMax(angle, 0, Math.PI * 2);\n        var sAngle = geomutils_1.geomutils.mapAngleTo2PI(this.startAngle);\n        var eAngle = geomutils_1.geomutils.mapAngleTo2PI(this.endAngle);\n        // TODO: cleanup\n        // if (this.startAngle <= this.endAngle) {\n        //   return angle >= this.startAngle && angle < this.endAngle;\n        // } else {\n        //   // startAngle > endAngle\n        //   return angle >= this.startAngle || angle < this.endAngle;\n        // }\n        if (sAngle <= eAngle) {\n            return angle >= sAngle && angle < eAngle;\n        }\n        else {\n            // startAngle > endAngle\n            return angle >= sAngle || angle < eAngle;\n        }\n    };\n    /**\n     * Get the sectors starting point (on the underlying ellipse, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof VEllipseSector\n     * @return {Vertex} The sector's stating point.\n     */\n    VEllipseSector.prototype.getStartPoint = function () {\n        return this.ellipse.vertAt(this.startAngle);\n    };\n    /**\n     * Get the sectors ending point (on the underlying ellipse, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof VEllipseSector\n     * @return {Vertex} The sector's ending point.\n     */\n    VEllipseSector.prototype.getEndPoint = function () {\n        return this.ellipse.vertAt(this.endAngle);\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this elliptic sector.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this elliptic sector.\n     **/\n    VEllipseSector.prototype.getBounds = function () {\n        var _this = this;\n        // Calculage angles from east, west, north and south box points and check if they are inside\n        var extremes = this.ellipse.getExtremePoints();\n        var candidates = extremes.filter(function (point) {\n            var angle = new Line_1.Line(_this.ellipse.center, point).angle() - _this.ellipse.rotation;\n            return _this.containsAngle(angle);\n        });\n        return Bounds_1.Bounds.computeFromVertices([this.getStartPoint(), this.getEndPoint()].concat(candidates));\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @memberof VEllipseSectpr\n     * @param {VertTuple<Vector>} ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    VEllipseSector.prototype.lineIntersections = function (ray, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // First get all line intersections from underlying ellipse.\n        var ellipseIntersections = this.ellipse.lineIntersections(ray, inVectorBoundsOnly);\n        // Drop all intersection points that are not contained in the circle sectors bounds.\n        var tmpLine = new Line_1.Line(this.ellipse.center, new Vertex_1.Vertex());\n        return ellipseIntersections.filter(function (intersectionPoint) {\n            tmpLine.b.set(intersectionPoint);\n            var lineAngle = tmpLine.angle();\n            return _this.containsAngle(lineAngle - _this.ellipse.rotation);\n        });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @method lineIntersections\n     * @memberof VEllipseSectpr\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    VEllipseSector.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.ellipse.center, vert);\n            var angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return _this.ellipse.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    VEllipseSector.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.ellipse.radiusH();\n        var radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        var curves = [];\n        var curAngle = angles[0];\n        var startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length];\n            var endPoint = this.ellipse.vertAt(nextAngle);\n            var startTangent = this.ellipse.tangentAt(curAngle + this.ellipse.rotation);\n            var endTangent = this.ellipse.tangentAt(nextAngle + this.ellipse.rotation);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                if (intersection) {\n                    // It's VERY LIKELY hat this ALWAYS happens; it's just a typesave variant.\n                    // Intersection cannot be null.\n                    var startDiff = startPoint.difference(intersection);\n                    var endDiff = endPoint.difference(intersection);\n                    var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                    curves.push(curve);\n                }\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VEllipseSector.prototype.destroy = function () {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    };\n    VEllipseSector.ellipseSectorUtils = {\n        /**\n         * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n         * Inspiration found at:\n         *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            if (typeof rotation === \"undefined\")\n                rotation = 0.0;\n            // Important note: this function only works if start- and end-angle are within\n            // one whole circle [x,x+2*PI].\n            // Revelations of more than 2*PI might result in unexpected arcs.\n            // -> Use the geomutils.wrapMax( angle, 2*PI )\n            startAngle = geomutils_1.geomutils.wrapMax(startAngle, Math.PI * 2);\n            endAngle = geomutils_1.geomutils.wrapMax(endAngle, Math.PI * 2);\n            // Find the start- and end-point on the rotated ellipse\n            // XYCoords to Vertex (for rotation)\n            var end = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n            var start = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n            end.rotate(rotation, { x: x, y: y });\n            start.rotate(rotation, { x: x, y: y });\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            }\n            var sweepFlag = 1;\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            // Arc rotation in degrees, not radians.\n            var r2d = 180 / Math.PI;\n            pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }, // END function describeSVGArc\n        /**\n         * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n         * elliptic sector is the same for all.\n         *\n         * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n         * distance from the start angle to the first angle and/or the distance from the last angle to\n         * the end angle may be different to the others.\n         *\n         * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n         * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n         *\n         * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n         *\n         * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n         * @param {number} radiusV - The second (vertical) radius of the ellipse.\n         * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n         * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n         * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n         * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n         */\n        equidistantVertAngles: function (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) {\n            var ellipseAngles = VEllipse_1.VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n            ellipseAngles = ellipseAngles.map(function (angle) { return VEllipseSector.ellipseSectorUtils.normalizeAngle(angle); });\n            var angleIsInRange = function (angle) {\n                if (startAngle < endAngle)\n                    return angle >= startAngle && angle <= endAngle;\n                else\n                    return angle >= startAngle || (angle <= endAngle && angle >= 0);\n            };\n            // Drop all angles outside the sector\n            ellipseAngles = ellipseAngles.filter(angleIsInRange);\n            // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n            // --> find the angle that is closest to the start angle\n            var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n            // Bring all angles into the correct order\n            //    Idea: use splice or slice here?\n            var angles = [];\n            for (var i = 0; i < ellipseAngles.length; i++) {\n                angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n            }\n            return angles;\n        },\n        findClosestToStartAngle: function (startAngle, endAngle, ellipseAngles) {\n            // Note: endAngle > 0 && startAngle > 0\n            if (startAngle > endAngle) {\n                var n = ellipseAngles.length;\n                for (var i = 0; i < n; i++) {\n                    var ea = geomutils_1.geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                    if (ea >= startAngle && ea >= endAngle) {\n                        return i;\n                    }\n                }\n            }\n            return 0;\n        },\n        normalizeAngle: function (angle) { return (angle < 0 ? Math.PI * 2 + angle : angle); },\n        /**\n         * Convert the elliptic arc from endpoint parameters to center parameters as described\n         * in the w3c svg arc implementation note.\n         *\n         * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n         *\n         * @param {number} x1 - The x component of the start point (end of last SVG command).\n         * @param {number} y1 - The y component of the start point (end of last SVG command).\n         * @param {number} rx - The first (horizontal) radius of the ellipse.\n         * @param {number} ry - The second (vertical) radius of the ellipse.\n         * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n         * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n         * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n         * @param {number} x2 - The x component of the end point (end of last SVG command).\n         * @param {number} y2 - The y component of the end point (end of last SVG command).\n         * @returns\n         */\n        endpointToCenterParameters: function (x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n            // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n            // Thanks to\n            //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n            var abs = Math.abs;\n            var sin = Math.sin;\n            var cos = Math.cos;\n            var sqrt = Math.sqrt;\n            var pow = function (n) {\n                return n * n;\n            };\n            var sinphi = sin(phi);\n            var cosphi = cos(phi);\n            // Step 1: simplify through translation/rotation\n            var x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n            var y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n            var px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n            // correct of out-of-range radii\n            var L = px / prx + py / pry;\n            if (L > 1) {\n                rx = sqrt(L) * abs(rx);\n                ry = sqrt(L) * abs(ry);\n            }\n            else {\n                rx = abs(rx);\n                ry = abs(ry);\n            }\n            // Step 2 + 3: compute center\n            var sign = fa === fs ? -1 : 1;\n            // const M: number = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n            var M = sqrt(Math.abs((prx * pry - prx * py - pry * px) / (prx * py + pry * px))) * sign;\n            var _cx = (M * (rx * y)) / ry;\n            var _cy = (M * (-ry * x)) / rx;\n            var cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n            var cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n            // Step 4: Compute start and end angle\n            var center = new Vertex_1.Vertex(cx, cy);\n            var axis = center.clone().addXY(rx, ry);\n            var ellipse = new VEllipse_1.VEllipse(center, axis, 0);\n            // console.log(\"VELLIPSE::::::\", ellipse);\n            ellipse.rotate(phi);\n            var startAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x1, y1)).angle();\n            var endAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x2, y2)).angle();\n            return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n        }\n    }; // END ellipseSectorUtils\n    return VEllipseSector;\n}());\nexports.VEllipseSector = VEllipseSector;\n//# sourceMappingURL=VEllipseSector.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2023-10-06 Adding the `BezierPath.toPathPoints()` method.\n * @modified 2023-10-07 Adding the `BezierPath.fromCurve(CubicBezierCurve)` static function.\n * @modified 2025-04-09 Added the `BezierPath.move` method to match the convention – which just calls `translate`.\n * @modified 2025-04-09 Modified the `BezierPath.translate` method: chaning parameter `Vertex` to more generalized `XYCoords`.\n * @modified 2025-04-14 Class `BezierPath` is now implementing interface `Intersectable`.\n * @version 2.7.0\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BezierPath = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath() {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        // pathPoints: Array<Vertex> | undefined | null) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        // if (!pathPoints) {\n        //   pathPoints = [];\n        // }\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.move = function (amount) {\n        return this.translate(amount);\n    };\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaleFactor) {\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    };\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scaleXY = function (scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this shape.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the shape's outline.\n     */\n    BezierPath.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        return this.bezierCurves.reduce(function (accu, curCurve) {\n            return accu.concat(curCurve.lineIntersections(line, inVectorBoundsOnly));\n        }, []);\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    BezierPath.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        return this.bezierCurves.reduce(function (accu, curCurve) {\n            return accu.concat(curCurve.lineIntersectionTangents(line, inVectorBoundsOnly));\n        }, []);\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.adjustNeighbourControlPoint = function (_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    BezierPath.prototype.getEvenDistributionVertices = function (pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        var result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex_1.Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        var perimeter = this.totalArcLength;\n        var stepSize = perimeter / (pointCount - 1);\n        var n = this.bezierCurves.length;\n        var curveIndex = 0;\n        var segmentLength = this.bezierCurves[0].arcLength;\n        var curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex_1.Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    };\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(); // undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof BezierPath\n     */\n    BezierPath.prototype.destroy = function () {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    };\n    /**\n     * Convert this path to an array of path points that can be drawn by the default DrawLib\n     * implementations.\n     *\n     * @method toPathPoints\n     * @instance\n     * @memberof BezierPath\n     * @return {Array<XYCoords>}\n     */\n    BezierPath.prototype.toPathPoints = function () {\n        if (this.bezierCurves.length === 0) {\n            return [];\n        }\n        if (this.bezierCurves.length === 1) {\n            return [\n                this.bezierCurves[0].startPoint,\n                this.bezierCurves[0].startControlPoint,\n                this.bezierCurves[0].endControlPoint,\n                this.bezierCurves[0].endPoint\n            ];\n        }\n        var arr = [];\n        arr.push(this.bezierCurves[0].startPoint);\n        arr.push(this.bezierCurves[0].startControlPoint);\n        for (var i = 1; i < this.bezierCurves.length; i++) {\n            arr.push(this.bezierCurves[i - 1].endControlPoint);\n            arr.push(this.bezierCurves[i - 1].endPoint);\n            arr.push(this.bezierCurves[i].startPoint);\n            arr.push(this.bezierCurves[i].startControlPoint);\n        }\n        arr.push(this.bezierCurves[0].endControlPoint);\n        arr.push(this.bezierCurves[0].endPoint);\n        return arr;\n    };\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    /**\n     * Construct a new path with a single curve. Adding more curves is always possible.\n     *\n     * @method fromCurve\n     * @param {CubicBezierCurve} curve - The curve to construct a new path from.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The constructed bezier path instance.\n     */\n    BezierPath.fromCurve = function (curve) {\n        var path = new BezierPath(); // []);\n        path.addCurve(curve);\n        return path;\n    };\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj)) {\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        }\n        var arr = obj; // FORCE?\n        if (arr.length < 1) {\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        }\n        // Create an empty bezier path\n        var bPath = new BezierPath(); // undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    };\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    BezierPath.fromReducedList = function (pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(); // null); // No points yet\n        var startPoint = new Vertex_1.Vertex();\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular !== null && adjustCircular !== void 0 ? adjustCircular : false;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified  2024-11-22 Added static utility function Triangle.utils.determinant; adapted method `determinant`.\n * @modified  2024-11-22 Changing visibility of `Triangle.utils` from `private` to `public`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `Intersectable`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `IBounded`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `Intersectable`.\n * @modified  2025-14-16 Added method `Triangle.move`.\n * @version   2.10.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Triangle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\".concat(arr.length, \")\");\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    Triangle.prototype.getArea = function () {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    };\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Triangle.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Triangle\n     * @return {Bounds} The rectangular bounds of this Triangle.\n     **/\n    Triangle.prototype.getBounds = function () {\n        // return Bounds.computeFromVertices([this.a, this.b, this.c]);\n        return this.bounds();\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Move the Triangle's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Triangle\n     * @return {Triangle} this for chaining\n     **/\n    Triangle.prototype.move = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        this.c.add(amount);\n        return this;\n    };\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    };\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    Triangle.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        return Polygon_1.Polygon.utils\n            .locateLineIntersecion(line, [this.a, this.b, this.c], false, inVectorBoundsOnly)\n            .map(function (intersectionTuple) { return intersectionTuple.intersection; });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Triangle.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon_1.Polygon.utils\n            .locateLineIntersecion(line, [this.a, this.b, this.c], false, inVectorBoundsOnly)\n            .map(function (intersectionTuple) {\n            // const polyLine = this.getEdgeAt(intersectionTuple.edgeIndex);\n            var polyLine = _this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector_1.Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersection);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    Triangle.prototype.getEdgeAt = function (edgeIndex) {\n        var modIndex = edgeIndex % 3;\n        return modIndex === 0 ? new Line_1.Line(this.a, this.b) : modIndex === 1 ? new Line_1.Line(this.b, this.c) : new Line_1.Line(this.c, this.a);\n    };\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        // return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n        return Triangle.utils.determinant(this.a, this.b, this.c);\n    };\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        // Cast to non-null here because we know there _is_ an intersection\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Triangle.prototype.destroy = function () {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n        },\n        min3: function (a, b, c) {\n            return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n        },\n        signedArea: function (p0x, p0y, p1x, p1y, p2x, p2y) {\n            return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n            var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n            var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && 1 - s - t > 0;\n        },\n        /**\n         * Calculate the determinant of the three vertices a, b and c (in this order).\n         * @param {XYCords} a - The first vertex.\n         * @param {XYCords} b - The first vertex.\n         * @param {XYCords} c - The first vertex.\n         * @returns {nmber}\n         */\n        determinant: function (a, b, c) {\n            return (b.y - a.y) * (c.x - b.x) - (c.y - b.y) * (b.x - a.x);\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-11-28 Added the `subXY`, `subX` and `subY` methods to the `Vertex` class.\n * @modified 2023-09-29 Downgraded types for the `Vertex.utils.buildArrowHead` function (replacing Vertex params by more generic XYCoords type).\n * @modified 2023-09-29 Added the `Vertex.abs()` method as it seems useful.\n * @modified 2024-03-08 Added the optional `precision` param to the `toString` method.\n * @modified 2024-12-17 Outsourced the euclidean distance calculation of `Vertex.distance` to `geomutils.dist4`.\n * @modified 2025-03-24 Making the second parameter `center` of the `Vertex.rotate` method optional.\n * @modified 2025-04-13 Adding the `Vertex.move(amount: XYCoords)` method (does the same as `add`, added by naming convention).\n * @modified 2025-05-07 Class `Vertex` is now implementing interface `IBounded` (to meet convention).\n * @version  2.11.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vertex = void 0;\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Bounds_1 = require(\"./Bounds\");\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw \"Cannot add \".concat(typeof x, \" to numeric x component!\");\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw \"Cannot add \".concat(typeof y, \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Move this point by the given amount.\n     *\n     * This method just calls `add(amount).\n     *\n     *\n     * @method move\n     * @param {Vertex} amount - The amount to move this vertex.\n     * @return {Vertex} this - For chaining.\n     * @instance\n     * @memberof Vertex\n     */\n    Vertex.prototype.move = function (amount) {\n        return this.add(amount);\n    };\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw \"Cannot add \".concat(typeof x, \" to numeric x component!\");\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw \"Cannot add \".concat(typeof y, \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Substract the passed amounts from the x- and y- components of this vertex.\n     *\n     * @method subXY\n     * @param {number} x - The amount to substract from x.\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.subXY = function (amountX, amountY) {\n        this.x -= amountX;\n        this.y -= amountY;\n        return this;\n    };\n    /**\n     * Substract the passed amounts from the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to substract from x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.subX = function (amountX) {\n        this.x -= amountX;\n        return this;\n    };\n    /**\n     * Substract the passed amounts from the y-component of this vertex.\n     *\n     * @method subY\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.subY = function (amountY) {\n        this.y -= amountY;\n        return this;\n    };\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    };\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        // return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n        return geomutils_1.geomutils.dist4(this.x, this.y, vert.x, vert.y);\n    };\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.angle = function (origin) {\n        var a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    };\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    };\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    Vertex.prototype.lerp = function (target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    };\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    Vertex.prototype.lerpAbs = function (target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scaleXY = function (factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Set both coordinates of this vertex to their absolute value (abs(x), abs(y)).\n     *\n     * @method abs\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     */\n    Vertex.prototype.abs = function () {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        return this;\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Vertex.\n     * This is just by convention – any vertex is just a position without any useful with or height (0).\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Vertex\n     * @return {Bounds} The rectangular bounds of this Vertex (width and height are zero).\n     **/\n    Vertex.prototype.getBounds = function () {\n        // return Bounds.computeFromVertices([this.a, this.b, this.c]);\n        return Bounds_1.Bounds.computeFromVertices([this]);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function (precision) {\n        if (typeof precision === \"undefined\") {\n            return \"(\" + this.x + \",\" + this.y + \")\";\n        }\n        else {\n            return \"(\" + this.x.toFixed(precision) + \",\" + this.y.toFixed(precision) + \")\";\n        }\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Vertex.prototype.destroy = function () {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    };\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     * @readonly\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {XYCoords} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            console.warn(\"[DEPRECATION] Vertex.utils.buildArrowHead is deprecated. Please use Vector.utils.buildArrowHead instead.\");\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        },\n        /**\n         * Convert the given vertices (array) to a JSON string.\n         *\n         * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n         * @returns {string}\n         */\n        arrayToJSON: function (vertices, precision) {\n            return JSON.stringify(vertices.map(function (vert) {\n                return typeof precision === undefined\n                    ? { x: vert.x, y: vert.y }\n                    : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n            }));\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBImage = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    PBImage.prototype.destroy = function () {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    };\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2025-03-31 ATTENTION: modified the winding direction of the `tangentAt` method to match with the Circle method. This is a breaking change!\n * @modified 2025-03-31 Adding the `VEllipse.move(amount: XYCoords)` method.\n * @modified 2025-04-19 Adding the `VEllipse.getBounds()` method.\n * @modified 2025-04-24 Adding the `VEllipse.getExtremePoints()` method for calculating minima and maxima.\n * @version  1.4.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipse = void 0;\nvar Line_1 = require(\"./Line\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Circle_1 = require(\"./Circle\");\nvar Bounds_1 = require(\"./Bounds\");\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    VEllipse.prototype.clone = function () {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    };\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.radiusH = function () {\n        return Math.abs(this.signedRadiusH());\n    };\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusH = function () {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    };\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    VEllipse.prototype.radiusV = function () {\n        return Math.abs(this.signedRadiusV());\n    };\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusV = function () {\n        // Rotate axis back to origin before calculating radius\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    };\n    /**\n     * Get the the minima and maxima (points) of this (rotated) ellipse.\n     *\n     * @method getExtremePoints\n     * @instance\n     * @memberof VEllipse\n     * @return {[Vertex, Vertex, Vertex, Vertex]} Get the the minima and maxima (points) of this (rotated) ellipse.\n     */\n    VEllipse.prototype.getExtremePoints = function () {\n        var a = this.radiusH();\n        var b = this.radiusV();\n        // Calculate t_x values\n        var t_x1 = Math.atan2(-b * Math.sin(this.rotation), a * Math.cos(this.rotation));\n        var t_x2 = t_x1 + Math.PI;\n        // Calculate x values at t_x\n        var x_x1 = this.center.x + a * Math.cos(t_x1) * Math.cos(this.rotation) - b * Math.sin(t_x1) * Math.sin(this.rotation);\n        var y_x1 = this.center.y + a * Math.cos(t_x1) * Math.sin(this.rotation) + b * Math.sin(t_x1) * Math.cos(this.rotation);\n        var x_x2 = this.center.x + a * Math.cos(t_x2) * Math.cos(this.rotation) - b * Math.sin(t_x2) * Math.sin(this.rotation);\n        var y_x2 = this.center.y + a * Math.cos(t_x2) * Math.sin(this.rotation) + b * Math.sin(t_x2) * Math.cos(this.rotation);\n        var x_max, x_min;\n        if (x_x1 > x_x2) {\n            x_max = new Vertex_1.Vertex(x_x1, y_x1);\n            x_min = new Vertex_1.Vertex(x_x2, y_x2);\n        }\n        else {\n            x_max = new Vertex_1.Vertex(x_x2, y_x2);\n            x_min = new Vertex_1.Vertex(x_x1, y_x1);\n        }\n        // Calculate t_y values\n        var t_y1 = Math.atan2(b * Math.cos(this.rotation), a * Math.sin(this.rotation));\n        var t_y2 = t_y1 + Math.PI;\n        // Calculate y values at t_y\n        var x_y1 = this.center.x + a * Math.cos(t_y1) * Math.cos(this.rotation) - b * Math.sin(t_y1) * Math.sin(this.rotation);\n        var y_y1 = this.center.y + a * Math.cos(t_y1) * Math.sin(this.rotation) + b * Math.sin(t_y1) * Math.cos(this.rotation);\n        var x_y2 = this.center.x + a * Math.cos(t_y2) * Math.cos(this.rotation) - b * Math.sin(t_y2) * Math.sin(this.rotation);\n        var y_y2 = this.center.y + a * Math.cos(t_y2) * Math.sin(this.rotation) + b * Math.sin(t_y2) * Math.cos(this.rotation);\n        var y_max, y_min;\n        if (y_y1 > y_y2) {\n            y_max = new Vertex_1.Vertex(x_y1, y_y1);\n            y_min = new Vertex_1.Vertex(x_y2, y_y2);\n        }\n        else {\n            y_max = new Vertex_1.Vertex(x_y2, y_y2);\n            y_min = new Vertex_1.Vertex(x_y1, y_y1);\n        }\n        return [x_max, x_min, y_max, y_min];\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this ellipse.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this ellipse.\n     **/\n    VEllipse.prototype.getBounds = function () {\n        // Thanks to Cuixiping\n        //    https://stackoverflow.com/questions/87734/how-do-you-calculate-the-axis-aligned-bounding-box-of-an-ellipse\n        var r1 = this.radiusH();\n        var r2 = this.radiusV();\n        var ux = r1 * Math.cos(this.rotation);\n        var uy = r1 * Math.sin(this.rotation);\n        var vx = r2 * Math.cos(this.rotation + Math.PI / 2);\n        var vy = r2 * Math.sin(this.rotation + Math.PI / 2);\n        var bbox_halfwidth = Math.sqrt(ux * ux + vx * vx);\n        var bbox_halfheight = Math.sqrt(uy * uy + vy * vy);\n        return new Bounds_1.Bounds({ x: this.center.x - bbox_halfwidth, y: this.center.y - bbox_halfheight }, { x: this.center.x + bbox_halfwidth, y: this.center.y + bbox_halfheight });\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Move the ellipse by the given amount. This is equivalent by moving the `center` and `axis` points.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipse\n     * @return {VEllipse} this for chaining\n     **/\n    VEllipse.prototype.move = function (amount) {\n        this.center.add(amount);\n        this.axis.add(amount);\n        return this;\n    };\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.scale = function (factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    };\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.rotate = function (angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    };\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    VEllipse.prototype.vertAt = function (angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return new Vertex_1.Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    };\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.normalAt = function (angle, length) {\n        var point = this.vertAt(angle - this.rotation); // HERE IS THE CORRECT BEHAVIOR!\n        var foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        var angleA = new Line_1.Line(point, foci[0]).angle();\n        var angleB = new Line_1.Line(point, foci[1]).angle();\n        var centerAngle = angleA + (angleB - angleA) / 2.0;\n        var endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        var endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        var resultVector = this.center.distance(endPointA) < this.center.distance(endPointB)\n            ? new Vector_1.Vector(point, endPointB)\n            : new Vector_1.Vector(point, endPointA);\n        if (typeof length === \"number\") {\n            resultVector.setLength(length);\n        }\n        return resultVector;\n    };\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.tangentAt = function (angle, length) {\n        var normal = this.normalAt(angle, length);\n        return normal.inv().perp();\n    };\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    VEllipse.prototype.perimeter = function () {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    };\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    VEllipse.prototype.getFoci = function () {\n        // https://www.mathopenref.com/ellipsefoci.html\n        var rh = this.radiusH();\n        var rv = this.radiusV();\n        var sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        var f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    };\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @method getEquidistantVertices\n     * @instance\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    VEllipse.prototype.getEquidistantVertices = function (pointCount) {\n        var angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        var result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    VEllipse.prototype.lineIntersections = function (ray, inVectorBoundsOnly) {\n        // Question: what happens to extreme versions when ellipse is a line (width or height is zero)?\n        //           This would result in a Division_by_Zero exception!\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Step A: create clones for operations (keep originals unchanged)\n        var ellipseCopy = this.clone(); // VEllipse\n        var rayCopy = ray.clone(); // Vector\n        // Step B: move both so ellipse's center is located at (0,0)\n        var moveAmount = ellipseCopy.center.clone().inv();\n        ellipseCopy.move(moveAmount);\n        rayCopy.add(moveAmount);\n        // Step C: rotate eclipse backwards it's rotation, so that rotation is zero (0.0).\n        //         Rotate together with ray!\n        var rotationAmount = -ellipseCopy.rotation;\n        ellipseCopy.rotate(rotationAmount); // Rotation around (0,0) = center of translated ellipse\n        rayCopy.a.rotate(rotationAmount, ellipseCopy.center);\n        rayCopy.b.rotate(rotationAmount, ellipseCopy.center);\n        // Step D: find x/y factors to use for scaling to transform the ellipse to a circle.\n        //         Scale together with vector ray.\n        var radiusH = ellipseCopy.radiusH();\n        var radiusV = ellipseCopy.radiusV();\n        var scalingFactors = radiusH > radiusV ? { x: radiusV / radiusH, y: 1.0 } : { x: 1.0, y: radiusH / radiusV };\n        // Step E: scale ellipse AND ray by calculated factors.\n        ellipseCopy.axis.scaleXY(scalingFactors);\n        rayCopy.a.scaleXY(scalingFactors);\n        rayCopy.b.scaleXY(scalingFactors);\n        // Intermediate result: now the ellipse is transformed to a circle and we can calculate intersections :)\n        // Step F: calculate circle+line intersecions\n        var tmpCircle = new Circle_1.Circle(new Vertex_1.Vertex(), ellipseCopy.radiusH()); // radiusH() === radiusV()\n        var intersections = tmpCircle.lineIntersections(rayCopy, inVectorBoundsOnly);\n        // Step G: transform intersecions back to original configuration\n        intersections.forEach(function (intersectionPoint) {\n            // Reverse transformation from above.\n            intersectionPoint.scaleXY({ x: 1 / scalingFactors.x, y: 1 / scalingFactors.y }, ellipseCopy.center);\n            intersectionPoint.rotate(-rotationAmount, ellipseCopy.center);\n            intersectionPoint.sub(moveAmount);\n        });\n        return intersections;\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    VEllipse.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.center, vert);\n            var angle = lineFromCenter.angle();\n            // Calculate tangent at angle\n            return _this.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    VEllipse.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)?\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.radiusH();\n        var radiusV = this.radiusV();\n        var curves = [];\n        var angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        var curAngle = angles[0] + this.rotation;\n        var startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length] + this.rotation;\n            var endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                var startTangent = this.tangentAt(curAngle + this.rotation);\n                var endTangent = this.tangentAt(nextAngle + this.rotation);\n                // Find intersection (ignore that the result might be null in some extreme cases)\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                var startDiff = startPoint.difference(intersection);\n                var endDiff = endPoint.difference(intersection);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VEllipse.prototype.destroy = function () {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * A static collection of ellipse-related helper functions.\n     * @static\n     */\n    VEllipse.utils = {\n        /**\n         * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n         *\n         * @name polarToCartesian\n         * @param {number} centerX - The x coordinate of the elliptic center.\n         * @param {number} centerY - The y coordinate of the elliptic center.\n         * @param {number} radiusH - The horizontal radius of the ellipse.\n         * @param {number} radiusV - The vertical radius of the ellipse.\n         * @param {number} angle - The angle (in radians) to get the desired outline point for.\n         * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n         */\n        polarToCartesian: function (centerX, centerY, radiusH, radiusV, angle) {\n            // Tanks to Narasinham for the vertex-on-ellipse equations\n            // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n            var s = Math.sin(Math.PI / 2 - angle);\n            var c = Math.cos(Math.PI / 2 - angle);\n            return {\n                x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n                y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n            };\n        },\n        /**\n         * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n         *\n         * @param radiusH\n         * @param radiusV\n         * @param phi\n         * @returns {number} theta\n         */\n        phiToTheta: function (radiusH, radiusV, phi) {\n            //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n            var tanPhi = Math.tan(phi);\n            var tanPhi2 = tanPhi * tanPhi;\n            var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n            return theta;\n        },\n        /**\n         * Get n equidistant points on the elliptic arc.\n         *\n         * @param pointCount\n         * @returns\n         */\n        equidistantVertAngles: function (radiusH, radiusV, pointCount) {\n            var angles = [];\n            for (var i = 0; i < pointCount; i++) {\n                var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n                var theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n                angles[i] = theta;\n            }\n            return angles;\n        }\n    }; // END utils\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseHandler = exports.XWheelEvent = exports.XMouseEvent = void 0;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers[\"mousemove\"] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX, y: e.offsetY };\n    };\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    MouseHandler.prototype.mkParams = function (event, eventName) {\n        var _a, _b;\n        var rel = this.relPos(event);\n        var xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button, // this.mouseButton,\n            leftButton: event.button === 0, // this.mouseButton === 0,\n            middleButton: event.button === 1, // this.mouseButton === 1,\n            rightButton: event.button === 2, // this.mouseButton === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    };\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    };\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    };\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\".concat(name, \"' callback. To keep the code simple there is only room for one.\");\n    };\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexListeners = void 0;\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addClickListener = function (listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeClickListener = function (listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireClickEvent = function (e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    };\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    VertexListeners.prototype.removeAllListeners = function () {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    };\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UIDGenerator = void 0;\nvar UIDGenerator = /** @class */ (function () {\n    function UIDGenerator() {\n    }\n    UIDGenerator.next = function () {\n        return \"\".concat(UIDGenerator.current++);\n    };\n    UIDGenerator.current = 0;\n    return UIDGenerator;\n}());\nexports.UIDGenerator = UIDGenerator;\n//# sourceMappingURL=UIDGenerator.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @modified 2023-09-25 Changed param type of `intersection()` from Line to VertTuple.\n * @modified 2025-04-15 Class `Line` now implements interface `Intersectable`.\n * @modified 2025-04-16 Class `Line` now implements interface `IBounded`.\n * @version  2.4.0\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Line = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Vector_1 = require(\"./Vector\");\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        var x = this.a.x + a * (this.b.x - this.a.x);\n        var y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(x, y);\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Line.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Line\n     * @return {Bounds} The rectangular bounds of this Line.\n     **/\n    Line.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices([this.a, this.b]);\n    };\n    //--- END --- Implement interface `IBounded`\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    Line.prototype.getStartPoint = function () {\n        return this.a;\n    };\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    Line.prototype.getEndPoint = function () {\n        return this.b;\n    };\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    Line.prototype.getStartTangent = function () {\n        return this.b;\n    };\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    Line.prototype.getEndTangent = function () {\n        return this.a;\n    };\n    /**\n     * Inverse this path segment (in-place) and return this same instance (useful for chaining).\n     *\n     * @method reverse\n     * @memberof PathSegment\n     * @return {PathSegment} This path segment instance (for chaining).\n     */\n    Line.prototype.reverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    //--- END Implement PathSegment ---\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    Line.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        var intersection = this.intersection(line);\n        if (!intersection) {\n            return []; // Both lines parallel\n        }\n        if (this.hasPoint(intersection, true) && (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n            return [intersection];\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Line.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        var intersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (intersections.length === 0) {\n            return [];\n        }\n        var intrsctn = intersections[0];\n        return [new Vector_1.Vector(this.a.clone(), this.b.clone()).moveTo(intrsctn)];\n    };\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 The `CubicBezierCurve` class now implements the new `PathSegment` interface.\n * @modified 2023-09-30 Added the function `CubicbezierCurve.getSubCurve(number,number)` – similar to `getSubCurveAt(...)` but with absolute position parameters.\n * @modified 2023-10-07 Added the `trimEnd`, `trimEndAt`, `trimStart`, `trimStartAt` methods.\n * @modified 2025-04-09 Added the `CubicBezierCurve.move` method to match the convention – which just calls `translate`.\n * @modified 2025-04-09 Modified the `CubicBezierCurve.translate` method: chaning parameter `Vertex` to more generalized `XYCoords`.\n * @modified 2025-04-13 Changed visibility of `CubicBezierCurve.utils` from 'private' to  'public'.\n * @modified 2025-04-13 Added helper function `CubicBezierCurve.utils.bezierCoeffs`.\n * @modified 2025-04-13 Added helper functopn `CubicBezierCurve.utils.sgn(number)` for division safe sign calculation.\n * @modified 2025-03-13 Class `CubicBezierCurve` is now implementing interface `Intersectable`.\n * @modified 2025-04-18 Added evaluation method for cubic Bézier curves `CubicBezierCurve.utils.evaluateT`.\n * @modified 2025-04-18 Refactored method `CubicBezierCurve.getPointAt` to use `evaluateT`.\n * @modified 2025-04-18 Fixed the `CubicBezierCurve.getBounds` method: now returning the real bounding box. Before it was an approximated one.\n * @modified 2025-ß4-18 Added helper methods for bounding box calculation `CubucBezierCurve.util.cubicPolyMinMax` and `cubicPoly`.\n * @version 2.9.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CubicBezierCurve = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\".concat(pointID, \"' invalid.\"));\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.move = function (amount) {\n        return this.translate(amount);\n    };\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone();\n        var pointB = new Vertex_1.Vertex(0, 0);\n        var curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @method getClosestT\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getClosestT\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Bounds} The bounds of this ellipse.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        // Thanks to Richard \"RM\" for the Bézier bounds calculatin\n        //    https://jsfiddle.net/SalixAlba/QQnvm/4/\n        var xMinMax = CubicBezierCurve.utils.cubicPolyMinMax(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x);\n        var xl = xMinMax.min;\n        var xh = xMinMax.max;\n        var yMinMax = CubicBezierCurve.utils.cubicPolyMinMax(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y);\n        var yl = yMinMax.min;\n        var yh = yMinMax.max;\n        return Bounds_1.Bounds.computeFromVertices([\n            { x: xl, y: yl },\n            { x: xl, y: yh },\n            { x: xh, y: yh },\n            { x: xh, y: yl }\n        ]);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\".concat(id, \"'.\"));\n    };\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        // TODO: cleanup\n        // const x: number =\n        //   this.startPoint.x * Math.pow(1.0 - t, 3) +\n        //   this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n        //   this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n        //   this.endPoint.x * Math.pow(t, 3);\n        // const y: number =\n        //   this.startPoint.y * Math.pow(1.0 - t, 3) +\n        //   this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n        //   this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n        //   this.endPoint.y * Math.pow(t, 3);\n        var x = CubicBezierCurve.utils.evaluateT(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x, t);\n        var y = CubicBezierCurve.utils.evaluateT(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y, t);\n        return new Vertex_1.Vertex(x, y);\n    };\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        var tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    /**\n     * Trim off a start section of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimStartAt`.\n     *\n     * @method trimStart\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimStart = function (uValue) {\n        return this.trimStartAt(this.convertU2T(uValue));\n    };\n    /**\n     * Trim off a start section of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * @method trimStartAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimStartAt = function (t) {\n        var subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, t, 1.0);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Trim off the end of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[0,uValue]` (so `[1.0-uValue,1.0]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimEndAt`.\n     *\n     * @method trimEnd\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimEnd = function (uValue) {\n        return this.trimEndAt(this.convertU2T(uValue));\n    };\n    /**\n     * Trim off the end of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[0,t]` (so `[1.0-t,1.0]` is cut off).\n     *\n     * @method trimEndAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimEndAt = function (t) {\n        var subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, 0.0, t);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Get a sub curve at the given start end end positions (values on the curve's length, between 0 and curve.arcLength).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurve\n     * @param {number} tStart – The start position of the desired sub curve (must be in [0..arcLength]).\n     * @param {number} tEnd – The end position if the desired cub curve (must be in [0..arcLength]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurve = function (uStart, uEnd) {\n        return this.getSubCurveAt(this.convertU2T(uStart), this.convertU2T(uEnd));\n    };\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        // This 'splits' the curve at the given point at t.\n        var subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, tStart, tEnd);\n        return new CubicBezierCurve(subCurbePoints[0], subCurbePoints[1], subCurbePoints[2], subCurbePoints[3]);\n    };\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    };\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    //---BEGIN PathSegment-------------------------\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    CubicBezierCurve.prototype.getStartTangent = function () {\n        return this.startControlPoint;\n    };\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    CubicBezierCurve.prototype.getEndTangent = function () {\n        return this.endControlPoint;\n    };\n    //---END PathSegment-------------------------\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this shape.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the shape outline.\n     */\n    CubicBezierCurve.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var intersectionTs = this.lineIntersectionTs(line);\n        var intersectionPoints = intersectionTs.map(function (t) {\n            return _this.getPointAt(t);\n        });\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return intersectionPoints.filter(function (vert) { return line.hasPoint(vert, true); });\n        }\n        else {\n            return intersectionPoints;\n        }\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    CubicBezierCurve.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var intersectionTs = this.lineIntersectionTs(line);\n        var intersectionTangents = intersectionTs.map(function (t) {\n            var startPoint = _this.getPointAt(t);\n            var endPoint = _this.getTangentAt(t);\n            return new Vector_1.Vector(startPoint, endPoint.add(startPoint));\n        });\n        if (inVectorBoundsOnly) {\n            return intersectionTangents.filter(function (vec) { return line.hasPoint(vec.a, true); });\n        }\n        else {\n            return intersectionTangents;\n        }\n    };\n    //--- END --- Implement interface `Intersectable`\n    CubicBezierCurve.prototype.lineIntersectionTs = function (line) {\n        var A = line.b.y - line.a.y; // A=y2-y1\n        var B = line.a.x - line.b.x; // B=x1-x2\n        var C = line.a.x * (line.a.y - line.b.y) + line.a.y * (line.b.x - line.a.x); //C=x1*(y1-y2)+y1*(x2-x1)\n        // var bx = bezierCoeffs(px[0], px[1], px[2], px[3]);\n        // var by = bezierCoeffs(py[0], py[1], py[2], py[3]);\n        var bx = CubicBezierCurve.utils.bezierCoeffs(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x);\n        var by = CubicBezierCurve.utils.bezierCoeffs(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y);\n        var poly = Array(4);\n        poly[0] = A * bx[0] + B * by[0]; /*t^3*/\n        poly[1] = A * bx[1] + B * by[1]; /*t^2*/\n        poly[2] = A * bx[2] + B * by[2]; /*t*/\n        poly[3] = A * bx[3] + B * by[3] + C; /*1*/\n        var roots = CubicBezierCurve.utils.cubicRoots(poly);\n        return roots.filter(function (root) { return root != -1; });\n    };\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    CubicBezierCurve.prototype.destroy = function () {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    /**\n     * Helper utils.\n     */\n    CubicBezierCurve.utils = {\n        evaluateT: function (p0, p1, p2, p3, t) {\n            return p0 * Math.pow(1.0 - t, 3) +\n                p1 * 3 * t * Math.pow(1.0 - t, 2) +\n                p2 * 3 * Math.pow(t, 2) * (1.0 - t) +\n                p3 * Math.pow(t, 3);\n        },\n        cubicPolyMinMax: function (p0, p1, p2, p3) {\n            // var polyX = CubicBezierCurve.utils.cubicPoly2(\n            //   p0, // P[0].X, // bezierCurve.startPoint.x,\n            //   p1, // P[1].X, // bezierCurve.startControlPoint.x,\n            //   p2, // P[2].X, // bezierCurve.endControlPoint.x,\n            //   p3 // P[3].X // bezierCurve.endPoint.x\n            // );\n            // var a = polyX.a;\n            // var b = polyX.b;\n            // var c = polyX.c;\n            // var disc = polyX.b * polyX.b - 4 * polyX.a * polyX.c;\n            var polyX = CubicBezierCurve.utils.cubicPoly(p0, // P[0].X, // bezierCurve.startPoint.x,\n            p1, // P[1].X, // bezierCurve.startControlPoint.x,\n            p2, // P[2].X, // bezierCurve.endControlPoint.x,\n            p3 // P[3].X // bezierCurve.endPoint.x\n            );\n            var a = polyX[0]; // .a;\n            var b = polyX[1]; // .b;\n            var c = polyX[2]; // .c;\n            //alert(\"a \"+a+\" \"+b+\" \"+c);\n            // var disc = b * b - 4 * a * c;\n            var disc = polyX[1] * polyX[1] - 4 * polyX[0] * polyX[2];\n            // var polyX = CubicBezierCurve.utils.bezierCoeffs(p3,p2,p1,p0);\n            // var a = polyX[0]; //polyX.a;\n            // var b = polyX[1]; // .b;\n            // var c = polyX[2]; //.c;\n            // var disc = polyX[1] * polyX[1] - 4 * polyX[0] * polyX[2];\n            // var xl = Math.min(bCurve.endPoint.x, bCurve.startPoint.x); // P[0].X;\n            // var xh = Math.max(bCurve.endPoint.x, bCurve.startPoint.x); // P[0].X;\n            var xl = Math.min(p3, p0); // P[0].X;\n            var xh = Math.max(p3, p0); // P[0].X;\n            // if (P[3].X < xl) xl = P[3].X;\n            // if (P[3].X > xh) xh = P[3].X;\n            if (disc >= 0) {\n                var t1 = (-b + Math.sqrt(disc)) / (2 * a);\n                // alert(\"t1 \" + t1);\n                if (t1 > 0 && t1 < 1) {\n                    // var x1 = evalBez(PX, t1);\n                    // var x1 = bCurve.getPointAt(t1).x;\n                    var x1 = CubicBezierCurve.utils.evaluateT(p0, p1, p2, p3, t1); // bCurve.getPointAt(t1).x;\n                    if (x1 < xl)\n                        xl = x1;\n                    if (x1 > xh)\n                        xh = x1;\n                }\n                var t2 = (-b - Math.sqrt(disc)) / (2 * a);\n                // alert(\"t2 \" + t2);\n                if (t2 > 0 && t2 < 1) {\n                    // var x2 = evalBez(PX, t2);\n                    // var x2 = bCurve.getPointAt(t2).x;\n                    var x2 = CubicBezierCurve.utils.evaluateT(p0, p1, p2, p3, t2); //\n                    if (x2 < xl)\n                        xl = x2;\n                    if (x2 > xh)\n                        xh = x2;\n                }\n            }\n            return { min: xl, max: xh };\n        },\n        /**\n         * Get the points of a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n         *\n         * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n         *\n         * @method getSubCurvePointsAt\n         * @param {CubicBezierCurve} curve – The curve to get the sub curve points from.\n         * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n         * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n         * @instance\n         * @memberof CubicBezierCurve\n         * @return {CubicBezierCurve} The sub curve as a new curve.\n         **/\n        getSubCurvePointsAt: function (curve, tStart, tEnd) {\n            var startVec = new Vector_1.Vector(curve.getPointAt(tStart), curve.getTangentAt(tStart));\n            var endVec = new Vector_1.Vector(curve.getPointAt(tEnd), curve.getTangentAt(tEnd).inv());\n            // Tangents are relative. Make absolute.\n            startVec.b.add(startVec.a);\n            endVec.b.add(endVec.a);\n            // This 'splits' the curve at the given point at t.\n            startVec.scale(0.33333333 * (tEnd - tStart));\n            endVec.scale(0.33333333 * (tEnd - tStart));\n            return [startVec.a, endVec.a, startVec.b, endVec.b];\n        },\n        /**\n         * Compute the cubic roots for the given cubic polynomial coefficients.\n         *\n         * Based on\n         *   http://mysite.verizon.net/res148h4j/javascript/script_exact_cubic.html#the%20source%20code\n         * Inspired by\n         *   https://www.particleincell.com/2013/cubic-line-intersection/\n         * Thanks to Stephan Schmitt and Particle-In-Cell!\n         *\n         * @param poly\n         * @returns\n         */\n        cubicRoots: function (poly) {\n            var a = poly[0];\n            var b = poly[1];\n            var c = poly[2];\n            var d = poly[3];\n            var A = b / a;\n            var B = c / a;\n            var C = d / a;\n            var S, T, Im;\n            var Q = (3 * B - Math.pow(A, 2)) / 9;\n            var R = (9 * A * B - 27 * C - 2 * Math.pow(A, 3)) / 54;\n            var D = Math.pow(Q, 3) + Math.pow(R, 2); // polynomial discriminant\n            var ts = []; // Array();\n            if (D >= 0) {\n                // complex or duplicate roots\n                S = CubicBezierCurve.utils.sgn(R + Math.sqrt(D)) * Math.pow(Math.abs(R + Math.sqrt(D)), 1 / 3);\n                T = CubicBezierCurve.utils.sgn(R - Math.sqrt(D)) * Math.pow(Math.abs(R - Math.sqrt(D)), 1 / 3);\n                ts[0] = -A / 3 + (S + T); // real root\n                ts[1] = -A / 3 - (S + T) / 2; // real part of complex root\n                ts[2] = -A / 3 - (S + T) / 2; // real part of complex root\n                Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // complex part of root pair\n                // Mark complex roots to be discarded\n                if (Im != 0) {\n                    ts[1] = -1;\n                    ts[2] = -1;\n                }\n            } // distinct real roots\n            else {\n                var th = Math.acos(R / Math.sqrt(-Math.pow(Q, 3)));\n                ts[0] = 2 * Math.sqrt(-Q) * Math.cos(th / 3) - A / 3;\n                ts[1] = 2 * Math.sqrt(-Q) * Math.cos((th + 2 * Math.PI) / 3) - A / 3;\n                ts[2] = 2 * Math.sqrt(-Q) * Math.cos((th + 4 * Math.PI) / 3) - A / 3;\n                Im = 0.0;\n            }\n            // Discard all t's out of spec and sort the rest\n            return ts.filter(function (t) { return t >= 0 && t <= 1.0; }).sort();\n        },\n        /**\n         * Compute the Bézier coefficients from the given Bézier point coordinates.\n         *\n         * @param {number} p0 - The start point coordinate.\n         * @param {number} p1 - The start control point coordinate.\n         * @param {number} p2 - The end control point coordinate.\n         * @param {number} p3 - The end point coordinate.\n         * @returns {[number,number,number,number]}\n         */\n        bezierCoeffs: function (p0, p1, p2, p3) {\n            var coeffs = [NaN, NaN, NaN, NaN]; //Array(4);\n            coeffs[0] = -p0 + 3 * p1 + -3 * p2 + p3;\n            coeffs[1] = 3 * p0 - 6 * p1 + 3 * p2;\n            coeffs[2] = -3 * p0 + 3 * p1;\n            coeffs[3] = p0;\n            return coeffs;\n        },\n        /**\n         * Calculate the cubic polynomial coefficients used to find the bounding box.\n         *\n         * @param {number} p0 - The start point coordinate.\n         * @param {number} p1 - The start control point coordinate.\n         * @param {number} p2 - The end control point coordinate.\n         * @param {number} p3 - The end point coordinate.\n         * @returns {[number,number,number]}\n         */\n        cubicPoly: function (p0, p1, p2, p3) {\n            return [\n                3 * p3 - 9 * p2 + 9 * p1 - 3 * p0,\n                6 * p0 - 12 * p1 + 6 * p2,\n                3 * p1 - 3 * p0\n            ];\n        },\n        /**\n         * sign of number, but is division safe: no zero returned :)\n         */\n        sgn: function (x) {\n            return x < 0.0 ? -1 : 1;\n        }\n    };\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n/* Imports for webpack */\n\nglobalThis.UIDGenerator = require(\"./UIDGenerator.js\").UIDGenerator;\nglobalThis.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nglobalThis.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nglobalThis.Vertex = require(\"./Vertex.js\").Vertex;\n\nglobalThis.Bounds = require(\"./Bounds.js\").Bounds;\nglobalThis.Grid = require(\"./Grid.js\").Grid;\nglobalThis.Line = require(\"./Line.js\").Line;\nglobalThis.Vector = require(\"./Vector.js\").Vector;\nglobalThis.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nglobalThis.BezierPath = require(\"./BezierPath.js\").BezierPath;\nglobalThis.Polygon = require(\"./Polygon.js\").Polygon;\nglobalThis.Triangle = require(\"./Triangle.js\").Triangle;\nglobalThis.VEllipse = require(\"./VEllipse.js\").VEllipse;\nglobalThis.VEllipseSector = require(\"./VEllipseSector.js\").VEllipseSector;\nglobalThis.Circle = require(\"./Circle.js\").Circle;\nglobalThis.CircleSector = require(\"./CircleSector.js\").CircleSector;\nglobalThis.PBImage = require(\"./PBImage.js\").PBImage;\nglobalThis.PBText = require(\"./PBText.js\").PBText;\nglobalThis.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nglobalThis.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nglobalThis.drawutils = require(\"./draw.js\").drawutils;\n// globalThis.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;  // Unfinished\nglobalThis.drawutilssvg = require(\"./drawutilssvg.js\").drawutilssvg;\nglobalThis.geomutils = require(\"./geomutils.js\").geomutils;\nglobalThis.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n"],"names":["extendStatics","__extends","this","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","Vector","VertTuple_1","Vertex_1","_super","vertA","vertB","_this","a","className","perp","v","clone","sub","Vertex","y","x","add","inverse","tmp","inv","intersection","line","denominator","numerator1","numerator2","getOrthogonal","linePoint","startPoint","rotate","angle","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","Math","atan2","vertices","push","cos","sin","PI","VertTuple","drawutils","CubicBezierCurve_1","drawutilssvg_1","Vector_1","context","fillShapes","ctx","offset","scale","applyStrokeOpts","strokeOptions","_a","_b","setLineDash","dashArray","map","dashArrayElem","lineDashOffset","dashOffset","_fillOrDraw","color","fillStyle","fill","strokeStyle","stroke","beginDrawCycle","renderTime","endDrawCycle","setConfiguration","configuration","globalCompositeOperation","blendMode","setCurrentId","uid","setCurrentClassName","lineWidth","save","beginPath","moveTo","lineTo","restore","arrow","headLength","arrowHeadBasePosition","arrowHead","undefined","cubicBezierArrow","endPoint","startControlPoint","endControlPoint","diff","difference","cubicBezier","arrowHeadBasePositionBuffer","i","length","image","position","size","alpha","complete","naturalWidth","globalAlpha","drawImage","naturalHeight","texturedPoly","textureImage","textureSize","polygon","polygonPosition","rotation","basePolygonBounds","getBounds","targetTextureSize","getCenter","width","height","targetTextureOffset","min","translate","helpers","clipPoly","rect","closePath","CubicBezierCurve","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","path","handle","point","square","handleLine","dot","round","arc","circle","center","radius","ellipse","circleArc","startAngle","endAngle","options","asSegment","radiusX","radiusY","grid","sizeX","sizeY","yMin","ceil","yMax","xMin","xMax","raster","diamondHandle","squareHandle","circleHandle","crosshair","cross","polyline","isOpen","text","_c","relX","relY","fontSize","fontFamily","font","fontWeight","fontStyle","indexOf","concat","textAlign","lineHeight","fillText","strokeText","label","pathData","inplace","drawutilssvg","copyPathData","transformPathData","Path2D","join","clear","clearRect","canvas","fillRect","vert","clip","Bounds","Polygon_1","max","getNorthPoint","getSouthPoint","getWestPoint","getEastPoint","toPolygon","Polygon","getMinDimension","getMaxDimension","randomPoint","horizontalSafeArea","verticalSafeArea","absHorizontalSafeArea","absVerticalSafeArea","random","toString","computeFromVertices","computeFromBoundsSet","boundingBoxes","bounds","fromDimension","origin","Circle","Bounds_1","Line_1","UIDGenerator_1","UIDGenerator","next","move","amount","containsPoint","distance","containsCircle","lineDistance","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","subXY","abs","addXY","circleIntersection","p0","p1","h","sqrt","p2","x3","y3","x4","y4","Line","lineIntersection","interA","interB","transA","transB","dist","det","distSquared","belowSqrt","sign","lineIntersections","inVectorBoundsOnly","intersectioLine","filter","hasPoint","lineIntersectionTangents","closestPoint","destroy","isDestroyed","CircleSector","Circle_1","geomutils_1","_self","circleBounds","candidates","containsAngle","getStartPoint","getEndPoint","wrappedAngle","geomutils","mapAngleTo2PI","wrappedStart","wrappedEnd","angleAt","t","circleSectorIntersection","sector","radicalLine","thisIntersectionAngleA","thisIntersectionAngleB","thatIntersectionAngleA","thatIntersectionAngleB","centerOfOriginalGap","resultSector","ray","ellipseIntersections","tmpLine","intersectionPoint","set","lineAngle","wrapMinMax","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","moveToStart","end","start","firstHalf","secondHalf","largeArcFlag","sweepFlag","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","console","log","_x2rel","_y2rel","copyInstance","copy","curId","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","warn","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","pow","Triangle_1","new_angle","asin","dist4","x1","y1","x2","y2","dotProduct","nsectAngle","pA","pB","pC","n","triangle","Triangle","lineAB","lineAC","insideAngle","clockwise","determinant","scaleFactor","result","wrapMax","CircleSector_1","RAD_TO_DEG","svgNode","canvasSize","drawConfig","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","nodeStyle","Boolean","drawlibConfiguration","cache","Map","setSize","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","appendChild","rebuildStyleDefs","keys","rules","k","drawSettings","customStyleDefs","forEach","key","innerHTML","addCustomStyleDefs","defs","findElement","nodeName","node","get","toUpperCase","delete","document","createElementNS","makeNode","style","_bindFillDraw","_configureNode","_bindNode","bindingParent","parentNode","_addCSSClasses","curClassName","setAttribute","fillMode","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","tmpGNode","tmpDefsNode","nodeSupportsLineDash","tagName","dashArayElem","_x","_y","makeLineNode","group","makeArrowHeadNode","bezier","makeCubicBezierNode","setImageSize","ratioX","ratioY","addEventListener","event","src","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","arcData","transformOrigin","textNode","lastChild","removeChild","createSvg","data","_stx","index","Number","_sty","_sx","_sy","lastPoint","NaN","_slp","includes","classNameOverride","makePathNode","pathString","HEAD_XML","VertexAttr","draggable","selectable","isSelected","visible","model","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","fireEvent","listeners","hasListener","lis","keyCode","listener","fireDownEvent","e","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","press","up","isDown","__setFunctionName","f","name","prefix","description","configurable","PlotBoilerplate","alloyfinger_typescript_1","draw_1","drawgl_1","BezierPath_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","VEllipse_1","VEllipseSector_1","VertexAttr_1","PBText_1","config","contentChangeListeners","_gui","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","offsetX","offsetY","rasterGrid","drawRaster","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableZoom","enablePan","enableGL","isBackdropFiltersEnabled","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","pathVertex","controlVertex","ellipseSector","circleSector","vertex","selectedVertex","vector","anchor","canvasElement","querySelector","toLowerCase","eventCatcher","getContext","draw","parentElement","createElement","left","top","cursor","body","title","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","_d","_e","setCSSscale","addContentChangeListener","removeContentChangeListener","splice","_fireContentChanged","addedDrawables","removedDrawables","drawable","doNotFireEvent","isArray","arr","addDragListener","params","dragAmount","VEllipse","axis","VEllipseSector","c","BezierPath","bezierPath","bezierCurves","adjustCircular","attr","enableBezierPathAutoAdjust","PBImage","upperLeft","lowerRight","PBText","remove","removeWithVertices","removedDrawables_1","wasRemoved_1","removeVertex","wasRemoved","removeAll","keepVertices","triggerRedraw","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","drawDrawable","curveIndex","df","signedRadiusV","signedRadiusH","radiusH","radiusV","ellipseSectorUtils","error","drawSelectPolygon","clearSelection","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","display","padding","border","pl","pr","pt","bl","br","bt","bb","w","clientWidth","clientHeight","_f","_g","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","containsVert","tolerance","Draggable","VERTEX","setVIndex","handleClick","pos","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","paths","pindex","cindex","getPointByID","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","button","draggablePoint","fireDragStartEvent","mouseDragHandler","oldDragAmount","moveCurvePoint","fireDragEvent","mouseUpHandler","wasDragged","fireDragEndEvent","mouseWheelHandler","zoomStep","we","deltaY","preventDefault","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","MouseHandler","drag","wheel","relPos_1","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","afProps","touchStart","evt","touches","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","isTouchEvent","mouseDownPos","mouseDragPos","touchMove","stopPropagation","rel","trans","deltaX","touchEnd","touchCancel","multipointStart","multipointEnd","pinch","touchItem0","item","touchItem1","fingerA","fingerB","zoom","window","createAlloyFinger","default","createGUI","props","getGUI","class_1","isVertex","safeMergeByKeys","extension","typ","extVal","JSON","parse","removeProperty","transform","obj","fallback","locateCurveByStartPoint","START_POINT","updateArcLengths","locateCurveByStartControlPoint","adjustPredecessorControlPoint","locateCurveByEndControlPoint","adjustSuccessorControlPoint","locateCurveByEndPoint","END_CONTROL_POINT","factory","setLength","revert","normalize","factor","newA","v0","v1","colinear","epsilon","EPSILON","getClosestT","l2","vtutils","dist2","insideBoundsOnly","pointDistance","getLen","HandlerAdmin","el","handlers","del","dispatch","_args","len","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","bind","cancel","preV","pinchStartLen","isDoubleTap","noop","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","_cancelAllHandler","cancelAll","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","preTapPosition","Date","pageX","pageY","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","afEvent","currentX","currentY","sCurrentX","sCurrentY","v2","mr","r","acos","getAngle","sx2","sy2","movedX","movedY","changedTouches","self","direction","_swipeDirection","on","off","addVertex","addVertexAt","getEdgeAt","vertIndex","getVertexAt","getEdges","lines","getInnerAngleAt","p3","isAcute","isAngleAcute","zero","p2mp1","p3mp2","p2mp1_len","p3mp2_len","lengthProduct","A","B","C","inside","j","xi","yi","xj","yj","containsVerts","every","containsPolygon","lineSegment","area","signedArea","isClockwise","perimeter","getMeanCenter","getCentroid","cur","locateLineIntersecion","intersectionTuple","polyLine","edgeIndex","lineIntersectionTangentsIndices","closestLineIntersection","closestInterSectionIndex","closestLineIntersectionIndex","allIntersections","closestIntersection","MAX_VALUE","curDist","curVert","getInterpolationPolygon","interpolationCount","nextVert","lerpAmount","lerp","getEvenDistributionPolygon","pointCount","Error","polygonPoint","stepSize","polygonIndex","nextPolygonPoint","segmentLength","loopMax","curSegmentU","newPoint","lerpAbs","elimitateColinearEdges","eps","slice","lineA","lineB","areColinear","vertC","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","buffer","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","fromArray","total","l","sum","intersectionPoints","sAngle","eAngle","getExtremePoints","toCubicBezier","quarterSegmentCount","segmentCount","normalizeAngle","angles","equidistantVertAngles","curves","curAngle","nextAngle","startTangent","endTangent","curve","startDiff","endDiff","r2d","fullEllipsePointCount","ellipseAngles","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","phi","fa","fs","sinphi","cosphi","px","py","prx","pry","L","M","_cx","_cy","cx","cy","START_CONTROL_POINT","END_POINT","totalArcLength","addCurve","getLength","equals","getCurveCount","getCurveAt","getStartControlPoint","getEndControlPoint","scaleXY","scaleFactors","minIndex","minDist","curveT","uMin","u","getPointAt","getPoint","uTemp","relativeU","getTangentAt","getTangent","getPerpendicularAt","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","reduce","accu","curCurve","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","reverse","pointID","moveAmount","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","POSITIVE_INFINITY","NEGATIVE_INFINITY","getEvenDistributionVertices","arcLength","toPathPoints","toJSON","prettyFormat","fromJSON","jsonString","fromCurve","bPath","lastCurve","isInstance","fromObject","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","calcCircumcircle","getArea","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","D","E","F","G","radius_squared","inCircumcircle","min3","max3","modIndex","pointIsInTriangle","getIncircularTriangle","lineC","bisector1","bisector2","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","s","VertexListeners_1","tuple","VertexListeners","setX","setY","invX","invY","amountX","amountY","addX","addY","subX","subY","eqX","eqY","target","step","factors","ZERO","multiplyScalar","scalar","precision","removeAllListeners","randomVertex","viewPort","arrayToJSON","stringify","x_max","x_min","t_x1","t_x2","x_x1","y_x1","x_x2","y_x2","y_max","y_min","t_y1","t_y2","x_y1","y_y1","x_y2","y_y2","r1","r2","ux","uy","vx","vy","bbox_halfwidth","bbox_halfheight","normalAt","foci","getFoci","angleA","centerAngle","endPointA","endPointB","resultVector","rh","rv","sdiff","getEquidistantVertices","ellipseCopy","rayCopy","rotationAmount","scalingFactors","intersections","phiToTheta","tanPhi","tan","tanPhi2","atan","theta","XWheelEvent","XMouseEvent","MouseEvent","WheelEvent","mouseButton","installed","mousemove","mkParams","relPos","mouseup","mousedown","click","eventName","xEvent","leftButton","middleButton","rightButton","draggedFrom","listenFor","unlistenFor","callback","throwAlreadyInstalled","dragStart","dragEnd","addClickListener","_addListener","removeClickListener","_removeListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","_fireEvent","ve","newListener","oldListener","current","isNaN","getStartTangent","getEndTangent","intrsctn","curveIntervals","segmentCache","segmentLengths","moveControlPoint","pointB","curveStep","tmpLength","newLength","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","tDiff","xMinMax","cubicPolyMinMax","xl","xh","yMinMax","yl","yh","id","evaluateT","t2","nt2","tX","tY","trimStart","uValue","trimStartAt","convertU2T","subCurbePoints","getSubCurvePointsAt","trimEnd","trimEndAt","getSubCurve","uStart","uEnd","tangentVector","lineIntersectionTs","intersectionTangents","vec","bx","bezierCoeffs","by","poly","cubicRoots","root","polyX","cubicPoly","disc","t1","startVec","endVec","S","T","Q","R","ts","sgn","th","sort","coeffs","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","definition","o","enumerable","prop","Symbol","toStringTag"],"sourceRoot":""}