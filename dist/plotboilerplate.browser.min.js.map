{"version":3,"sources":["webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/index.js","webpack://plotboilerplate/./src/cjs/BezierPath.js","webpack://plotboilerplate/./src/cjs/Bounds.js","webpack://plotboilerplate/./src/cjs/Circle.js","webpack://plotboilerplate/./src/cjs/CircleSector.js","webpack://plotboilerplate/./src/cjs/CubicBezierCurve.js","webpack://plotboilerplate/./src/cjs/Grid.js","webpack://plotboilerplate/./src/cjs/KeyHandler.js","webpack://plotboilerplate/./src/cjs/Line.js","webpack://plotboilerplate/./src/cjs/MouseHandler.js","webpack://plotboilerplate/./src/cjs/PBImage.js","webpack://plotboilerplate/./src/cjs/PlotBoilerplate.js","webpack://plotboilerplate/./src/cjs/Polygon.js","webpack://plotboilerplate/./src/cjs/Triangle.js","webpack://plotboilerplate/./src/cjs/UIDGenerator.js","webpack://plotboilerplate/./src/cjs/VEllipse.js","webpack://plotboilerplate/./src/cjs/VEllipseSector.js","webpack://plotboilerplate/./src/cjs/Vector.js","webpack://plotboilerplate/./src/cjs/VertTuple.js","webpack://plotboilerplate/./src/cjs/Vertex.js","webpack://plotboilerplate/./src/cjs/VertexAttr.js","webpack://plotboilerplate/./src/cjs/VertexListeners.js","webpack://plotboilerplate/./src/cjs/draw.js","webpack://plotboilerplate/./src/cjs/drawgl.js","webpack://plotboilerplate/./src/cjs/drawutilssvg.js","webpack://plotboilerplate/./src/cjs/geomutils.js","webpack://plotboilerplate/webpack/bootstrap","webpack://plotboilerplate/webpack/runtime/define property getters","webpack://plotboilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://plotboilerplate/webpack/runtime/make namespace object","webpack://plotboilerplate/./src/cjs/entry.js"],"names":["getLen","v","Math","sqrt","x","y","HandlerAdmin","el","this","handlers","handler","push","i","length","splice","_args","len","apply","arguments","wrapFunc","handlerAdmin","add","AlloyFinger","option","element","document","querySelector","start","bind","move","end","cancel","addEventListener","preV","pinchStartLen","zoom","isDoubleTap","noop","rotate","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","globalThis","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","_self","Date","pageX","pageY","dispatch","abs","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","event","afEvent","currentX","currentY","sCurrentX","sCurrentY","angle","v1","v2","mr","r","dot","acos","getAngle","cross","PI","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","del","removeEventListener","Object","defineProperty","exports","value","BezierPath","Bounds_1","CubicBezierCurve_1","UIDGenerator_1","Vertex_1","pathPoints","className","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","uid","UIDGenerator","next","totalArcLength","adjustCircular","bezierCurves","prototype","addCurve","curve","startPoint","endPoint","adjustSuccessorControlPoint","getLength","locateCurveByStartPoint","point","equals","locateCurveByEndPoint","locateCurveByStartControlPoint","startControlPoint","locateCurveByEndControlPoint","endControlPoint","updateArcLengths","getCurveCount","getCurveAt","curveIndex","translate","amount","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","scale","anchor","scaling","center","getClosestT","p","minIndex","minDist","dist","curveT","uMin","u","getPointAt","distance","max","min","getPoint","console","warn","uTemp","clone","relativeU","t","getTangentAt","getTangent","getPerpendicularAt","getPerpendicular","log","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","fromArray","curves","reverse","moveCurvePoint","pointID","moveAmount","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","Vertex","neighbourHandleBounds","mainHandleLength","pow","neighbourHandleLength","set","getBounds","b","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","Bounds","undefined","toSVGString","options","buffer","c","toSVGPathData","join","toJSON","prettyFormat","fromJSON","jsonString","obj","JSON","parse","Array","isArray","arr","bPath","lastCurve","CubicBezierCurve","isInstance","fromObject","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","bezierPath","Polygon_1","width","height","toPolygon","Polygon","getCenter","computeFromVertices","vertices","vert","xMin","xMax","yMin","yMax","Circle","Line_1","Vector_1","radius","containsCircle","circle","lineDistance","line","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","Vector","perp","circleIntersection","p0","p1","d","a","h","p2","x3","y3","x4","y4","Line","cos","sin","CircleSector","startAngle","endAngle","data","circleSectorUtils","describeSVGArc","polarToCartesian","centerX","centerY","moveToStart","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","diff","pathData","curveIntervals","segmentCache","segmentLengths","arcLength","moveControlPoint","tmp","pointB","curveStep","tmpLength","newLength","result","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","tDiff","getPointByID","id","Error","t2","nt2","tX","tY","startVec","endVec","inv","convertU2T","tangentVector","toString","Grid","size","utils","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","listeners","hasListener","lis","keyCode","listener","fireDownEvent","e","firePressEvent","fireUpEvent","key2code","key","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","down","press","up","isDown","extendStatics","__extends","setPrototypeOf","__proto__","hasOwnProperty","call","__","constructor","create","VertTuple_1","_super","_this","intersection","denominator","numerator1","numerator2","isNaN","VertTuple","MouseHandler","XWheelEvent","XMouseEvent","MouseEvent","WheelEvent","name","mouseDownPos","mouseDragPos","mouseButton","installed","mousemove","mkParams","drag","relPos","mouseup","button","mousedown","click","wheel","offsetX","offsetY","eventName","rel","xEvent","params","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","destroy","PBImage","image","upperLeft","lowerRight","alloyfinger_typescript_1","draw_1","drawgl_1","drawutilssvg_1","BezierPath_1","Circle_1","CircleSector_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","Triangle_1","VEllipse_1","VEllipseSector_1","VertexAttr_1","PlotBoilerplate","config","renderTime","VertexAttr","model","bezierAutoAdjust","selectable","isSelected","draggable","visible","canvas","f","fetch","fullSize","val","fitToParent","bool","scaleX","scaleY","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","color","lineWidth","handleLine","polygon","triangle","ellipse","ellipseSector","circleSector","vertex","selectedVertex","vector","grid","canvasSize","canvasElement","tagName","toLowerCase","eventCatcher","drawutilsgl","ctx","getContext","draw","fill","copyInstance","drawutils","drawutilssvg","parentElement","createElement","style","position","left","top","cursor","appendChild","body","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","_a","pb","svgNode","createElementNS","tosvgDraw","offset","tosvgFill","beginDrawCycle","clear","drawAll","endDrawCycle","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","bounds","canvasCenter","canvasRatio","ratio","addXY","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","VEllipse","axis","addDragListener","VEllipseSector","Triangle","attr","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","Boolean","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","round","setCurrentClassName","setCurrentId","raster","crosshair","_handleColor","drawDrawables","drawDrawable","cubicBezier","diamondHandle","circleHandle","polyline","signedRadiusV","rotation","signedRadiusH","radiusH","radiusV","ellipseSectorUtils","circleArc","arrow","sub","error","drawSelectPolygon","squareHandle","clearSelection","viewport","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","parentNode","display","padding","border","pl","pr","pt","bl","br","bt","bb","w","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","setAttribute","setSize","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","containsVert","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","fireDragStartEvent","mouseDragHandler","oldDragAmount","fireDragEvent","mouseUpHandler","fireDragEndEvent","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","difference","fingerA","item","fingerB","window","default","createGUI","props","class_1","isVertex","safeMergeByKeys","extension","k","typ","transform","fallback","isOpen","addVertex","getVertexAt","index","inside","j","xi","yi","xj","yj","area","signedArea","isClockwise","factor","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","total","l","sum","n","geomutils_1","calcCircumcircle","getArea","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","EPSILON","cx","cy","radius_squared","inCircumcircle","min3","max3","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","current","normalAt","foci","getFoci","angleA","centerAngle","endPointA","addX","endPointB","normal","perimeter","rh","rv","sdiff","addY","getEquidistantVertices","pointCount","angles","equidistantVertAngles","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","wrapMinMax","normalizeAngle","wrapMax","r2d","fullEllipsePointCount","ellipseAngles","map","filter","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","sign","M","_cx","_cy","vertA","vertB","inverse","buildArrowHead","zA","zB","headlen","atan2","factory","setLength","normalize","moveTo","newA","v0","colinear","l2","vtutils","dist2","hasPoint","insideBoundsOnly","pointDistance","VertexListeners_1","tuple","NaN","VertexListeners","setX","setY","invX","invY","amountX","amountY","eqX","eqY","origin","ZERO","multiplyScalar","scalar","randomVertex","viewPort","random","dragStart","dragEnd","addClickListener","_addListener","removeClickListener","_removeListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","_fireEvent","ve","newListener","oldListener","context","fillShapes","setConfiguration","configuration","globalCompositeOperation","blendMode","save","beginPath","lineTo","strokeStyle","stroke","restore","_fillOrDraw","complete","naturalWidth","drawImage","naturalHeight","rect","closePath","fillStyle","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","arc","asSegment","radiusX","radiusY","sizeX","sizeY","ceil","setLineDash","text","fillText","strokeText","label","inplace","copyPathData","transformPathData","Path2D","clearRect","fillRect","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","copy","curId","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","isSecondary","gNode","bufferGNode","drawlibConfiguration","cache","Map","addStyleDefs","createSVGNode","nodeStyle","keys","rules","drawSettings","innerHTML","findElement","nodeName","node","get","toUpperCase","delete","makeNode","_bindFillDraw","curClassName","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","_x","_y","setImageSize","ratioX","ratioY","src","arcData","lastChild","removeChild","createSvg","_stx","_sty","_sx","_sy","lastPoint","_slp","HEAD_XML","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","scaleFactor","__webpack_module_cache__","__webpack_require__","moduleId","module","__webpack_modules__","definition","o","enumerable","prop","Symbol","toStringTag"],"mappings":"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","file":"plotboilerplate.browser.min.js","sourcesContent":["/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * TypeScript port by Ikaros Kappler.\n *\n * Original file from https://github.com/AlloyTeam/AlloyFinger\n *\n * @date 2021-02-10\n */\nimport { AlloyFinger } from './alloy_finger';\nexport { AlloyFinger };\nexport default AlloyFinger;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @version 2.3.1\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BezierPath = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.adjustNeighbourControlPoint = function (_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<path\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join(\"\");\n    };\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    };\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    BezierPath.fromReducedList = function (pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        // var firstStartPoint: Vertex;\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @version  1.3.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bounds = void 0;\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    Bounds.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([new Vertex_1.Vertex(this.min), new Vertex_1.Vertex(this.max.x, this.min.y), new Vertex_1.Vertex(this.max), new Vertex_1.Vertex(this.min.x, this.max.y)], false);\n    };\n    Bounds.prototype.getCenter = function () {\n        return new Vertex_1.Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    };\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    Bounds.computeFromVertices = function (vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        var xMin = vertices[0].x;\n        var xMax = vertices[0].x;\n        var yMin = vertices[0].y;\n        var yMax = vertices[0].y;\n        var vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Circle = void 0;\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    Circle.prototype.containsCircle = function (circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                       Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleSector = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nvar CircleSector = /** @class */ (function () {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    function CircleSector(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    CircleSector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path ');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        var data = CircleSector.circleSectorUtils.describeSVGArc(this.circle.center.x, this.circle.center.y, this.circle.radius, this.startAngle, this.endAngle);\n        buffer.push(' d=\"' + data.join(\" \") + '\" />');\n        return buffer.join('');\n    };\n    ;\n    CircleSector.circleSectorUtils = {\n        /**\n         * Helper function to convert polar circle coordinates to cartesian coordinates.\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {number} angle - The angle in radians.\n        */\n        polarToCartesian: function (centerX, centerY, radius, angle) {\n            return {\n                x: centerX + (radius * Math.cos(angle)),\n                y: centerY + (radius * Math.sin(angle))\n            };\n        },\n        /**\n         * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n         * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radius, startAngle, endAngle, options) {\n            if (typeof options === 'undefined')\n                options = { moveToStart: true };\n            var end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n            var start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n            // Split full circles into two halves.\n            // Some browsers have problems to render full circles (described by start==end).\n            if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n                var firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n                var secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n                return firstHalf.concat(secondHalf);\n            }\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            var sweepFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push('M', start.x, start.y);\n            }\n            pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }\n    };\n    return CircleSector;\n}()); // END class\nexports.CircleSector = CircleSector;\n//# sourceMappingURL=CircleSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CubicBezierCurve = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone();\n        var pointB = new Vertex_1.Vertex(0, 0);\n        var curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grid = void 0;\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyHandler = void 0;\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Line = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        var x = this.a.x + (a * (this.b.x - this.a.x));\n        var y = this.a.y + (a * (this.b.y - this.a.y));\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return undefined;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseHandler = exports.XWheelEvent = exports.XMouseEvent = void 0;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY\n        };\n    };\n    ;\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    };\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    ;\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBImage = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @version  1.14.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlotBoilerplate = void 0;\nvar alloyfinger_typescript_1 = require(\"alloyfinger-typescript\");\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar CircleSector_1 = require(\"./CircleSector\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar VEllipseSector_1 = require(\"./VEllipseSector\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        var f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: function () {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: function () {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        var canvasElement = typeof config.canvas == \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawgl_1.drawutilsgl === \"undefined\") {\n                console.warn(\"Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.\");\n                console.warn(\"Disabling GL and falling back to Canvas2D.\");\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                var ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawgl_1.drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                var ctx = this.canvas.getContext(\"2d\");\n                this.draw = new draw_1.drawutils(ctx, false);\n                this.fill = new draw_1.drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg_1.drawutilssvg === \"undefined\")\n                throw \"The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.\";\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg_1.drawutilssvg(this.canvas, new Vertex_1.Vertex(), // offset\n            new Vertex_1.Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        // Create fake SVG node\n        var svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg_1.drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear)\n            pb.config.preClear();\n        tosvgDraw.clear(pb.config.backgroundColor);\n        if (pb.config.preDraw)\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (event) {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener(function (event) {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector_1.CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    };\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex_1.Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector_1.CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    };\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    PlotBoilerplate.prototype.removeAll = function (keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    };\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    };\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function (draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        var gScale = {\n            x: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    };\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function (draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, \"#000000\");\n    };\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    };\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawable = function (d, renderTime, draw, fill) {\n        if (d instanceof BezierPath_1.BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].startPoint.attr.visible) {\n                            draw.setCurrentId(d.uid + \"_h0\");\n                            draw.setCurrentClassName(d.className + \"-start-handle\");\n                            draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    }\n                    if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].endPoint.attr.visible) {\n                            draw.setCurrentId(d.uid + \"_h1\");\n                            draw.setCurrentClassName(d.className + \"-end-handle\");\n                            draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        draw.setCurrentId(d.uid + \"_h2\");\n                        draw.setCurrentClassName(d.className + \"-start-control-handle\");\n                        draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, \"#008888\"));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        draw.setCurrentId(d.uid + \"_h3\");\n                        draw.setCurrentClassName(d.className + \"-end-control-handle\");\n                        draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, \"#008888\"));\n                    }\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(d.uid + \"_l0\");\n                    draw.setCurrentClassName(d.className + \"-start-line\");\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(d.uid + \"_l1\");\n                    draw.setCurrentClassName(d.className + \"-end-line\");\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon_1.Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle_1.Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse_1.VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(d.uid + \"_e0\");\n                draw.setCurrentClassName(d.className + \"-v-line\");\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n                draw.setCurrentId(d.uid + \"_e1\");\n                draw.setCurrentClassName(d.className + \"-h-line\");\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\" + d.className);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector_1.VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\" + d.className);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            var data = VEllipseSector_1.VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle_1.Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector_1.CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex_1.Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line_1.Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector_1.Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(d.uid + \"_h0\");\n                draw.setCurrentClassName(d.className + \"-handle\");\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage_1.PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(d.uid + \"_l0\");\n                draw.setCurrentClassName(d.className + \"-line\");\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(d.uid + \"_h0\");\n                draw.setCurrentClassName(d.className + \"-lower-right\");\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    };\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function (draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    };\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    };\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    };\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawAll = function (renderTime, draw, fill) {\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(undefined);\n        draw.setCurrentClassName(undefined);\n    }; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    PlotBoilerplate.prototype.getFProp = function (elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    };\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        // var canvas : HTMLCanvasElement = _self.canvas;\n        _self.canvas.style.display = \"none\";\n        /* var\n        padding : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding') ) || 0,\n        border : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-width') ) || 0,\n        pl : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-left') ) || padding,\n        pr : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-right') ) || padding,\n        pt : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-top') ) || padding,\n        pb : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-bottom') ) || padding,\n        bl : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-left-width') ) || border,\n        br : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-right-width') ) || border,\n        bt : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-top-width') ) || border,\n        bb : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-bottom-width') ) || border;\n        */\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    };\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _this = this;\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                _this.canvas.setAttribute(\"viewBox\", \"0 0 \" + w + \" \" + h);\n                _this.canvas.setAttribute(\"width\", \"\" + w);\n                _this.canvas.setAttribute(\"height\", \"\" + h);\n                _this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                _this.eventCatcher.style.width = w + \"px\";\n                _this.eventCatcher.style.height = h + \"px\";\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = _self.config.canvasWidthFactor * width + \"px\";\n            _self.canvas.style.height = _self.config.canvasWidthFactor * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"absolute\";\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = _self.config.canvasWidthFactor * space.width + \"px\";\n            _self.canvas.style.height = _self.config.canvasHeightFactor * space.height + \"px\";\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (e) {\n        // x:number,y:number) {\n        var _self = this;\n        // const x:number = e.params.pos.x;\n        //const y:number = e.params.pos.y;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (p.typeName == \"bpath\") {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == \"vertex\") {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown(\"y\") /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    };\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == \"vertex\" && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == \"bpath\")\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == \"vertex\")\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\")) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.adjustOffset = function (redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    };\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down(function (e) {\n                _self.mouseDownHandler(e);\n            })\n                .drag(function (e) {\n                _self.mouseDragHandler(e);\n            })\n                .up(function (e) {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel(function (e) {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                var bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var afProps = {\n                        touchStart: function (evt) {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (evt) {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (evt) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (evt) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (evt) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (evt) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (evt) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"])\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    else\n                        new alloyfinger_typescript_1.default(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function (props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            class_1.prototype.isVertex = function () {\n                return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n            };\n            class_1.prototype.setVIndex = function (vindex) {\n                this.vindex = vindex;\n                return this;\n            };\n            return class_1;\n        }()),\n        _a.VERTEX = \"vertex\",\n        _a);\n    /**\n     * A set of helper functions.\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == \"boolean\")\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == \"number\")\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == \"function\" && typeof extension[k] == \"function\")\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error(\"error in key \", k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style[\"transform-origin\"] = \"0 0\";\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"undefined\")\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === \"number\")\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"boolean\")\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== \"function\")\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) {\n                    // && !bezierPath.adjustCircular ) {\n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\nexports.default = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polygon = void 0;\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertex = function (vert) {\n        this.vertices.push(vert);\n    };\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    Polygon.prototype.getVertexAt = function (index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    };\n    ;\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    Polygon.prototype.move = function (vert) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(vert);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.area = function () {\n        return Polygon.utils.area(this.vertices);\n    };\n    ;\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.signedArea = function () {\n        return Polygon.utils.signedArea(this.vertices);\n    };\n    ;\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    Polygon.prototype.isClockwise = function () {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    Polygon.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices(this.vertices);\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    Polygon.utils = {\n        /**\n         * Calculate the area of the given polygon (unsigned).\n         *\n         * Note that this does not work for self-intersecting polygons.\n         *\n         * @name area\n         * @return {number}\n         */\n        area: function (vertices) {\n            // Found at:\n            //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n            var total = 0.0;\n            for (var i = 0, l = vertices.length; i < l; i++) {\n                var addX = vertices[i].x;\n                var addY = vertices[(i + 1) % l].y;\n                var subX = vertices[(i + 1) % l].x;\n                var subY = vertices[i].y;\n                total += (addX * addY * 0.5);\n                total -= (subX * subY * 0.5);\n            }\n            return Math.abs(total);\n        },\n        /**\n         * Calulate the signed polyon area by interpreting the polygon as a matrix\n         * and calculating its determinant.\n         *\n         * @name signedArea\n         * @return {number}\n         */\n        signedArea: function (vertices) {\n            var sum = 0;\n            var n = vertices.length;\n            for (var i = 0; i < n; i++) {\n                var j = (i + 1) % n;\n                sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n            }\n            return sum;\n        }\n    };\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Triangle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    Triangle.prototype.getArea = function () {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        // if( !this.center || !this.radius ) \n        this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        signedArea: function (p0x, p0y, p1x, p1y, p2x, p2y) {\n            return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n            var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UIDGenerator = void 0;\nvar UIDGenerator = /** @class */ (function () {\n    function UIDGenerator() {\n    }\n    UIDGenerator.next = function () {\n        return \"\" + UIDGenerator.current++;\n    };\n    UIDGenerator.current = 0;\n    return UIDGenerator;\n}());\nexports.UIDGenerator = UIDGenerator;\n//# sourceMappingURL=UIDGenerator.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @version  1.2.2\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipse = void 0;\nvar Line_1 = require(\"./Line\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    VEllipse.prototype.clone = function () {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    };\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.radiusH = function () {\n        return Math.abs(this.signedRadiusH());\n    };\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusH = function () {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    };\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    VEllipse.prototype.radiusV = function () {\n        return Math.abs(this.signedRadiusV());\n    };\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusV = function () {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    };\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.scale = function (factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    };\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.rotate = function (angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    };\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    VEllipse.prototype.vertAt = function (angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return new Vertex_1.Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    };\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.normalAt = function (angle, length) {\n        var point = this.vertAt(angle);\n        var foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        var angleA = new Line_1.Line(point, foci[0]).angle();\n        var angleB = new Line_1.Line(point, foci[1]).angle();\n        var centerAngle = angleA + (angleB - angleA) / 2.0;\n        var endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        var endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector_1.Vector(point, endPointB);\n        }\n        else {\n            return new Vector_1.Vector(point, endPointA);\n        }\n    };\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.tangentAt = function (angle, length) {\n        var normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    };\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    VEllipse.prototype.perimeter = function () {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    };\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    VEllipse.prototype.getFoci = function () {\n        // https://www.mathopenref.com/ellipsefoci.html\n        var rh = this.radiusH();\n        var rv = this.radiusV();\n        var sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        var f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    };\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    VEllipse.prototype.getEquidistantVertices = function (pointCount) {\n        var angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        var result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    };\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    VEllipse.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.radiusH();\n        var radiusV = this.radiusV();\n        var curves = [];\n        var angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        var curAngle = angles[0];\n        var startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length];\n            var endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                var startTangent = this.tangentAt(curAngle);\n                var endTangent = this.tangentAt(nextAngle);\n                // Find intersection\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                var startDiff = startPoint.difference(intersection);\n                var endDiff = endPoint.difference(intersection);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<ellipse\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    };\n    /**\n     * A static collection of ellipse-related helper functions.\n     * @static\n     */\n    VEllipse.utils = {\n        /**\n         * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n         *\n         * @name polarToCartesian\n         * @param {number} centerX - The x coordinate of the elliptic center.\n         * @param {number} centerY - The y coordinate of the elliptic center.\n         * @param {number} radiusH - The horizontal radius of the ellipse.\n         * @param {number} radiusV - The vertical radius of the ellipse.\n         * @param {number} angle - The angle (in radians) to get the desired outline point for.\n         * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n         */\n        polarToCartesian: function (centerX, centerY, radiusH, radiusV, angle) {\n            // Tanks to Narasinham for the vertex-on-ellipse equations\n            // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n            var s = Math.sin(Math.PI / 2 - angle);\n            var c = Math.cos(Math.PI / 2 - angle);\n            return {\n                x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n                y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n            };\n        },\n        /**\n         * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n         *\n         * @param radiusH\n         * @param radiusV\n         * @param phi\n         * @returns {number} theta\n         */\n        phiToTheta: function (radiusH, radiusV, phi) {\n            //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n            var tanPhi = Math.tan(phi);\n            var tanPhi2 = tanPhi * tanPhi;\n            var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n            return theta;\n        },\n        /**\n         * Get n equidistant points on the elliptic arc.\n         *\n         * @param pointCount\n         * @returns\n         */\n        equidistantVertAngles: function (radiusH, radiusV, pointCount) {\n            var angles = [];\n            for (var i = 0; i < pointCount; i++) {\n                var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n                var theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n                angles[i] = theta;\n            }\n            return angles;\n        }\n    }; // END utils\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author  Ikaros Kappler\n * @date    2021-02-26\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipseSector = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar VEllipseSector = /** @class */ (function () {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    function VEllipseSector(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils_1.geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils_1.geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    VEllipseSector.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.ellipse.radiusH();\n        var radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        var curves = [];\n        var curAngle = angles[0];\n        var startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length];\n            var endPoint = this.ellipse.vertAt(nextAngle);\n            var startTangent = this.ellipse.tangentAt(curAngle);\n            var endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                var startDiff = startPoint.difference(intersection);\n                var endDiff = endPoint.difference(intersection);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    VEllipseSector.ellipseSectorUtils = {\n        /**\n         * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n         * Inspiration found at:\n         *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            if (typeof rotation === \"undefined\")\n                rotation = 0.0;\n            // Important note: this function only works if start- and end-angle are within\n            // one whole circle [x,x+2*PI].\n            // Revelations of more than 2*PI might result in unexpected arcs.\n            // -> Use the geomutils.wrapMax( angle, 2*PI )\n            startAngle = geomutils_1.geomutils.wrapMax(startAngle, Math.PI * 2);\n            endAngle = geomutils_1.geomutils.wrapMax(endAngle, Math.PI * 2);\n            // Find the start- and end-point on the rotated ellipse\n            // XYCoords to Vertex (for rotation)\n            var end = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n            var start = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n            end.rotate(rotation, { x: x, y: y });\n            start.rotate(rotation, { x: x, y: y });\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            }\n            var sweepFlag = 1;\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            // Arc rotation in degrees, not radians.\n            var r2d = 180 / Math.PI;\n            pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        },\n        /**\n         * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n         * elliptic sector is the same for all.\n         *\n         * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n         * distance from the start angle to the first angle and/or the distance from the last angle to\n         * the end angle may be different to the others.\n         *\n         * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n         * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n         *\n         * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n         *\n         * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n         * @param {number} radiusV - The second (vertical) radius of the ellipse.\n         * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n         * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n         * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n         * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n         */\n        equidistantVertAngles: function (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) {\n            var ellipseAngles = VEllipse_1.VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n            ellipseAngles = ellipseAngles.map(function (angle) { return VEllipseSector.ellipseSectorUtils.normalizeAngle(angle); });\n            var angleIsInRange = function (angle) {\n                if (startAngle < endAngle)\n                    return angle >= startAngle && angle <= endAngle;\n                else\n                    return angle >= startAngle || (angle <= endAngle && angle >= 0);\n            };\n            // Drop all angles outside the sector\n            var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n            // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n            // --> find the angle that is closest to the start angle\n            var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n            // Bring all angles into the correct order\n            //    Idea: use splice or slice here?\n            var angles = [];\n            for (var i = 0; i < ellipseAngles.length; i++) {\n                angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n            }\n            return angles;\n        },\n        findClosestToStartAngle: function (startAngle, endAngle, ellipseAngles) {\n            // Note: endAngle > 0 && startAngle > 0\n            if (startAngle > endAngle) {\n                var n = ellipseAngles.length;\n                for (var i = 0; i < n; i++) {\n                    var ea = geomutils_1.geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                    if (ea >= startAngle && ea >= endAngle) {\n                        return i;\n                    }\n                }\n            }\n            return 0;\n        },\n        normalizeAngle: function (angle) { return (angle < 0 ? Math.PI * 2 + angle : angle); },\n        /**\n         * Convert the elliptic arc from endpoint parameters to center parameters as described\n         * in the w3c svg arc implementation note.\n         *\n         * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n         *\n         * @param {number} x1 - The x component of the start point (end of last SVG command).\n         * @param {number} y1 - The y component of the start point (end of last SVG command).\n         * @param {number} rx - The first (horizontal) radius of the ellipse.\n         * @param {number} ry - The second (vertical) radius of the ellipse.\n         * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n         * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n         * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n         * @param {number} x2 - The x component of the end point (end of last SVG command).\n         * @param {number} y2 - The y component of the end point (end of last SVG command).\n         * @returns\n         */\n        endpointToCenterParameters: function (x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n            // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n            // Thanks to\n            //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n            var abs = Math.abs;\n            var sin = Math.sin;\n            var cos = Math.cos;\n            var sqrt = Math.sqrt;\n            var pow = function (n) {\n                return n * n;\n            };\n            var sinphi = sin(phi);\n            var cosphi = cos(phi);\n            // Step 1: simplify through translation/rotation\n            var x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n            var y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n            var px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n            // correct of out-of-range radii\n            var L = px / prx + py / pry;\n            if (L > 1) {\n                rx = sqrt(L) * abs(rx);\n                ry = sqrt(L) * abs(ry);\n            }\n            else {\n                rx = abs(rx);\n                ry = abs(ry);\n            }\n            // Step 2 + 3: compute center\n            var sign = fa === fs ? -1 : 1;\n            var M = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n            var _cx = (M * (rx * y)) / ry;\n            var _cy = (M * (-ry * x)) / rx;\n            var cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n            var cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n            // Step 4: Compute start and end angle\n            var center = new Vertex_1.Vertex(cx, cy);\n            var axis = center.clone().addXY(rx, ry);\n            var ellipse = new VEllipse_1.VEllipse(center, axis, 0);\n            ellipse.rotate(phi);\n            var startAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x1, y1)).angle();\n            var endAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x2, y2)).angle();\n            return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n        }\n    }; // END ellipseSectorUtils\n    return VEllipseSector;\n}());\nexports.VEllipseSector = VEllipseSector;\n//# sourceMappingURL=VEllipseSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vector = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertTuple = void 0;\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    VertTuple.prototype.hasPoint = function (point, insideBoundsOnly) {\n        var t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            var distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex_1.Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    };\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @version  2.4.2\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vertex = void 0;\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    };\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.angle = function (origin) {\n        var a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    };\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    };\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<circle\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    };\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     * @readonly\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexAttr = void 0;\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexListeners = void 0;\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addClickListener = function (listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    };\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeClickListener = function (listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    };\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n    * Remove a drag listener.\n    *\n    * @method removeDragEndListener\n    * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n    * @return {VertexListeners} this (for chaining)\n    * @instance\n    * @memberof VertexListeners\n    **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireClickEvent = function (e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.9.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutils = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.beginDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutils.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutils.prototype.setConfiguration = function (configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.setCurrentId = function (uid) {\n        // NOOP\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    drawutils.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {Vertex} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    drawutils.prototype.text = function (text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        var color = options.color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutils.prototype.path = function (pathData, color, lineWidth, options) {\n        var d = options && options.inplace ? pathData : drawutilssvg_1.drawutilssvg.copyPathData(pathData);\n        drawutilssvg_1.drawutilssvg.transformPathData(d, this.offset, this.scale);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  0.0.5\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilsgl = void 0;\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    drawutilsgl.prototype._x2rel = function (x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    };\n    drawutilsgl.prototype._y2rel = function (y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function (renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilsgl.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilsgl.prototype.setConfiguration = function (configuration) {\n        // TODO\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    drawutilsgl.prototype.setCurrentId = function (uid) {\n        // NOOP\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    drawutilsgl.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    drawutilsgl.prototype.text = function (text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilsgl.prototype.path = function (pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.3.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilssvg = void 0;\nvar CircleSector_1 = require(\"./CircleSector\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilssvg = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    function drawutilssvg(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex_1.Vertex(0, 0).set(offset);\n        this.scale = new Vertex_1.Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    drawutilssvg.prototype.addStyleDefs = function (drawConfig) {\n        var nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(nodeStyle); // nodeDef);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        var keys = {\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        var rules = [];\n        for (var k in keys) {\n            var className = keys[k];\n            var drawSettings = drawConfig[k];\n            rules.push(\".\" + className + \" { fill : none; stroke: \" + drawSettings.color + \"; stroke-width: \" + drawSettings.lineWidth + \"px }\");\n        }\n        nodeStyle.innerHTML = rules.join(\"\\n\");\n    };\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    drawutilssvg.prototype.findElement = function (key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    };\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    drawutilssvg.prototype.createSVGNode = function (nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    };\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    drawutilssvg.prototype.makeNode = function (nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        return node;\n    };\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    drawutilssvg.prototype._bindFillDraw = function (node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", this.curClassName + \" \" + className);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color);\n        node.setAttribute(\"stroke-width\", \"\" + (lineWidth || 1));\n        if (this.curId) {\n            node.setAttribute(\"id\", \"\" + this.curId); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    };\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    drawutilssvg.prototype.setSize = function (canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", \"0 0 \" + this.canvasSize.width + \" \" + this.canvasSize.height);\n        this.svgNode.setAttribute(\"width\", \"\" + this.canvasSize.width);\n        this.svgNode.setAttribute(\"height\", \"\" + this.canvasSize.height);\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilssvg.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode, this.bufferGNode);\n        return copy;\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilssvg.prototype.setConfiguration = function (configuration) {\n        this.drawlibConfiguration = configuration;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentId = function (uid) {\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentClassName = function (className) {\n        this.curClassName = className;\n    };\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.beginDrawCycle = function (renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilssvg.prototype.endDrawCycle = function (renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        var tmp = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmp;\n    };\n    drawutilssvg.prototype._x = function (x) {\n        return this.offset.x + this.scale.x * x;\n    };\n    drawutilssvg.prototype._y = function (y) {\n        return this.offset.y + this.scale.y * y;\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.line = function (zA, zB, color, lineWidth) {\n        var line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", \"\" + this._x(zA.x));\n        line.setAttribute(\"y1\", \"\" + this._y(zA.y));\n        line.setAttribute(\"x2\", \"\" + this._x(zB.x));\n        line.setAttribute(\"y2\", \"\" + this._y(zB.y));\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.arrow = function (zA, zB, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        var d = [\"M\", this._x(zA.x), this._y(zA.y)];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.image = function (image, position, size) {\n        var _this = this;\n        var node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        var setImageSize = function (image) {\n            if (image.naturalWidth) {\n                var ratioX = size.x / image.naturalWidth;\n                var ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", \"\" + image.naturalWidth * _this.scale.x);\n                node.setAttribute(\"height\", \"\" + image.naturalHeight * _this.scale.y);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                node.setAttribute(\"transform\", \"translate(\" + _this._x(position.x) + \" \" + _this._y(position.y) + \") scale(\" + ratioX + \" \" + ratioY + \")\");\n            }\n        };\n        image.addEventListener(\"load\", function (event) {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", \"\" + 0);\n        node.setAttribute(\"y\", \"\" + 0);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        var node = this.makeNode(\"path\");\n        // Draw curve\n        var d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubierBezier\", color, lineWidth);\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        var d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handle = function (startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handleLine = function (startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.dot = function (p, color) {\n        var node = this.makeNode(\"line\");\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.point = function (p, color) {\n        var radius = 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\" + this._x(p.x));\n        node.setAttribute(\"cy\", \"\" + this._y(p.y));\n        node.setAttribute(\"r\", \"\" + radius);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circle = function (center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\" + this._x(center.x));\n        node.setAttribute(\"cy\", \"\" + this._y(center.y));\n        node.setAttribute(\"r\", \"\" + radius * this.scale.x); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var arcData = CircleSector_1.CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        var node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", \"\" + this._x(center.x));\n        node.setAttribute(\"cy\", \"\" + this._y(center.y));\n        node.setAttribute(\"rx\", \"\" + radiusX * this.scale.x);\n        node.setAttribute(\"ry\", \"\" + radiusY * this.scale.y);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", \"rotate(\" + (rotation * 180) / Math.PI + \" \" + this._x(center.x) + \" \" + this._y(center.y) + \")\");\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.square = function (center, size, color, lineWidth) {\n        var node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", \"\" + this._x(center.x - size / 2.0));\n        node.setAttribute(\"y\", \"\" + this._y(center.y - size / 2.0));\n        node.setAttribute(\"width\", \"\" + size * this.scale.x);\n        node.setAttribute(\"height\", \"\" + size * this.scale.y);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode(\"path\");\n        var d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode(\"path\");\n        var d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.diamondHandle = function (center, size, color) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.squareHandle = function (center, size, color) {\n        var node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", \"\" + (this._x(center.x) - size / 2.0));\n        node.setAttribute(\"y\", \"\" + (this._y(center.y) - size / 2.0));\n        node.setAttribute(\"width\", \"\" + size);\n        node.setAttribute(\"height\", \"\" + size);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\" + this._x(center.x));\n        node.setAttribute(\"cy\", \"\" + this._y(center.y));\n        node.setAttribute(\"r\", \"\" + radius);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.crosshair = function (center, radius, color) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, 0.5);\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polygon = function (polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        var d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polyline\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.text = function (text, x, y, options) {\n        options = options || {};\n        var color = options.color || \"black\";\n        var node = this.makeNode(\"text\");\n        node.setAttribute(\"x\", \"\" + this._x(x));\n        node.setAttribute(\"y\", \"\" + this._y(y));\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.label = function (text, x, y, rotation) {\n        var node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", \"translate(\" + this.offset.x + \",\" + this.offset.y + \"), rotate(\" + (rotation / Math.PI) * 180 + \")\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", \"black\", null);\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilssvg.prototype.path = function (pathData, color, lineWidth, options) {\n        var node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        var d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.clear = function (color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // // Clearing an SVG is equivalent to removing all its child elements.\n        // for (var i = 0; i < this.gNode.childNodes.length; i++) {\n        //   // Hide all nodes here. Don't throw them away.\n        //   // We can probably re-use them in the next draw cycle.\n        //   var child: SVGElement = this.gNode.childNodes[i] as SVGElement;\n        //   this.cache.set(child.getAttribute(\"id\"), child);\n        // }\n        // this.removeAllChildNodes();\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = undefined;\n        var node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", \"\" + this.canvasSize.width);\n        node.setAttribute(\"height\", \"\" + this.canvasSize.height);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = undefined;\n    };\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    drawutilssvg.prototype.removeAllChildNodes = function () {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n    };\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    drawutilssvg.createSvg = function () {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    };\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.copyPathData = function (data) {\n        var copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    };\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    drawutilssvg.transformPathData = function (data, offset, scale) {\n        // Scale and translate {x,y}\n        var _stx = function (index) {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        var _sty = function (index) {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        var _sx = function (index) {\n            data[index] = scale.x * Number(data[index]);\n        };\n        var _sy = function (index) {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var stx = function (value) {\n            return offset.x + scale.x * value;\n        };\n        var sty = function (value) {\n            return offset.y + scale.y * value;\n        };\n        // scale only {x,y}\n        var sx = function (value) {\n            return scale.x * value;\n        };\n        var sy = function (value) {\n            return scale.y * value;\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = function (index) {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            var cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    }; // END transformPathData\n    drawutilssvg.HEAD_XML = [\n        '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n        '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n        \"\"\n    ].join(\"\\n\");\n    return drawutilssvg;\n}());\nexports.drawutilssvg = drawutilssvg;\n//# sourceMappingURL=drawutilssvg.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geomutils = void 0;\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax: function (x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax: function (x, min, max) {\n        return min + exports.geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n/* Imports for webpack */\n\nglobalThis.UIDGenerator = require(\"./UIDGenerator.js\").UIDGenerator;\nglobalThis.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nglobalThis.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nglobalThis.Vertex = require(\"./Vertex.js\").Vertex;\n\nglobalThis.Bounds = require(\"./Bounds.js\").Bounds;\nglobalThis.Grid = require(\"./Grid.js\").Grid;\nglobalThis.Line = require(\"./Line.js\").Line;\nglobalThis.Vector = require(\"./Vector.js\").Vector;\nglobalThis.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nglobalThis.BezierPath = require(\"./BezierPath.js\").BezierPath;\nglobalThis.Polygon = require(\"./Polygon.js\").Polygon;\nglobalThis.Triangle = require(\"./Triangle.js\").Triangle;\nglobalThis.VEllipse = require(\"./VEllipse.js\").VEllipse;\nglobalThis.Circle = require(\"./Circle.js\").Circle;\nglobalThis.CircleSector = require(\"./CircleSector.js\").CircleSector;\nglobalThis.PBImage = require(\"./PBImage.js\").PBImage;\nglobalThis.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nglobalThis.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nglobalThis.drawutils = require(\"./draw.js\").drawutils;\n// globalThis.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;  // Unfinished\nglobalThis.drawutilssvg = require(\"./drawutilssvg.js\").drawutilssvg;\nglobalThis.geomutils = require(\"./geomutils.js\").geomutils;\nglobalThis.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n"],"sourceRoot":""}