{"version":3,"sources":["webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/index.js","webpack://plotboilerplate/./src/cjs/BezierPath.js","webpack://plotboilerplate/./src/cjs/Bounds.js","webpack://plotboilerplate/./src/cjs/Circle.js","webpack://plotboilerplate/./src/cjs/CircleSector.js","webpack://plotboilerplate/./src/cjs/CubicBezierCurve.js","webpack://plotboilerplate/./src/cjs/Grid.js","webpack://plotboilerplate/./src/cjs/KeyHandler.js","webpack://plotboilerplate/./src/cjs/Line.js","webpack://plotboilerplate/./src/cjs/MouseHandler.js","webpack://plotboilerplate/./src/cjs/PBImage.js","webpack://plotboilerplate/./src/cjs/PBText.js","webpack://plotboilerplate/./src/cjs/PlotBoilerplate.js","webpack://plotboilerplate/./src/cjs/Polygon.js","webpack://plotboilerplate/./src/cjs/Triangle.js","webpack://plotboilerplate/./src/cjs/UIDGenerator.js","webpack://plotboilerplate/./src/cjs/VEllipse.js","webpack://plotboilerplate/./src/cjs/VEllipseSector.js","webpack://plotboilerplate/./src/cjs/Vector.js","webpack://plotboilerplate/./src/cjs/VertTuple.js","webpack://plotboilerplate/./src/cjs/Vertex.js","webpack://plotboilerplate/./src/cjs/VertexAttr.js","webpack://plotboilerplate/./src/cjs/VertexListeners.js","webpack://plotboilerplate/./src/cjs/draw.js","webpack://plotboilerplate/./src/cjs/drawgl.js","webpack://plotboilerplate/./src/cjs/drawutilssvg.js","webpack://plotboilerplate/./src/cjs/geomutils.js","webpack://plotboilerplate/webpack/bootstrap","webpack://plotboilerplate/webpack/runtime/define property getters","webpack://plotboilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://plotboilerplate/webpack/runtime/make namespace object","webpack://plotboilerplate/./src/cjs/entry.js"],"names":["getLen","v","Math","sqrt","x","y","HandlerAdmin","el","this","handlers","handler","push","i","length","splice","_args","len","apply","arguments","wrapFunc","handlerAdmin","add","AlloyFinger","option","element","document","querySelector","start","bind","move","end","cancel","addEventListener","preV","pinchStartLen","zoom","isDoubleTap","noop","rotate","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","globalThis","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","_self","Date","pageX","pageY","dispatch","abs","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","event","afEvent","currentX","currentY","sCurrentX","sCurrentY","angle","v1","v2","mr","r","dot","acos","getAngle","cross","PI","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","del","removeEventListener","Object","defineProperty","exports","value","BezierPath","Bounds_1","CubicBezierCurve_1","UIDGenerator_1","Vertex_1","pathPoints","className","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","uid","UIDGenerator","next","totalArcLength","adjustCircular","bezierCurves","prototype","addCurve","curve","startPoint","endPoint","adjustSuccessorControlPoint","getLength","locateCurveByStartPoint","point","equals","locateCurveByEndPoint","locateCurveByStartControlPoint","startControlPoint","locateCurveByEndControlPoint","endControlPoint","updateArcLengths","getCurveCount","getCurveAt","curveIndex","translate","amount","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","scale","anchor","scaleFactor","scaleXY","scaleFactors","center","getClosestT","p","minIndex","minDist","dist","curveT","uMin","u","getPointAt","distance","max","min","getPoint","console","warn","uTemp","clone","relativeU","t","getTangentAt","getTangent","getPerpendicularAt","getPerpendicular","log","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","fromArray","curves","reverse","moveCurvePoint","pointID","moveAmount","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","Vertex","neighbourHandleBounds","mainHandleLength","pow","neighbourHandleLength","set","getBounds","b","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","Bounds","getEvenDistributionVertices","pointCount","Error","result","polygonPoint","stepSize","n","segmentLength","arcLength","curSegmentU","newPoint","undefined","destroy","isDestroyed","toJSON","prettyFormat","buffer","join","fromJSON","jsonString","obj","JSON","parse","Array","isArray","arr","bPath","lastCurve","CubicBezierCurve","isInstance","fromObject","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","bezierPath","Polygon_1","width","height","toPolygon","Polygon","getCenter","toString","computeFromVertices","vertices","vert","xMin","xMax","yMin","yMax","fromDimension","origin","Circle","Line_1","Vector_1","radius","containsPoint","containsCircle","circle","lineDistance","line","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","Vector","perp","circleIntersection","p0","p1","d","a","h","p2","x3","y3","x4","y4","Line","lineIntersection","interA","interB","transA","sub","transB","diff","difference","det","distSquared","belowSqrt","sign","closestPoint","cos","sin","CircleSector","startAngle","endAngle","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","firstHalf","secondHalf","concat","largeArcFlag","sweepFlag","pathData","curveIntervals","segmentCache","segmentLengths","moveControlPoint","tmp","pointB","curveStep","tmpLength","newLength","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","tDiff","getPointByID","id","c","t2","nt2","tX","tY","startVec","endVec","inv","convertU2T","tangentVector","Grid","size","utils","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","listeners","hasListener","lis","keyCode","listener","fireDownEvent","e","firePressEvent","fireUpEvent","key2code","key","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","down","press","up","isDown","extendStatics","__extends","setPrototypeOf","__proto__","hasOwnProperty","call","__","constructor","create","VertTuple_1","_super","_this","intersection","denominator","numerator1","numerator2","isNaN","VertTuple","MouseHandler","XWheelEvent","XMouseEvent","MouseEvent","WheelEvent","name","mouseDownPos","mouseDragPos","mouseButton","installed","mousemove","mkParams","drag","relPos","mouseup","button","mousedown","click","wheel","offsetX","offsetY","eventName","_a","_b","rel","xEvent","params","isTouchEvent","pos","leftButton","middleButton","rightButton","NaN","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","PBImage","image","upperLeft","lowerRight","PBText","text","color","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","textAlign","rotation","alloyfinger_typescript_1","draw_1","drawgl_1","drawutilssvg_1","BezierPath_1","Circle_1","CircleSector_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","Triangle_1","VEllipse_1","VEllipseSector_1","VertexAttr_1","PBText_1","PlotBoilerplate","config","renderTime","VertexAttr","model","bezierAutoAdjust","selectable","isSelected","draggable","visible","canvas","f","fetch","fullSize","val","fitToParent","bool","scaleX","scaleY","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","lineWidth","handleLine","pathVertex","fill","controlVertex","polygon","triangle","ellipse","ellipseSector","circleSector","vertex","selectedVertex","vector","grid","canvasSize","canvasElement","tagName","toLowerCase","eventCatcher","drawutilsgl","ctx","getContext","draw","copyInstance","drawutils","drawutilssvg","parentElement","createElement","style","position","left","top","cursor","appendChild","body","title","setAttribute","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","svgNode","createElementNS","tosvgDraw","offset","tosvgFill","beginDrawCycle","clear","drawAll","endDrawCycle","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","bounds","canvasCenter","canvasRatio","ratio","addXY","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","VEllipse","axis","addDragListener","VEllipseSector","Triangle","attr","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","Boolean","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","round","setCurrentClassName","setCurrentId","raster","crosshair","_handleColor","drawDrawables","drawDrawable","df","cubicBezier","squareHandle","diamondHandle","circleHandle","polyline","signedRadiusV","signedRadiusH","radiusH","radiusV","data","ellipseSectorUtils","circleArc","arrow","error","drawSelectPolygon","clearSelection","viewport","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","parentNode","display","padding","border","pl","pr","pt","bl","br","bt","bb","w","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","setSize","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","containsVert","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","fireDragStartEvent","mouseDragHandler","oldDragAmount","fireDragEvent","mouseUpHandler","fireDragEndEvent","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","fingerA","item","fingerB","window","default","createGUI","props","class_1","isVertex","safeMergeByKeys","extension","k","typ","transform","fallback","isOpen","addVertex","getVertexAt","index","inside","j","xi","yi","xj","yj","area","signedArea","isClockwise","perimeter","factor","getEvenDistributionPolygon","polygonIndex","nextPolygonPoint","loopMax","lerpAbs","map","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","total","l","sum","geomutils_1","calcCircumcircle","getArea","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","EPSILON","cx","cy","radius_squared","inCircumcircle","min3","max3","determinant","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","current","normalAt","foci","getFoci","angleA","centerAngle","endPointA","addX","endPointB","normal","rh","rv","sdiff","addY","getEquidistantVertices","angles","equidistantVertAngles","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","wrapMinMax","normalizeAngle","wrapMax","r2d","fullEllipsePointCount","ellipseAngles","filter","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","vertA","vertB","inverse","buildArrowHead","zA","zB","headlen","atan2","factory","setLength","normalize","moveTo","newA","v0","colinear","l2","vtutils","dist2","hasPoint","insideBoundsOnly","pointDistance","VertexListeners_1","tuple","VertexListeners","setX","setY","invX","invY","amountX","amountY","eqX","eqY","lerp","target","step","factors","ZERO","multiplyScalar","scalar","removeAllListeners","randomVertex","viewPort","random","arrayToJSON","precision","stringify","dragStart","dragEnd","addClickListener","_addListener","removeClickListener","_removeListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","_fireEvent","ve","newListener","oldListener","context","fillShapes","setConfiguration","configuration","globalCompositeOperation","blendMode","save","beginPath","lineTo","strokeStyle","stroke","restore","_fillOrDraw","alpha","complete","naturalWidth","globalAlpha","drawImage","naturalHeight","texturedPoly","textureImage","textureSize","polygonPosition","basePolygonBounds","targetCenterDifference","targetTextureSize","targetTextureOffset","helpers","clipPoly","_texturedPoly","rotationCenter","rotationalOffset","tileCenter","rect","closePath","fillStyle","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","arc","asSegment","radiusX","radiusY","sizeX","sizeY","ceil","setLineDash","_c","relX","relY","font","indexOf","fillText","strokeText","label","inplace","copyPathData","transformPathData","Path2D","clearRect","fillRect","clip","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","copy","curId","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","RAD_TO_DEG","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","drawlibConfiguration","cache","Map","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","nodeStyle","keys","rules","drawSettings","innerHTML","addCustomStyleDefs","defs","forEach","findElement","nodeName","node","get","toUpperCase","delete","makeNode","_bindFillDraw","curClassName","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","tmpGNode","tmpDefsNode","_x","_y","setImageSize","ratioX","ratioY","src","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","arcData","transformOrigin","textNode","lastChild","removeChild","createSvg","_stx","_sty","_sx","_sy","lastPoint","_slp","HEAD_XML","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","__webpack_module_cache__","__webpack_require__","moduleId","module","__webpack_modules__","definition","o","enumerable","prop","Symbol","toStringTag"],"mappings":"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","file":"plotboilerplate.browser.min.js","sourcesContent":["/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * TypeScript port by Ikaros Kappler.\n *\n * Original file from https://github.com/AlloyTeam/AlloyFinger\n *\n * @date 2021-02-10\n */\nimport { AlloyFinger } from './alloy_finger';\nexport { AlloyFinger };\nexport default AlloyFinger;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 2.5.0\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BezierPath = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaleFactor) {\n        // var scaleFactors : XYCoords = { x : scaleFactor, y : scaleFactor };\n        // for (var i = 0; i < this.bezierCurves.length; i++) {\n        //   var curve = this.bezierCurves[i];\n        //   curve.getStartPoint().scale(scaleFactor, anchor);\n        //   curve.getStartControlPoint().scale(scaleFactor, anchor);\n        //   curve.getEndControlPoint().scale(scaleFactor, anchor);\n        //   // Do NOT scale the end point here!\n        //   // Don't forget that the curves are connected and on curve's end point\n        //   // the the successor's start point (same instance)!\n        // }\n        // // Finally move the last end point (was not scaled yet)\n        // if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n        //   this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaleFactor, anchor);\n        // }\n        // this.updateArcLengths();\n        // return this;\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    };\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scaleXY = function (scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.adjustNeighbourControlPoint = function (_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    BezierPath.prototype.getEvenDistributionVertices = function (pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        var result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex_1.Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        var perimeter = this.totalArcLength;\n        var stepSize = perimeter / (pointCount - 1);\n        var n = this.bezierCurves.length;\n        var curveIndex = 0;\n        var segmentLength = this.bezierCurves[0].arcLength;\n        var curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex_1.Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    };\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    BezierPath.prototype.destroy = function () {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    };\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    };\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    BezierPath.fromReducedList = function (pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        // var firstStartPoint: Vertex;\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @version  1.5.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bounds = void 0;\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    Bounds.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([new Vertex_1.Vertex(this.min), new Vertex_1.Vertex(this.max.x, this.min.y), new Vertex_1.Vertex(this.max), new Vertex_1.Vertex(this.min.x, this.max.y)], false);\n    };\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    Bounds.prototype.getCenter = function () {\n        return new Vertex_1.Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    };\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{ min: \" + this.min.toString() + \", max : \" + this.max.toString() + \", width: \" + this.width + \", height : \" + this.height + \" }\";\n    };\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Creates a deep clone of this bounds object. The returned object's `min` and `max` instances are `Vertex` instances.\n     */\n    // clone() {\n    //   return new Bounds(new Vertex(this.min.x, this.min.y), new Vertex(this.max.x, this.max.y));\n    // }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    Bounds.computeFromVertices = function (vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        var xMin = vertices[0].x;\n        var xMax = vertices[0].x;\n        var yMin = vertices[0].y;\n        var yMax = vertices[0].y;\n        var vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    Bounds.fromDimension = function (width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    };\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @version  1.4.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Circle = void 0;\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    Circle.prototype.containsPoint = function (point) {\n        return this.center.distance(point) < this.radius;\n    };\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    Circle.prototype.containsCircle = function (circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {Vertex} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    Circle.prototype.lineIntersection = function (a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        var interA = new Vertex_1.Vertex();\n        var interB = new Vertex_1.Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        var transA = new Vertex_1.Vertex(a).sub(this.center);\n        var transB = new Vertex_1.Vertex(b).sub(this.center);\n        var diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        var dist = transA.distance(transB);\n        var det = transA.x * transB.y - transA.y * transB.x;\n        var distSquared = dist * dist;\n        var radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        var belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        var sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line_1.Line(interA.add(this.center), interB.add(this.center));\n        // return new Line(interA, interB);\n    };\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    Circle.prototype.closestPoint = function (vert) {\n        var lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex_1.Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Circle.prototype.destroy = function () {\n        this.center.destroy();\n        this.isDestroyed = true;\n    };\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                         Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleSector = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nvar CircleSector = /** @class */ (function () {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    function CircleSector(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    CircleSector.prototype.destroy = function () {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    };\n    CircleSector.circleSectorUtils = {\n        /**\n         * Helper function to convert polar circle coordinates to cartesian coordinates.\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {number} angle - The angle in radians.\n         */\n        polarToCartesian: function (centerX, centerY, radius, angle) {\n            return {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        },\n        /**\n         * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n         * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radius, startAngle, endAngle, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            var end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n            var start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n            // Split full circles into two halves.\n            // Some browsers have problems to render full circles (described by start==end).\n            if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n                var firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n                var secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n                return firstHalf.concat(secondHalf);\n            }\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            var sweepFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }\n    };\n    return CircleSector;\n}()); // END class\nexports.CircleSector = CircleSector;\n//# sourceMappingURL=CircleSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @version 2.6.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CubicBezierCurve = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone();\n        var pointB = new Vertex_1.Vertex(0, 0);\n        var curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) +\n            this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n            this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n            this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        var tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    };\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    CubicBezierCurve.prototype.destroy = function () {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grid = void 0;\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyHandler = void 0;\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    };\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = function (e) {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = function (e) {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = function (e) {\n            _self.fireUpEvent(e, _self);\n        }));\n    };\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    };\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    KeyHandler.prototype.destroy = function () {\n        this.releaseListeners();\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    // prettier-ignore\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @version  2.2.1\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Line = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        var x = this.a.x + a * (this.b.x - this.a.x);\n        var y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(x, y);\n    };\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseHandler = exports.XWheelEvent = exports.XMouseEvent = void 0;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers[\"mousemove\"] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX, y: e.offsetY };\n    };\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    MouseHandler.prototype.mkParams = function (event, eventName) {\n        var _a, _b;\n        var rel = this.relPos(event);\n        var xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button,\n            leftButton: event.button === 0,\n            middleButton: event.button === 1,\n            rightButton: event.button === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    };\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    };\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    };\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBImage = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    PBImage.prototype.destroy = function () {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    };\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBText = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar PBText = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function PBText(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex_1.Vertex();\n        this.color = options.color;\n        this.fontFamily = options.fontFamily;\n        this.fontSize = options.fontSize;\n        this.fontStyle = options.fontStyle;\n        this.fontWeight = options.fontWeight;\n        this.lineHeight = options.lineHeight;\n        this.textAlign = options.textAlign;\n        this.rotation = options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    PBText.prototype.destroy = function () {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    };\n    return PBText;\n}()); // END class\nexports.PBText = PBText;\n//# sourceMappingURL=PBText.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @version  1.15.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlotBoilerplate = void 0;\nvar alloyfinger_typescript_1 = require(\"alloyfinger-typescript\");\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar CircleSector_1 = require(\"./CircleSector\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar VEllipseSector_1 = require(\"./VEllipseSector\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar PBText_1 = require(\"./PBText\");\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    function PlotBoilerplate(config) {\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        var f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: function () {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: function () {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        var canvasElement = typeof config.canvas == \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawgl_1.drawutilsgl === \"undefined\") {\n                console.warn(\"Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.\");\n                console.warn(\"Disabling GL and falling back to Canvas2D.\");\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                var ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawgl_1.drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                var ctx = this.canvas.getContext(\"2d\");\n                this.draw = new draw_1.drawutils(ctx, false);\n                this.fill = new draw_1.drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg_1.drawutilssvg === \"undefined\")\n                throw \"The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.\";\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg_1.drawutilssvg(this.canvas, new Vertex_1.Vertex(), // offset\n            new Vertex_1.Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        // Create fake SVG node\n        var svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg_1.drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear)\n            pb.config.preClear();\n        tosvgDraw.clear(pb.config.backgroundColor);\n        if (pb.config.preDraw)\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (event) {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener(function (event) {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector_1.CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            for (var i = 0; i < drawable.vertices.length; i++) {\n                this.vertices.push(drawable.vertices[i]);\n            }\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0) {\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                }\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else if (drawable instanceof PBText_1.PBText) {\n            this.vertices.push(drawable.anchor);\n            this.drawables.push(drawable);\n            drawable.anchor.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    };\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex_1.Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector_1.CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                    else if (drawable instanceof PBText_1.PBText) {\n                        this.removeVertex(drawable.anchor, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    };\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                return;\n            }\n        }\n    };\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    PlotBoilerplate.prototype.removeAll = function (keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    };\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    };\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function (draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        var gScale = {\n            x: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    };\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function (draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, \"#000000\");\n    };\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    };\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawable = function (d, renderTime, draw, fill) {\n        if (d instanceof BezierPath_1.BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(d.uid + \"_h0\");\n                        df.setCurrentClassName(d.className + \"-start-handle\");\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(d.uid + \"_h0\");\n                        df.setCurrentClassName(d.className + \"-start-handle\");\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(d.uid + \"_h2\");\n                        df.setCurrentClassName(d.className + \"-start-control-handle\");\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(d.uid + \"_h3\");\n                        df.setCurrentClassName(d.className + \"-end-control-handle\");\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(d.uid + \"_l0\");\n                    draw.setCurrentClassName(d.className + \"-start-line\");\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(d.uid + \"_l1\");\n                    draw.setCurrentClassName(d.className + \"-end-line\");\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon_1.Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle_1.Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse_1.VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(d.uid + \"_e0\");\n                draw.setCurrentClassName(d.className + \"-v-line\");\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n                draw.setCurrentId(d.uid + \"_e1\");\n                draw.setCurrentClassName(d.className + \"-h-line\");\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\" + d.className);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector_1.VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\" + d.className);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            var data = VEllipseSector_1.VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle_1.Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector_1.CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex_1.Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line_1.Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector_1.Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(d.uid + \"_h0\");\n                draw.setCurrentClassName(d.className + \"-handle\");\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage_1.PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(d.uid + \"_l0\");\n                draw.setCurrentClassName(d.className + \"-line\");\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(d.uid + \"_h0\");\n                draw.setCurrentClassName(d.className + \"-lower-right\");\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText_1.PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(d.uid + \"_a0\");\n                draw.setCurrentClassName(d.className + \"-anchor\");\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    };\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function (draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    };\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    };\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    };\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawAll = function (renderTime, draw, fill) {\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(undefined);\n        draw.setCurrentClassName(undefined);\n    }; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    PlotBoilerplate.prototype.getFProp = function (elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    };\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    };\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _this = this;\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                _this.canvas.setAttribute(\"viewBox\", \"0 0 \" + w + \" \" + h);\n                _this.canvas.setAttribute(\"width\", \"\" + w);\n                _this.canvas.setAttribute(\"height\", \"\" + h);\n                _this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                _this.eventCatcher.style.width = w + \"px\";\n                _this.eventCatcher.style.height = h + \"px\";\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = _self.config.canvasWidthFactor * width + \"px\";\n            _self.canvas.style.height = _self.config.canvasWidthFactor * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"absolute\";\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = _self.config.canvasWidthFactor * space.width + \"px\";\n            _self.canvas.style.height = _self.config.canvasHeightFactor * space.height + \"px\";\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (e) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (p.typeName == \"bpath\") {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == \"vertex\") {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown(\"y\")) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    };\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == \"vertex\" && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == \"bpath\")\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == \"vertex\")\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\")) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.adjustOffset = function (redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    };\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down(function (e) {\n                _self.mouseDownHandler(e);\n            })\n                .drag(function (e) {\n                _self.mouseDragHandler(e);\n            })\n                .up(function (e) {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel(function (e) {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                var bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: function (evt) {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (evt) {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (evt) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (evt) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (evt) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (evt) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (evt) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new alloyfinger_typescript_1.default(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function (props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            class_1.prototype.isVertex = function () {\n                return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n            };\n            class_1.prototype.setVIndex = function (vindex) {\n                this.vindex = vindex;\n                return this;\n            };\n            return class_1;\n        }()),\n        _a.VERTEX = \"vertex\",\n        _a);\n    /**\n     * A set of helper functions.\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == \"boolean\")\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == \"number\")\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == \"function\" && typeof extension[k] == \"function\")\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error(\"error in key \", k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style[\"transform-origin\"] = \"0 0\";\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"undefined\")\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === \"number\")\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"boolean\")\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== \"function\")\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) {\n                    // && !bezierPath.adjustCircular ) {\n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\nexports.default = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @version 1.10.0\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polygon = void 0;\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof vertices == \"undefined\")\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertex = function (vert) {\n        this.vertices.push(vert);\n    };\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    Polygon.prototype.getVertexAt = function (index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    };\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    Polygon.prototype.move = function (amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    };\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.area = function () {\n        return Polygon.utils.area(this.vertices);\n    };\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.signedArea = function () {\n        return Polygon.utils.signedArea(this.vertices);\n    };\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    Polygon.prototype.isClockwise = function () {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    };\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.perimeter = function () {\n        var length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    };\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    };\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    Polygon.prototype.getEvenDistributionPolygon = function (pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        var result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex_1.Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        var perimeter = this.perimeter();\n        var stepSize = perimeter / pointCount;\n        var n = this.vertices.length;\n        var polygonIndex = 1;\n        var nextPolygonPoint = new Vertex_1.Vertex(this.vertices[1]);\n        var segmentLength = polygonPoint.distance(nextPolygonPoint);\n        var loopMax = this.isOpen ? n : n + 1;\n        var curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex_1.Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    };\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    Polygon.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices(this.vertices);\n    };\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @return {Polygon} The cloned polygon.\n     */\n    Polygon.prototype.clone = function () {\n        return new Polygon(this.vertices.map(function (vert) { return vert.clone(); }), this.isOpen);\n    };\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    };\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    };\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Polygon.prototype.destroy = function () {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    };\n    Polygon.utils = {\n        /**\n         * Calculate the area of the given polygon (unsigned).\n         *\n         * Note that this does not work for self-intersecting polygons.\n         *\n         * @name area\n         * @return {number}\n         */\n        area: function (vertices) {\n            // Found at:\n            //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n            var total = 0.0;\n            for (var i = 0, l = vertices.length; i < l; i++) {\n                var addX = vertices[i].x;\n                var addY = vertices[(i + 1) % l].y;\n                var subX = vertices[(i + 1) % l].x;\n                var subY = vertices[i].y;\n                total += addX * addY * 0.5;\n                total -= subX * subY * 0.5;\n            }\n            return Math.abs(total);\n        },\n        /**\n         * Calulate the signed polyon area by interpreting the polygon as a matrix\n         * and calculating its determinant.\n         *\n         * @name signedArea\n         * @return {number}\n         */\n        signedArea: function (vertices) {\n            var sum = 0;\n            var n = vertices.length;\n            for (var i = 0; i < n; i++) {\n                var j = (i + 1) % n;\n                sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n            }\n            return sum;\n        }\n    };\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version   2.6.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Triangle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    Triangle.prototype.getArea = function () {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    };\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    };\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Triangle.prototype.destroy = function () {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n        },\n        min3: function (a, b, c) {\n            return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n        },\n        signedArea: function (p0x, p0y, p1x, p1y, p2x, p2y) {\n            return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n            var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n            var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && 1 - s - t > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UIDGenerator = void 0;\nvar UIDGenerator = /** @class */ (function () {\n    function UIDGenerator() {\n    }\n    UIDGenerator.next = function () {\n        return \"\" + UIDGenerator.current++;\n    };\n    UIDGenerator.current = 0;\n    return UIDGenerator;\n}());\nexports.UIDGenerator = UIDGenerator;\n//# sourceMappingURL=UIDGenerator.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  1.3.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipse = void 0;\nvar Line_1 = require(\"./Line\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    VEllipse.prototype.clone = function () {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    };\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.radiusH = function () {\n        return Math.abs(this.signedRadiusH());\n    };\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusH = function () {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    };\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    VEllipse.prototype.radiusV = function () {\n        return Math.abs(this.signedRadiusV());\n    };\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusV = function () {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    };\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.scale = function (factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    };\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.rotate = function (angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    };\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    VEllipse.prototype.vertAt = function (angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return new Vertex_1.Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    };\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.normalAt = function (angle, length) {\n        var point = this.vertAt(angle);\n        var foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        var angleA = new Line_1.Line(point, foci[0]).angle();\n        var angleB = new Line_1.Line(point, foci[1]).angle();\n        var centerAngle = angleA + (angleB - angleA) / 2.0;\n        var endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        var endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector_1.Vector(point, endPointB);\n        }\n        else {\n            return new Vector_1.Vector(point, endPointA);\n        }\n    };\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.tangentAt = function (angle, length) {\n        var normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    };\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    VEllipse.prototype.perimeter = function () {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    };\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    VEllipse.prototype.getFoci = function () {\n        // https://www.mathopenref.com/ellipsefoci.html\n        var rh = this.radiusH();\n        var rv = this.radiusV();\n        var sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        var f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    };\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    VEllipse.prototype.getEquidistantVertices = function (pointCount) {\n        var angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        var result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    };\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    VEllipse.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.radiusH();\n        var radiusV = this.radiusV();\n        var curves = [];\n        var angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        var curAngle = angles[0];\n        var startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length];\n            var endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                var startTangent = this.tangentAt(curAngle);\n                var endTangent = this.tangentAt(nextAngle);\n                // Find intersection\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                var startDiff = startPoint.difference(intersection);\n                var endDiff = endPoint.difference(intersection);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VEllipse.prototype.destroy = function () {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * A static collection of ellipse-related helper functions.\n     * @static\n     */\n    VEllipse.utils = {\n        /**\n         * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n         *\n         * @name polarToCartesian\n         * @param {number} centerX - The x coordinate of the elliptic center.\n         * @param {number} centerY - The y coordinate of the elliptic center.\n         * @param {number} radiusH - The horizontal radius of the ellipse.\n         * @param {number} radiusV - The vertical radius of the ellipse.\n         * @param {number} angle - The angle (in radians) to get the desired outline point for.\n         * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n         */\n        polarToCartesian: function (centerX, centerY, radiusH, radiusV, angle) {\n            // Tanks to Narasinham for the vertex-on-ellipse equations\n            // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n            var s = Math.sin(Math.PI / 2 - angle);\n            var c = Math.cos(Math.PI / 2 - angle);\n            return {\n                x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n                y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n            };\n        },\n        /**\n         * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n         *\n         * @param radiusH\n         * @param radiusV\n         * @param phi\n         * @returns {number} theta\n         */\n        phiToTheta: function (radiusH, radiusV, phi) {\n            //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n            var tanPhi = Math.tan(phi);\n            var tanPhi2 = tanPhi * tanPhi;\n            var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n            return theta;\n        },\n        /**\n         * Get n equidistant points on the elliptic arc.\n         *\n         * @param pointCount\n         * @returns\n         */\n        equidistantVertAngles: function (radiusH, radiusV, pointCount) {\n            var angles = [];\n            for (var i = 0; i < pointCount; i++) {\n                var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n                var theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n                angles[i] = theta;\n            }\n            return angles;\n        }\n    }; // END utils\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author  Ikaros Kappler\n * @date    2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @version 1.1.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipseSector = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar VEllipseSector = /** @class */ (function () {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    function VEllipseSector(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils_1.geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils_1.geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    VEllipseSector.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.ellipse.radiusH();\n        var radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        var curves = [];\n        var curAngle = angles[0];\n        var startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length];\n            var endPoint = this.ellipse.vertAt(nextAngle);\n            var startTangent = this.ellipse.tangentAt(curAngle);\n            var endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                var startDiff = startPoint.difference(intersection);\n                var endDiff = endPoint.difference(intersection);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VEllipseSector.prototype.destroy = function () {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    };\n    VEllipseSector.ellipseSectorUtils = {\n        /**\n         * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n         * Inspiration found at:\n         *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            if (typeof rotation === \"undefined\")\n                rotation = 0.0;\n            // Important note: this function only works if start- and end-angle are within\n            // one whole circle [x,x+2*PI].\n            // Revelations of more than 2*PI might result in unexpected arcs.\n            // -> Use the geomutils.wrapMax( angle, 2*PI )\n            startAngle = geomutils_1.geomutils.wrapMax(startAngle, Math.PI * 2);\n            endAngle = geomutils_1.geomutils.wrapMax(endAngle, Math.PI * 2);\n            // Find the start- and end-point on the rotated ellipse\n            // XYCoords to Vertex (for rotation)\n            var end = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n            var start = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n            end.rotate(rotation, { x: x, y: y });\n            start.rotate(rotation, { x: x, y: y });\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            }\n            var sweepFlag = 1;\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            // Arc rotation in degrees, not radians.\n            var r2d = 180 / Math.PI;\n            pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        },\n        /**\n         * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n         * elliptic sector is the same for all.\n         *\n         * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n         * distance from the start angle to the first angle and/or the distance from the last angle to\n         * the end angle may be different to the others.\n         *\n         * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n         * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n         *\n         * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n         *\n         * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n         * @param {number} radiusV - The second (vertical) radius of the ellipse.\n         * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n         * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n         * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n         * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n         */\n        equidistantVertAngles: function (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) {\n            var ellipseAngles = VEllipse_1.VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n            ellipseAngles = ellipseAngles.map(function (angle) { return VEllipseSector.ellipseSectorUtils.normalizeAngle(angle); });\n            var angleIsInRange = function (angle) {\n                if (startAngle < endAngle)\n                    return angle >= startAngle && angle <= endAngle;\n                else\n                    return angle >= startAngle || (angle <= endAngle && angle >= 0);\n            };\n            // Drop all angles outside the sector\n            var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n            // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n            // --> find the angle that is closest to the start angle\n            var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n            // Bring all angles into the correct order\n            //    Idea: use splice or slice here?\n            var angles = [];\n            for (var i = 0; i < ellipseAngles.length; i++) {\n                angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n            }\n            return angles;\n        },\n        findClosestToStartAngle: function (startAngle, endAngle, ellipseAngles) {\n            // Note: endAngle > 0 && startAngle > 0\n            if (startAngle > endAngle) {\n                var n = ellipseAngles.length;\n                for (var i = 0; i < n; i++) {\n                    var ea = geomutils_1.geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                    if (ea >= startAngle && ea >= endAngle) {\n                        return i;\n                    }\n                }\n            }\n            return 0;\n        },\n        normalizeAngle: function (angle) { return (angle < 0 ? Math.PI * 2 + angle : angle); },\n        /**\n         * Convert the elliptic arc from endpoint parameters to center parameters as described\n         * in the w3c svg arc implementation note.\n         *\n         * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n         *\n         * @param {number} x1 - The x component of the start point (end of last SVG command).\n         * @param {number} y1 - The y component of the start point (end of last SVG command).\n         * @param {number} rx - The first (horizontal) radius of the ellipse.\n         * @param {number} ry - The second (vertical) radius of the ellipse.\n         * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n         * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n         * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n         * @param {number} x2 - The x component of the end point (end of last SVG command).\n         * @param {number} y2 - The y component of the end point (end of last SVG command).\n         * @returns\n         */\n        endpointToCenterParameters: function (x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n            // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n            // Thanks to\n            //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n            var abs = Math.abs;\n            var sin = Math.sin;\n            var cos = Math.cos;\n            var sqrt = Math.sqrt;\n            var pow = function (n) {\n                return n * n;\n            };\n            var sinphi = sin(phi);\n            var cosphi = cos(phi);\n            // Step 1: simplify through translation/rotation\n            var x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n            var y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n            var px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n            // correct of out-of-range radii\n            var L = px / prx + py / pry;\n            if (L > 1) {\n                rx = sqrt(L) * abs(rx);\n                ry = sqrt(L) * abs(ry);\n            }\n            else {\n                rx = abs(rx);\n                ry = abs(ry);\n            }\n            // Step 2 + 3: compute center\n            var sign = fa === fs ? -1 : 1;\n            var M = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n            var _cx = (M * (rx * y)) / ry;\n            var _cy = (M * (-ry * x)) / rx;\n            var cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n            var cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n            // Step 4: Compute start and end angle\n            var center = new Vertex_1.Vertex(cx, cy);\n            var axis = center.clone().addXY(rx, ry);\n            var ellipse = new VEllipse_1.VEllipse(center, axis, 0);\n            ellipse.rotate(phi);\n            var startAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x1, y1)).angle();\n            var endAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x2, y2)).angle();\n            return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n        }\n    }; // END ellipseSectorUtils\n    return VEllipseSector;\n}());\nexports.VEllipseSector = VEllipseSector;\n//# sourceMappingURL=VEllipseSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  1.4.0\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vector = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    };\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version 1.2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertTuple = void 0;\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    };\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    VertTuple.prototype.hasPoint = function (point, insideBoundsOnly) {\n        var t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            var distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex_1.Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    };\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VertTuple.prototype.destroy = function () {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version  2.7.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vertex = void 0;\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    };\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.angle = function (origin) {\n        var a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    };\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    };\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    Vertex.prototype.lerp = function (target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    };\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    Vertex.prototype.lerpAbs = function (target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scaleXY = function (factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Vertex.prototype.destroy = function () {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    };\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     * @readonly\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        },\n        /**\n         * Convert the given vertices (array) to a JSON string.\n         *\n         * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n         * @returns {string}\n         */\n        arrayToJSON: function (vertices, precision) {\n            return JSON.stringify(vertices.map(function (vert) {\n                return typeof precision === undefined\n                    ? { x: vert.x, y: vert.y }\n                    : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n            }));\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexAttr = void 0;\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexListeners = void 0;\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addClickListener = function (listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeClickListener = function (listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireClickEvent = function (e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    };\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    VertexListeners.prototype.removeAllListeners = function () {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    };\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @version  1.12.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutils = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.beginDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutils.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutils.prototype.setConfiguration = function (configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.setCurrentId = function (uid) {\n        // NOOP\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    drawutils.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size, alpha) {\n        if (alpha === void 0) { alpha = 1.0; }\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {Vertex} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        // var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n        // var rotationalOffset = { x: 0, y: 0 };\n        var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex_1.Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex_1.Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    };\n    drawutils.prototype._texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation, rotationCenter) {\n        if (rotationCenter === void 0) { rotationCenter = { x: 0, y: 0 }; }\n        var basePolygonBounds = polygon.getBounds();\n        var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n        // var rotationalOffset = { x: 0, y: 0 };\n        var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex_1.Vertex(textureSize.width, textureSize.height);\n        var targetTextureOffset = new Vertex_1.Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        this.ctx.save();\n        // this.ctx.translate(\n        //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n        // );\n        this.ctx.translate(this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x, this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y);\n        this.ctx.rotate(rotation);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n            y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x, (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y, targetTextureSize.x * this.scale.x, targetTextureSize.y * this.scale.y);\n        // const scaledTextureSize = new Bounds(\n        //   new Vertex(\n        //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n        //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n        //   ).scaleXY(this.scale, rotationCenter),\n        //   new Vertex(\n        //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n        //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n        //   ).scaleXY(this.scale, rotationCenter)\n        // );\n        // this.ctx.drawImage(\n        //   textureImage,\n        //   0,\n        //   0,\n        //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        //   scaledTextureSize.min.x,\n        //   scaledTextureSize.min.y,\n        //   scaledTextureSize.width,\n        //   scaledTextureSize.height\n        // );\n        this.ctx.restore();\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {Vertex} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cross = function (center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = (lineWidth || 1.0) * this.scale.x;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.text = function (text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        var relX = this.offset.x + x * this.scale.x;\n        var relY = this.offset.y + y * this.scale.y;\n        var color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : \"\\\"\" + options.fontFamily + \"\\\"\"\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        var rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        var lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutils.prototype.path = function (pathData, color, lineWidth, options) {\n        var d = options && options.inplace ? pathData : drawutilssvg_1.drawutilssvg.copyPathData(pathData);\n        drawutilssvg_1.drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    drawutils.helpers = {\n        // A helper function to define the clipping path.\n        // This could be a candidate for the draw library.\n        clipPoly: function (ctx, offset, scale, vertices) {\n            ctx.beginPath();\n            // Set clip mask\n            ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n            for (var i = 1; i < vertices.length; i++) {\n                var vert = vertices[i];\n                ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n            }\n            ctx.closePath();\n            ctx.clip();\n        }\n    };\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @version  0.0.8\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilsgl = void 0;\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    drawutilsgl.prototype._x2rel = function (x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    };\n    drawutilsgl.prototype._y2rel = function (y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function (renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilsgl.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilsgl.prototype.setConfiguration = function (configuration) {\n        // TODO\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    drawutilsgl.prototype.setCurrentId = function (uid) {\n        // NOOP\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    drawutilsgl.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size, alpha) {\n        if (alpha === void 0) { alpha = 0.0; }\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {Vertex} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    drawutilsgl.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutilsgl.prototype.rect = function (position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cross = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.text = function (text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.label = function (text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilsgl.prototype.path = function (pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @version  1.6.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilssvg = void 0;\nvar CircleSector_1 = require(\"./CircleSector\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilssvg = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    function drawutilssvg(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex_1.Vertex(0, 0).set(offset);\n        this.scale = new Vertex_1.Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    drawutilssvg.prototype.addStyleDefs = function (drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        var keys = {\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        var rules = [];\n        for (var k in keys) {\n            var className = keys[k];\n            var drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(\".\" + className + \" { fill : none; stroke: \" + drawSettings.color + \"; stroke-width: \" + drawSettings.lineWidth + \"px }\");\n            }\n            else {\n                console.warn(\"Warning: your draw config is missing the key '\" + k + \"' which is required.\");\n            }\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    };\n    /**\n     * Adds the internal <defs> node.\n     */\n    drawutilssvg.prototype.addDefsNode = function () {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    };\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    drawutilssvg.prototype.addCustomStyleDefs = function (defs) {\n        var buffer = [];\n        defs.forEach(function (value, key) {\n            buffer.push(key + \" { \" + value + \" }\");\n        });\n        this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + buffer.join(\"\\n\");\n    };\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    drawutilssvg.prototype.findElement = function (key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    };\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    drawutilssvg.prototype.createSVGNode = function (nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    };\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    drawutilssvg.prototype.makeNode = function (nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        return node;\n    };\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    drawutilssvg.prototype._bindFillDraw = function (node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", className + \" \" + this.curClassName);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color);\n        node.setAttribute(\"stroke-width\", \"\" + (lineWidth || 1));\n        if (this.curId) {\n            node.setAttribute(\"id\", \"\" + this.curId); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    };\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    drawutilssvg.prototype.setSize = function (canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", \"0 0 \" + this.canvasSize.width + \" \" + this.canvasSize.height);\n        this.svgNode.setAttribute(\"width\", \"\" + this.canvasSize.width);\n        this.svgNode.setAttribute(\"height\", \"\" + this.canvasSize.height);\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilssvg.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs);\n        return copy;\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilssvg.prototype.setConfiguration = function (configuration) {\n        this.drawlibConfiguration = configuration;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentId = function (uid) {\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentClassName = function (className) {\n        this.curClassName = className;\n    };\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.beginDrawCycle = function (renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilssvg.prototype.endDrawCycle = function (renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        var tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        var tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    };\n    drawutilssvg.prototype._x = function (x) {\n        return this.offset.x + this.scale.x * x;\n    };\n    drawutilssvg.prototype._y = function (y) {\n        return this.offset.y + this.scale.y * y;\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.line = function (zA, zB, color, lineWidth) {\n        var line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", \"\" + this._x(zA.x));\n        line.setAttribute(\"y1\", \"\" + this._y(zA.y));\n        line.setAttribute(\"x2\", \"\" + this._x(zB.x));\n        line.setAttribute(\"y2\", \"\" + this._y(zB.y));\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.arrow = function (zA, zB, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        var d = [\"M\", this._x(zA.x), this._y(zA.y)];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.image = function (image, position, size, alpha) {\n        var _this = this;\n        if (alpha === void 0) { alpha = 1.0; }\n        var node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        var setImageSize = function (image) {\n            if (image.naturalWidth) {\n                var ratioX = size.x / image.naturalWidth;\n                var ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", \"\" + image.naturalWidth * _this.scale.x);\n                node.setAttribute(\"height\", \"\" + image.naturalHeight * _this.scale.y);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", \"\" + alpha);\n                // }\n                node.setAttribute(\"transform\", \"translate(\" + _this._x(position.x) + \" \" + _this._y(position.y) + \") scale(\" + ratioX + \" \" + ratioY + \")\");\n            }\n        };\n        image.addEventListener(\"load\", function (event) {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", \"\" + 0);\n        node.setAttribute(\"y\", \"\" + 0);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {Vertex} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        var rotatedScalingOrigin = new Vertex_1.Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        var rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        var clipPathNode = this.makeNode(\"clipPath\");\n        var clipPathId = \"clippath_\" + UIDGenerator_1.UIDGenerator.next(); // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        var gNode = this.makeNode(\"g\");\n        var imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", \"\" + this._x(rotatedScalingOrigin.x));\n        imageNode.setAttribute(\"y\", \"\" + this._y(rotatedScalingOrigin.y));\n        imageNode.setAttribute(\"width\", \"\" + textureSize.width);\n        imageNode.setAttribute(\"height\", \"\" + textureSize.height);\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", \"rotate(\" + rotation * RAD_TO_DEG + \", \" + this._x(rotatedScalingOrigin.x) + \", \" + this._y(rotatedScalingOrigin.y) + \")\");\n        var pathNode = this.makeNode(\"path\");\n        var pathData = [];\n        if (polygon.vertices.length > 0) {\n            var self_1 = this;\n            pathData.push(\"M\", \"\" + this._x(polygon.vertices[0].x), \"\" + this._y(polygon.vertices[0].y));\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", \"\" + this._x(polygon.vertices[i].x), \"\" + this._y(polygon.vertices[i].y));\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", this._x(rotatedScalingOrigin.x) + \" \" + this._y(rotatedScalingOrigin.y));\n        gNode.setAttribute(\"transform\", \"scale(\" + this.scale.x + \", \" + this.scale.y + \")\");\n        var clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", \"url(#\" + clipPathId + \")\");\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        var node = this.makeNode(\"path\");\n        // Draw curve\n        var d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubierBezier\", color, lineWidth);\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        var d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handle = function (startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handleLine = function (startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.dot = function (p, color) {\n        var node = this.makeNode(\"line\");\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.point = function (p, color) {\n        var radius = 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\" + this._x(p.x));\n        node.setAttribute(\"cy\", \"\" + this._y(p.y));\n        node.setAttribute(\"r\", \"\" + radius);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circle = function (center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\" + this._x(center.x));\n        node.setAttribute(\"cy\", \"\" + this._y(center.y));\n        node.setAttribute(\"r\", \"\" + radius * this.scale.x); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var arcData = CircleSector_1.CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        var node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", \"\" + this._x(center.x));\n        node.setAttribute(\"cy\", \"\" + this._y(center.y));\n        node.setAttribute(\"rx\", \"\" + radiusX * this.scale.x);\n        node.setAttribute(\"ry\", \"\" + radiusY * this.scale.y);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", \"rotate(\" + (rotation * 180) / Math.PI + \" \" + this._x(center.x) + \" \" + this._y(center.y) + \")\");\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.square = function (center, size, color, lineWidth) {\n        var node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", \"\" + this._x(center.x - size / 2.0));\n        node.setAttribute(\"y\", \"\" + this._y(center.y - size / 2.0));\n        node.setAttribute(\"width\", \"\" + size * this.scale.x);\n        node.setAttribute(\"height\", \"\" + size * this.scale.y);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutilssvg.prototype.rect = function (position, width, height, color, lineWidth) {\n        var node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", \"\" + this._x(position.x));\n        node.setAttribute(\"y\", \"\" + this._y(position.y));\n        node.setAttribute(\"width\", \"\" + width * this.scale.x);\n        node.setAttribute(\"height\", \"\" + height * this.scale.y);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode(\"path\");\n        var d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode(\"path\");\n        var d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.diamondHandle = function (center, size, color) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.squareHandle = function (center, size, color) {\n        var node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", \"\" + (this._x(center.x) - size / 2.0));\n        node.setAttribute(\"y\", \"\" + (this._y(center.y) - size / 2.0));\n        node.setAttribute(\"width\", \"\" + size);\n        node.setAttribute(\"height\", \"\" + size);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\" + this._x(center.x));\n        node.setAttribute(\"cy\", \"\" + this._y(center.y));\n        node.setAttribute(\"r\", \"\" + radius);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.crosshair = function (center, radius, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilssvg.prototype.cross = function (center, radius, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polygon = function (polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        var d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilssvg.prototype.text = function (text, x, y, options) {\n        var _a, _b;\n        options = options || {};\n        var color = options.color || \"black\";\n        var lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        var textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        var transformOrigin = this._x(x) + \"px \" + this._y(y) + \"px\";\n        var translate = \"translate(\" + this._x(x) + \" \" + (this._y(y) + lineHeight / 2) + \")\";\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        var rotate = options.rotation ? \"rotate(\" + options.rotation * RAD_TO_DEG + \" 0 0)\" : \"\";\n        var node = this.makeNode(\"g\");\n        var curId = this.curId;\n        this.curId = curId + \"_text\";\n        var textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", options.fontFamily); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? \"\" + options.fontSize * this.scale.x : null);\n        textNode.setAttribute(\"font-style\", options.fontStyle ? \"\" + options.fontStyle : null);\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? \"\" + options.fontWeight : null);\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.label = function (text, x, y, rotation, color) {\n        var node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \"), rotate(\" + ((rotation || 0) / Math.PI) * 180 + \")\");\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilssvg.prototype.path = function (pathData, color, lineWidth, options) {\n        var node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        var d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.clear = function (color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = undefined;\n        var node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", \"\" + this.canvasSize.width);\n        node.setAttribute(\"height\", \"\" + this.canvasSize.height);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = undefined;\n    };\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    drawutilssvg.prototype.removeAllChildNodes = function () {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    };\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    drawutilssvg.createSvg = function () {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    };\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.copyPathData = function (data) {\n        var copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    };\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    drawutilssvg.transformPathData = function (data, offset, scale) {\n        // Scale and translate {x,y}\n        var _stx = function (index) {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        var _sty = function (index) {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        var _sx = function (index) {\n            data[index] = scale.x * Number(data[index]);\n        };\n        var _sy = function (index) {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var stx = function (value) {\n            return offset.x + scale.x * value;\n        };\n        var sty = function (value) {\n            return offset.y + scale.y * value;\n        };\n        // scale only {x,y}\n        var sx = function (value) {\n            return scale.x * value;\n        };\n        var sy = function (value) {\n            return scale.y * value;\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = function (index) {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            var cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    }; // END transformPathData\n    drawutilssvg.HEAD_XML = [\n        '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n        '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n        \"\"\n    ].join(\"\\n\");\n    return drawutilssvg;\n}());\nexports.drawutilssvg = drawutilssvg;\n//# sourceMappingURL=drawutilssvg.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geomutils = void 0;\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax: function (x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax: function (x, min, max) {\n        return min + exports.geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n/* Imports for webpack */\n\nglobalThis.UIDGenerator = require(\"./UIDGenerator.js\").UIDGenerator;\nglobalThis.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nglobalThis.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nglobalThis.Vertex = require(\"./Vertex.js\").Vertex;\n\nglobalThis.Bounds = require(\"./Bounds.js\").Bounds;\nglobalThis.Grid = require(\"./Grid.js\").Grid;\nglobalThis.Line = require(\"./Line.js\").Line;\nglobalThis.Vector = require(\"./Vector.js\").Vector;\nglobalThis.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nglobalThis.BezierPath = require(\"./BezierPath.js\").BezierPath;\nglobalThis.Polygon = require(\"./Polygon.js\").Polygon;\nglobalThis.Triangle = require(\"./Triangle.js\").Triangle;\nglobalThis.VEllipse = require(\"./VEllipse.js\").VEllipse;\nglobalThis.Circle = require(\"./Circle.js\").Circle;\nglobalThis.CircleSector = require(\"./CircleSector.js\").CircleSector;\nglobalThis.PBImage = require(\"./PBImage.js\").PBImage;\nglobalThis.PBText = require(\"./PBText.js\").PBText;\nglobalThis.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nglobalThis.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nglobalThis.drawutils = require(\"./draw.js\").drawutils;\n// globalThis.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;  // Unfinished\nglobalThis.drawutilssvg = require(\"./drawutilssvg.js\").drawutilssvg;\nglobalThis.geomutils = require(\"./geomutils.js\").geomutils;\nglobalThis.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n"],"sourceRoot":""}