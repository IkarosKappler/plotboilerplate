{"version":3,"file":"plotboilerplate.browser.min.js","mappings":"wFAeA,MAAMA,EAAUC,GACLC,KAAKC,KAAKF,EAAEG,EAAIH,EAAEG,EAAIH,EAAEI,EAAIJ,EAAEI,GAuDzC,MAAMC,EACF,WAAAC,CAAYC,GACRC,KAAKC,SAAW,GAChBD,KAAKD,GAAKA,CACd,CAEA,GAAAG,CAAIC,GACAH,KAAKC,SAASG,KAAKD,EACvB,CAEA,GAAAE,CAAIF,GACKA,IACDH,KAAKC,SAAW,IACpB,IAAK,IAAIK,EAAIN,KAAKC,SAASM,OAAQD,GAAK,EAAGA,IACnCN,KAAKC,SAASK,KAAOH,GACrBH,KAAKC,SAASO,OAAOF,EAAG,EAGpC,CAEA,QAAAG,IAAYC,GACR,IAAK,IAAIJ,EAAI,EAAGK,EAAMX,KAAKC,SAASM,OAAQD,EAAIK,EAAKL,IAAK,CACtD,MAAMH,EAAUH,KAAKC,SAASK,GACP,mBAAZH,GACPA,EAAQS,MAAMZ,KAAKD,GAAIc,UAE/B,CACJ,EAMJ,MAAMC,EAAW,CAACf,EAAII,KAClB,MAAMY,EAAe,IAAIlB,EAAaE,GAEtC,OADAgB,EAAab,IAAIC,GACVY,CAAY,EAMhB,MAAMC,EACT,WAAAlB,CAAYC,EAAIkB,GACZjB,KAAKkB,QAAuB,iBAANnB,EAAiBoB,SAASC,cAAcrB,GAAMA,EAGpEC,KAAKqB,MAAQrB,KAAKqB,MAAMC,KAAKtB,MAC7BA,KAAKuB,KAAOvB,KAAKuB,KAAKD,KAAKtB,MAC3BA,KAAKwB,IAAMxB,KAAKwB,IAAIF,KAAKtB,MACzBA,KAAKyB,OAASzB,KAAKyB,OAAOH,KAAKtB,MAC/BA,KAAKkB,QAAQQ,iBAAiB,aAAc1B,KAAKqB,OAAO,GACxDrB,KAAKkB,QAAQQ,iBAAiB,YAAa1B,KAAKuB,MAAM,GACtDvB,KAAKkB,QAAQQ,iBAAiB,WAAY1B,KAAKwB,KAAK,GACpDxB,KAAKkB,QAAQQ,iBAAiB,cAAe1B,KAAKyB,QAAQ,GAC1DzB,KAAK2B,KAAO,CAAEhC,EAAG,KAAMC,EAAG,MAC1BI,KAAK4B,cAAgB,KACrB5B,KAAK6B,KAAO,EACZ7B,KAAK8B,aAAc,EACnB,MAAMC,EAAO,OACb/B,KAAKgC,OAASlB,EAASd,KAAKkB,QAASD,EAAOe,QAAUD,GACtD/B,KAAKiC,WAAanB,EAASd,KAAKkB,QAASD,EAAOgB,YAAcF,GAC9D/B,KAAKkC,gBAAkBpB,EAASd,KAAKkB,QAASD,EAAOiB,iBAAmBH,GACxE/B,KAAKmC,cAAgBrB,EAASd,KAAKkB,QAASD,EAAOkB,eAAiBJ,GACpE/B,KAAKoC,MAAQtB,EAASd,KAAKkB,QAASD,EAAOmB,OAASL,GACpD/B,KAAKqC,MAAQvB,EAASd,KAAKkB,QAASD,EAAOoB,OAASN,GACpD/B,KAAKsC,IAAMxB,EAASd,KAAKkB,QAASD,EAAOqB,KAAOP,GAChD/B,KAAKuC,UAAYzB,EAASd,KAAKkB,QAASD,EAAOsB,WAAaR,GAC5D/B,KAAKwC,QAAU1B,EAASd,KAAKkB,QAASD,EAAOuB,SAAWT,GACxD/B,KAAKyC,UAAY3B,EAASd,KAAKkB,QAASD,EAAOwB,WAAaV,GAC5D/B,KAAK0C,UAAY5B,EAASd,KAAKkB,QAASD,EAAOyB,WAAaX,GAC5D/B,KAAK2C,mBAAqB7B,EAASd,KAAKkB,QAASD,EAAO0B,oBAAsBZ,GAC9E/B,KAAK4C,UAAY9B,EAASd,KAAKkB,QAASD,EAAO2B,WAAab,GAC5D/B,KAAK6C,SAAW/B,EAASd,KAAKkB,QAASD,EAAO4B,UAAYd,GAC1D/B,KAAK8C,YAAchC,EAASd,KAAKkB,QAASD,EAAO6B,aAAef,GAChE/B,KAAK+C,kBAAoB/C,KAAKgD,UAAU1B,KAAKtB,MACzCiD,YAAqD,mBAAhCA,WAAWvB,kBAChCuB,WAAWvB,iBAAiB,SAAU1B,KAAK+C,mBAE/C/C,KAAKkD,MAAQ,KACblD,KAAKmD,KAAO,KACZnD,KAAKoD,IAAM,KACXpD,KAAKqD,WAAa,KAClBrD,KAAKsD,iBAAmB,KACxBtD,KAAKuD,eAAiB,KACtBvD,KAAKwD,aAAe,KACpBxD,KAAKyD,GAAKzD,KAAK0D,GAAK1D,KAAK2D,GAAK3D,KAAK4D,GAAK,KACxC5D,KAAK6D,eAAiB,CAAElE,EAAG,KAAMC,EAAG,KACxC,CAEA,KAAAyB,CAAMyC,GACF,IAAKA,EAAIC,QACL,OACJ,MAAMC,EAAQhE,KACdA,KAAKoD,IAAMa,KAAKb,MAChBpD,KAAKyD,GAAKK,EAAIC,QAAQ,GAAGG,MACzBlE,KAAK2D,GAAKG,EAAIC,QAAQ,GAAGI,MACzBnE,KAAKkD,MAAQlD,KAAKoD,KAAOpD,KAAKmD,MAAQnD,KAAKoD,KAC3CpD,KAAKiC,WAAWxB,SAASqD,EAAK9D,KAAKkB,SACL,OAA1BlB,KAAK6D,eAAelE,IACpBK,KAAK8B,YAAe9B,KAAKkD,MAAQ,GAAKlD,KAAKkD,OAAS,KAAOzD,KAAK2E,IAAIpE,KAAK6D,eAAelE,EAAIK,KAAKyD,IAAM,IAAMhE,KAAK2E,IAAIpE,KAAK6D,eAAejE,EAAII,KAAK2D,IAAM,GACrJ3D,KAAK8B,aACLuC,aAAarE,KAAKsD,mBAE1BtD,KAAK6D,eAAelE,EAAIK,KAAKyD,GAC7BzD,KAAK6D,eAAejE,EAAII,KAAK2D,GAC7B3D,KAAKmD,KAAOnD,KAAKoD,IACjB,MAAMzB,EAAO3B,KAAK2B,KAElB,GADYmC,EAAIC,QAAQxD,OACd,EAAG,CACTP,KAAKsE,iBACLtE,KAAKuE,mBACL,MAAM/E,EAAI,CAAEG,EAAGmE,EAAIC,QAAQ,GAAGG,MAAQlE,KAAKyD,GAAI7D,EAAGkE,EAAIC,QAAQ,GAAGI,MAAQnE,KAAK2D,IAC9EhC,EAAKhC,EAAIH,EAAEG,EACXgC,EAAK/B,EAAIJ,EAAEI,EACXI,KAAK4B,cAAgBrC,EAAOoC,GAC5B3B,KAAKkC,gBAAgBzB,SAASqD,EAAK9D,KAAKkB,QAC5C,CACAlB,KAAKwE,aAAc,EACnBxE,KAAKuD,eAAiBkB,YAAW,KAC7BT,EAAMxB,QAAQ/B,SAASqD,EAAKE,EAAM9C,SAClC8C,EAAMQ,aAAc,CACvB,GAAElD,KAAK0C,GAAQ,IACpB,CAEA,IAAAzC,CAAKmD,GACD,IAAKA,EAAMX,QACP,OACJ,MAAMY,EAAUD,EACV/C,EAAO3B,KAAK2B,KACZhB,EAAM+D,EAAMX,QAAQxD,OACpBqE,EAAWF,EAAMX,QAAQ,GAAGG,MAC5BW,EAAWH,EAAMX,QAAQ,GAAGI,MAElC,GADAnE,KAAK8B,aAAc,EACfnB,EAAM,EAAG,CACT,MAAMmE,EAAYH,EAAQZ,QAAQ,GAAGG,MAC/Ba,EAAYJ,EAAQZ,QAAQ,GAAGI,MAC/B3E,EAAI,CAAEG,EAAGgF,EAAQZ,QAAQ,GAAGG,MAAQU,EAAUhF,EAAG+E,EAAQZ,QAAQ,GAAGI,MAAQU,GACnE,OAAXlD,EAAKhC,IACDK,KAAK4B,cAAgB,IACrB+C,EAAQ9C,KAAOtC,EAAOC,GAAKQ,KAAK4B,cAChC5B,KAAKoC,MAAM3B,SAASkE,EAAS3E,KAAKkB,UAEtCyD,EAAQK,OAxJhBA,EA3BS,EAACC,EAAIC,KAClB,MAAMC,EAAK5F,EAAO0F,GAAM1F,EAAO2F,GAC/B,GAAW,IAAPC,EACA,OAAO,EACX,IAAIC,EAdI,EAACH,EAAIC,IACND,EAAGtF,EAAIuF,EAAGvF,EAAIsF,EAAGrF,EAAIsF,EAAGtF,EAavByF,CAAIJ,EAAIC,GAAMC,EAGtB,OAFIC,EAAI,IACJA,EAAI,GACD3F,KAAK6F,KAAKF,EAAE,EAoBPG,CADQN,EAyJuBzF,EAzJnB0F,EAyJsBvD,GAnKpC,EAACsD,EAAIC,IACRD,EAAGtF,EAAIuF,EAAGtF,EAAIsF,EAAGvF,EAAIsF,EAAGrF,EAW3B4F,CAAMP,EAAIC,GAAM,IAChBF,IAAU,GAEC,IAARA,EAAcvF,KAAKgG,IAqJdzF,KAAKgC,OAAOvB,SAASkE,EAAS3E,KAAKkB,UAEvCS,EAAKhC,EAAIH,EAAEG,EACXgC,EAAK/B,EAAIJ,EAAEI,EACK,OAAZI,KAAK0D,IAA4B,OAAb1D,KAAK0F,KACzBf,EAAQgB,QAAUf,EAAW5E,KAAK0D,GAAKoB,EAAY9E,KAAK0F,KAAO,EAC/Df,EAAQiB,QAAUf,EAAW7E,KAAK4D,GAAKmB,EAAY/E,KAAK6F,KAAO,IAG/DlB,EAAQgB,OAAS,EACjBhB,EAAQiB,OAAS,GAErB5F,KAAK2C,mBAAmBlC,SAASkE,EAAS3E,KAAKkB,SAC/ClB,KAAK0F,IAAMZ,EACX9E,KAAK6F,IAAMd,CACf,KACK,CACD,GAAgB,OAAZ/E,KAAK0D,GAAa,CAClBiB,EAAQgB,OAASf,EAAW5E,KAAK0D,GACjCiB,EAAQiB,OAASf,EAAW7E,KAAK4D,GAQjC,MAAMkC,EAASrG,KAAK2E,IAAIpE,KAAKyD,GAAKzD,KAAK0D,IACjCqC,EAAStG,KAAK2E,IAAIpE,KAAK2D,GAAK3D,KAAK4D,KACnCkC,EAAS,IAAMC,EAAS,MACxB/F,KAAKwE,aAAc,EAE3B,MAEIG,EAAQgB,OAAS,EACjBhB,EAAQiB,OAAS,EAErB5F,KAAK0C,UAAUjC,SAASkE,EAAS3E,KAAKkB,QAC1C,CAhMe,IAAC+D,EAAIC,EACpBF,EAgMAhF,KAAK4C,UAAUnC,SAASkE,EAAS3E,KAAKkB,SACtClB,KAAKsE,iBACLtE,KAAK0D,GAAKkB,EACV5E,KAAK4D,GAAKiB,EACNlE,EAAM,GACN+D,EAAMsB,gBAEd,CAEA,GAAAxE,CAAIkD,GACA,IAAKA,EAAMuB,eACP,OACJ,MAAMtB,EAAUD,EAChB1E,KAAKsE,iBACL,MAAM4B,EAAOlG,KACT2E,EAAQZ,QAAQxD,OAAS,IACzBP,KAAKmC,cAAc1B,SAASkE,EAAS3E,KAAKkB,SAC1ClB,KAAK0F,IAAM1F,KAAK6F,IAAM,MAGrB7F,KAAK0D,IAAMjE,KAAK2E,IAAIpE,KAAKyD,GAAKzD,KAAK0D,IAAM,IACzC1D,KAAK4D,IAAMnE,KAAK2E,IAAIpE,KAAK2D,GAAK3D,KAAK4D,IAAM,IAC1Ce,EAAQwB,UAAYnG,KAAKoG,gBAAgBpG,KAAKyD,GAAIzD,KAAK0D,GAAI1D,KAAK2D,GAAI3D,KAAK4D,IACzE5D,KAAKwD,aAAeiB,YAAW,WAC3ByB,EAAK7D,MAAM5B,SAASkE,EAASuB,EAAKhF,QACtC,GAAG,KAGHlB,KAAKqD,WAAaoB,YAAW,WACpByB,EAAK1B,aACN0B,EAAK5D,IAAI7B,SAASkE,EAASuB,EAAKhF,SAGhCgF,EAAKpE,cACLoE,EAAK3D,UAAU9B,SAASkE,EAASuB,EAAKhF,SACtCgF,EAAKpE,aAAc,EAE3B,GAAG,GACEoE,EAAKpE,cACNoE,EAAK5C,iBAAmBmB,YAAW,WAC/ByB,EAAKzD,UAAUhC,SAASkE,EAASuB,EAAKhF,QAC1C,GAAG,OAGXlB,KAAK6C,SAASpC,SAASkE,EAAS3E,KAAKkB,SACrClB,KAAK2B,KAAKhC,EAAI,EACdK,KAAK2B,KAAK/B,EAAI,EACdI,KAAK6B,KAAO,EACZ7B,KAAK4B,cAAgB,KACrB5B,KAAKyD,GAAKzD,KAAK0D,GAAK1D,KAAK2D,GAAK3D,KAAK4D,GAAK,IAC5C,CAEA,SAAAZ,GACIhD,KAAKwE,aAAc,EACnBH,aAAarE,KAAKsD,kBAClBe,aAAarE,KAAKqD,YAClBgB,aAAarE,KAAKuD,gBAClBc,aAAarE,KAAKwD,aACtB,CAEA,MAAA/B,CAAOqC,GACH9D,KAAKgD,YACLhD,KAAK8C,YAAYrC,SAASqD,EAAK9D,KAAKkB,QACxC,CAEA,cAAAoD,GACID,aAAarE,KAAKuD,eACtB,CAEA,gBAAAgB,GACIF,aAAarE,KAAKsD,iBACtB,CAEA,eAAA8C,CAAgB3C,EAAIC,EAAIC,EAAIC,GACxB,OAAOnE,KAAK2E,IAAIX,EAAKC,IAAOjE,KAAK2E,IAAIT,EAAKC,GAAOH,EAAKC,EAAK,EAAI,OAAS,QAAYC,EAAKC,EAAK,EAAI,KAAO,MAC7G,CAEA,EAAAyC,CAAGvC,EAAK3D,GACAH,KAAK8D,IAES9D,KAAK8D,GACb5D,IAAIC,EAElB,CAEA,GAAAmG,CAAIxC,EAAK3D,GACDH,KAAK8D,IAES9D,KAAK8D,GACbzD,IAAIF,EAElB,CAEA,OAAAoG,GACQvG,KAAKsD,kBACLe,aAAarE,KAAKsD,kBAElBtD,KAAKqD,YACLgB,aAAarE,KAAKqD,YAElBrD,KAAKuD,gBACLc,aAAarE,KAAKuD,gBAElBvD,KAAKwD,cACLa,aAAarE,KAAKwD,cAEtBxD,KAAKkB,QAAQsF,oBAAoB,aAAcxG,KAAKqB,OACpDrB,KAAKkB,QAAQsF,oBAAoB,YAAaxG,KAAKuB,MACnDvB,KAAKkB,QAAQsF,oBAAoB,WAAYxG,KAAKwB,KAClDxB,KAAKkB,QAAQsF,oBAAoB,cAAexG,KAAKyB,QACrDzB,KAAKgC,OAAO3B,MACZL,KAAKiC,WAAW5B,MAChBL,KAAKkC,gBAAgB7B,MACrBL,KAAKmC,cAAc9B,MACnBL,KAAKoC,MAAM/B,MACXL,KAAKqC,MAAMhC,MACXL,KAAKsC,IAAIjC,MACTL,KAAKuC,UAAUlC,MACfL,KAAKwC,QAAQnC,MACbL,KAAKyC,UAAUpC,MACfL,KAAK0C,UAAUrC,MACfL,KAAK2C,mBAAmBtC,MACxBL,KAAK4C,UAAUvC,MACfL,KAAK6C,SAASxC,MACdL,KAAK8C,YAAYzC,MACjBL,KAAK2B,KAAO3B,KAAK4B,cAAgB5B,KAAK6B,KAAO7B,KAAK8B,YAAc9B,KAAKkD,MAAQlD,KAAKmD,KAAOnD,KAAKoD,IAAMpD,KAAKqD,WAAarD,KAAKsD,iBAAmBtD,KAAKuD,eAAiBvD,KAAKwD,aAAexD,KAAKyD,GAAKzD,KAAK0D,GAAK1D,KAAK2D,GAAK3D,KAAK4D,GAAK5D,KAAK6D,eAAiB7D,KAAKgC,OAAShC,KAAKiC,WAAajC,KAAKkC,gBAAkBlC,KAAKmC,cAAgBnC,KAAKoC,MAAQpC,KAAKqC,MAAQrC,KAAKsC,IAAMtC,KAAKuC,UAAYvC,KAAKwC,QAAUxC,KAAKyC,UAAYzC,KAAK0C,UAAY1C,KAAK4C,UAAY5C,KAAK6C,SAAW7C,KAAK8C,YAAc9C,KAAK2C,mBAAqB,KACnfM,YAAwD,mBAAnCA,WAAWuD,qBAChCvD,WAAWuD,oBAAoB,SAAUxG,KAAK+C,kBAEtD,EAIJ,MC1XA,G,gBC2BA0D,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,gBAAa,EACrB,IAAIC,EAAW,EAAQ,IACnBC,EAAqB,EAAQ,KAC7BC,EAAiB,EAAQ,KACzBC,EAAW,EAAQ,KAcnBJ,EAA4B,WAa5B,SAASA,IAIL7G,KAAKkH,UAAY,aAEjBlH,KAAKmH,YAAc,EAEnBnH,KAAKoH,oBAAsB,EAE3BpH,KAAKqH,kBAAoB,EAEzBrH,KAAKsH,UAAY,EAEjBtH,KAAKuH,IAAMP,EAAeQ,aAAaC,OAIvCzH,KAAK0H,eAAiB,EAGtB1H,KAAK2H,gBAAiB,EACtB3H,KAAK4H,aAAe,EACxB,CAwgCA,OA9/BAf,EAAWgB,UAAUC,SAAW,SAAUC,GACtC,GAAa,MAATA,QAAiC,IAATA,EACxB,KAAM,wCACV/H,KAAK4H,aAAaxH,KAAK2H,GACnB/H,KAAK4H,aAAarH,OAAS,GAC3BwH,EAAMC,WAAahI,KAAK4H,aAAa5H,KAAK4H,aAAarH,OAAS,GAAG0H,SACnEjI,KAAKkI,4BAA4BlI,KAAK4H,aAAarH,OAAS,GAC5D,GACA,IAIAP,KAAK0H,gBAAkBK,EAAMI,WAErC,EAUAtB,EAAWgB,UAAUO,wBAA0B,SAAUC,GAErD,IAAK,IAAI/H,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C,GAAIN,KAAK4H,aAAatH,GAAG0H,WAAWM,OAAOD,GACvC,OAAO/H,EAEf,OAAQ,CACZ,EAUAuG,EAAWgB,UAAUU,sBAAwB,SAAUF,GAEnD,IAAK,IAAI/H,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C,GAAIN,KAAK4H,aAAatH,GAAG2H,SAASK,OAAOD,GACrC,OAAO/H,EAEf,OAAQ,CACZ,EAUAuG,EAAWgB,UAAUW,+BAAiC,SAAUH,GAE5D,IAAK,IAAI/H,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C,GAAIN,KAAK4H,aAAatH,GAAGmI,kBAAkBH,OAAOD,GAC9C,OAAO/H,EAEf,OAAQ,CACZ,EAOAuG,EAAWgB,UAAUa,6BAA+B,SAAUL,GAE1D,IAAK,IAAI/H,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C,GAAIN,KAAK4H,aAAatH,GAAGqI,gBAAgBL,OAAOD,GAC5C,OAAO/H,EAEf,OAAQ,CACZ,EAYAuG,EAAWgB,UAAUM,UAAY,WAC7B,OAAOnI,KAAK0H,cAChB,EAcAb,EAAWgB,UAAUe,iBAAmB,WACpC5I,KAAK0H,eAAiB,EACtB,IAAK,IAAIpH,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1CN,KAAK4H,aAAatH,GAAGsI,mBACrB5I,KAAK0H,gBAAkB1H,KAAK4H,aAAatH,GAAG6H,WAEpD,EASAtB,EAAWgB,UAAUgB,cAAgB,WACjC,OAAO7I,KAAK4H,aAAarH,MAC7B,EAUAsG,EAAWgB,UAAUiB,WAAa,SAAUC,GACxC,OAAO/I,KAAK4H,aAAamB,EAC7B,EAWAlC,EAAWgB,UAAUmB,UAAY,SAAUC,GACvC,IAAK,IAAI3I,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,KACtCyH,EAAQ/H,KAAK4H,aAAatH,IACxB4I,gBAAgBhJ,IAAI+I,GAC1BlB,EAAMoB,uBAAuBjJ,IAAI+I,GACjClB,EAAMqB,qBAAqBlJ,IAAI+I,GAGnC,IAAIlB,EAGJ,OAHIA,EAAQ/H,KAAK4H,aAAa5H,KAAK4H,aAAarH,OAAS,IACnD8I,cAAcnJ,IAAI+I,GACxBjJ,KAAK4I,mBACE5I,IACX,EAWA6G,EAAWgB,UAAUtG,KAAO,SAAU0H,GAClC,OAAOjJ,KAAKgJ,UAAUC,EAC1B,EAWApC,EAAWgB,UAAUyB,MAAQ,SAAUC,EAAQC,GAC3C,OAAOxJ,KAAKyJ,QAAQ,CAAE9J,EAAG6J,EAAa5J,EAAG4J,GAAeD,EAC5D,EAWA1C,EAAWgB,UAAU4B,QAAU,SAAUC,EAAcH,GACnD,IAAK,IAAIjJ,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAAK,CAC/C,IAAIyH,EAAQ/H,KAAK4H,aAAatH,GAC9ByH,EAAMmB,gBAAgBO,QAAQC,EAAcH,GAC5CxB,EAAMoB,uBAAuBM,QAAQC,EAAcH,GACnDxB,EAAMqB,qBAAqBK,QAAQC,EAAcH,EAIrD,CAMA,OAJIvJ,KAAK4H,aAAarH,OAAS,IAAMP,KAAK2H,gBACtC3H,KAAK4H,aAAa5H,KAAK4H,aAAarH,OAAS,GAAG8I,cAAcI,QAAQC,EAAcH,GAExFvJ,KAAK4I,mBACE5I,IACX,EAWA6G,EAAWgB,UAAU7F,OAAS,SAAUgD,EAAO2E,GAC3C,IAAK,IAAIrJ,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAAK,CAC/C,IAAIyH,EAAQ/H,KAAK4H,aAAatH,GAC9ByH,EAAMmB,gBAAgBlH,OAAOgD,EAAO2E,GACpC5B,EAAMoB,uBAAuBnH,OAAOgD,EAAO2E,GAC3C5B,EAAMqB,qBAAqBpH,OAAOgD,EAAO2E,EAI7C,CAEI3J,KAAK4H,aAAarH,OAAS,IAAMP,KAAK2H,gBACtC3H,KAAK4H,aAAa5H,KAAK4H,aAAarH,OAAS,GAAG8I,cAAcrH,OAAOgD,EAAO2E,EAEpF,EAOA9C,EAAWgB,UAAU+B,YAAc,SAAUC,GAQzC,IANA,IAAIC,GAAY,EACZC,EAAU,EACVC,EAAO,EACPC,EAAS,EACTC,EAAO,EACPC,EAAI,EACC7J,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C2J,EAASjK,KAAK4H,aAAatH,GAAGsJ,YAAYC,GAC1CG,EAAOhK,KAAK4H,aAAatH,GAAG8J,WAAWH,GAAQI,SAASR,KACvC,GAAbC,GAAkBE,EAAOD,KACzBD,EAAWxJ,EACXyJ,EAAUC,EACVE,EAAOC,EAAIF,EAASjK,KAAK4H,aAAatH,GAAG6H,aAE7CgC,GAAKnK,KAAK4H,aAAatH,GAAG6H,YAE9B,OAAO1I,KAAK6K,IAAI,EAAK7K,KAAK8K,IAAI,EAAKL,EAAOlK,KAAK0H,gBACnD,EAUAb,EAAWgB,UAAU2C,SAAW,SAAUL,IAClCA,EAAI,GAAKA,EAAInK,KAAK0H,kBAClB+C,QAAQC,KAAK,gDAAkDP,EAAI,KACnEA,EAAI1K,KAAK8K,IAAIvK,KAAK0H,eAAgBjI,KAAK6K,IAAIH,EAAG,KAKlD,IAFA,IAAI7J,EAAI,EACJqK,EAAQ,EACLrK,EAAIN,KAAK4H,aAAarH,QAAUoK,EAAQ3K,KAAK4H,aAAatH,GAAG6H,YAAcgC,GAC9EQ,GAAS3K,KAAK4H,aAAatH,GAAG6H,YAC9B7H,IAIJ,GAAIA,GAAKN,KAAK4H,aAAarH,OACvB,OAAOP,KAAK4H,aAAa5H,KAAK4H,aAAarH,OAAS,GAAG8I,cAAcuB,QACzE,IACIC,EAAYV,EAAIQ,EACpB,OAFa3K,KAAK4H,aAAatH,GAEjBkK,SAASK,EAC3B,EAUAhE,EAAWgB,UAAUuC,WAAa,SAAUU,GACxC,OAAO9K,KAAKwK,SAASM,EAAI9K,KAAK0H,eAClC,EAYAb,EAAWgB,UAAUkD,aAAe,SAAUD,GAC1C,OAAO9K,KAAKgL,WAAWF,EAAI9K,KAAK0H,eACpC,EAYAb,EAAWgB,UAAUmD,WAAa,SAAUb,IACpCA,EAAI,GAAKA,EAAInK,KAAK0H,kBAClB+C,QAAQC,KAAK,kDAAoDP,EAAI,KAErEA,EAAI1K,KAAK8K,IAAIvK,KAAK0H,eAAgBjI,KAAK6K,IAAI,EAAGH,KAKlD,IAFA,IAAI7J,EAAI,EACJqK,EAAQ,EACLrK,EAAIN,KAAK4H,aAAarH,QAAUoK,EAAQ3K,KAAK4H,aAAatH,GAAG6H,YAAcgC,GAC9EQ,GAAS3K,KAAK4H,aAAatH,GAAG6H,YAC9B7H,IAEJ,IACIuK,EAAYV,EAAIQ,EACpB,OAFa3K,KAAK4H,aAAatH,GAEjB0K,WAAWH,EAC7B,EAYAhE,EAAWgB,UAAUoD,mBAAqB,SAAUH,GAChD,OAAO9K,KAAKkL,iBAAiBJ,EAAI9K,KAAK0H,eAC1C,EAYAb,EAAWgB,UAAUqD,iBAAmB,SAAUf,IAC1CA,EAAI,GAAKA,EAAInK,KAAK0H,kBAClB+C,QAAQU,IAAI,wDAA0DhB,EAAI,KAC1EA,EAAI1K,KAAK8K,IAAIvK,KAAK0H,eAAgBjI,KAAK6K,IAAI,EAAGH,KAGlD,IAAIiB,EAAUvE,EAAWwE,cAAcrL,KAAMmK,GACzCmB,EAAStL,KAAK4H,aAAawD,EAAQ9K,GACnCuK,EAAYV,EAAIiB,EAAQG,MAC5B,OAAOD,EAAOJ,iBAAiBL,EACnC,EAWAhE,EAAWgB,UAAU2D,kBAAoB,SAAUC,EAAMC,GAErD,YAD2B,IAAvBA,IAAiCA,GAAqB,GACnD1L,KAAK4H,aAAa+D,QAAO,SAAUC,EAAMC,GAC5C,OAAOD,EAAKE,OAAOD,EAASL,kBAAkBC,EAAMC,GACxD,GAAG,GACP,EAUA7E,EAAWgB,UAAUkE,yBAA2B,SAAUN,EAAMC,GAE5D,YAD2B,IAAvBA,IAAiCA,GAAqB,GACnD1L,KAAK4H,aAAa+D,QAAO,SAAUC,EAAMC,GAC5C,OAAOD,EAAKE,OAAOD,EAASE,yBAAyBN,EAAMC,GAC/D,GAAG,GACP,EAcA7E,EAAWwE,cAAgB,SAAUW,EAAM7B,GAIvC,IAHA,IAAI7J,EAAI,EACJqK,EAAQ,EACRsB,EAAU,EACP3L,EAAI0L,EAAKpE,aAAarH,QAAUoK,EAAQqB,EAAKpE,aAAatH,GAAG6H,YAAcgC,GAC9EQ,GAASqB,EAAKpE,aAAatH,GAAG6H,YAC1B7H,EAAI,EAAI0L,EAAKpE,aAAarH,SAC1B0L,GAAWD,EAAKpE,aAAatH,GAAG6H,aACpC7H,IAEJ,MAAO,CAAEA,EAAMiL,MAAOZ,EAAOsB,QAASA,EAC1C,EAmBApF,EAAWgB,UAAUqE,aAAe,SAAUC,EAAQC,GAClDD,EAAS1M,KAAK6K,IAAI,EAAG6B,GACrBC,EAAO3M,KAAK8K,IAAI,EAAK6B,GACrB,IAAIC,EAASF,EAASnM,KAAK0H,eACvB4E,EAAOF,EAAOpM,KAAK0H,eACnB6E,EAAe1F,EAAWwE,cAAcrL,KAAMqM,GAC9CG,EAAa3F,EAAWwE,cAAcrL,KAAMsM,GAC5CG,GAAUJ,EAASE,EAAaN,SAAWjM,KAAK4H,aAAa2E,EAAajM,GAAG6H,YACjF,GAAIoE,EAAajM,GAAKkM,EAAWlM,EAAG,CAEhC,IAAIoM,GAASJ,EAAOE,EAAWP,SAAWjM,KAAK4H,aAAa4E,EAAWlM,GAAG6H,YACtEwE,EAAa3M,KAAK4H,aAAa2E,EAAajM,GAAGsM,cAAcH,EAAQC,GACzE,OAAO7F,EAAWgG,UAAU,CAACF,GACjC,CAEI,IAAIG,EAAS,GACb,GAAIP,EAAajM,EAAIkM,EAAWlM,EAAG,CAE3BqM,EAAa3M,KAAK4H,aAAa2E,EAAajM,GAAGsM,cAAcH,EAAQ,GACzEK,EAAO1M,KAAKuM,GACZ,IAAK,IAAIrM,EAAIiM,EAAajM,EAAI,EAAGA,EAAIkM,EAAWlM,EAAGA,IAC/CwM,EAAO1M,KAAKJ,KAAK4H,aAAatH,GAAGsK,QAAQmC,WAEzCL,GAASJ,EAAOE,EAAWP,SAAWjM,KAAK4H,aAAa4E,EAAWlM,GAAG6H,YAC1E2E,EAAO1M,KAAKJ,KAAK4H,aAAa4E,EAAWlM,GAAGsM,cAAc,EAAKF,GACnE,KACK,CAID,IAFIC,EAAa3M,KAAK4H,aAAa2E,EAAajM,GAAGsM,cAAcH,EAAQ,GACzEK,EAAO1M,KAAKuM,GACHrM,EAAIiM,EAAajM,EAAI,EAAGA,EAAIkM,EAAWlM,GAAKA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC/EwM,EAAO1M,KAAKJ,KAAK4H,aAAatH,GAAGsK,SAEjC8B,GAASJ,EAAOE,EAAWP,SAAWjM,KAAK4H,aAAa4E,EAAWlM,GAAG6H,YAC1E2E,EAAO1M,KAAKJ,KAAK4H,aAAa4E,EAAWlM,GAAGsM,cAAc,EAAGF,GACjE,CACA,OAAO7F,EAAWgG,UAAUC,EAEpC,EAgBAjG,EAAWgB,UAAUmF,eAAiB,SAAUjE,EAAYkE,EAASC,GACpDlN,KAAK8I,WAAWC,GACtBiE,eAAeC,EAASC,GAAY,GAC3C,GAIID,GAAWjN,KAAKmH,cAAgB4B,EAAa,GAAK/I,KAAK2H,gBAErC3H,KAAK8I,WAAWC,EAAa,EAAI,EAAI/I,KAAK4H,aAAarH,QAAUwI,EAAa,GAAKA,EAAa,GACtGiE,eAAehN,KAAKqH,kBAAmB6F,GAAY,GAC/D,GAGKD,GAAWjN,KAAKsH,YAAcyB,EAAa,EAAI/I,KAAK4H,aAAarH,QAAUP,KAAK2H,gBAErE3H,KAAK8I,YAAYC,EAAa,GAAK/I,KAAK4H,aAAarH,QAC3DyM,eAAehN,KAAKoH,oBAAqB8F,GAAY,GAC/D,GAGKD,GAAWjN,KAAKoH,qBAAuB2B,EAAa,EACzD/I,KAAKmN,8BAA8BpE,GAAY,GAC/C,GAGKkE,GAAWjN,KAAKqH,mBAAqB0B,EAAa,EAAI/I,KAAK6I,iBAChE7I,KAAKkI,4BAA4Ba,GAAY,GAC7C,GAKJ/I,KAAK4I,kBACT,EAaA/B,EAAWgB,UAAUsF,8BAAgC,SAAUpE,EAAYqE,EAAoBxE,GAC3F,GAAK5I,KAAK2H,kBAAkBoB,GAAc,GAA1C,CAEA,IAAIsE,EAAYrN,KAAK8I,WAAWC,GAC5BuE,EAAiBtN,KAAK8I,WAAWC,EAAa,EAAI,EAAI/I,KAAK6I,iBAAmBE,EAAa,GAAKA,EAAa,GACjHlC,EAAW0G,4BAA4BF,EAAWC,EAAgBD,EAAUnE,gBAC5EmE,EAAUlE,uBACVmE,EAAejE,cACfiE,EAAelE,qBACfgE,EAAoBxE,EAPV,CAQd,EAaA/B,EAAWgB,UAAUK,4BAA8B,SAAUa,EAAYqE,EAAoBxE,GACzF,GAAK5I,KAAK2H,kBAAkBoB,EAAa,EAAI/I,KAAK6I,iBAAlD,CAEA,IAAIwE,EAAYrN,KAAK8I,WAAWC,GAC5BuE,EAAiBtN,KAAK8I,YAAYC,EAAa,GAAK/I,KAAK6I,iBAChDhC,EAAW0G,4BAA4BF,EAAWC,EAAgBD,EAAUhE,cACzFgE,EAAUjE,qBACVkE,EAAepE,gBACfoE,EAAenE,uBACfiE,EAAoBxE,EAPV,CAQd,EAkBA/B,EAAW0G,4BAA8B,SAAUC,EACnDF,EAAgBG,EAAWC,EAAkBC,EAAgBC,EAAuBC,EAAqBC,GAGrG,IAAIC,EAAmB,IAAI9G,EAAS+G,OAAON,EAAiB/N,EAAI8N,EAAU9N,EAAG+N,EAAiB9N,EAAI6N,EAAU7N,GACxGqO,EAAwB,IAAIhH,EAAS+G,OAAOJ,EAAsBjO,EAAIgO,EAAehO,EAAGiO,EAAsBhO,EAAI+N,EAAe/N,GACjIsO,EAAmBzO,KAAKC,KAAKD,KAAK0O,IAAIJ,EAAiBpO,EAAG,GAAKF,KAAK0O,IAAIJ,EAAiBnO,EAAG,IAC5FwO,EAAwB3O,KAAKC,KAAKD,KAAK0O,IAAIF,EAAsBtO,EAAG,GAAKF,KAAK0O,IAAIF,EAAsBrO,EAAG,IAC3GsO,GAAoB,KAGpBL,EACAD,EAAsBS,IAAIV,EAAehO,EAAIoO,EAAiBpO,GAAKyO,EAAwBF,GAAmBP,EAAe/N,EAAImO,EAAiBnO,GAAKwO,EAAwBF,IAG/KN,EAAsBS,IAAIV,EAAehO,EAAIoO,EAAiBpO,EAAGgO,EAAe/N,EAAImO,EAAiBnO,GAEzG0N,EAAe1E,mBACnB,EAUA/B,EAAWgB,UAAUyG,UAAY,WAI7B,IAHA,IAEIC,EAFAhE,EAAM,IAAItD,EAAS+G,OAAOQ,OAAOC,kBAAmBD,OAAOC,mBAC3DnE,EAAM,IAAIrD,EAAS+G,OAAOQ,OAAOE,kBAAmBF,OAAOE,mBAEtDpO,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1CiO,EAAIvO,KAAK4H,aAAatH,GAAGgO,YACzB/D,EAAI5K,EAAIF,KAAK8K,IAAIA,EAAI5K,EAAG4O,EAAEhE,IAAI5K,GAC9B4K,EAAI3K,EAAIH,KAAK8K,IAAIA,EAAI3K,EAAG2O,EAAEhE,IAAI3K,GAC9B0K,EAAI3K,EAAIF,KAAK6K,IAAIA,EAAI3K,EAAG4O,EAAEjE,IAAI3K,GAC9B2K,EAAI1K,EAAIH,KAAK6K,IAAIA,EAAI1K,EAAG2O,EAAEjE,IAAI1K,GAElC,OAAO,IAAIkH,EAAS6H,OAAOpE,EAAKD,EACpC,EAiBAzD,EAAWgB,UAAU+G,4BAA8B,SAAUC,GACzD,GAAIA,EAAa,EACb,MAAM,IAAIC,MAAM,0CAA4CD,EAAa,KAE7E,IAAIE,EAAS,GACb,GAAiC,IAA7B/O,KAAK4H,aAAarH,OAClB,OAAOwO,EAGX,IAAIC,EAAe,IAAI/H,EAAS+G,OAAOhO,KAAK4H,aAAa,GAAGI,YAC5D+G,EAAO3O,KAAK4O,GAWZ,IAPA,IACIC,EADYjP,KAAK0H,gBACOmH,EAAa,GACrCK,EAAIlP,KAAK4H,aAAarH,OACtBwI,EAAa,EACboG,EAAgBnP,KAAK4H,aAAa,GAAGwH,UACrCC,EAAcJ,EACd3O,EAAI,EACDA,EAAIuO,GAAc9F,EAAamG,GAElC,GAAIG,EAAcF,EAAe,CAC7B,IAAIG,EAAWtP,KAAK4H,aAAamB,GAAYyB,SAAS6E,GACtDN,EAAO3O,KAAKkP,GACZD,GAAeJ,EACf3O,GACJ,MAGI+O,GAA4BF,EAC5BA,IAFApG,EAE6BmG,EAAIlP,KAAK4H,aAAamB,GAAYqG,UAAY,EAInF,OADAL,EAAO3O,KAAK,IAAI6G,EAAS+G,OAAOhO,KAAK4H,aAAasH,EAAI,GAAGjH,WAClD8G,CACX,EASAlI,EAAWgB,UAAU+C,MAAQ,WAEzB,IADA,IAAIoB,EAAO,IAAInF,EACNvG,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C0L,EAAKpE,aAAaxH,KAAKJ,KAAK4H,aAAatH,GAAGsK,SAExCtK,EAAI,IACJ0L,EAAKpE,aAAatH,EAAI,GAAG2H,SAAW+D,EAAKpE,aAAatH,GAAG0H,YAIjE,OAFAgE,EAAKpD,mBACLoD,EAAKrE,eAAiB3H,KAAK2H,eACpBqE,CACX,EAUAnF,EAAWgB,UAAUS,OAAS,SAAU0D,GACpC,IAAKA,EACD,OAAO,EAEX,IAAKA,EAAKpE,aACN,OAAO,EACX,QAAuC,IAA5BoE,EAAKpE,aAAarH,OACzB,OAAO,EACX,GAAIyL,EAAKpE,aAAarH,QAAUP,KAAK4H,aAAarH,OAC9C,OAAO,EACX,IAAK,IAAID,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1C,IAAKN,KAAK4H,aAAatH,GAAGgI,OAAO0D,EAAKpE,aAAatH,IAC/C,OAAO,EAEf,OAAO,CACX,EAUAuG,EAAWgB,UAAUtB,QAAU,WAC3B,IAAK,IAAIjG,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1CN,KAAK4H,aAAatH,GAAGiG,UAEzBvG,KAAKuP,aAAc,CACvB,EAUA1I,EAAWgB,UAAU2H,aAAe,WAChC,GAAiC,IAA7BxP,KAAK4H,aAAarH,OAClB,MAAO,GAEX,GAAiC,IAA7BP,KAAK4H,aAAarH,OAClB,MAAO,CACHP,KAAK4H,aAAa,GAAGI,WACrBhI,KAAK4H,aAAa,GAAGa,kBACrBzI,KAAK4H,aAAa,GAAGe,gBACrB3I,KAAK4H,aAAa,GAAGK,UAG7B,IAAIwH,EAAM,GACVA,EAAIrP,KAAKJ,KAAK4H,aAAa,GAAGI,YAC9ByH,EAAIrP,KAAKJ,KAAK4H,aAAa,GAAGa,mBAC9B,IAAK,IAAInI,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAC1CmP,EAAIrP,KAAKJ,KAAK4H,aAAatH,EAAI,GAAGqI,iBAClC8G,EAAIrP,KAAKJ,KAAK4H,aAAatH,EAAI,GAAG2H,UAClCwH,EAAIrP,KAAKJ,KAAK4H,aAAatH,GAAG0H,YAC9ByH,EAAIrP,KAAKJ,KAAK4H,aAAatH,GAAGmI,mBAIlC,OAFAgH,EAAIrP,KAAKJ,KAAK4H,aAAa,GAAGe,iBAC9B8G,EAAIrP,KAAKJ,KAAK4H,aAAa,GAAGK,UACvBwH,CACX,EAUA5I,EAAWgB,UAAU6H,OAAS,SAAUC,GACpC,IAAIC,EAAS,GACbA,EAAOxP,KAAK,KACZ,IAAK,IAAIE,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IACtCA,EAAI,GACJsP,EAAOxP,KAAK,KACZuP,EACAC,EAAOxP,KAAK,QAEZwP,EAAOxP,KAAK,KAChBwP,EAAOxP,KAAKJ,KAAK4H,aAAatH,GAAGoP,OAAOC,IAK5C,OAHgC,GAA5B3P,KAAK4H,aAAarH,QAClBqP,EAAOxP,KAAK,KAChBwP,EAAOxP,KAAK,KACLwP,EAAOC,KAAK,GACvB,EAWAhJ,EAAWiJ,SAAW,SAAUC,GAC5B,IAAIC,EAAMC,KAAKC,MAAMH,GACrB,OAAOlJ,EAAWgG,UAAUmD,EAChC,EAUAnJ,EAAWsJ,UAAY,SAAUpI,GAC7B,IAAIiE,EAAO,IAAInF,EAEf,OADAmF,EAAKlE,SAASC,GACPiE,CACX,EAWAnF,EAAWgG,UAAY,SAAUmD,GAC7B,IAAKI,MAAMC,QAAQL,GACf,KAAM,yDAEV,IAAIP,EAAMO,EACV,GAAIP,EAAIlP,OAAS,EACb,KAAM,mFAAqFkP,EAAIlP,OAAS,KAK5G,IAFA,IAAI+P,EAAQ,IAAIzJ,EACZ0J,EAAY,KACPjQ,EAAI,EAAGA,EAAImP,EAAIlP,OAAQD,IAAK,CAEjC,IAAIgL,EACJ,GAAIvE,EAAmByJ,iBAAiBC,WAAWhB,EAAInP,IACnDgL,EAASmE,EAAInP,GAAGsK,aAEf,GAAI,KAAK6E,EAAInP,IAAM,KAAKmP,EAAInP,IAAM,KAAKmP,EAAInP,IAAM,KAAKmP,EAAInP,GAAI,CAC/D,KAAKmP,EAAInP,GAAG,IAAOmP,EAAInP,GAAG,IAAOmP,EAAInP,GAAG,IAAOmP,EAAInP,GAAG,IAClD,KAAM,6FAA+FA,EAAI,MAAQmP,EAAInP,GACzHgL,EAASvE,EAAmByJ,iBAAiB3D,UAAU4C,EAAInP,GAC/D,MAEIgL,EAASvE,EAAmByJ,iBAAiBE,WAAWjB,EAAInP,IAI5DiQ,IACAjF,EAAOtD,WAAauI,EAAUtI,UAElCqI,EAAM1I,aAAaxH,KAAKkL,GAExBiF,EAAYjF,CAChB,CAGA,OAFAgF,EAAM1H,mBAEC0H,CACX,EAeAzJ,EAAWgB,UAAU8I,4BAA8B,SAAUC,QACpC,IAAVA,IACPA,EAAS,GACb,IAAIhB,EAAS,GACbA,EAAOxP,KAAK,KACZ,IAAK,IAAIE,EAAI,EAAGA,EAAIN,KAAK4H,aAAarH,OAAQD,IAAK,CAC/C,IAAIyH,EAAQ/H,KAAK4H,aAAatH,GAC9BsP,EAAOxP,KAAK2H,EAAMmB,gBAAgBvJ,EAAEkR,QAAQD,IAC5ChB,EAAOxP,KAAK,KACZwP,EAAOxP,KAAK2H,EAAMmB,gBAAgBtJ,EAAEiR,QAAQD,IAC5ChB,EAAOxP,KAAK,KACZwP,EAAOxP,KAAK2H,EAAMoB,uBAAuBxJ,EAAEkR,QAAQD,IACnDhB,EAAOxP,KAAK,KACZwP,EAAOxP,KAAK2H,EAAMoB,uBAAuBvJ,EAAEiR,QAAQD,IACnDhB,EAAOxP,KAAK,KACZwP,EAAOxP,KAAK2H,EAAMqB,qBAAqBzJ,EAAEkR,QAAQD,IACjDhB,EAAOxP,KAAK,KACZwP,EAAOxP,KAAK2H,EAAMqB,qBAAqBxJ,EAAEiR,QAAQD,IACjDhB,EAAOxP,KAAK,IAChB,CAQA,OAPgC,GAA5BJ,KAAK4H,aAAarH,SACdwH,EAAQ/H,KAAK4H,aAAa5H,KAAK4H,aAAarH,OAAS,GACzDqP,EAAOxP,KAAK2H,EAAMsB,cAAc1J,EAAEkR,QAAQD,IAC1ChB,EAAOxP,KAAK,KACZwP,EAAOxP,KAAK2H,EAAMsB,cAAczJ,EAAEiR,QAAQD,KAE9ChB,EAAOxP,KAAK,KACLwP,EAAOC,KAAK,GACvB,EAaAhJ,EAAWiK,8BAAgC,SAAUC,EAAUpJ,GAE3D,IAAIqJ,EAAaf,KAAKC,MAAMa,GAC5B,IAAKC,EAAWzQ,OAEZ,MADAkK,QAAQU,IAAI,6EACN,4EAEV,GAAI6F,EAAWzQ,OAAS,EAEpB,MADAkK,QAAQU,IAAI,0FACN,yFAEV,OAAOtE,EAAWoK,gBAAgBD,EAAYrJ,EAClD,EAYAd,EAAWoK,gBAAkB,SAAUD,EAAYrJ,GAE/C,IAEIc,EACAE,EACAV,EAJAiJ,EAAa,IAAIrK,EACjBmB,EAAa,IAAIf,EAAS+G,OAI1B1N,EAAI,EACR,EAAG,CACU,GAALA,IAEA0H,EAAa,IAAIf,EAAS+G,OAAOgD,EAAW1Q,GAAI0Q,EAAW1Q,EAAI,KAEnEmI,EAAoB,IAAIxB,EAAS+G,OAAOgD,EAAW1Q,EAAI,GAAI0Q,EAAW1Q,EAAI,IAC1EqI,EAAkB,IAAI1B,EAAS+G,OAAOgD,EAAW1Q,EAAI,GAAI0Q,EAAW1Q,EAAI,IAIxE2H,EAAW,IAAIhB,EAAS+G,OAAOgD,EAAW1Q,EAAI,GAAI0Q,EAAW1Q,EAAI,IAEjE,IAAIgL,EAAS,IAAIvE,EAAmByJ,iBAAiBxI,EAAYC,EAAUQ,EAAmBE,GAC9FuI,EAAWtJ,aAAaxH,KAAKkL,GAC7BtD,EAAaC,EACb3H,GAAK,CACT,OAASA,EAAI,EAAI0Q,EAAWzQ,QAM5B,OALA2Q,EAAWvJ,eAAiBA,SAAuDA,EAC/EA,IACAuJ,EAAWtJ,aAAasJ,EAAWtJ,aAAarH,OAAS,GAAG0H,SAAWiJ,EAAWtJ,aAAa,GAAGI,YAEtGkJ,EAAWtI,mBACJsI,CACX,EAKArK,EAAWM,YAAc,EAEzBN,EAAWO,oBAAsB,EAEjCP,EAAWQ,kBAAoB,EAE/BR,EAAWS,UAAY,EAChBT,CACX,CA7iC+B,GA8iC/BF,EAAQE,WAAaA,C,eCnlCrBJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQgI,YAAS,EACjB,IAAIwC,EAAY,EAAQ,KACpBlK,EAAW,EAAQ,KAQnB0H,EAAwB,WASxB,SAASA,EAAOpE,EAAKD,GACjBtK,KAAKuK,IAAMA,EACXvK,KAAKsK,IAAMA,EACXtK,KAAKoR,MAAQ9G,EAAI3K,EAAI4K,EAAI5K,EACzBK,KAAKqR,OAAS/G,EAAI1K,EAAI2K,EAAI3K,CAC9B,CAwMA,OA/LA+O,EAAO9G,UAAUyJ,cAAgB,WAC7B,OAAO,IAAIrK,EAAS+G,OAAOhO,KAAKuK,IAAI5K,EAAIK,KAAKoR,MAAQ,EAAKpR,KAAKuK,IAAI3K,EACvE,EAUA+O,EAAO9G,UAAU0J,cAAgB,WAC7B,OAAO,IAAItK,EAAS+G,OAAOhO,KAAKuK,IAAI5K,EAAIK,KAAKoR,MAAQ,EAAKpR,KAAKsK,IAAI1K,EACvE,EAUA+O,EAAO9G,UAAU2J,aAAe,WAC5B,OAAO,IAAIvK,EAAS+G,OAAOhO,KAAKuK,IAAI5K,EAAGK,KAAKuK,IAAI3K,EAAII,KAAKqR,OAAS,EACtE,EAUA1C,EAAO9G,UAAU4J,aAAe,WAC5B,OAAO,IAAIxK,EAAS+G,OAAOhO,KAAKsK,IAAI3K,EAAGK,KAAKuK,IAAI3K,EAAII,KAAKqR,OAAS,EACtE,EAUA1C,EAAO9G,UAAU6J,UAAY,WACzB,OAAO,IAAIP,EAAUQ,QAAQ,CAAC,IAAI1K,EAAS+G,OAAOhO,KAAKuK,KAAM,IAAItD,EAAS+G,OAAOhO,KAAKsK,IAAI3K,EAAGK,KAAKuK,IAAI3K,GAAI,IAAIqH,EAAS+G,OAAOhO,KAAKsK,KAAM,IAAIrD,EAAS+G,OAAOhO,KAAKuK,IAAI5K,EAAGK,KAAKsK,IAAI1K,KAAK,EAC3L,EASA+O,EAAO9G,UAAU+J,UAAY,WACzB,OAAO,IAAI3K,EAAS+G,OAAOhO,KAAKuK,IAAI5K,GAAKK,KAAKsK,IAAI3K,EAAIK,KAAKuK,IAAI5K,GAAK,EAAKK,KAAKuK,IAAI3K,GAAKI,KAAKsK,IAAI1K,EAAII,KAAKuK,IAAI3K,GAAK,EACtH,EAMA+O,EAAO9G,UAAUgK,gBAAkB,WAC/B,OAAOpS,KAAK8K,IAAIvK,KAAKoR,MAAOpR,KAAKqR,OACrC,EAMA1C,EAAO9G,UAAUiK,gBAAkB,WAC/B,OAAOrS,KAAK6K,IAAItK,KAAKoR,MAAOpR,KAAKqR,OACrC,EAYA1C,EAAO9G,UAAUkK,YAAc,SAAUC,EAAoBC,QAC9B,IAAvBD,IAAiCA,EAAqB,QACjC,IAArBC,IAA+BA,EAAmB,GAEtD,IAAIC,EAAwBF,EAAqB,GAAKA,EAAqB,EAAIhS,KAAKoR,MAAQY,EAAqBA,EAC7GG,EAAsBF,EAAmB,GAAKA,EAAmB,EAAIjS,KAAKqR,OAASY,EAAmBA,EAC1G,OAAO,IAAIhL,EAAS+G,OAAOhO,KAAKuK,IAAI5K,EAAIuS,EAAwBzS,KAAK2S,UAAYpS,KAAKoR,MAAQ,EAAIc,GAAwBlS,KAAKuK,IAAI3K,EAAIuS,EAAsB1S,KAAK2S,UAAYpS,KAAKqR,OAAS,EAAIc,GACpM,EAYAxD,EAAO9G,UAAUwK,SAAW,WACxB,MAAO,UAAUvG,OAAO9L,KAAKuK,IAAI8H,WAAY,YAAYvG,OAAO9L,KAAKsK,IAAI+H,WAAY,aAAavG,OAAO9L,KAAKoR,MAAO,eAAetF,OAAO9L,KAAKqR,OAAQ,KAC5J,EASA1C,EAAO9G,UAAU+C,MAAQ,WACrB,OAAO,IAAI+D,EAAO,CAAEhP,EAAGK,KAAKuK,IAAI5K,EAAGC,EAAGI,KAAKuK,IAAI3K,GAAK,CAAED,EAAGK,KAAKsK,IAAI3K,EAAGC,EAAGI,KAAKsK,IAAI1K,GACrF,EAYA+O,EAAO2D,oBAAsB,SAAUC,GACnC,GAAuB,GAAnBA,EAAShS,OACT,OAAO,IAAIoO,EAAO,IAAI1H,EAAS+G,OAAO,EAAG,GAAI,IAAI/G,EAAS+G,OAAO,EAAG,IAExE,IAIIwE,EAJAC,EAAOF,EAAS,GAAG5S,EACnB+S,EAAOH,EAAS,GAAG5S,EACnBgT,EAAOJ,EAAS,GAAG3S,EACnBgT,EAAOL,EAAS,GAAG3S,EAEvB,IAAK,IAAIU,KAAKiS,EACVC,EAAOD,EAASjS,GAChBmS,EAAOhT,KAAK8K,IAAIkI,EAAMD,EAAK7S,GAC3B+S,EAAOjT,KAAK6K,IAAIoI,EAAMF,EAAK7S,GAC3BgT,EAAOlT,KAAK8K,IAAIoI,EAAMH,EAAK5S,GAC3BgT,EAAOnT,KAAK6K,IAAIsI,EAAMJ,EAAK5S,GAE/B,OAAO,IAAI+O,EAAO,IAAI1H,EAAS+G,OAAOyE,EAAME,GAAO,IAAI1L,EAAS+G,OAAO0E,EAAME,GACjF,EAYAjE,EAAOkE,qBAAuB,SAAUC,GACpC,GAA4B,GAAxBA,EAAcvS,OACd,OAAO,IAAIoO,EAAO,IAAI1H,EAAS+G,OAAO,EAAG,GAAI,IAAI/G,EAAS+G,OAAO,EAAG,IAExE,IAII+E,EAJAN,EAAOK,EAAc,GAAGvI,IAAI5K,EAC5B+S,EAAOI,EAAc,GAAGxI,IAAI3K,EAC5BgT,EAAOG,EAAc,GAAGvI,IAAI3K,EAC5BgT,EAAOE,EAAc,GAAGvI,IAAI3K,EAEhC,IAAK,IAAIU,KAAKwS,EACVC,EAASD,EAAcxS,GACvBmS,EAAOhT,KAAK8K,IAAIkI,EAAMM,EAAOxI,IAAI5K,GACjC+S,EAAOjT,KAAK6K,IAAIoI,EAAMK,EAAOzI,IAAI3K,GACjCgT,EAAOlT,KAAK8K,IAAIoI,EAAMI,EAAOxI,IAAI3K,GACjCgT,EAAOnT,KAAK6K,IAAIsI,EAAMG,EAAOxI,IAAI3K,GAErC,OAAO,IAAI+O,EAAO,IAAI1H,EAAS+G,OAAOyE,EAAME,GAAO,IAAI1L,EAAS+G,OAAO0E,EAAME,GACjF,EASAjE,EAAOqE,cAAgB,SAAU5B,EAAOC,EAAQ4B,GAC5C,OAAO,IAAItE,EAAOsE,QAAuCA,EAAS,CAAEtT,EAAG,EAAGC,EAAG,GAAK,CAAED,GAAIsT,EAASA,EAAOtT,EAAI,GAAKyR,EAAOxR,GAAIqT,EAASA,EAAOrT,EAAI,GAAKyR,GACzJ,EACO1C,CACX,CAvN2B,GAwN3BhI,EAAQgI,OAASA,C,gBClOjBlI,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQuM,YAAS,EACjB,IAAIpM,EAAW,EAAQ,IACnBqM,EAAS,EAAQ,KACjBnM,EAAiB,EAAQ,KACzBoM,EAAW,EAAQ,IACnBnM,EAAW,EAAQ,KAYnBiM,EAAwB,WASxB,SAASA,EAAOvJ,EAAQ0J,GAIpBrT,KAAKkH,UAAY,SACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAK2J,OAASA,EACd3J,KAAKqT,OAASA,CAClB,CAyRA,OA/QAH,EAAOrL,UAAUtG,KAAO,SAAU0H,GAE9B,OADAjJ,KAAK2J,OAAOzJ,IAAI+I,GACTjJ,IACX,EAUAkT,EAAOrL,UAAUyL,cAAgB,SAAUjL,GACvC,OAAOrI,KAAK2J,OAAOU,SAAShC,GAASrI,KAAKqT,MAC9C,EAUAH,EAAOrL,UAAU0L,eAAiB,SAAUC,GACxC,OAAOxT,KAAK2J,OAAOU,SAASmJ,EAAO7J,QAAU6J,EAAOH,OAASrT,KAAKqT,MACtE,EAeAH,EAAOrL,UAAU4L,aAAe,SAAUhI,GAEtC,OADyBA,EAAKiI,gBAAgB1T,KAAK2J,QACzBU,SAASrK,KAAK2J,QAAU3J,KAAKqT,MAC3D,EAUAH,EAAOrL,UAAU8L,OAAS,SAAU3O,GAEhC,OAAOkO,EAAOU,YAAYD,OAAO3O,EAAOhF,KAAKqT,QAAQnT,IAAIF,KAAK2J,OAClE,EAYAuJ,EAAOrL,UAAUgM,UAAY,SAAU7O,GACnC,IAAI8O,EAASZ,EAAOU,YAAYD,OAAO3O,EAAOhF,KAAKqT,QAEnD,OAAO,IAAID,EAASW,OAAOD,EAAQ,IAAI7M,EAAS+G,OAAO,EAAG,IAAI9N,IAAIF,KAAK2J,QAAQqK,MAEnF,EAUAd,EAAOrL,UAAUyG,UAAY,WACzB,OAAO,IAAIxH,EAAS6H,OAAO3O,KAAK2J,OAAOiB,QAAQqJ,MAAMxU,KAAK2E,IAAIpE,KAAKqT,QAAS5T,KAAK2E,IAAIpE,KAAKqT,SAAUrT,KAAK2J,OAAOiB,QAAQsJ,MAAMzU,KAAK2E,IAAIpE,KAAKqT,QAAS5T,KAAK2E,IAAIpE,KAAKqT,SACvK,EAWAH,EAAOrL,UAAUsM,mBAAqB,SAAUX,GAE5C,GAAIxT,KAAK2J,OAAOU,SAASmJ,EAAO7J,QAAU3J,KAAKqT,OAASG,EAAOH,OAC3D,OAAO,KAGX,GAAIrT,KAAK2J,OAAOU,SAASmJ,EAAO7J,QAAUlK,KAAK2E,IAAIpE,KAAKqT,OAASG,EAAOH,QACpE,OAAO,KAwBX,IAAIe,EAAKpU,KAAK2J,OACV0K,EAAKb,EAAO7J,OACZ2K,EAAIF,EAAG/J,SAASgK,GAChBE,GAAKvU,KAAKqT,OAASrT,KAAKqT,OAASG,EAAOH,OAASG,EAAOH,OAASiB,EAAIA,IAAM,EAAIA,GAC/EE,EAAI/U,KAAKC,KAAKM,KAAKqT,OAASrT,KAAKqT,OAASkB,EAAIA,GAC9CE,EAAKJ,EAAGzJ,QAAQtB,MAAMiL,EAAID,EAAGF,GAC7BM,EAAKD,EAAG9U,EAAK6U,GAAKH,EAAGzU,EAAIwU,EAAGxU,GAAM0U,EAClCK,EAAKF,EAAG7U,EAAK4U,GAAKH,EAAG1U,EAAIyU,EAAGzU,GAAM2U,EAClCM,EAAKH,EAAG9U,EAAK6U,GAAKH,EAAGzU,EAAIwU,EAAGxU,GAAM0U,EAClCO,EAAKJ,EAAG7U,EAAK4U,GAAKH,EAAG1U,EAAIyU,EAAGzU,GAAM2U,EACtC,OAAO,IAAInB,EAAO2B,KAAK,IAAI7N,EAAS+G,OAAO0G,EAAIC,GAAK,IAAI1N,EAAS+G,OAAO4G,EAAIC,GAChF,EAWA3B,EAAOrL,UAAUkN,iBAAmB,SAAUR,EAAGhG,GAG7C,IAAIyG,EAAS,IAAI/N,EAAS+G,OACtBiH,EAAS,IAAIhO,EAAS+G,OAEtBkH,EAAS,IAAIjO,EAAS+G,OAAOuG,GAAGY,IAAInV,KAAK2J,QACzCyL,EAAS,IAAInO,EAAS+G,OAAOO,GAAG4G,IAAInV,KAAK2J,QACzC0L,EAAOH,EAAOI,WAAWF,GAIJ,IAArB3V,KAAK2E,IAAIiR,EAAKzV,KACdyV,EAAKzV,EAAI,MAEb,IAAIoK,EAAOkL,EAAO7K,SAAS+K,GACvBG,EAAML,EAAOvV,EAAIyV,EAAOxV,EAAIsV,EAAOtV,EAAIwV,EAAOzV,EAC9C6V,EAAcxL,EAAOA,EAGzB,GAFoBhK,KAAKqT,OAASrT,KAAKqT,OAEnBmC,EAAcD,EAAMA,EAAM,EAC1C,OAAO,KAEX,IAAIE,EAAYzV,KAAKqT,OAASrT,KAAKqT,OAASrJ,EAAOA,EAAOuL,EAAMA,EAC5D7V,EAAOD,KAAKC,KAAK+V,GAKrB,OAJAT,EAAOrV,GAAK4V,EAAMF,EAAKzV,EAAIH,KAAKiW,KAAKL,EAAKzV,GAAKyV,EAAK1V,EAAID,GAAQ8V,EAChEP,EAAOtV,GAAK4V,EAAMF,EAAKzV,EAAIH,KAAKiW,KAAKL,EAAKzV,GAAKyV,EAAK1V,EAAID,GAAQ8V,EAChER,EAAOpV,IAAM2V,EAAMF,EAAK1V,EAAIF,KAAK2E,IAAIiR,EAAKzV,GAAKF,GAAQ8V,EACvDP,EAAOrV,IAAM2V,EAAMF,EAAK1V,EAAIF,KAAK2E,IAAIiR,EAAKzV,GAAKF,GAAQ8V,EAChD,IAAIrC,EAAO2B,KAAKE,EAAO9U,IAAIF,KAAK2J,QAASsL,EAAO/U,IAAIF,KAAK2J,QACpE,EAWAuJ,EAAOrL,UAAU2D,kBAAoB,SAAUC,EAAMC,QACtB,IAAvBA,IAAiCA,GAAqB,GAE1D,IAAIiK,EAAkB3V,KAAK+U,iBAAiBtJ,EAAK8I,EAAG9I,EAAK8C,GACzD,OAAKoH,EAGDjK,EAEO,CAACiK,EAAgBpB,EAAGoB,EAAgBpH,GAAGqH,QAAO,SAAUpD,GAAQ,OAAO/G,EAAKoK,SAASrD,GAAM,EAAO,IAGlG,CAACmD,EAAgBpB,EAAGoB,EAAgBpH,GAPpC,EASf,EAUA2E,EAAOrL,UAAUkE,yBAA2B,SAAUN,EAAMC,GACxD,IAAIoK,EAAQ9V,KAIZ,YAH2B,IAAvB0L,IAAiCA,GAAqB,GAEjC1L,KAAKwL,kBAAkBC,EAAMC,GAC5BqK,KAAI,SAAUvD,GAEpC,IACIxN,EADiB,IAAImO,EAAO2B,KAAKgB,EAAMnM,OAAQ6I,GACxBxN,QAI3B,OAAO8Q,EAAMjC,UAAU7O,EAC3B,GACJ,EAWAkO,EAAOrL,UAAUmO,aAAe,SAAUxD,GACtC,IAAIuC,EAAmB/U,KAAK+U,iBAAiB/U,KAAK2J,OAAQ6I,GAC1D,OAAKuC,EAKDA,EAAiBR,EAAElK,SAASmI,GAAQuC,EAAiBxG,EAAElE,SAASmI,GACzDuC,EAAiBR,EAGjBQ,EAAiBxG,EAPjB,IAAItH,EAAS+G,MAS5B,EAMAkF,EAAOrL,UAAUtB,QAAU,WACvBvG,KAAK2J,OAAOpD,UACZvG,KAAKuP,aAAc,CACvB,EACA2D,EAAOU,YAAc,CACjBD,OAAQ,SAAU3O,EAAOqO,GAGrB,OAAO,IAAIpM,EAAS+G,OAAOvO,KAAKwW,IAAIjR,GAASqO,EAAQ5T,KAAKyW,IAAIlR,GAASqO,EAC3E,GAEGH,CACX,CA3S2B,GA4S3BvM,EAAQuM,OAASA,C,gBChUjBzM,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQwP,kBAAe,EACvB,IAAIrP,EAAW,EAAQ,IACnBsP,EAAW,EAAQ,KACnBjD,EAAS,EAAQ,KACjBnM,EAAiB,EAAQ,KACzBC,EAAW,EAAQ,KACnBoP,EAAc,EAAQ,KAUtBF,EAA8B,WAU9B,SAASA,EAAa3C,EAAQ8C,EAAYC,GAItCvW,KAAKkH,UAAY,eACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAKwT,OAASA,EACdxT,KAAKsW,WAAaA,EAClBtW,KAAKuW,SAAWA,CACpB,CAwRA,OA3QAJ,EAAatO,UAAUyG,UAAY,WAC/B,IAAItK,EAAQhE,KACRwW,EAAexW,KAAKwT,OAAOlF,YAE3BmI,EAAa,CACbD,EAAalF,gBACbkF,EAAajF,gBACbiF,EAAahF,eACbgF,EAAa/E,gBACfmE,QAAO,SAAUvN,GAEf,IAAIrD,EAAQ,IAAImO,EAAO2B,KAAK9Q,EAAMwP,OAAO7J,OAAQtB,GAAOrD,QACxD,OAAOhB,EAAM0S,cAAc1R,EAC/B,IAEA,OAAO8B,EAAS6H,OAAO2D,oBAAoBmE,EAAW3K,OAAO,CAAC9L,KAAKkJ,gBAAiBlJ,KAAKqJ,gBAC7F,EAWA8M,EAAatO,UAAUtG,KAAO,SAAU0H,GAEpC,OADAjJ,KAAKwT,OAAOjS,KAAK0H,GACVjJ,IACX,EAUAmW,EAAatO,UAAU6O,cAAgB,SAAU1R,GAC7C,IAAI2R,EAAeN,EAAYO,UAAUC,cAAc7R,GACnD8R,EAAeT,EAAYO,UAAUC,cAAc7W,KAAKsW,YACxDS,EAAaV,EAAYO,UAAUC,cAAc7W,KAAKuW,UAQ1D,OAAIO,GAAgBC,EACTJ,GAAgBG,GAAgBH,EAAeI,EAI/CJ,GAAgBG,GAAgBH,EAAeI,CAE9D,EAUAZ,EAAatO,UAAUmP,QAAU,SAAUlM,GACvC,OAAI9K,KAAKsW,YAActW,KAAKuW,UACLvW,KAAKsW,YAActW,KAAKuW,SAAWvW,KAAKsW,YAAcxL,IACxC,EAAVrL,KAAKgG,KAITzF,KAAKsW,YAAwB,EAAV7W,KAAKgG,GAASzF,KAAKsW,WAAatW,KAAKuW,UAAYzL,IACtD,EAAVrL,KAAKgG,GAEpC,EASA0Q,EAAatO,UAAUqB,cAAgB,WACnC,OAAOlJ,KAAKwT,OAAOG,OAAO3T,KAAKsW,WACnC,EASAH,EAAatO,UAAUwB,YAAc,WACjC,OAAOrJ,KAAKwT,OAAOG,OAAO3T,KAAKuW,SACnC,EAcAJ,EAAatO,UAAUoP,yBAA2B,SAAUC,GACxD,IAAIC,EAAcnX,KAAKwT,OAAOW,mBAAmB+C,EAAO1D,QACxD,IAAK2D,EAED,OAAO,KAGX,IAAIC,EAAyBpX,KAAKwT,OAAO7J,OAAO3E,MAAMmS,EAAY5C,GAC9D8C,EAAyBrX,KAAKwT,OAAO7J,OAAO3E,MAAMmS,EAAY5I,GAElE,IAAKvO,KAAK0W,cAAcU,KAA4BpX,KAAK0W,cAAcW,GAGnE,OAAO,KAGX,IAAIC,EAAyBJ,EAAO1D,OAAO7J,OAAO3E,MAAMmS,EAAY5C,GAChEgD,EAAyBL,EAAO1D,OAAO7J,OAAO3E,MAAMmS,EAAY5I,GAEpE,IAAK2I,EAAOR,cAAcY,KAA4BJ,EAAOR,cAAca,GAGvE,OAAO,KAKX,IACIC,EADY,IAAIrB,EAAanW,KAAKwT,OAAQxT,KAAKuW,SAAUvW,KAAKsW,YAC9BU,QAAQ,IACxCS,EAAe,IAAItB,EAAa,IAAIC,EAASlD,OAAOlT,KAAKwT,OAAO7J,OAAOiB,QAAS5K,KAAKwT,OAAOH,QAAS+D,EAAwBC,GAKjI,OAJII,EAAaf,cAAcc,KAC3BC,EAAanB,WAAae,EAC1BI,EAAalB,SAAWa,GAErBK,CACX,EAWAtB,EAAatO,UAAU2D,kBAAoB,SAAUkM,EAAKhM,GACtD,IAAIoK,EAAQ9V,UACe,IAAvB0L,IAAiCA,GAAqB,GAE1D,IAAIiM,EAAuB3X,KAAKwT,OAAOhI,kBAAkBkM,EAAKhM,GAE1DkM,EAAU,IAAIzE,EAAO2B,KAAK9U,KAAKwT,OAAO7J,OAAQ,IAAI1C,EAAS+G,QAC/D,OAAO2J,EAAqB/B,QAAO,SAAUiC,GACzCD,EAAQrJ,EAAEF,IAAIwJ,GACd,IAAIC,EAAYF,EAAQ5S,QACxB,OAAO8Q,EAAMY,cAAcL,EAAYO,UAAUmB,WAAWD,EAAW,EAAa,EAAVrY,KAAKgG,IACnF,GACJ,EAUA0Q,EAAatO,UAAUkE,yBAA2B,SAAUN,EAAMC,GAC9D,IAAIoK,EAAQ9V,KAIZ,YAH2B,IAAvB0L,IAAiCA,GAAqB,GAEjC1L,KAAKwL,kBAAkBC,EAAMC,GAC5BqK,KAAI,SAAUvD,GAEpC,IACIxN,EADiB,IAAImO,EAAO2B,KAAKgB,EAAMtC,OAAO7J,OAAQ6I,GAC/BxN,QAI3B,OAAO8Q,EAAMtC,OAAOK,UAAU7O,EAClC,GACJ,EAYAmR,EAAatO,UAAUtB,QAAU,WAC7BvG,KAAKwT,OAAOjN,UACZvG,KAAKuP,aAAc,CACvB,EACA4G,EAAa6B,kBAAoB,CAQ7BC,iBAAkB,SAAUC,EAASC,EAAS9E,EAAQrO,GAClD,MAAO,CACHrF,EAAGuY,EAAU7E,EAAS5T,KAAKwW,IAAIjR,GAC/BpF,EAAGuY,EAAU9E,EAAS5T,KAAKyW,IAAIlR,GAEvC,EAUAoT,eAAgB,SAAUzY,EAAGC,EAAGyT,EAAQiD,EAAYC,EAAU8B,QACnC,IAAZA,IACPA,EAAU,CAAEC,aAAa,IAC7B,IAAI9W,EAAM2U,EAAa6B,kBAAkBC,iBAAiBtY,EAAGC,EAAGyT,EAAQkD,GACpElV,EAAQ8U,EAAa6B,kBAAkBC,iBAAiBtY,EAAGC,EAAGyT,EAAQiD,GAG1E,GAAc,EAAV7W,KAAKgG,GAAShG,KAAK2E,IAAIkS,EAAaC,GAAY,KAAO,CACvD,IAAIgC,EAAYpC,EAAa6B,kBAAkBI,eAAezY,EAAGC,EAAGyT,EAAQiD,EAAYA,GAAcC,EAAWD,GAAc,EAAG+B,GAC9HG,EAAarC,EAAa6B,kBAAkBI,eAAezY,EAAGC,EAAGyT,EAAQiD,GAAcC,EAAWD,GAAc,EAAGC,EAAU8B,GACjI,OAAOE,EAAUzM,OAAO0M,EAC5B,CAEA,IACIC,EACAC,EAFArD,EAAOkB,EAAWD,EAGlBjB,EAAO,GACPoD,EAAehZ,KAAK2E,IAAIiR,GAAQ5V,KAAKgG,GAAK,EAAI,EAC9CiT,EAAY,IAGZD,EAAehZ,KAAK2E,IAAIiR,GAAQ5V,KAAKgG,GAAK,EAAI,EAC9CiT,EAAY,GAEhB,IAAIC,EAAW,GAKf,OAJIN,EAAQC,aACRK,EAASvY,KAAK,IAAKiB,EAAM1B,EAAG0B,EAAMzB,GAEtC+Y,EAASvY,KAAK,IAAKiT,EAAQA,EAAQ,EAAGoF,EAAcC,EAAWlX,EAAI7B,EAAG6B,EAAI5B,GACnE+Y,CACX,GAEGxC,CACX,CA5SiC,GA6SjCxP,EAAQwP,aAAeA,C,gBCtSvB1P,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ6J,sBAAmB,EAC3B,IAAI1J,EAAW,EAAQ,IACnBE,EAAiB,EAAQ,KACzBC,EAAW,EAAQ,KACnBmM,EAAW,EAAQ,IAWnB5C,EAAkC,WAWlC,SAASA,EAAiBxI,EAAYC,EAAUQ,EAAmBE,GAE/D3I,KAAKmH,YAAcqJ,EAAiBrJ,YAEpCnH,KAAKoH,oBAAsBoJ,EAAiBpJ,oBAE5CpH,KAAKqH,kBAAoBmJ,EAAiBnJ,kBAE1CrH,KAAKsH,UAAYkJ,EAAiBlJ,UAClCtH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAKgI,WAAaA,EAClBhI,KAAKyI,kBAAoBA,EACzBzI,KAAKiI,SAAWA,EAChBjI,KAAK2I,gBAAkBA,EACvB3I,KAAK4Y,eAAiB,GAEtB5Y,KAAK6Y,aAAe,GAEpB7Y,KAAK8Y,eAAiB,GAGtB9Y,KAAK4I,kBACT,CAw8BA,OA17BA4H,EAAiB3I,UAAUmF,eAAiB,SAAUC,EAASC,EAAY6L,EAAkBnQ,GACrFqE,GAAWjN,KAAKmH,aAChBnH,KAAKkJ,gBAAgBhJ,IAAIgN,GACrB6L,GACA/Y,KAAKmJ,uBAAuBjJ,IAAIgN,IAE/BD,GAAWjN,KAAKoH,oBACrBpH,KAAKmJ,uBAAuBjJ,IAAIgN,GAE3BD,GAAWjN,KAAKqH,kBACrBrH,KAAKoJ,qBAAqBlJ,IAAIgN,GAEzBD,GAAWjN,KAAKsH,WACrBtH,KAAKqJ,cAAcnJ,IAAIgN,GACnB6L,GACA/Y,KAAKoJ,qBAAqBlJ,IAAIgN,IAGlCzC,QAAQU,IAAI,8CAA8CW,OAAOmB,EAAS,eAE1ErE,GACA5I,KAAK4I,kBACb,EAUA4H,EAAiB3I,UAAUmB,UAAY,SAAUC,GAK7C,OAJAjJ,KAAKgI,WAAW9H,IAAI+I,GACpBjJ,KAAKyI,kBAAkBvI,IAAI+I,GAC3BjJ,KAAK2I,gBAAgBzI,IAAI+I,GACzBjJ,KAAKiI,SAAS/H,IAAI+I,GACXjJ,IACX,EAUAwQ,EAAiB3I,UAAUtG,KAAO,SAAU0H,GACxC,OAAOjJ,KAAKgJ,UAAUC,EAC1B,EAUAuH,EAAiB3I,UAAUkF,QAAU,WACjC,IAAIiM,EAAMhZ,KAAKgI,WAMf,OALAhI,KAAKgI,WAAahI,KAAKiI,SACvBjI,KAAKiI,SAAW+Q,EAChBA,EAAMhZ,KAAKyI,kBACXzI,KAAKyI,kBAAoBzI,KAAK2I,gBAC9B3I,KAAK2I,gBAAkBqQ,EAChBhZ,IACX,EAgBAwQ,EAAiB3I,UAAUM,UAAY,WACnC,OAAOnI,KAAKoP,SAChB,EAaAoB,EAAiB3I,UAAUe,iBAAmB,WAC1C,IAAIkL,EAAS9T,KAAKgI,WAAW4C,QACzBqO,EAAS,IAAIhS,EAAS+G,OAAO,EAAG,GAChCkL,EAAY,EAAMlZ,KAAK4Y,eAE3B5Y,KAAK6Y,aAAe,GAEpB7Y,KAAK6Y,aAAazY,KAAKJ,KAAKgI,YAC5BhI,KAAK8Y,eAAiB,GAItB,IAHA,IAEIK,EAFAC,EAAY,EACZtO,EAAI,EAEDA,GAAK,GACRmO,EAASjZ,KAAKoK,WAAWU,GAEzB9K,KAAK6Y,aAAazY,KAAK6Y,GAEvBE,EAAYrF,EAAOzJ,SAAS4O,GAC5BjZ,KAAK8Y,eAAe1Y,KAAK+Y,GACzBC,GAAaD,EACbrF,EAASmF,EACTnO,GAAKoO,EAETlZ,KAAKoP,UAAYgK,CACrB,EAcA5I,EAAiB3I,UAAU+B,YAAc,SAAUC,GAE/C,IACIkF,EAAS,CAAEjE,EAAG,EAAGuO,MAAO,EAAKC,MAAO,GACpCC,EAAY,EAChB,GACIxK,EAAS/O,KAAKwZ,yBAAyB3P,EAAGkF,EAAOsK,MAAOtK,EAAOuK,MAAOtZ,KAAK4Y,gBAC3EW,UAEKA,EAAY,GAAKvZ,KAAKoK,WAAW2E,EAAOsK,OAAOhP,SAASrK,KAAKoK,WAAW2E,EAAOuK,QAPnE,GAQrB,OAAOvK,EAAOjE,CAClB,EAeA0F,EAAiB3I,UAAU2R,yBAA2B,SAAU3P,EAAG4P,EAAQC,EAAMC,GAK7E,IAJA,IAAI7P,GAAY,EACZC,EAAU,EACVe,EAAI,EACJ8O,EAAQF,EAAOD,EACVnZ,EAAI,EAAGA,GAAKqZ,EAAWrZ,IAAK,CACjCwK,EAAI2O,EAASG,GAAStZ,EAAIqZ,GAC1B,IACI3P,EADOhK,KAAKoK,WAAWU,GACXT,SAASR,KACR,GAAbC,GAAkBE,EAAOD,KACzBD,EAAWxJ,EACXyJ,EAAUC,EAElB,CACA,MAAO,CACHc,EAAG2O,EAASG,GAAS9P,EAAW6P,GAChCN,MAAOI,EAASG,GAASna,KAAK6K,IAAI,EAAGR,EAAW,GAAK6P,GACrDL,MAAOG,EAASG,GAASna,KAAK8K,IAAIoP,EAAW7P,EAAW,GAAK6P,GAErE,EAaAnJ,EAAiB3I,UAAUyG,UAAY,WAGnC,IAAIuL,EAAUrJ,EAAiBsJ,MAAMC,gBAAgB/Z,KAAKgI,WAAWrI,EAAGK,KAAKyI,kBAAkB9I,EAAGK,KAAK2I,gBAAgBhJ,EAAGK,KAAKiI,SAAStI,GACpIqa,EAAKH,EAAQtP,IACb0P,EAAKJ,EAAQvP,IACb4P,EAAU1J,EAAiBsJ,MAAMC,gBAAgB/Z,KAAKgI,WAAWpI,EAAGI,KAAKyI,kBAAkB7I,EAAGI,KAAK2I,gBAAgB/I,EAAGI,KAAKiI,SAASrI,GACpIua,EAAKD,EAAQ3P,IACb6P,EAAKF,EAAQ5P,IACjB,OAAOxD,EAAS6H,OAAO2D,oBAAoB,CACvC,CAAE3S,EAAGqa,EAAIpa,EAAGua,GACZ,CAAExa,EAAGqa,EAAIpa,EAAGwa,GACZ,CAAEza,EAAGsa,EAAIra,EAAGwa,GACZ,CAAEza,EAAGsa,EAAIra,EAAGua,IAEpB,EAYA3J,EAAiB3I,UAAUqB,cAAgB,WACvC,OAAOlJ,KAAKgI,UAChB,EAWAwI,EAAiB3I,UAAUwB,YAAc,WACrC,OAAOrJ,KAAKiI,QAChB,EAWAuI,EAAiB3I,UAAUsB,qBAAuB,WAC9C,OAAOnJ,KAAKyI,iBAChB,EAWA+H,EAAiB3I,UAAUuB,mBAAqB,WAC5C,OAAOpJ,KAAK2I,eAChB,EAUA6H,EAAiB3I,UAAUwS,aAAe,SAAUC,GAChD,GAAIA,GAAMta,KAAKmH,YACX,OAAOnH,KAAKgI,WAChB,GAAIsS,GAAMta,KAAKsH,UACX,OAAOtH,KAAKiI,SAChB,GAAIqS,GAAMta,KAAKoH,oBACX,OAAOpH,KAAKyI,kBAChB,GAAI6R,GAAMta,KAAKqH,kBACX,OAAOrH,KAAK2I,gBAChB,MAAM,IAAImG,MAAM,qBAAqBhD,OAAOwO,EAAI,MACpD,EAaA9J,EAAiB3I,UAAUuC,WAAa,SAAUU,GAa9C,IAAInL,EAAI6Q,EAAiBsJ,MAAMS,UAAUva,KAAKgI,WAAWrI,EAAGK,KAAKyI,kBAAkB9I,EAAGK,KAAK2I,gBAAgBhJ,EAAGK,KAAKiI,SAAStI,EAAGmL,GAC3HlL,EAAI4Q,EAAiBsJ,MAAMS,UAAUva,KAAKgI,WAAWpI,EAAGI,KAAKyI,kBAAkB7I,EAAGI,KAAK2I,gBAAgB/I,EAAGI,KAAKiI,SAASrI,EAAGkL,GAC/H,OAAO,IAAI7D,EAAS+G,OAAOrO,EAAGC,EAClC,EAaA4Q,EAAiB3I,UAAU2C,SAAW,SAAUL,GAC5C,OAAOnK,KAAKoK,WAAWD,EAAInK,KAAKoP,UACpC,EAYAoB,EAAiB3I,UAAUkD,aAAe,SAAUD,GAChD,IAAIyJ,EAAIvU,KAAKkJ,gBACTqF,EAAIvO,KAAKmJ,uBACTqR,EAAIxa,KAAKoJ,qBACTkL,EAAItU,KAAKqJ,cAEToR,EAAK3P,EAAIA,EAET4P,EAAM,EAAI,EAAI5P,EAAI2P,EAClBE,GAAM,EAAIpG,EAAE5U,EAAI+a,EAAMnM,EAAE5O,GAAK,EAAI+a,EAAM,GAAK5P,EAAI2P,IAAOD,EAAE7a,GAAK,GAAKmL,EAAI2P,GAAM,EAAIA,GAAM,EAAInG,EAAE3U,EAAI8a,EACjGG,GAAM,EAAIrG,EAAE3U,EAAI8a,EAAMnM,EAAE3O,GAAK,EAAI8a,EAAM,GAAK5P,EAAI2P,IAAOD,EAAE5a,GAAK,GAAKkL,EAAI2P,GAAM,EAAIA,GAAM,EAAInG,EAAE1U,EAAI6a,EAErG,OAAO,IAAIxT,EAAS+G,OAAO2M,EAAIC,EACnC,EAcApK,EAAiB3I,UAAUgT,UAAY,SAAUC,GAC7C,OAAO9a,KAAK+a,YAAY/a,KAAKgb,WAAWF,GAC5C,EAWAtK,EAAiB3I,UAAUkT,YAAc,SAAUjQ,GAC/C,IAAImQ,EAAiBzK,EAAiBsJ,MAAMoB,oBAAoBlb,KAAM8K,EAAG,GAMzE,OALA9K,KAAKgI,WAAWqG,IAAI4M,EAAe,IACnCjb,KAAKyI,kBAAkB4F,IAAI4M,EAAe,IAC1Cjb,KAAKiI,SAASoG,IAAI4M,EAAe,IACjCjb,KAAK2I,gBAAgB0F,IAAI4M,EAAe,IACxCjb,KAAK4I,mBACE5I,IACX,EAcAwQ,EAAiB3I,UAAUsT,QAAU,SAAUL,GAC3C,OAAO9a,KAAKob,UAAUpb,KAAKgb,WAAWF,GAC1C,EAWAtK,EAAiB3I,UAAUuT,UAAY,SAAUtQ,GAC7C,IAAImQ,EAAiBzK,EAAiBsJ,MAAMoB,oBAAoBlb,KAAM,EAAK8K,GAM3E,OALA9K,KAAKgI,WAAWqG,IAAI4M,EAAe,IACnCjb,KAAKyI,kBAAkB4F,IAAI4M,EAAe,IAC1Cjb,KAAKiI,SAASoG,IAAI4M,EAAe,IACjCjb,KAAK2I,gBAAgB0F,IAAI4M,EAAe,IACxCjb,KAAK4I,mBACE5I,IACX,EAaAwQ,EAAiB3I,UAAUwT,YAAc,SAAUC,EAAQC,GACvD,OAAOvb,KAAK4M,cAAc5M,KAAKgb,WAAWM,GAAStb,KAAKgb,WAAWO,GACvE,EAaA/K,EAAiB3I,UAAU+E,cAAgB,SAAU6M,EAAQC,GAEzD,IAAIuB,EAAiBzK,EAAiBsJ,MAAMoB,oBAAoBlb,KAAMyZ,EAAQC,GAC9E,OAAO,IAAIlJ,EAAiByK,EAAe,GAAIA,EAAe,GAAIA,EAAe,GAAIA,EAAe,GACxG,EAUAzK,EAAiB3I,UAAUmT,WAAa,SAAU7Q,GAC9C,OAAO1K,KAAK6K,IAAI,EAAK7K,KAAK8K,IAAI,EAAKJ,EAAInK,KAAKoP,WAChD,EAYAoB,EAAiB3I,UAAUmD,WAAa,SAAUb,GAC9C,OAAOnK,KAAK+K,aAAa/K,KAAKgb,WAAW7Q,GAC7C,EAYAqG,EAAiB3I,UAAUqD,iBAAmB,SAAUf,GACpD,OAAOnK,KAAKiL,mBAAmBjL,KAAKgb,WAAW7Q,GACnD,EAYAqG,EAAiB3I,UAAUoD,mBAAqB,SAAUH,GACtD,IAAI0Q,EAAgBxb,KAAK+K,aAAaD,GACtC,OAAO,IAAI7D,EAAS+G,OAAOwN,EAAc5b,GAAI4b,EAAc7b,EAC/D,EASA6Q,EAAiB3I,UAAU+C,MAAQ,WAC/B,OAAO,IAAI4F,EAAiBxQ,KAAKkJ,gBAAgB0B,QAAS5K,KAAKqJ,cAAcuB,QAAS5K,KAAKmJ,uBAAuByB,QAAS5K,KAAKoJ,qBAAqBwB,QACzJ,EASA4F,EAAiB3I,UAAU4T,gBAAkB,WACzC,OAAOzb,KAAKyI,iBAChB,EAQA+H,EAAiB3I,UAAU6T,cAAgB,WACvC,OAAO1b,KAAK2I,eAChB,EAYA6H,EAAiB3I,UAAU2D,kBAAoB,SAAUC,EAAMC,GAC3D,IAAIoK,EAAQ9V,UACe,IAAvB0L,IAAiCA,GAAqB,GAC1D,IACIiQ,EADiB3b,KAAK4b,mBAAmBnQ,GACLsK,KAAI,SAAUjL,GAClD,OAAOgL,EAAM1L,WAAWU,EAC5B,IACA,OAAIY,EAEOiQ,EAAmB/F,QAAO,SAAUpD,GAAQ,OAAO/G,EAAKoK,SAASrD,GAAM,EAAO,IAG9EmJ,CAEf,EAUAnL,EAAiB3I,UAAUkE,yBAA2B,SAAUN,EAAMC,GAClE,IAAIoK,EAAQ9V,UACe,IAAvB0L,IAAiCA,GAAqB,GAC1D,IACImQ,EADiB7b,KAAK4b,mBAAmBnQ,GACHsK,KAAI,SAAUjL,GACpD,IAAI9C,EAAa8N,EAAM1L,WAAWU,GAC9B7C,EAAW6N,EAAM/K,aAAaD,GAClC,OAAO,IAAIsI,EAASW,OAAO/L,EAAYC,EAAS/H,IAAI8H,GACxD,IACA,OAAI0D,EACOmQ,EAAqBjG,QAAO,SAAUkG,GAAO,OAAOrQ,EAAKoK,SAASiG,EAAIvH,GAAG,EAAO,IAGhFsH,CAEf,EAEArL,EAAiB3I,UAAU+T,mBAAqB,SAAUnQ,GACtD,IAAIsQ,EAAItQ,EAAK8C,EAAE3O,EAAI6L,EAAK8I,EAAE3U,EACtBoc,EAAIvQ,EAAK8I,EAAE5U,EAAI8L,EAAK8C,EAAE5O,EACtBsc,EAAIxQ,EAAK8I,EAAE5U,GAAK8L,EAAK8I,EAAE3U,EAAI6L,EAAK8C,EAAE3O,GAAK6L,EAAK8I,EAAE3U,GAAK6L,EAAK8C,EAAE5O,EAAI8L,EAAK8I,EAAE5U,GAGrEuc,EAAK1L,EAAiBsJ,MAAMqC,aAAanc,KAAKgI,WAAWrI,EAAGK,KAAKyI,kBAAkB9I,EAAGK,KAAK2I,gBAAgBhJ,EAAGK,KAAKiI,SAAStI,GAC5Hyc,EAAK5L,EAAiBsJ,MAAMqC,aAAanc,KAAKgI,WAAWpI,EAAGI,KAAKyI,kBAAkB7I,EAAGI,KAAK2I,gBAAgB/I,EAAGI,KAAKiI,SAASrI,GAC5Hyc,EAAOjM,MAAM,GAMjB,OALAiM,EAAK,GAAKN,EAAIG,EAAG,GAAKF,EAAII,EAAG,GAC7BC,EAAK,GAAKN,EAAIG,EAAG,GAAKF,EAAII,EAAG,GAC7BC,EAAK,GAAKN,EAAIG,EAAG,GAAKF,EAAII,EAAG,GAC7BC,EAAK,GAAKN,EAAIG,EAAG,GAAKF,EAAII,EAAG,GAAKH,EACtBzL,EAAiBsJ,MAAMwC,WAAWD,GACjCzG,QAAO,SAAU2G,GAAQ,OAAgB,GAATA,CAAY,GAC7D,EAcA/L,EAAiB3I,UAAUS,OAAS,SAAUP,GAG1C,QAAKA,MAEAA,EAAMC,YAAeD,EAAME,UAAaF,EAAMU,mBAAsBV,EAAMY,kBAEvE3I,KAAKgI,WAAWM,OAAOP,EAAMC,aACjChI,KAAKiI,SAASK,OAAOP,EAAME,WAC3BjI,KAAKyI,kBAAkBH,OAAOP,EAAMU,oBACpCzI,KAAK2I,gBAAgBL,OAAOP,EAAMY,gBAC1C,EAMA6H,EAAiB3I,UAAUtB,QAAU,WACjCvG,KAAKgI,WAAWzB,UAChBvG,KAAKiI,SAAS1B,UACdvG,KAAKyI,kBAAkBlC,UACvBvG,KAAK2I,gBAAgBpC,UACrBvG,KAAKuP,aAAc,CACvB,EAWAiB,EAAiBC,WAAa,SAAUT,GAapC,OAAOA,aAAeQ,CAC1B,EAUAA,EAAiB3I,UAAU6H,OAAS,SAAUC,GA4B1C,MA3BiB,MACZA,EAAe,OAAS,IACzB,mBACA3P,KAAKkJ,gBAAgBvJ,EACrB,IACAK,KAAKkJ,gBAAgBtJ,EACrB,OACC+P,EAAe,OAAS,IACzB,iBACA3P,KAAKqJ,cAAc1J,EACnB,IACAK,KAAKqJ,cAAczJ,EACnB,OACC+P,EAAe,OAAS,IACzB,yBACA3P,KAAKmJ,uBAAuBxJ,EAC5B,IACAK,KAAKmJ,uBAAuBvJ,EAC5B,OACC+P,EAAe,OAAS,IACzB,wBACA3P,KAAKoJ,qBAAqBzJ,EAC1B,IACAK,KAAKoJ,qBAAqBxJ,EAC1B,KACC+P,EAAe,OAAS,IACzB,IAER,EAWAa,EAAiBV,SAAW,SAAUC,GAClC,IAAIC,EAAMC,KAAKC,MAAMH,GACrB,OAAOS,EAAiBE,WAAWV,EACvC,EAWAQ,EAAiBE,WAAa,SAAUV,GACpC,GAAmB,iBAARA,EACP,KAAM,8BACV,IAAKA,EAAIhI,WACL,KAAM,sCACV,IAAKgI,EAAI/H,SACL,KAAM,oCACV,IAAK+H,EAAIvH,kBACL,KAAM,6CACV,IAAKuH,EAAIrH,gBACL,KAAM,2CACV,OAAO,IAAI6H,EAAiB,IAAIvJ,EAAS+G,OAAOgC,EAAIhI,WAAW,GAAIgI,EAAIhI,WAAW,IAAK,IAAIf,EAAS+G,OAAOgC,EAAI/H,SAAS,GAAI+H,EAAI/H,SAAS,IAAK,IAAIhB,EAAS+G,OAAOgC,EAAIvH,kBAAkB,GAAIuH,EAAIvH,kBAAkB,IAAK,IAAIxB,EAAS+G,OAAOgC,EAAIrH,gBAAgB,GAAIqH,EAAIrH,gBAAgB,IAC3R,EAUA6H,EAAiB3D,UAAY,SAAU4C,GACnC,IAAKW,MAAMC,QAAQZ,GACf,KAAM,8BACV,GAAkB,GAAdA,EAAIlP,OACJ,KAAM,gDACV,OAAO,IAAIiQ,EAAiBf,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAC5D,EAEAe,EAAiBrJ,YAAc,EAE/BqJ,EAAiBpJ,oBAAsB,EAEvCoJ,EAAiBnJ,kBAAoB,EAErCmJ,EAAiBlJ,UAAY,EAI7BkJ,EAAiBsJ,MAAQ,CACrBS,UAAW,SAAUnG,EAAIC,EAAII,EAAI+H,EAAI1R,GACjC,OAAOsJ,EAAK3U,KAAK0O,IAAI,EAAMrD,EAAG,GACrB,EAALuJ,EAASvJ,EAAIrL,KAAK0O,IAAI,EAAMrD,EAAG,GAC1B,EAAL2J,EAAShV,KAAK0O,IAAIrD,EAAG,IAAM,EAAMA,GACjC0R,EAAK/c,KAAK0O,IAAIrD,EAAG,EACzB,EACAiP,gBAAiB,SAAU3F,EAAIC,EAAII,EAAI+H,GAWnC,IAAIC,EAAQjM,EAAiBsJ,MAAM4C,UAAUtI,EAC7CC,EACAI,EACA+H,GAEIjI,EAAIkI,EAAM,GACVlO,EAAIkO,EAAM,GAIVE,GAHIF,EAAM,GAGHA,EAAM,GAAKA,EAAM,GAAK,EAAIA,EAAM,GAAKA,EAAM,IAQlDzC,EAAKva,KAAK8K,IAAIiS,EAAIpI,GAClB6F,EAAKxa,KAAK6K,IAAIkS,EAAIpI,GAGtB,GAAIuI,GAAQ,EAAG,CACX,IAAIC,IAAOrO,EAAI9O,KAAKC,KAAKid,KAAU,EAAIpI,GAEvC,GAAIqI,EAAK,GAAKA,EAAK,EAAG,CAGlB,IAAInZ,EAAK+M,EAAiBsJ,MAAMS,UAAUnG,EAAIC,EAAII,EAAI+H,EAAII,GACtDnZ,EAAKuW,IACLA,EAAKvW,GACLA,EAAKwW,IACLA,EAAKxW,EACb,CACA,IAAIgX,IAAOlM,EAAI9O,KAAKC,KAAKid,KAAU,EAAIpI,GAEvC,GAAIkG,EAAK,GAAKA,EAAK,EAAG,CAGlB,IAAI/W,EAAK8M,EAAiBsJ,MAAMS,UAAUnG,EAAIC,EAAII,EAAI+H,EAAI/B,GACtD/W,EAAKsW,IACLA,EAAKtW,GACLA,EAAKuW,IACLA,EAAKvW,EACb,CACJ,CACA,MAAO,CAAE6G,IAAKyP,EAAI1P,IAAK2P,EAC3B,EAcAiB,oBAAqB,SAAUnT,EAAO0R,EAAQC,GAC1C,IAAImD,EAAW,IAAIzJ,EAASW,OAAOhM,EAAMqC,WAAWqP,GAAS1R,EAAMgD,aAAa0O,IAC5EqD,EAAS,IAAI1J,EAASW,OAAOhM,EAAMqC,WAAWsP,GAAO3R,EAAMgD,aAAa2O,GAAMqD,OAOlF,OALAF,EAAStO,EAAErO,IAAI2c,EAAStI,GACxBuI,EAAOvO,EAAErO,IAAI4c,EAAOvI,GAEpBsI,EAASvT,MAAM,WAAcoQ,EAAOD,IACpCqD,EAAOxT,MAAM,WAAcoQ,EAAOD,IAC3B,CAACoD,EAAStI,EAAGuI,EAAOvI,EAAGsI,EAAStO,EAAGuO,EAAOvO,EACrD,EAaA+N,WAAY,SAAUD,GAClB,IAOIW,EAAGC,EAPH1I,EAAI8H,EAAK,GAITN,EAHIM,EAAK,GAGD9H,EACRyH,EAHIK,EAAK,GAGD9H,EACR0H,EAHII,EAAK,GAGD9H,EAER2I,GAAK,EAAIlB,EAAIvc,KAAK0O,IAAI4N,EAAG,IAAM,EAC/BoB,GAAK,EAAIpB,EAAIC,EAAI,GAAKC,EAAI,EAAIxc,KAAK0O,IAAI4N,EAAG,IAAM,GAChDqB,EAAI3d,KAAK0O,IAAI+O,EAAG,GAAKzd,KAAK0O,IAAIgP,EAAG,GACjCE,EAAK,GACT,GAAID,GAAK,EAELJ,EAAIxM,EAAiBsJ,MAAMwD,IAAIH,EAAI1d,KAAKC,KAAK0d,IAAM3d,KAAK0O,IAAI1O,KAAK2E,IAAI+Y,EAAI1d,KAAKC,KAAK0d,IAAK,EAAI,GAC5FH,EAAIzM,EAAiBsJ,MAAMwD,IAAIH,EAAI1d,KAAKC,KAAK0d,IAAM3d,KAAK0O,IAAI1O,KAAK2E,IAAI+Y,EAAI1d,KAAKC,KAAK0d,IAAK,EAAI,GAC5FC,EAAG,IAAMtB,EAAI,GAAKiB,EAAIC,GACtBI,EAAG,IAAMtB,EAAI,GAAKiB,EAAIC,GAAK,EAC3BI,EAAG,IAAMtB,EAAI,GAAKiB,EAAIC,GAAK,EAGjB,GAFLxd,KAAK2E,IAAK3E,KAAKC,KAAK,IAAMsd,EAAIC,GAAM,KAGrCI,EAAG,IAAM,EACTA,EAAG,IAAM,OAGZ,CACD,IAAIE,EAAK9d,KAAK6F,KAAK6X,EAAI1d,KAAKC,MAAMD,KAAK0O,IAAI+O,EAAG,KAC9CG,EAAG,GAAK,EAAI5d,KAAKC,MAAMwd,GAAKzd,KAAKwW,IAAIsH,EAAK,GAAKxB,EAAI,EACnDsB,EAAG,GAAK,EAAI5d,KAAKC,MAAMwd,GAAKzd,KAAKwW,KAAKsH,EAAK,EAAI9d,KAAKgG,IAAM,GAAKsW,EAAI,EACnEsB,EAAG,GAAK,EAAI5d,KAAKC,MAAMwd,GAAKzd,KAAKwW,KAAKsH,EAAK,EAAI9d,KAAKgG,IAAM,GAAKsW,EAAI,CAEvE,CAEA,OAAOsB,EAAGzH,QAAO,SAAU9K,GAAK,OAAOA,GAAK,GAAKA,GAAK,CAAK,IAAG0S,MAClE,EAUArB,aAAc,SAAU/H,EAAIC,EAAII,EAAI+H,GAChC,IAAIiB,EAAS,CAACC,IAAKA,IAAKA,IAAKA,KAK7B,OAJAD,EAAO,GAAW,EAAIpJ,EAATD,GAAe,EAAIK,EAAK+H,EACrCiB,EAAO,GAAK,EAAIrJ,EAAK,EAAIC,EAAK,EAAII,EAClCgJ,EAAO,IAAM,EAAIrJ,EAAK,EAAIC,EAC1BoJ,EAAO,GAAKrJ,EACLqJ,CACX,EAUAf,UAAW,SAAUtI,EAAIC,EAAII,EAAI+H,GAC7B,MAAO,CACH,EAAIA,EAAK,EAAI/H,EAAK,EAAIJ,EAAK,EAAID,EAC/B,EAAIA,EAAK,GAAKC,EAAK,EAAII,EACvB,EAAIJ,EAAK,EAAID,EAErB,EAIAkJ,IAAK,SAAU3d,GACX,OAAOA,EAAI,GAAO,EAAI,CAC1B,GAEG6Q,CACX,CA1+BqC,GA2+BrC7J,EAAQ6J,iBAAmBA,C,cCvhC3B/J,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQgX,UAAO,EAUf,IAAIA,EAAsB,WAStB,SAASA,EAAKhU,EAAQiU,GAClB5d,KAAK2J,OAASA,EACd3J,KAAK4d,KAAOA,CAChB,CAkDA,OA7CAD,EAAK7D,MAAQ,CAeT+D,QAAS,SAAUC,EAAMC,GAAO,OAAOte,KAAK0L,IAAI2S,GAAQre,KAAK0L,IAAI4S,EAAM,EAkBvEC,eAAgB,SAAUC,EAAc3U,GACpC,IAAI4U,EAAK,EAQT,OAPI5U,GAAS,GACT4U,EAAKze,KAAK2E,IAAI3E,KAAK0e,MAAM,EAAIR,EAAK7D,MAAM+D,QAAQI,EAAc3U,KAC9D4U,EAAK,EAAIze,KAAK0O,IAAI8P,EAAcC,IAGhCA,EAAKze,KAAK2E,IAAI3E,KAAK0e,MAAMR,EAAK7D,MAAM+D,QAAQ,EAAII,EAAc,GAAK3U,EAAQ,MAExE4U,CACX,GAEGP,CACX,CA/DyB,GAgEzBhX,EAAQgX,KAAOA,C,cC1EflX,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQyX,gBAAa,EAkBrB,IAAIA,EAA4B,WAU5B,SAASA,EAAW/F,GAChBrY,KAAKqe,cAAgB,GACrBre,KAAKse,eAAiB,GACtBte,KAAKue,YAAc,GACnBve,KAAKwe,UAAY,CAAC,EAClBnG,EAAUA,GAAW,CAAC,EACtBrY,KAAKkB,QAAUmX,EAAQnX,QAAUmX,EAAQnX,QAAU+B,WACnDjD,KAAKqe,cAAgB,GACrBre,KAAKse,eAAiB,GACtBte,KAAKue,YAAc,GACnBve,KAAKwe,UAAY,GAIjBxe,KAAKye,aAAepG,EAAQqG,WAAY,EAExC1e,KAAK2e,kBACT,CAmXA,OA5WAP,EAAWvW,UAAU+W,UAAY,SAAUla,EAAOma,GAC9C,IAAIC,GAAc,EAClB,IAAK,IAAIxe,KAAKue,EAAW,CACrB,IAAIE,EAAMF,EAAUve,GAChBye,EAAIC,SAAWta,EAAMsa,UAEzBD,EAAIE,SAASva,GACboa,GAAc,EAClB,CACA,OAAOA,CACX,EAaAV,EAAWvW,UAAUqX,cAAgB,SAAUC,EAAGhf,IAC1CA,EAAQye,UAAUO,EAAGhf,EAAQke,gBAAkBle,EAAQse,gBAEvDte,EAAQqe,UAAUW,EAAEH,SAAW,OAEvC,EAaAZ,EAAWvW,UAAUuX,eAAiB,SAAUD,EAAGhf,GAC/CA,EAAQye,UAAUO,EAAGhf,EAAQme,eACjC,EAaAF,EAAWvW,UAAUwX,YAAc,SAAUF,EAAGhf,IACxCA,EAAQye,UAAUO,EAAGhf,EAAQoe,cAAgBpe,EAAQse,sBAE9Cte,EAAQqe,UAAUW,EAAEH,QAEnC,EAIAZ,EAAWkB,SAAW,SAAUC,GAC5B,GAAkB,iBAAPA,EACP,OAAOA,EACX,GAAkB,iBAAPA,EACP,KAAM,iEAAmEA,EAC7E,GAAInB,EAAWoB,UAAUD,GACrB,OAAOnB,EAAWoB,UAAUD,GAChC,KAAM,0CAA4CA,CACtD,EAOAnB,EAAWvW,UAAU8W,iBAAmB,WACpC,IAAI3a,EAAQhE,KACZA,KAAKkB,QAAQQ,iBAAiB,UAAY1B,KAAKyf,iBAAmB,SAAUN,GACxEnb,EAAMkb,cAAcC,EAAGnb,EAC3B,GACAhE,KAAKkB,QAAQQ,iBAAiB,WAAa1B,KAAK0f,kBAAoB,SAAUP,GAC1Enb,EAAMob,eAAeD,EAAGnb,EAC5B,GACAhE,KAAKkB,QAAQQ,iBAAiB,QAAU1B,KAAK2f,eAAiB,SAAUR,GACpEnb,EAAMqb,YAAYF,EAAGnb,EACzB,EACJ,EAIAoa,EAAWvW,UAAU+X,iBAAmB,WACpC5f,KAAKkB,QAAQsF,oBAAoB,UAAWxG,KAAKyf,kBACjDzf,KAAKkB,QAAQsF,oBAAoB,WAAYxG,KAAK0f,mBAClD1f,KAAKkB,QAAQsF,oBAAoB,QAASxG,KAAK2f,eACnD,EAaAvB,EAAWvW,UAAUgY,KAAO,SAAUN,EAAKN,GAEvC,OADAjf,KAAKqe,cAAcje,KAAK,CAAEmf,IAAKA,EAAKP,QAASZ,EAAWkB,SAASC,GAAMN,SAAUA,IAC1Ejf,IACX,EAaAoe,EAAWvW,UAAUiY,MAAQ,SAAUP,EAAKN,GAExC,OADAjf,KAAKse,eAAele,KAAK,CAAEmf,IAAKA,EAAKP,QAASZ,EAAWkB,SAASC,GAAMN,SAAUA,IAC3Ejf,IACX,EAaAoe,EAAWvW,UAAUkY,GAAK,SAAUR,EAAKN,GAErC,OADAjf,KAAKue,YAAYne,KAAK,CAAEmf,IAAKA,EAAKP,QAASZ,EAAWkB,SAASC,GAAMN,SAAUA,IACxEjf,IACX,EAMAoe,EAAWvW,UAAUmY,OAAS,SAAUT,GACpC,MAAkB,iBAAPA,IACAvf,KAAKwe,UAAUe,KAEfvf,KAAKwe,UAAUJ,EAAWkB,SAASC,GAClD,EAMAnB,EAAWvW,UAAUtB,QAAU,WAC3BvG,KAAK4f,kBACT,EAMAxB,EAAWoB,UAAY,CACnB,MAAS,EACT,UAAa,EAEb,IAAO,EACP,MAAS,GACT,MAAS,GACT,MAAS,GACT,KAAQ,GACR,IAAO,GACP,MAAS,GAET,SAAY,GACZ,OAAU,GACV,MAAS,GACT,OAAU,GACV,WAAc,GACd,iBAAkB,GAClB,SAAY,GACZ,OAAU,GACV,SAAY,GACZ,IAAO,GACP,KAAQ,GACR,UAAa,GACb,QAAW,GACX,WAAc,GACd,UAAa,GACb,OAAU,GACV,MAAS,GACT,QAAW,GACX,YAAe,GACf,OAAU,GACV,OAAU,GACV,KAAQ,GACR,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,IAAK,GACL,sBAAuB,GACvB,OAAU,GACV,IAAK,GACL,mBAAoB,GACpB,EAAK,GACL,cAAe,GACf,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,QAAW,GACX,YAAe,GACf,iBAAoB,GACpB,eAAkB,GAClB,YAAe,GACf,aAAgB,GAChB,MAAS,GACT,QAAW,GACX,QAAW,GACX,QAAW,GACX,QAAW,GACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,SAAY,IACZ,IAAO,IACP,aAAgB,IAChB,SAAY,IACZ,aAAgB,IAChB,OAAU,IACV,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,QAAW,IACX,WAAc,IACd,IAAK,IACL,IAAK,IAEL,IAAK,IACL,EAAK,IACL,EAAK,IACL,aAAgB,IAChB,YAAe,IACf,QAAW,IACX,aAAgB,IAChB,IAAK,IACL,MAAO,IAEP,MAAS,IAGT,oBAAuB,IACvB,oBAAuB,IACvB,KAAQ,IACR,SAAY,IACZ,KAAQ,IACR,aAAc,IACd,MAAS,IACT,KAAQ,IACR,OAAU,IAGV,UAAa,IACb,EAAK,IACL,MAAS,IACT,MAAS,IACT,KAAQ,IACR,OAAU,IACV,aAAgB,IAChB,EAAK,IACL,eAAgB,IAEhB,EAAK,IACL,EAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAEL,YAAe,IACf,UAAa,IACb,aAAgB,IAChB,EAAK,IACL,YAAe,IACf,EAAK,IACL,EAAK,IACL,IAAK,IAEL,MAAS,IAET,oBAAqB,IACrB,YAAe,IACf,SAAY,IACZ,aAAgB,IAChB,SAAY,IACZ,SAAY,IACZ,aAAc,IACd,aAAc,IACd,MAAS,IACT,eAAkB,IAClB,eAAkB,KAEfpB,CACX,CA/Y+B,GAgZ/BzX,EAAQyX,WAAaA,C,sBCvZrB,IACQ6B,EADJC,EAAalgB,MAAQA,KAAKkgB,YACtBD,EAAgB,SAAU3L,EAAG/F,GAI7B,OAHA0R,EAAgBxZ,OAAO0Z,gBAClB,CAAEC,UAAW,cAAgBhQ,OAAS,SAAUkE,EAAG/F,GAAK+F,EAAE8L,UAAY7R,CAAG,GAC1E,SAAU+F,EAAG/F,GAAK,IAAK,IAAI1E,KAAK0E,EAAO9H,OAAOoB,UAAUwY,eAAeC,KAAK/R,EAAG1E,KAAIyK,EAAEzK,GAAK0E,EAAE1E,GAAI,EAC7FoW,EAAc3L,EAAG/F,EAC5B,EACO,SAAU+F,EAAG/F,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIgS,UAAU,uBAAyBC,OAAOjS,GAAK,iCAE7D,SAASkS,IAAOzgB,KAAKF,YAAcwU,CAAG,CADtC2L,EAAc3L,EAAG/F,GAEjB+F,EAAEzM,UAAkB,OAAN0G,EAAa9H,OAAOia,OAAOnS,IAAMkS,EAAG5Y,UAAY0G,EAAE1G,UAAW,IAAI4Y,EACnF,GAEJha,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQmO,UAAO,EACf,IAAIhO,EAAW,EAAQ,IACnBsM,EAAW,EAAQ,IACnBuN,EAAc,EAAQ,KACtB1Z,EAAW,EAAQ,KASnB6N,EAAsB,SAAU8L,GAUhC,SAAS9L,EAAKP,EAAGhG,GACb,IAAIuH,EAAQ8K,EAAON,KAAKtgB,KAAMuU,EAAGhG,GAAG,SAAUgG,EAAGhG,GAAK,OAAO,IAAIuG,EAAKP,EAAGhG,EAAI,KAAMvO,KAKnF,OADA8V,EAAM5O,UAAY,OACX4O,CACX,CAgJA,OAhKAoK,EAAUpL,EAAM8L,GA2BhB9L,EAAKjN,UAAUgZ,aAAe,SAAUpV,GACpC,IAAIqV,EAAc9gB,KAAK8gB,YAAYrV,GACnC,GAAmB,GAAfqV,EACA,OAAO,KAEX,IAAIvM,EAAIvU,KAAKuU,EAAE3U,EAAI6L,EAAK8I,EAAE3U,EACtB2O,EAAIvO,KAAKuU,EAAE5U,EAAI8L,EAAK8I,EAAE5U,EACtBohB,GAActV,EAAK8C,EAAE5O,EAAI8L,EAAK8I,EAAE5U,GAAK4U,GAAK9I,EAAK8C,EAAE3O,EAAI6L,EAAK8I,EAAE3U,GAAK2O,EACjEyS,GAAchhB,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAK4U,GAAKvU,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAAK2O,EACrEgG,EAAIwM,EAAaD,EACjBvS,EAAIyS,EAAaF,EAEjB,IAAInhB,EAAIK,KAAKuU,EAAE5U,EAAI4U,GAAKvU,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GACtCC,EAAII,KAAKuU,EAAE3U,EAAI2U,GAAKvU,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAC1C,OAAIqhB,MAAM1M,IAAM0M,MAAMthB,IAAMshB,MAAMrhB,GACvB,KAGJ,IAAIqH,EAAS+G,OAAOrO,EAAGC,EAClC,EAUAkV,EAAKjN,UAAUyG,UAAY,WACvB,OAAOxH,EAAS6H,OAAO2D,oBAAoB,CAACtS,KAAKuU,EAAGvU,KAAKuO,GAC7D,EAUAuG,EAAKjN,UAAUqB,cAAgB,WAC3B,OAAOlJ,KAAKuU,CAChB,EAQAO,EAAKjN,UAAUwB,YAAc,WACzB,OAAOrJ,KAAKuO,CAChB,EAQAuG,EAAKjN,UAAU4T,gBAAkB,WAC7B,OAAOzb,KAAKuO,CAChB,EAQAuG,EAAKjN,UAAU6T,cAAgB,WAC3B,OAAO1b,KAAKuU,CAChB,EAQAO,EAAKjN,UAAUkF,QAAU,WACrB,IAAIiM,EAAMhZ,KAAKuU,EAGf,OAFAvU,KAAKuU,EAAIvU,KAAKuO,EACdvO,KAAKuO,EAAIyK,EACFhZ,IACX,EAcA8U,EAAKjN,UAAU2D,kBAAoB,SAAUC,EAAMC,QACpB,IAAvBA,IAAiCA,GAAqB,GAE1D,IAAImV,EAAe7gB,KAAK6gB,aAAapV,GACrC,OAAKoV,GAGD7gB,KAAK6V,SAASgL,GAAc,IAAWnV,IAAsBD,EAAKoK,SAASgL,EAAcnV,GAIlF,GAHA,CAACmV,GAHD,EAQf,EAUA/L,EAAKjN,UAAUkE,yBAA2B,SAAUN,EAAMC,QAC3B,IAAvBA,IAAiCA,GAAqB,GAE1D,IAAIwV,EAAgBlhB,KAAKwL,kBAAkBC,EAAMC,GACjD,GAA6B,IAAzBwV,EAAc3gB,OACd,MAAO,GAEX,IAAI4gB,EAAWD,EAAc,GAC7B,MAAO,CAAC,IAAI9N,EAASW,OAAO/T,KAAKuU,EAAE3J,QAAS5K,KAAKuO,EAAE3D,SAASwW,OAAOD,GACvE,EACOrM,CACX,CAlKyB,CAkKvB6L,EAAYU,WACd1a,EAAQmO,KAAOA,C,oBChMf,IACQmL,EADJC,EAAalgB,MAAQA,KAAKkgB,YACtBD,EAAgB,SAAU3L,EAAG/F,GAI7B,OAHA0R,EAAgBxZ,OAAO0Z,gBAClB,CAAEC,UAAW,cAAgBhQ,OAAS,SAAUkE,EAAG/F,GAAK+F,EAAE8L,UAAY7R,CAAG,GAC1E,SAAU+F,EAAG/F,GAAK,IAAK,IAAI1E,KAAK0E,EAAO9H,OAAOoB,UAAUwY,eAAeC,KAAK/R,EAAG1E,KAAIyK,EAAEzK,GAAK0E,EAAE1E,GAAI,EAC7FoW,EAAc3L,EAAG/F,EAC5B,EACO,SAAU+F,EAAG/F,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIgS,UAAU,uBAAyBC,OAAOjS,GAAK,iCAE7D,SAASkS,IAAOzgB,KAAKF,YAAcwU,CAAG,CADtC2L,EAAc3L,EAAG/F,GAEjB+F,EAAEzM,UAAkB,OAAN0G,EAAa9H,OAAOia,OAAOnS,IAAMkS,EAAG5Y,UAAY0G,EAAE1G,UAAW,IAAI4Y,EACnF,GAEJha,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ2a,aAAe3a,EAAQ4a,YAAc5a,EAAQ6a,iBAAc,EACnE,IAAIA,EAA6B,SAAUZ,GAEvC,SAASY,IACL,OAAkB,OAAXZ,GAAmBA,EAAOhgB,MAAMZ,KAAMa,YAAcb,IAC/D,CACA,OAJAkgB,EAAUsB,EAAaZ,GAIhBY,CACX,CANgC,CAM9BC,YACF9a,EAAQ6a,YAAcA,EACtB,IAAID,EAA6B,SAAUX,GAEvC,SAASW,IACL,OAAkB,OAAXX,GAAmBA,EAAOhgB,MAAMZ,KAAMa,YAAcb,IAC/D,CACA,OAJAkgB,EAAUqB,EAAaX,GAIhBW,CACX,CANgC,CAM9BG,YACF/a,EAAQ4a,YAAcA,EAOtB,IAAID,EAA8B,WA6D9B,SAASA,EAAapgB,EAASygB,GAC3B3hB,KAAK4hB,kBAAeC,EACpB7hB,KAAK8hB,kBAAeD,EAGpB7hB,KAAK+hB,aAAe,EACpB/hB,KAAK6e,UAAY,CAAC,EAClB7e,KAAKgiB,UAAY,CAAC,EAClBhiB,KAAKC,SAAW,CAAC,EAIjBD,KAAK2hB,KAAOA,EACZ3hB,KAAKkB,QAAUA,EACflB,KAAK4hB,kBAAeC,EACpB7hB,KAAK8hB,kBAAeD,EAEpB7hB,KAAK+hB,aAAe,EACpB/hB,KAAK6e,UAAY,CAAC,EAClB7e,KAAKgiB,UAAY,CAAC,EAClBhiB,KAAKC,SAAW,CAAC,EAOjB,IAAI+D,EAAQhE,KACZA,KAAKC,SAAoB,UAAI,SAAUkf,GAC/Bnb,EAAM6a,UAAUoD,WAChBje,EAAM6a,UAAUoD,UAAUje,EAAMke,SAAS/C,EAAG,cAC5Cnb,EAAM8d,cAAgB9d,EAAM6a,UAAUsD,MACtCne,EAAM6a,UAAUsD,KAAKne,EAAMke,SAAS/C,EAAG,SACvCnb,EAAM4d,eACN5d,EAAM8d,aAAe9d,EAAMoe,OAAOjD,GAC1C,EACAnf,KAAKC,SAAkB,QAAI,SAAUkf,GAC7Bnb,EAAM6a,UAAUwD,SAChBre,EAAM6a,UAAUwD,QAAQre,EAAMke,SAAS/C,EAAG,YAC9Cnb,EAAM8d,kBAAeD,EACrB7d,EAAM4d,kBAAeC,EACrB7d,EAAM+d,aAAe,CACzB,EACA/hB,KAAKC,SAAoB,UAAI,SAAUkf,GACnCnb,EAAM8d,aAAe9d,EAAMoe,OAAOjD,GAClCnb,EAAM4d,aAAe5d,EAAMoe,OAAOjD,GAClCnb,EAAM+d,YAAc5C,EAAEmD,OAClBte,EAAM6a,UAAU0D,WAChBve,EAAM6a,UAAU0D,UAAUve,EAAMke,SAAS/C,EAAG,aACpD,EACAnf,KAAKC,SAAgB,MAAI,SAAUkf,GAC3Bnb,EAAM6a,UAAU2D,OAChBxe,EAAM6a,UAAU2D,MAAMxe,EAAMke,SAAS/C,EAAG,SAChD,EACAnf,KAAKC,SAAgB,MAAI,SAAUkf,GAC3Bnb,EAAM6a,UAAU4D,OAChBze,EAAM6a,UAAU4D,MAAMze,EAAMke,SAAS/C,EAAG,SAChD,EACAnf,KAAKkB,QAAQQ,iBAAiB,YAAa1B,KAAKC,SAAoB,WACpED,KAAKkB,QAAQQ,iBAAiB,UAAW1B,KAAKC,SAAkB,SAChED,KAAKkB,QAAQQ,iBAAiB,YAAa1B,KAAKC,SAAoB,WACpED,KAAKkB,QAAQQ,iBAAiB,QAAS1B,KAAKC,SAAgB,OAC5DD,KAAKkB,QAAQQ,iBAAiB,QAAS1B,KAAKC,SAAgB,MAChE,CAsOA,OA3NAqhB,EAAazZ,UAAUua,OAAS,SAAUjD,GACtC,MAAO,CAAExf,EAAGwf,EAAEuD,QAAS9iB,EAAGuf,EAAEwD,QAChC,EAYArB,EAAazZ,UAAUqa,SAAW,SAAUxd,EAAOke,GAC/C,IAAIC,EAAIC,EACJC,EAAM/iB,KAAKoiB,OAAO1d,GAClBse,EAASte,EAeb,OAdAse,EAAOC,OAAS,CACZ/hB,QAASlB,KAAKkB,QACdygB,KAAMiB,EACNM,cAAc,EACdC,IAAKJ,EACLT,OAAQ5d,EAAM4d,OACdc,WAA6B,IAAjB1e,EAAM4d,OAClBe,aAA+B,IAAjB3e,EAAM4d,OACpBgB,YAA8B,IAAjB5e,EAAM4d,OACnBV,aAA2C,QAA5BiB,EAAK7iB,KAAK4hB,oBAAiC,IAAPiB,EAAgBA,EAAK,CAAEljB,EAAG+d,IAAK9d,EAAG8d,KACrF6F,YAA0C,QAA5BT,EAAK9iB,KAAK8hB,oBAAiC,IAAPgB,EAAgBA,EAAK,CAAEnjB,EAAG+d,IAAK9d,EAAG8d,KACpF8F,WAAiC,MAArBxjB,KAAK4hB,eAAyB5hB,KAAK4hB,aAAajiB,GAAKojB,EAAIpjB,GAAKK,KAAK4hB,aAAahiB,GAAKmjB,EAAInjB,GACrG6jB,WAAiC,MAArBzjB,KAAK8hB,aAAuB,CAAEniB,EAAGojB,EAAIpjB,EAAIK,KAAK8hB,aAAaniB,EAAGC,EAAGmjB,EAAInjB,EAAII,KAAK8hB,aAAaliB,GAAM,CAAED,EAAG,EAAGC,EAAG,IAErHojB,CACX,EAYA1B,EAAazZ,UAAU6b,UAAY,SAAUd,GACrC5iB,KAAKgiB,UAAUY,KAGnB5iB,KAAKgiB,UAAUY,IAAa,EAChC,EAWAtB,EAAazZ,UAAU8b,YAAc,SAAUf,GACtC5iB,KAAKgiB,UAAUY,WAGb5iB,KAAKgiB,UAAUY,EAC1B,EAaAtB,EAAazZ,UAAUsa,KAAO,SAAUyB,GAOpC,OANI5jB,KAAK6e,UAAUsD,MACfniB,KAAK6jB,sBAAsB,QAC/B7jB,KAAK6e,UAAUsD,KAAOyB,EACtB5jB,KAAK0jB,UAAU,aACf1jB,KAAK0jB,UAAU,aACf1jB,KAAK0jB,UAAU,WACR1jB,IACX,EAaAshB,EAAazZ,UAAUtG,KAAO,SAAUqiB,GAKpC,OAJI5jB,KAAK6e,UAAUoD,WACfjiB,KAAK6jB,sBAAsB,aAC/B7jB,KAAK0jB,UAAU,aACf1jB,KAAK6e,UAAUoD,UAAY2B,EACpB5jB,IACX,EAaAshB,EAAazZ,UAAUkY,GAAK,SAAU6D,GAKlC,OAJI5jB,KAAK6e,UAAUwD,SACfriB,KAAK6jB,sBAAsB,WAC/B7jB,KAAK0jB,UAAU,WACf1jB,KAAK6e,UAAUwD,QAAUuB,EAClB5jB,IACX,EAaAshB,EAAazZ,UAAUgY,KAAO,SAAU+D,GAKpC,OAJI5jB,KAAK6e,UAAU0D,WACfviB,KAAK6jB,sBAAsB,aAC/B7jB,KAAK0jB,UAAU,aACf1jB,KAAK6e,UAAU0D,UAAYqB,EACpB5jB,IACX,EAaAshB,EAAazZ,UAAU2a,MAAQ,SAAUoB,GAKrC,OAJI5jB,KAAK6e,UAAU2D,OACfxiB,KAAK6jB,sBAAsB,SAC/B7jB,KAAK0jB,UAAU,SACf1jB,KAAK6e,UAAU2D,MAAQoB,EAChB5jB,IACX,EAaAshB,EAAazZ,UAAU4a,MAAQ,SAAUmB,GAKrC,OAJI5jB,KAAK6e,UAAU4D,OACfziB,KAAK6jB,sBAAsB,SAC/B7jB,KAAK0jB,UAAU,SACf1jB,KAAK6e,UAAU4D,MAAQmB,EAChB5jB,IACX,EAWAshB,EAAazZ,UAAUgc,sBAAwB,SAAUlC,GACrD,KAAM,oCAAoC7V,OAAO6V,EAAM,kEAC3D,EAYAL,EAAazZ,UAAUtB,QAAU,WAC7BvG,KAAK2jB,YAAY,aACjB3jB,KAAK2jB,YAAY,aACjB3jB,KAAK2jB,YAAY,UACjB3jB,KAAK2jB,YAAY,SACjB3jB,KAAK2jB,YAAY,SACjB3jB,KAAKkB,QAAQsF,oBAAoB,YAAaxG,KAAKC,SAAoB,WACvED,KAAKkB,QAAQsF,oBAAoB,UAAWxG,KAAKC,SAAoB,WACrED,KAAKkB,QAAQsF,oBAAoB,YAAaxG,KAAKC,SAAoB,WACvED,KAAKkB,QAAQsF,oBAAoB,QAASxG,KAAKC,SAAgB,OAC/DD,KAAKkB,QAAQsF,oBAAoB,QAASxG,KAAKC,SAAgB,MACnE,EACOqhB,CACX,CAnWiC,GAoWjC3a,EAAQ2a,aAAeA,C,gBCrZvB7a,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQmd,aAAU,EAClB,IAAI9c,EAAiB,EAAQ,KASzB8c,EAAyB,WAUzB,SAASA,EAAQC,EAAOC,EAAWC,GAI/BjkB,KAAKkH,UAAY,UACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAK+jB,MAAQA,EACb/jB,KAAKgkB,UAAYA,EACjBhkB,KAAKikB,WAAaA,CACtB,CAWA,OALAH,EAAQjc,UAAUtB,QAAU,WACxBvG,KAAKgkB,UAAUzd,UACfvG,KAAKikB,WAAW1d,UAChBvG,KAAKuP,aAAc,CACvB,EACOuU,CACX,CA/B4B,GAgC5Bnd,EAAQmd,QAAUA,C,gBCnDlBrd,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQud,YAAS,EACjB,IAAIld,EAAiB,EAAQ,KACzBC,EAAW,EAAQ,KAanBid,EAAwB,WASxB,SAASA,EAAOC,EAAM5a,EAAQ8O,GAI1BrY,KAAKkH,UAAY,SACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAKmkB,KAAOA,EACZnkB,KAAKuJ,OAASA,QAAuCA,EAAS,IAAItC,EAAS+G,OAC3EhO,KAAKokB,MAAQ/L,aAAyC,EAASA,EAAQ+L,MACvEpkB,KAAKqkB,WAAahM,aAAyC,EAASA,EAAQgM,WAC5ErkB,KAAKskB,SAAWjM,aAAyC,EAASA,EAAQiM,SAC1EtkB,KAAKukB,UAAYlM,aAAyC,EAASA,EAAQkM,UAC3EvkB,KAAKwkB,WAAanM,aAAyC,EAASA,EAAQmM,WAC5ExkB,KAAKykB,WAAapM,aAAyC,EAASA,EAAQoM,WAC5EzkB,KAAK0kB,UAAYrM,aAAyC,EAASA,EAAQqM,UAC3E1kB,KAAK2kB,SAAWtM,aAAyC,EAASA,EAAQsM,QAC9E,CAUA,OAJAT,EAAOrc,UAAUtB,QAAU,WACvBvG,KAAKuJ,OAAOhD,UACZvG,KAAKuP,aAAc,CACvB,EACO2U,CACX,CApC2B,GAqC3Bvd,EAAQud,OAASA,C,sBCwCjB,IAAIU,EAAqB5kB,MAAQA,KAAK4kB,mBAAsB,SAAUC,EAAGlD,EAAMmD,GAE3E,MADoB,iBAATnD,IAAmBA,EAAOA,EAAKoD,YAAc,IAAIjZ,OAAO6V,EAAKoD,YAAa,KAAO,IACrFte,OAAOC,eAAeme,EAAG,OAAQ,CAAEG,cAAc,EAAMpe,MAAOke,EAAS,GAAGhZ,OAAOgZ,EAAQ,IAAKnD,GAAQA,GACjH,EACAlb,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQse,qBAAkB,EAC1B,IAAIC,EAA2B,EAAQ,KACnCC,EAAS,EAAQ,IACjBC,EAAW,EAAQ,KACnBC,EAAiB,EAAQ,KACzBC,EAAe,EAAQ,KACvBxe,EAAW,EAAQ,IACnBsP,EAAW,EAAQ,KACnBmP,EAAiB,EAAQ,KACzBC,EAAS,EAAQ,KACjBC,EAAe,EAAQ,KACvBtS,EAAS,EAAQ,KACjBuS,EAAiB,EAAQ,KACzBC,EAAY,EAAQ,KACpBxU,EAAY,EAAQ,KACpByU,EAAa,EAAQ,KACrBC,EAAa,EAAQ,KACrBC,EAAmB,EAAQ,KAC3B1S,EAAW,EAAQ,IACnBnM,EAAW,EAAQ,KACnB8e,EAAe,EAAQ,KACvBC,EAAW,EAAQ,KA2BnBf,EAAiC,WAgEjC,SAASA,EAAgBgB,EAAQC,GAC7B,IAAIpD,EAAIqD,EA4BR,GAxBAnmB,KAAKomB,uBAAyB,GAU9BpmB,KAAKqmB,WAAa,EAIlBrmB,KAAKsmB,KAAO,KAEZP,EAAaQ,WAAWC,MAAQ,CAC5BC,kBAAkB,EAClBJ,WAAY,EACZK,YAAY,EACZC,YAAY,EACZC,WAAW,EACXC,SAAS,QAEgB,IAAlBZ,EAAOa,OACd,KAAM,uBASV,IAAIjC,EAAII,EAAgBnL,MAAMiN,MAC9B/mB,KAAKimB,OAAS,CACVa,OAAQb,EAAOa,OACfE,SAAUnC,EAAEoC,IAAIhB,EAAQ,YAAY,GACpCiB,YAAarC,EAAEsC,KAAKlB,EAAQ,eAAe,GAC3CmB,OAAQvC,EAAE9G,IAAIkI,EAAQ,SAAU,GAChCoB,OAAQxC,EAAE9G,IAAIkI,EAAQ,SAAU,GAChCvD,QAASmC,EAAE9G,IAAIkI,EAAQ,UAAW,GAClCtD,QAASkC,EAAE9G,IAAIkI,EAAQ,UAAW,GAClCqB,WAAYzC,EAAEsC,KAAKlB,EAAQ,cAAc,GACzCsB,WAAY1C,EAAEsC,KAAKlB,EAAQ,cAAc,GACzCuB,aAAc3C,EAAE9G,IAAIkI,EAAQ,eAAgB,GAC5CwB,aAAc5C,EAAE9G,IAAIkI,EAAQ,eAAgB,GAC5CyB,mBAAoB7C,EAAE9G,IAAIkI,EAAQ,uBAAwB,GAC1D0B,WAAY9C,EAAEsC,KAAKlB,EAAQ,cAAc,GACzC2B,iBAAkB/C,EAAEoC,IAAIhB,EAAQ,oBAAoB,GACpD4B,qBAAsBhD,EAAE9G,IAAIkI,EAAQ,uBAAwB,IAC5D6B,qBAAsBjD,EAAE9G,IAAIkI,EAAQ,uBAAwB,IAC5D8B,gBAAiB9B,EAAO8B,iBAAmB,UAC3CC,eAAgBnD,EAAEsC,KAAKlB,EAAQ,kBAAkB,GACjDgC,mBAAoBpD,EAAE9G,IAAIkI,EAAQ,qBAAsBhB,EAAgBiD,sBACxEC,oBAAqBtD,EAAE9G,IAAIkI,EAAQ,sBAAuBhB,EAAgBmD,uBAC1EC,kBAAmBxD,EAAE9G,IAAIkI,EAAQ,oBAAqB,GACtDqC,mBAAoBzD,EAAE9G,IAAIkI,EAAQ,qBAAsB,GACxDsC,UAAW1D,EAAE9G,IAAIkI,EAAQ,YAAa,GACtCuC,UAAW3D,EAAE9G,IAAIkI,EAAQ,YAAa,GACtCwC,gBAAiB5D,EAAEsC,KAAKlB,EAAQ,mBAAmB,GACnDyC,SAAU,WACN1kB,EAAM2kB,MAAMD,SAAS1kB,EACzB,EACA4kB,YAAa,WACT5kB,EAAM6kB,cACV,EACAC,iBAAkBjE,EAAEsC,KAAKlB,EAAQ,oBAAoB,GACrD8C,gBAAiBlE,EAAEsC,KAAKlB,EAAQ,mBAAmB,GAEnD+C,SAAUnE,EAAEoE,KAAKhD,EAAQ,WAAY,MACrCiD,QAASrE,EAAEoE,KAAKhD,EAAQ,UAAW,MACnCkD,SAAUtE,EAAEoE,KAAKhD,EAAQ,WAAY,MAErCmD,YAAavE,EAAEsC,KAAKlB,EAAQ,eAAe,GAC3CoD,YAAaxE,EAAEsC,KAAKlB,EAAQ,eAAe,GAC3CqD,WAAYzE,EAAEsC,KAAKlB,EAAQ,cAAc,GACzCsD,iBAAkB1E,EAAEsC,KAAKlB,EAAQ,oBAAoB,GACrDuD,WAAY3E,EAAEsC,KAAKlB,EAAQ,cAAc,GACzCwD,UAAW5E,EAAEsC,KAAKlB,EAAQ,aAAa,GAEvCyD,SAAU7E,EAAEsC,KAAKlB,EAAQ,YAAY,GACrC0D,yBAA0B9E,EAAEsC,KAAKlB,EAAQ,4BAA4B,IASzEjmB,KAAKkmB,WAAa,CACd0D,cAAc,EACdC,sBAAuBhF,EAAEsC,KAAKlB,EAAQ,yBAAyB,GAC/D6D,uBAAwBjF,EAAEsC,KAAKlB,EAAQ,0BAA0B,GACjE8D,gBAAiBlF,EAAEsC,KAAKlB,EAAQ,mBAAmB,GACnD+D,iBAAkBnF,EAAEsC,KAAKlB,EAAQ,oBAAoB,GACrDgE,SAAUpF,EAAEsC,KAAKlB,EAAQ,YAAY,GACrCsB,WAAY1C,EAAEsC,KAAKlB,EAAQ,cAAc,GACzCiE,OAAQ,CACJ9F,MAAO,UACP+F,UAAW,EACXC,WAAY,CACRhG,MAAO,wBACP+F,UAAW,GAEfE,WAAY,CACRjG,MAAO,UACP+F,UAAW,EACXG,MAAM,GAEVC,cAAe,CACXnG,MAAO,UACP+F,UAAW,EACXG,MAAM,IAOdE,QAAS,CACLpG,MAAO,UACP+F,UAAW,GAEfM,SAAU,CACNrG,MAAO,UACP+F,UAAW,GAEfO,QAAS,CACLtG,MAAO,UACP+F,UAAW,GAEfQ,cAAe,CACXvG,MAAO,UACP+F,UAAW,GAEf3W,OAAQ,CACJ4Q,MAAO,UACP+F,UAAW,GAEfS,aAAc,CACVxG,MAAO,UACP+F,UAAW,GAEfU,OAAQ,CACJzG,MAAO,UACP+F,UAAW,GAEfW,eAAgB,CACZ1G,MAAO,UACP+F,UAAW,GAEf1e,KAAM,CACF2Y,MAAO,UACP+F,UAAW,GAEfY,OAAQ,CACJ3G,MAAO,UACP+F,UAAW,GAEfpG,MAAO,CACHK,MAAO,UACP+F,UAAW,GAEfhG,KAAM,CACFC,MAAO,sBACP+F,UAAW,EACXG,MAAM,EACN/gB,QAAQ,GAEZ0J,OAAQ,CACJmR,MAAO,YAMfpkB,KAAKgrB,KAAO,IAAIxF,EAAO7H,KAAK,IAAI1W,EAAS+G,OAAO,EAAG,GAAI,IAAI/G,EAAS+G,OAAO,GAAI,KAC/EhO,KAAKirB,WAAa,CAAE7Z,MAAO6T,EAAgBiD,qBAAsB7W,OAAQ4T,EAAgBmD,uBACzF,IAAI8C,EAAyC,iBAAlBjF,EAAOa,OAAsB3lB,SAASC,cAAc6kB,EAAOa,QAAUb,EAAOa,OACvG,QAA6B,IAAlBoE,EACP,KAAM,kEAAmEpf,OAAOma,EAAOa,OAAQ,gBAGnG,GAA4C,WAAxCoE,EAAcC,QAAQC,cAQtB,GAPAprB,KAAK8mB,OAASoE,EACdlrB,KAAKqrB,aAAerrB,KAAK8mB,OACrB9mB,KAAKimB,OAAOyD,eAA4C,IAAzBtE,EAASkG,cACxC7gB,QAAQC,KAAK,gIACbD,QAAQC,KAAK,8CACb1K,KAAKimB,OAAOyD,UAAW,GAEvB1pB,KAAKimB,OAAOyD,SAAU,CAEtB,IAAI6B,EAAMvrB,KAAK8mB,OAAO0E,WAAW,SACjCxrB,KAAKyrB,KAAO,IAAIrG,EAASkG,YAAYC,GAAK,GAG1CvrB,KAAKsqB,KAAOtqB,KAAKyrB,KAAKC,cAAa,GACnCjhB,QAAQC,KAAK,iGACjB,MAGQ6gB,EAAMvrB,KAAK8mB,OAAO0E,WAAW,MACjCxrB,KAAKyrB,KAAO,IAAItG,EAAOwG,UAAUJ,GAAK,GACtCvrB,KAAKsqB,KAAO,IAAInF,EAAOwG,UAAUJ,GAAK,OAGzC,IAA4C,QAAxCL,EAAcC,QAAQC,cAwB3B,KAAM,kDAvBN,QAA2C,IAAhC/F,EAAeuG,aACtB,KAAM,8IACV5rB,KAAK8mB,OAASoE,EACdlrB,KAAKyrB,KAAO,IAAIpG,EAAeuG,aAAa5rB,KAAK8mB,OAAQ,IAAI7f,EAAS+G,OACtE,IAAI/G,EAAS+G,OACbhO,KAAKirB,YAAY,EACjBjrB,KAAKkmB,YAAY,GAEjBlmB,KAAKsqB,KAAOtqB,KAAKyrB,KAAKC,cAAa,GAC/B1rB,KAAK8mB,OAAO+E,eACZ7rB,KAAKqrB,aAAelqB,SAAS2qB,cAAc,OAC3C9rB,KAAKqrB,aAAaU,MAAMC,SAAW,WACnChsB,KAAKqrB,aAAaU,MAAME,KAAO,IAC/BjsB,KAAKqrB,aAAaU,MAAMG,IAAM,IAC9BlsB,KAAKqrB,aAAaU,MAAMI,OAAS,UACjCnsB,KAAK8mB,OAAO+E,cAAcE,MAAMC,SAAW,WAC3ChsB,KAAK8mB,OAAO+E,cAAcO,YAAYpsB,KAAKqrB,eAG3CrrB,KAAKqrB,aAAelqB,SAASkrB,IAKrC,CAGIpG,EAAOqG,OACPtsB,KAAKqrB,aAAakB,aAAa,QAAStG,EAAOqG,OAEnDtsB,KAAKyrB,KAAKniB,MAAM+E,IAAkC,QAA7ByU,EAAK9iB,KAAKimB,OAAOmB,cAA2B,IAAPtE,EAAgBA,EAAK,EAAK9iB,KAAKimB,OAAOoB,QAChGrnB,KAAKsqB,KAAKhhB,MAAM+E,IAAkC,QAA7B8X,EAAKnmB,KAAKimB,OAAOmB,cAA2B,IAAPjB,EAAgBA,EAAK,EAAKnmB,KAAKimB,OAAOoB,QAChGrnB,KAAKuS,SAAW,GAChBvS,KAAKwsB,cAAgB,KACrBxsB,KAAKysB,gBAAkB,GACvBzsB,KAAK0sB,UAAY,GACjB1sB,KAAKyK,QAAUA,QACfzK,KAAK2oB,MAAQ,CAETD,SAAUzD,EAAgB0H,WAE9B,IAAI3oB,EAAQhE,KACZiD,WAAWvB,iBAAiB,UAAU,WAAc,OAAOsC,EAAM4oB,cAAgB,IACjF5sB,KAAK4sB,eACD3G,EAAO6C,kBACP9oB,KAAK6oB,eAET7oB,KAAK6sB,wBAEL7sB,KAAK8sB,iBAEL9sB,KAAK+sB,SAEL/sB,KAAK8mB,OAAOkG,OAChB,CAmkDA,IAAInK,EA4PJ,OAlzDAoC,EAAgB0H,UAAY,SAAUM,GAElC,IAAIC,EAAU/rB,SAASgsB,gBAAgB,6BAA8B,OAEjEC,EAAY,IAAI/H,EAAeuG,aAAasB,EAASD,EAAGxB,KAAK4B,OAAQJ,EAAGxB,KAAKniB,MAAO2jB,EAAGhC,YAAY,EACvGgC,EAAG/G,YACCoH,EAAYF,EAAU1B,cAAa,GACvC0B,EAAUG,eAAe,GACzBD,EAAUC,eAAe,GACrBN,EAAGhH,OAAO+C,UACViE,EAAGhH,OAAO+C,WAEdoE,EAAUI,MAAMP,EAAGhH,OAAO8B,iBAAmB,SACzCkF,EAAGhH,OAAOiD,SACV+D,EAAGhH,OAAOiD,QAAQkE,EAAWE,GAEjCL,EAAGQ,QAAQ,EAAGL,EAAWE,GACzBL,EAAGrD,aAAa,EAAGwD,GACfH,EAAGhH,OAAOkD,UACV8D,EAAGhH,OAAOkD,SAASiE,EAAWE,GAClCF,EAAUM,aAAa,GACvBJ,EAAUI,aAAa,GAGvB,IACIC,GADa,IAAIC,eACIC,kBAAkBX,GAEvCY,EAAO,IAAIC,KAAK,CAAC,2CAA6CJ,GAAU,CAAEK,KAAM,4BAGpF,GAAoC,mBAAzB/qB,WAAmB,OAC1B,KAAM,yGAGVgrB,EADchrB,WAAmB,QACzB6qB,EAAM,sBAClB,EAWA7I,EAAgBpd,UAAUghB,aAAe,WACrC7oB,KAAKimB,OAAO6C,kBAAmB,EAC/B,IAAIoF,EAAajrB,WAAWkrB,kBAAoB,EAChDnuB,KAAKimB,OAAOsC,UAAYvoB,KAAKimB,OAAOuC,UAAY,EAAM0F,EACtDluB,KAAKimB,OAAOoC,kBAAoBroB,KAAKimB,OAAOqC,mBAAqB4F,EACjEluB,KAAK4sB,eACL5sB,KAAK8sB,gBACT,EAOA7H,EAAgBpd,UAAUumB,UAAY,SAAUrb,GAC5C,IAAIsb,EAAe,IAAIpnB,EAAS+G,OAAOhO,KAAKirB,WAAW7Z,MAAQ,EAAKpR,KAAKirB,WAAW5Z,OAAS,GACzFid,EAActuB,KAAKirB,WAAW7Z,MAAQpR,KAAKirB,WAAW5Z,OACtDkd,EAAQxb,EAAO3B,MAAQ2B,EAAO1B,OAE9B1H,EAAS,IAAI1C,EAAS+G,OAAO+E,EAAOzI,IAAI3K,EAAIoT,EAAO3B,MAAQ,EAAK2B,EAAOzI,IAAI1K,EAAImT,EAAO1B,OAAS,GAC9F0L,MACA7I,MAAMlU,KAAKirB,WAAW7Z,MAAQ,EAAKpR,KAAKirB,WAAW5Z,OAAS,GAEjE,GADArR,KAAKwuB,UAAU7kB,GACX2kB,EAAcC,EAAO,CACrB,IAAIE,EAAiBzuB,KAAKirB,WAAW7Z,MAAQ2B,EAAO3B,MACpDpR,KAAK0uB,QAAQD,EAAgBA,EAAgBJ,EACjD,MAEQI,EAAiBzuB,KAAKirB,WAAW5Z,OAAS0B,EAAO1B,OACrDrR,KAAK0uB,QAAQD,EAAgBA,EAAgBJ,GAEjDruB,KAAK+sB,QACT,EAUA9H,EAAgBpd,UAAU8mB,WAAa,SAAUC,GAC7C5uB,KAAKyK,QAAUmkB,CACnB,EAYA3J,EAAgBpd,UAAUilB,eAAiB,WACvC,IAAIhK,EAAIqD,EAAI0I,EAAIC,EACZ9uB,KAAKimB,OAAOwC,gBACZxD,EAAgBnL,MAAMiV,YAAY/uB,KAAK8mB,OAAyC,QAAhChE,EAAK9iB,KAAKimB,OAAOsC,iBAA8B,IAAPzF,EAAgBA,EAAK,EAAsC,QAAhCqD,EAAKnmB,KAAKimB,OAAOsC,iBAA8B,IAAPpC,EAAgBA,EAAK,GAGhLlB,EAAgBnL,MAAMiV,YAAY/uB,KAAK8mB,OAAyC,QAAhC+H,EAAK7uB,KAAKimB,OAAOsC,iBAA8B,IAAPsG,EAAgBA,EAAK,EAAsC,QAAhCC,EAAK9uB,KAAKimB,OAAOuC,iBAA8B,IAAPsG,EAAgBA,EAAK,EAExL,EAUA7J,EAAgBpd,UAAUmnB,yBAA2B,SAAU/P,GAC3D,IAAK,IAAI3e,KAAKN,KAAKomB,uBACf,GAAIpmB,KAAKomB,uBAAuB9lB,KAAO2e,EACnC,OAGRjf,KAAKomB,uBAAuBhmB,KAAK6e,EACrC,EAUAgG,EAAgBpd,UAAUonB,4BAA8B,SAAUhQ,GAC9D,IAAK,IAAI3e,EAAI,EAAGA,EAAIN,KAAKomB,uBAAuB7lB,OAAQD,IACpD,GAAIN,KAAKomB,uBAAuB9lB,KAAO2e,EAEnC,YADAjf,KAAKomB,uBAAuB5lB,OAAOF,EAAG,EAIlD,EACA2kB,EAAgBpd,UAAUqnB,oBAAsB,SAAUC,EAAgBC,GACtE,IAAK,IAAI9uB,KAAKN,KAAKomB,uBAAwB,CACvC,IAAInH,EAAWjf,KAAKomB,uBAAuB9lB,GACvC2e,GAAgC,mBAAbA,GACnBA,EAAS,CACL+O,KAAMmB,EAAe5uB,OAAS,EAAI,kBAAoB,oBACtD4uB,eAAgBA,EAChBC,iBAAkBA,GAG9B,CACJ,EAyBAnK,EAAgBpd,UAAU3H,IAAM,SAAUmvB,EAAUtC,EAAQuC,GACxD,GAAIlf,MAAMC,QAAQgf,GAEd,IADA,IAAI5f,EAAM4f,EACD/uB,EAAI,EAAGA,EAAImP,EAAIlP,OAAQD,IAC5BN,KAAKE,IAAIuP,EAAInP,IAAI,EAAOgvB,OAI3B,CACD,IAAIH,EAAiB,CAACE,GACtB,GAAIA,aAAoBpoB,EAAS+G,OAC7BhO,KAAK0sB,UAAUtsB,KAAKivB,GACpBrvB,KAAKuS,SAASnS,KAAKivB,QAElB,GAAIA,aAAoBlc,EAAO2B,KAEhC9U,KAAK0sB,UAAUtsB,KAAKivB,GACpBrvB,KAAKuS,SAASnS,KAAKivB,EAAS9a,GAC5BvU,KAAKuS,SAASnS,KAAKivB,EAAS9gB,GAC5B4gB,EAAe/uB,KAAKivB,EAAS9a,EAAG8a,EAAS9gB,QAExC,GAAI8gB,aAAoBjc,EAASW,OAClC/T,KAAK0sB,UAAUtsB,KAAKivB,GACpBrvB,KAAKuS,SAASnS,KAAKivB,EAAS9a,GAC5BvU,KAAKuS,SAASnS,KAAKivB,EAAS9gB,GAC5B4gB,EAAe/uB,KAAKivB,EAAS9a,EAAG8a,EAAS9gB,GACzC8gB,EAAS9a,EAAEsK,UAAU0Q,iBAAgB,SAAU7qB,GAC3C2qB,EAAS9gB,EAAErO,IAAIwE,EAAMue,OAAOQ,WAChC,SAEC,GAAI4L,aAAoBxJ,EAAW2J,SACpCxvB,KAAKuS,SAASnS,KAAKivB,EAAS1lB,QAC5B3J,KAAKuS,SAASnS,KAAKivB,EAASI,MAC5BN,EAAe/uB,KAAKivB,EAAS1lB,OAAQ0lB,EAASI,MAC9CzvB,KAAK0sB,UAAUtsB,KAAKivB,GACpBA,EAAS1lB,OAAOkV,UAAU0Q,iBAAgB,SAAU7qB,GAChD2qB,EAASI,KAAKvvB,IAAIwE,EAAMue,OAAOQ,WACnC,SAEC,GAAI4L,aAAoBvJ,EAAiB4J,eAC1C1vB,KAAKuS,SAASnS,KAAKivB,EAAS3E,QAAQ/gB,QACpC3J,KAAKuS,SAASnS,KAAKivB,EAAS3E,QAAQ+E,MACpCN,EAAe/uB,KAAKivB,EAAS3E,QAAQ/gB,OAAQ0lB,EAAS3E,QAAQ+E,MAC9DzvB,KAAK0sB,UAAUtsB,KAAKivB,GACpBA,EAAS3E,QAAQ/gB,OAAOkV,UAAU0Q,iBAAgB,SAAU7qB,GACxD2qB,EAAS3E,QAAQ+E,KAAKvvB,IAAIwE,EAAMue,OAAOQ,WAC3C,SAEC,GAAI4L,aAAoBjZ,EAASlD,OAClClT,KAAKuS,SAASnS,KAAKivB,EAAS1lB,QAC5BwlB,EAAe/uB,KAAKivB,EAAS1lB,QAC7B3J,KAAK0sB,UAAUtsB,KAAKivB,QAEnB,GAAIA,aAAoB9J,EAAepP,aACxCnW,KAAKuS,SAASnS,KAAKivB,EAAS7b,OAAO7J,QACnCwlB,EAAe/uB,KAAKivB,EAAS7b,OAAO7J,QACpC3J,KAAK0sB,UAAUtsB,KAAKivB,QAEnB,GAAIA,aAAoBle,EAAUQ,QAEnC,IADA3R,KAAK0sB,UAAUtsB,KAAKivB,GACX/uB,EAAI,EAAGA,EAAI+uB,EAAS9c,SAAShS,OAAQD,IAC1CN,KAAKuS,SAASnS,KAAKivB,EAAS9c,SAASjS,IACrC6uB,EAAe/uB,KAAKivB,EAAS9c,SAASjS,SAGzC,GAAI+uB,aAAoBzJ,EAAW+J,SACpC3vB,KAAK0sB,UAAUtsB,KAAKivB,GACpBrvB,KAAKuS,SAASnS,KAAKivB,EAAS9a,GAC5BvU,KAAKuS,SAASnS,KAAKivB,EAAS9gB,GAC5BvO,KAAKuS,SAASnS,KAAKivB,EAAS7U,GAC5B2U,EAAe/uB,KAAKivB,EAAS9a,EAAG8a,EAAS9gB,EAAG8gB,EAAS7U,QAEpD,GAAI6U,aAAoB/J,EAAaze,WAAY,CAClD7G,KAAK0sB,UAAUtsB,KAAKivB,GACpB,IAAIne,EAAame,EACjB,IAAS/uB,EAAI,EAAGA,EAAI4Q,EAAWtJ,aAAarH,OAAQD,IAC3C+uB,EAAS1nB,gBAAuB,GAALrH,IAC5BN,KAAKuS,SAASnS,KAAK8Q,EAAWtJ,aAAatH,GAAG0H,YAC9CmnB,EAAe/uB,KAAK8Q,EAAWtJ,aAAatH,GAAG0H,aAEnDhI,KAAKuS,SAASnS,KAAK8Q,EAAWtJ,aAAatH,GAAG2H,UAC9CjI,KAAKuS,SAASnS,KAAK8Q,EAAWtJ,aAAatH,GAAGmI,mBAC9CzI,KAAKuS,SAASnS,KAAK8Q,EAAWtJ,aAAatH,GAAGqI,iBAC9CwmB,EAAe/uB,KAAK8Q,EAAWtJ,aAAatH,GAAG2H,SAAUiJ,EAAWtJ,aAAatH,GAAGmI,kBAAmByI,EAAWtJ,aAAatH,GAAGqI,iBAClIuI,EAAWtJ,aAAatH,GAAGmI,kBAAkBmnB,KAAKlJ,YAAa,EAC/DxV,EAAWtJ,aAAatH,GAAGqI,gBAAgBinB,KAAKlJ,YAAa,EAEjEzB,EAAgBnL,MAAM+V,2BAA2BR,EACrD,MACK,GAAIA,aAAoB1J,EAAU7B,QACnC9jB,KAAKuS,SAASnS,KAAKivB,EAASrL,WAC5BhkB,KAAKuS,SAASnS,KAAKivB,EAASpL,YAC5BkL,EAAe/uB,KAAKivB,EAASrL,UAAWqL,EAASpL,YACjDjkB,KAAK0sB,UAAUtsB,KAAKivB,GAEpBA,EAASrL,UAAUnF,UAAU0Q,iBAAgB,SAAUpQ,GACnDkQ,EAASpL,WAAW/jB,IAAIif,EAAE8D,OAAOQ,WACrC,IACA4L,EAASpL,WAAW2L,KAAKlJ,YAAa,MAErC,MAAI2I,aAAoBrJ,EAAS9B,QAOlC,KAAM,oDAAsDmL,EAAW,IANvErvB,KAAKuS,SAASnS,KAAKivB,EAAS9lB,QAC5B4lB,EAAe/uB,KAAKivB,EAAS9lB,QAC7BvJ,KAAK0sB,UAAUtsB,KAAKivB,GACpBA,EAAS9lB,OAAOqmB,KAAKlJ,YAAa,CAItC,EACC4I,GAAkBtvB,KAAKkvB,oBAAoBC,EAAgB,GAChE,EAEIpC,QAA2B,IAAVA,IACjB/sB,KAAK+sB,QAEb,EAyBA9H,EAAgBpd,UAAUioB,OAAS,SAAUT,EAAUtC,EAAQgD,EAAoBT,GAC/E,GAAIlf,MAAMC,QAAQgf,GAAW,CAEzB,IADA,IAAIW,EAAqB,GAChB1vB,EAAI,EAAGA,EAAI+uB,EAAS9uB,OAAQD,IAC7BN,KAAK8vB,OAAOT,EAAS/uB,IAAI,EAAOyvB,GAAoB,IACpDC,EAAmB5vB,KAAKivB,EAAS/uB,IAOzC,OAJIysB,GACA/sB,KAAK+sB,UAERuC,GAAkBtvB,KAAKkvB,oBAAoB,GAAIc,GACzCA,EAAmBzvB,OAAS,CACvC,CACA,GAAI8uB,aAAoBpoB,EAAS+G,OAAQ,CACrC,IAAIiiB,EAAejwB,KAAKkwB,aAAab,GAAU,GAAO,GAKtD,OAJItC,GACA/sB,KAAK+sB,UAERuC,GAAkBtvB,KAAKkvB,oBAAoB,GAAI,CAACG,IAC1CY,CACX,CACA,IAAIE,GAAa,EACbf,EAAmB,GACvB,IAAS9uB,EAAI,EAAGA,EAAIN,KAAK0sB,UAAUnsB,OAAQD,IACvC,GAAIN,KAAK0sB,UAAUpsB,KAAO+uB,GAAYrvB,KAAK0sB,UAAUpsB,GAAGiH,MAAQ8nB,EAAS9nB,IAAK,CAG1E,GAFAvH,KAAK0sB,UAAUlsB,OAAOF,EAAG,GACzB8uB,EAAiBhvB,KAAKivB,GAClBU,EAEA,GAAIV,aAAoBlc,EAAO2B,KAE3B9U,KAAKkwB,aAAab,EAAS9a,GAAG,GAAO,GACrCvU,KAAKkwB,aAAab,EAAS9gB,GAAG,GAAO,GACrC6gB,EAAiBhvB,KAAKivB,EAAS9a,EAAG8a,EAAS9gB,QAE1C,GAAI8gB,aAAoBjc,EAASW,OAClC/T,KAAKkwB,aAAab,EAAS9a,GAAG,GAAO,GACrCvU,KAAKkwB,aAAab,EAAS9gB,GAAG,GAAO,GACrC6gB,EAAiBhvB,KAAKivB,EAAS9a,EAAG8a,EAAS9gB,QAE1C,GAAI8gB,aAAoBxJ,EAAW2J,SACpCxvB,KAAKkwB,aAAab,EAAS1lB,QAAQ,GAAO,GAC1C3J,KAAKkwB,aAAab,EAASI,MAAM,GAAO,GACxCL,EAAiBhvB,KAAKivB,EAAS1lB,OAAQ0lB,EAASI,WAE/C,GAAIJ,aAAoBvJ,EAAiB4J,eAC1C1vB,KAAKkwB,aAAab,EAAS3E,QAAQ/gB,QAAQ,GAAO,GAClD3J,KAAKkwB,aAAab,EAAS3E,QAAQ+E,MAAM,GAAO,GAChDL,EAAiBhvB,KAAKivB,EAAS3E,QAAQ/gB,OAAQ0lB,EAAS3E,QAAQ+E,WAE/D,GAAIJ,aAAoBjZ,EAASlD,OAClClT,KAAKkwB,aAAab,EAAS1lB,QAAQ,GAAO,QAEzC,GAAI0lB,aAAoB9J,EAAepP,aACxCnW,KAAKkwB,aAAab,EAAS7b,OAAO7J,QAAQ,GAAO,GACjDylB,EAAiBhvB,KAAKivB,EAAS7b,OAAO7J,aAErC,GAAI0lB,aAAoBle,EAAUQ,QAEnC,IAASrR,EAAI,EAAGA,EAAI+uB,EAAS9c,SAAShS,OAAQD,IAC1CN,KAAKkwB,aAAab,EAAS9c,SAASjS,IAAI,GAAO,GAC/C8uB,EAAiBhvB,KAAKivB,EAAS9c,SAASjS,SAG3C,GAAI+uB,aAAoBzJ,EAAW+J,SACpC3vB,KAAKkwB,aAAab,EAAS9a,GAAG,GAAO,GACrCvU,KAAKkwB,aAAab,EAAS9gB,GAAG,GAAO,GACrCvO,KAAKkwB,aAAab,EAAS7U,GAAG,GAAO,GACrC4U,EAAiBhvB,KAAKivB,EAAS9a,EAAG8a,EAAS9gB,EAAG8gB,EAAS7U,QAEtD,GAAI6U,aAAoB/J,EAAaze,WACtC,IAASvG,EAAI,EAAGA,EAAI+uB,EAASznB,aAAarH,OAAQD,IAC9CN,KAAKkwB,aAAab,EAASznB,aAAatH,GAAG0H,YAAY,GAAO,GAC9DhI,KAAKkwB,aAAab,EAASznB,aAAatH,GAAGmI,mBAAmB,GAAO,GACrEzI,KAAKkwB,aAAab,EAASznB,aAAatH,GAAGqI,iBAAiB,GAAO,GACnEymB,EAAiBhvB,KAAKivB,EAASznB,aAAatH,GAAG0H,WAAYqnB,EAASznB,aAAatH,GAAGmI,kBAAmB4mB,EAASznB,aAAatH,GAAGqI,iBAC5HrI,EAAI,GAAK+uB,EAASznB,aAAarH,SAC/BP,KAAKkwB,aAAab,EAASznB,aAAatH,GAAG2H,UAAU,GAAO,GAC5DmnB,EAAiBhvB,KAAKivB,EAASznB,aAAatH,GAAG2H,gBAIlDonB,aAAoB1J,EAAU7B,SACnC9jB,KAAKkwB,aAAab,EAASrL,WAAW,GAAO,GAC7ChkB,KAAKkwB,aAAab,EAASpL,YAAY,GAAO,GAC9CmL,EAAiBhvB,KAAKivB,EAASrL,UAAWqL,EAASpL,aAE9CoL,aAAoBrJ,EAAS9B,SAClClkB,KAAKkwB,aAAab,EAAS9lB,QAAQ,GAAO,GAC1C6lB,EAAiBhvB,KAAKivB,EAAS9lB,SAGnCwjB,GACA/sB,KAAK+sB,UAERuC,GAAkBtvB,KAAKkvB,oBAAoB,GAAIE,GAChDe,GAAa,CACjB,CAEJ,OAAOA,CACX,EAWAlL,EAAgBpd,UAAUqoB,aAAe,SAAU1d,EAAMua,EAAQuC,GAC7D,IAAK,IAAIhvB,EAAI,EAAGA,EAAIN,KAAKuS,SAAShS,OAAQD,IACtC,GAAIN,KAAKuS,SAASjS,KAAOkS,EAMrB,OALAxS,KAAKuS,SAAS/R,OAAOF,EAAG,GACpBysB,GACA/sB,KAAK+sB,UAERuC,GAAkBtvB,KAAKkvB,oBAAoB,GAAI,CAAC1c,KAC1C,EAGf,OAAO,CACX,EAaAyS,EAAgBpd,UAAUuoB,UAAY,SAAUC,EAAcC,GAC1D,IAAIlB,EAAmBpvB,KAAK0sB,UAC5B1sB,KAAK0sB,UAAY,GACZ6D,QAAQF,KACTjB,EAAmBA,EAAiBtjB,OAAO9L,KAAKuS,UAChDvS,KAAKuS,SAAW,KAEhB+d,QAA0C,IAAlBA,IACxBtwB,KAAK+sB,SAETqC,EAAiB7uB,OAAS,GAAKP,KAAKkvB,oBAAoB,GAAIE,EAChE,EAWAnK,EAAgBpd,UAAU2oB,cAAgB,SAAUC,EAAeC,GAC/D,IAAI5N,EAAIqD,EACJtc,EAAI7J,KAAK2wB,gBAAgB3wB,KAAK4wB,uBAAuBH,EAAc9wB,EAAG8wB,EAAc7wB,GAAI8wB,EAAiBjxB,KAAK8K,IAAqC,QAAhCuY,EAAK9iB,KAAKimB,OAAOsC,iBAA8B,IAAPzF,EAAgBA,EAAK,EAAsC,QAAhCqD,EAAKnmB,KAAKimB,OAAOuC,iBAA8B,IAAPrC,EAAgBA,EAAK,IACvP,GAAItc,GAAmB,UAAdA,EAAEgnB,SACP,OAAO7wB,KAAKuS,SAAS1I,EAAEinB,OAG/B,EAaA7L,EAAgBpd,UAAUoiB,SAAW,SAAUwB,QACvB,IAATA,IACPA,EAAOzrB,KAAKyrB,MAEhB,IAAIsF,EACIvL,EAAO7H,KAAK7D,MAAMkE,eAAehe,KAAKimB,OAAOyB,mBAAoB1nB,KAAKyrB,KAAKniB,MAAM3J,GAAKK,KAAKimB,OAAOuB,aAClGxnB,KAAKimB,OAAOsC,UAFhBwI,EAGIvL,EAAO7H,KAAK7D,MAAMkE,eAAehe,KAAKimB,OAAOyB,mBAAoB1nB,KAAKyrB,KAAKniB,MAAM1J,GAAKI,KAAKimB,OAAOwB,aAClGznB,KAAKimB,OAAOuC,UAEhBwI,EAAQ,CAAE5f,MAAOpR,KAAKgrB,KAAKpN,KAAKje,EAAIoxB,EAAU1f,OAAQrR,KAAKgrB,KAAKpN,KAAKhe,EAAImxB,GACzEE,EAAcjxB,KAAKirB,WAAW7Z,MAAQ,EAAtC6f,EAAiDjxB,KAAKirB,WAAW5Z,OAAS,EAC1Egc,EAASrtB,KAAKyrB,KAAK4B,OAAOziB,QAAQmS,MAEtCsQ,EAAO1tB,EACDF,KAAKyxB,MAAM7D,EAAO1tB,EAAIsxB,GAAYxxB,KAAKyxB,MAAMF,EAAM5f,OAAU4f,EAAM5f,MAASpR,KAAKyrB,KAAKniB,MAAM3J,GACvFK,KAAKyrB,KAAK4B,OAAO1tB,EAAIsxB,GAAYjxB,KAAKyrB,KAAKniB,MAAM3J,EAAKqxB,EAAM5f,MACvEic,EAAOztB,EACDH,KAAKyxB,MAAM7D,EAAOztB,EAAIqxB,GAAaxxB,KAAKyxB,MAAMF,EAAM3f,QAAW2f,EAAM3f,OAAUrR,KAAKyrB,KAAKniB,MAAM1J,GAC1FI,KAAKyrB,KAAK4B,OAAOztB,EAAIqxB,GAAajxB,KAAKyrB,KAAKniB,MAAM3J,EAAKqxB,EAAM3f,OACpErR,KAAKkmB,WAAW+D,WAChBwB,EAAK0F,oBAAoB,MACrBnxB,KAAKimB,OAAOqB,YAEZmE,EAAK2F,aAAa,UAClB3F,EAAK4F,OAAOhE,EAAQrtB,KAAKirB,WAAW7Z,MAAQpR,KAAKyrB,KAAKniB,MAAM3J,EAAGK,KAAKirB,WAAW5Z,OAASrR,KAAKyrB,KAAKniB,MAAM1J,EAAGoxB,EAAM5f,MAAO4f,EAAM3f,OAAQ,2BAGtIoa,EAAK2F,aAAa,QAClB3F,EAAKT,KAAKqC,EAAQrtB,KAAKirB,WAAW7Z,MAAQpR,KAAKyrB,KAAKniB,MAAM3J,EAAGK,KAAKirB,WAAW5Z,OAASrR,KAAKyrB,KAAKniB,MAAM1J,EAAGoxB,EAAM5f,MAAO4f,EAAM3f,OAAQ,0BAGhJ,EAaA4T,EAAgBpd,UAAU8f,WAAa,SAAU8D,GAE7CA,EAAK2F,aAAa,UAClB3F,EAAK6F,UAAU,CAAE3xB,EAAG,EAAGC,EAAG,GAAK,GAAII,KAAKkmB,WAAWjT,OAAOmR,MAC9D,EAIAa,EAAgBpd,UAAU0pB,aAAe,SAAU/c,EAAG4P,GAClD,OAAO5P,EAAEob,KAAKjJ,WAAa3mB,KAAKkmB,WAAW4E,eAAe1G,MAAQ5P,EAAEob,KAAKhJ,UAAYxC,EAAQ,uBACjG,EAeAa,EAAgBpd,UAAU2pB,cAAgB,SAAUnL,EAAYoF,EAAMnB,GAClE,IAAK,IAAIhqB,KAAKN,KAAK0sB,UAAW,CAC1B,IAAIpY,EAAItU,KAAK0sB,UAAUpsB,GACvBN,KAAKyrB,KAAK2F,aAAa9c,EAAE/M,KACzBvH,KAAKsqB,KAAK8G,aAAa9c,EAAE/M,KACzBvH,KAAKyrB,KAAK0F,oBAAoB7c,EAAEpN,WAChClH,KAAKsqB,KAAK6G,oBAAoB7c,EAAEpN,WAChClH,KAAKyxB,aAAand,EAAG+R,EAAYoF,EAAMnB,EAC3C,CACJ,EAgBArF,EAAgBpd,UAAU4pB,aAAe,SAAUnd,EAAG+R,EAAYoF,EAAMnB,GACpE,GAAIhW,aAAagR,EAAaze,WAAY,CACtC,IAAIkC,EAAa,EACjB,IAAK,IAAIyR,KAAKlG,EAAE1M,aAAc,CASlB,IA6BI8pB,EA/BZ,GALA1xB,KAAKyrB,KAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,KAAKuE,OAAO/C,IACpD/I,KAAKsqB,KAAK8G,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,KAAKuE,OAAO/C,IACpD/I,KAAKyrB,KAAK0F,oBAAoB7c,EAAEpN,WAChClH,KAAKsqB,KAAK6G,oBAAoB7c,EAAEpN,WAChCukB,EAAKkG,YAAYrd,EAAE1M,aAAa4S,GAAGxS,WAAYsM,EAAE1M,aAAa4S,GAAGvS,SAAUqM,EAAE1M,aAAa4S,GAAG/R,kBAAmB6L,EAAE1M,aAAa4S,GAAG7R,gBAAiB3I,KAAKkmB,WAAWgE,OAAO9F,MAAOpkB,KAAKkmB,WAAWgE,OAAOC,WACpMnqB,KAAKkmB,WAAW4D,wBAA0B9pB,KAAKkmB,WAAW8D,iBACtD1V,EAAE1M,aAAa4S,GAAGxS,WAAW4nB,KAAK/I,WAC9B6K,EAAK1xB,KAAKkmB,WAAWgE,OAAOG,WAAWC,KAAOA,EAAOmB,GACtD2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACjCmqB,EAAGP,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,kBAC1CoN,EAAE1M,aAAa4S,GAAGxS,WAAW4nB,KAAKnJ,iBAClCiL,EAAGE,aAAatd,EAAE1M,aAAa4S,GAAGxS,WAAY,EAAGhI,KAAKuxB,aAAajd,EAAE1M,aAAa4S,GAAGxS,WAAYhI,KAAKkmB,WAAWgE,OAAOG,WAAWjG,QAGnIsN,EAAGG,cAAcvd,EAAE1M,aAAa4S,GAAGxS,WAAY,EAAGhI,KAAKuxB,aAAajd,EAAE1M,aAAa4S,GAAGxS,WAAYhI,KAAKkmB,WAAWgE,OAAOG,WAAWjG,SAG5I9P,EAAE1M,aAAa4S,GAAGxS,WAAW4nB,KAAKvJ,WAAaA,EAC3C/R,EAAE1M,aAAa4S,GAAGvS,SAAS2nB,KAAK/I,WAC5B6K,EAAK1xB,KAAKkmB,WAAWgE,OAAOG,WAAWC,KAAOA,EAAOmB,GACtD2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACjCmqB,EAAGP,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,kBAC1CoN,EAAE1M,aAAa4S,GAAGvS,SAAS2nB,KAAKnJ,iBAChCiL,EAAGE,aAAatd,EAAE1M,aAAa4S,GAAGvS,SAAU,EAAGjI,KAAKuxB,aAAajd,EAAE1M,aAAa4S,GAAGvS,SAAUjI,KAAKkmB,WAAWgE,OAAOG,WAAWjG,QAG/HsN,EAAGG,cAAcvd,EAAE1M,aAAa4S,GAAGvS,SAAU,EAAGjI,KAAKuxB,aAAajd,EAAE1M,aAAa4S,GAAGvS,SAAUjI,KAAKkmB,WAAWgE,OAAOG,WAAWjG,SAGpI9P,EAAE1M,aAAa4S,GAAG/R,kBAAkBmnB,KAAK/I,WACrC6K,EAAK1xB,KAAKkmB,WAAWgE,OAAOK,cAAcD,KAAOA,EAAOmB,GACzD2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACjCmqB,EAAGP,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,0BAC9CwqB,EAAGI,aAAaxd,EAAE1M,aAAa4S,GAAG/R,kBAAmB,EAAGzI,KAAKuxB,aAAajd,EAAE1M,aAAa4S,GAAG/R,kBAAmBzI,KAAKkmB,WAAWgE,OAAOK,cAAcnG,SAEpJ9P,EAAE1M,aAAa4S,GAAG7R,gBAAgBinB,KAAK/I,WACnC6K,EAAK1xB,KAAKkmB,WAAWgE,OAAOK,cAAcD,KAAOA,EAAOmB,GACzD2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACjCmqB,EAAGP,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,wBAC9CwqB,EAAGI,aAAaxd,EAAE1M,aAAa4S,GAAG7R,gBAAiB,EAAG3I,KAAKuxB,aAAajd,EAAE1M,aAAa4S,GAAG7R,gBAAiB3I,KAAKkmB,WAAWgE,OAAOK,cAAcnG,SAEpJ9P,EAAE1M,aAAa4S,GAAGxS,WAAW4nB,KAAKvJ,WAAaA,EAC/C/R,EAAE1M,aAAa4S,GAAGvS,SAAS2nB,KAAKvJ,WAAaA,EAC7C/R,EAAE1M,aAAa4S,GAAG/R,kBAAkBmnB,KAAKvJ,WAAaA,EACtD/R,EAAE1M,aAAa4S,GAAG7R,gBAAgBinB,KAAKvJ,WAAaA,OAGpD/R,EAAE1M,aAAa4S,GAAGxS,WAAW4nB,KAAKvJ,WAAaA,EAC/C/R,EAAE1M,aAAa4S,GAAGvS,SAAS2nB,KAAKvJ,WAAaA,EAC7C/R,EAAE1M,aAAa4S,GAAG/R,kBAAkBmnB,KAAKvJ,WAAaA,EACtD/R,EAAE1M,aAAa4S,GAAG7R,gBAAgBinB,KAAKvJ,WAAaA,EAEpDrmB,KAAKkmB,WAAW2D,uBAAyB7pB,KAAKkmB,WAAW6D,kBACzD0B,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,gBAChDukB,EAAKrB,WAAW9V,EAAE1M,aAAa4S,GAAGxS,WAAYsM,EAAE1M,aAAa4S,GAAG/R,mBAChEgjB,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,cAChDukB,EAAKrB,WAAW9V,EAAE1M,aAAa4S,GAAGvS,SAAUqM,EAAE1M,aAAa4S,GAAG7R,kBAElEI,GACJ,CACJ,MACK,GAAIuL,aAAanD,EAAUQ,SAE5B,GADA8Z,EAAKjB,QAAQlW,EAAGtU,KAAKkmB,WAAWsE,QAAQpG,MAAOpkB,KAAKkmB,WAAWsE,QAAQL,YAClEnqB,KAAKkmB,WAAW8D,iBACjB,IAAK,IAAI1pB,KAAKgU,EAAE/B,SACZ+B,EAAE/B,SAASjS,GAAGsvB,KAAKvJ,WAAaA,OAIvC,GAAI/R,aAAasR,EAAW+J,SAC7BlE,EAAKsG,SAAS,CAACzd,EAAEC,EAAGD,EAAE/F,EAAG+F,EAAEkG,IAAI,EAAOxa,KAAKkmB,WAAWuE,SAASrG,MAAOpkB,KAAKkmB,WAAWuE,SAASN,WAC1FnqB,KAAKkmB,WAAW8D,mBACjB1V,EAAEC,EAAEqb,KAAKvJ,WAAa/R,EAAE/F,EAAEqhB,KAAKvJ,WAAa/R,EAAEkG,EAAEoV,KAAKvJ,WAAaA,QAGrE,GAAI/R,aAAauR,EAAW2J,SACzBxvB,KAAKkmB,WAAW6D,kBAChB0B,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,YAChDukB,EAAKrB,WAAW9V,EAAE3K,OAAOiB,QAAQ1K,IAAI,EAAGoU,EAAE0d,iBAAiBhwB,OAAOsS,EAAEqQ,SAAUrQ,EAAE3K,QAAS2K,EAAEmb,MAC3FhE,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,YAChDukB,EAAKrB,WAAW9V,EAAE3K,OAAOiB,QAAQ1K,IAAIoU,EAAE2d,gBAAiB,GAAGjwB,OAAOsS,EAAEqQ,SAAUrQ,EAAE3K,QAAS2K,EAAEmb,OAE/FhE,EAAK2F,aAAa9c,EAAE/M,KACpBkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,YACrCukB,EAAKf,QAAQpW,EAAE3K,OAEf2K,EAAE4d,UAAW5d,EAAE6d,UAAWnyB,KAAKkmB,WAAWwE,QAAQtG,MAAOpkB,KAAKkmB,WAAWwE,QAAQP,UAAW7V,EAAEqQ,UACzF3kB,KAAKkmB,WAAW8D,mBACjB1V,EAAE3K,OAAOimB,KAAKvJ,WAAaA,EAC3B/R,EAAEmb,KAAKG,KAAKvJ,WAAaA,QAG5B,GAAI/R,aAAawR,EAAiB4J,eAAgB,CACnDjE,EAAK2F,aAAa9c,EAAE/M,KACpBkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,YACrC,IAAIkrB,EAAOtM,EAAiB4J,eAAe2C,mBAAmBja,eAAe9D,EAAEoW,QAAQ/gB,OAAOhK,EAAG2U,EAAEoW,QAAQ/gB,OAAO/J,EAAG0U,EAAEoW,QAAQwH,UAAW5d,EAAEoW,QAAQyH,UAAW7d,EAAEgC,WAAYhC,EAAEiC,SAAUjC,EAAEoW,QAAQ/F,SAAU,CAAErM,aAAa,IAC5NmT,EAAKzf,KAAKomB,EAAMpyB,KAAKkmB,WAAWyE,cAAcvG,MAAOpkB,KAAKkmB,WAAWyE,cAAcR,UACvF,MACS7V,aAAa8B,EAASlD,OAC3BuY,EAAKjY,OAAOc,EAAE3K,OAAQ2K,EAAEjB,OAAQrT,KAAKkmB,WAAW1S,OAAO4Q,MAAOpkB,KAAKkmB,WAAW1S,OAAO2W,WAEhF7V,aAAaiR,EAAepP,aACjCsV,EAAK6G,UAAUhe,EAAEd,OAAO7J,OAAQ2K,EAAEd,OAAOH,OAAQiB,EAAEgC,WAAYhC,EAAEiC,SAAUvW,KAAKkmB,WAAW0E,aAAaxG,MAAOpkB,KAAKkmB,WAAW0E,aAAaT,WAEvI7V,aAAarN,EAAS+G,QACvBhO,KAAKkmB,WAAW0D,cAAkBtV,EAAEsb,KAAKlJ,YAAepS,EAAEsb,KAAKhJ,YAActS,EAAEsb,KAAK/I,UAEpF4E,EAAKqG,aAAaxd,EAAG,EAAGtU,KAAKkmB,WAAW2E,OAAOzG,OAC/C9P,EAAEsb,KAAKvJ,WAAaA,GAGnB/R,aAAanB,EAAO2B,MACzB2W,EAAKhgB,KAAK6I,EAAEC,EAAGD,EAAE/F,EAAGvO,KAAKkmB,WAAWza,KAAK2Y,MAAOpkB,KAAKkmB,WAAWza,KAAK0e,WAChEnqB,KAAKkmB,WAAW8D,kBAAqB1V,EAAEC,EAAEqb,KAAKlJ,aAC/CpS,EAAEC,EAAEqb,KAAKvJ,WAAaA,GACrBrmB,KAAKkmB,WAAW8D,kBAAqB1V,EAAE/F,EAAEqhB,KAAKlJ,aAC/CpS,EAAE/F,EAAEqhB,KAAKvJ,WAAaA,IAErB/R,aAAalB,EAASW,QAC3B0X,EAAK8G,MAAMje,EAAEC,EAAGD,EAAE/F,EAAGvO,KAAKkmB,WAAW6E,OAAO3G,MAAOpkB,KAAKkmB,WAAW6E,OAAOZ,WACtEnqB,KAAKkmB,WAAW8D,kBAAoB1V,EAAE/F,EAAEqhB,KAAKlJ,YAAcpS,EAAE/F,EAAEqhB,KAAK/I,SACpE4E,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,YAChDukB,EAAKqG,aAAaxd,EAAE/F,EAAG,EAAG,YAG1B+F,EAAE/F,EAAEqhB,KAAKvJ,WAAaA,EAErBrmB,KAAKkmB,WAAW8D,kBAAqB1V,EAAEC,EAAEqb,KAAKlJ,aAC/CpS,EAAEC,EAAEqb,KAAKvJ,WAAaA,GACrBrmB,KAAKkmB,WAAW8D,kBAAqB1V,EAAE/F,EAAEqhB,KAAKlJ,aAC/CpS,EAAE/F,EAAEqhB,KAAKvJ,WAAaA,IAErB/R,aAAaqR,EAAU7B,SACxB9jB,KAAKkmB,WAAW6D,kBAChB0B,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,UAChDukB,EAAKhgB,KAAK6I,EAAE0P,UAAW1P,EAAE2P,WAAYjkB,KAAKkmB,WAAWnC,MAAMK,MAAOpkB,KAAKkmB,WAAWnC,MAAMoG,YAE5FG,EAAK8G,aAAa9c,EAAE/M,KACpB+iB,EAAKvG,MAAMzP,EAAEyP,MAAOzP,EAAE0P,UAAW1P,EAAE2P,WAAWrZ,QAAQuK,IAAIb,EAAE0P,YACxDhkB,KAAKkmB,WAAW8D,mBAChByB,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,iBAChDukB,EAAKqG,aAAaxd,EAAE2P,WAAY,EAAGjkB,KAAKkmB,WAAWnC,MAAMK,OACzD9P,EAAE2P,WAAW2L,KAAKvJ,WAAaA,IAG9B/R,aAAa0R,EAAS9B,QAC3BoG,EAAK8G,aAAa9c,EAAE/M,KACpB+iB,EAAKnG,KAAK7P,EAAE6P,KAAM7P,EAAE/K,OAAO5J,EAAG2U,EAAE/K,OAAO3J,EAAG0U,GACtCtU,KAAKkmB,WAAW/B,KAAK5a,SACrBkiB,EAAK2F,aAAa,GAAGtlB,OAAOwI,EAAE/M,IAAK,QACnCkkB,EAAK0F,oBAAoB,GAAGrlB,OAAOwI,EAAEpN,UAAW,aAC/ClH,KAAKkmB,WAAW/B,KAAKmG,KAAOA,EAAOmB,GAAMpjB,MAAMiM,EAAE/K,OAAQvJ,KAAKkmB,WAAW/B,KAAKC,QAEnF9P,EAAE/K,OAAOqmB,KAAKvJ,WAAaA,GAG3B5b,QAAQ+nB,MAAM,sCAElB/G,EAAK0F,oBAAoB,MACzB1F,EAAK2F,aAAa,MAClB9G,EAAK6G,oBAAoB,MACzB7G,EAAK8G,aAAa,KACtB,EAYAnM,EAAgBpd,UAAU4qB,kBAAoB,SAAUhH,GAE1B,MAAtBzrB,KAAKwsB,eAAyBxsB,KAAKwsB,cAAcja,SAAShS,OAAS,IACnEkrB,EAAK2F,aAAapxB,KAAKwsB,cAAcjlB,KACrCkkB,EAAKjB,QAAQxqB,KAAKwsB,cAAe,WACjCf,EAAK6F,UAAUtxB,KAAKwsB,cAAcja,SAAS,GAAI,EAAG,WAE1D,EAcA0S,EAAgBpd,UAAU+hB,aAAe,SAAUvD,EAAYoF,GAE3D,IAAK,IAAInrB,KAAKN,KAAKuS,SACXvS,KAAKkmB,WAAW0D,cAAgB5pB,KAAKuS,SAASjS,GAAGsvB,KAAKvJ,YAAcA,GAAcrmB,KAAKuS,SAASjS,GAAGsvB,KAAK/I,UACxG4E,EAAK2F,aAAapxB,KAAKuS,SAASjS,GAAGiH,KACnCkkB,EAAKmG,aAAa5xB,KAAKuS,SAASjS,GAAI,EAAGN,KAAKuxB,aAAavxB,KAAKuS,SAASjS,GAAI,mBAC3EN,KAAKuS,SAASjS,GAAGsvB,KAAKvJ,WAAaA,EAG/C,EAWApB,EAAgBpd,UAAUklB,OAAS,WAC/B,IAAI1G,EAAarmB,KAAKqmB,aAEtBrmB,KAAKyrB,KAAK8B,eAAelH,GACzBrmB,KAAKsqB,KAAKiD,eAAelH,GACrBrmB,KAAKimB,OAAO+C,UACZhpB,KAAKimB,OAAO+C,WAChBhpB,KAAKwtB,QACDxtB,KAAKimB,OAAOiD,SACZlpB,KAAKimB,OAAOiD,QAAQlpB,KAAKyrB,KAAMzrB,KAAKsqB,MACxCtqB,KAAKytB,QAAQpH,EAAYrmB,KAAKyrB,KAAMzrB,KAAKsqB,MACrCtqB,KAAKimB,OAAOkD,UACZnpB,KAAKimB,OAAOkD,SAASnpB,KAAKyrB,KAAMzrB,KAAKsqB,MACzCtqB,KAAKyrB,KAAKiC,aAAarH,GACvBrmB,KAAKsqB,KAAKoD,aAAarH,EAC3B,EASApB,EAAgBpd,UAAU4lB,QAAU,SAAUpH,EAAYoF,EAAMnB,GACxDtqB,KAAKimB,OAAOsB,YACZvnB,KAAKiqB,SAASwB,GAEdzrB,KAAKimB,OAAO0B,YACZ3nB,KAAK2nB,WAAW8D,GAEpBzrB,KAAKwxB,cAAcnL,EAAYoF,EAAMnB,GACrCtqB,KAAK4pB,aAAavD,EAAYoF,GAC9BzrB,KAAKyyB,kBAAkBhH,GAGvBA,EAAK2F,aAAa,MAClB3F,EAAK0F,oBAAoB,KAC7B,EAYAlM,EAAgBpd,UAAU2lB,MAAQ,WAE9BxtB,KAAKyrB,KAAK+B,MAAMxtB,KAAKimB,OAAO8B,iBAAmB,QACnD,EAaA9C,EAAgBpd,UAAU6qB,eAAiB,SAAU3F,GACjD,IAAK,IAAIzsB,KAAKN,KAAKuS,SACfvS,KAAKuS,SAASjS,GAAGsvB,KAAKjJ,YAAa,EAGvC,OAFIoG,GACA/sB,KAAK+sB,SACF/sB,IACX,EASAilB,EAAgBpd,UAAU8qB,SAAW,WACjC,IAAI7P,EAAIqD,EACR,OAAO,IAAIrf,EAAS6H,OAAO3O,KAAK4wB,uBAAuB,EAAG,GAAI5wB,KAAK4wB,uBAAuB5wB,KAAKirB,WAAW7Z,OAA0C,QAAhC0R,EAAK9iB,KAAKimB,OAAOsC,iBAA8B,IAAPzF,EAAgBA,EAAK,GAAM9iB,KAAKirB,WAAW5Z,QAA2C,QAAhC8U,EAAKnmB,KAAKimB,OAAOuC,iBAA8B,IAAPrC,EAAgBA,EAAK,IACnR,EASAlB,EAAgBpd,UAAU6gB,SAAW,WACjC1oB,KAAK2oB,MAAMD,SAAS1oB,KACxB,EAMAilB,EAAgBpd,UAAU+qB,SAAW,SAAUC,EAAMC,GACjD,OAAOC,WAAW9vB,WAAW+vB,iBAAiBH,EAAM,MAAMI,iBAAiBH,GAC/E,EAOA7N,EAAgBpd,UAAUqrB,2BAA6B,WACnD,IAAIlvB,EAAQhE,KACRmzB,EAAYnvB,EAAM8iB,OAAOsM,WAC7BpvB,EAAM8iB,OAAOiF,MAAMsH,QAAU,OAC7B,IAAIC,EAAUtzB,KAAK4yB,SAASO,EAAW,YAAc,EAAGI,EAASvzB,KAAK4yB,SAAS5uB,EAAM8iB,OAAQ,iBAAmB,EAAG0M,EAAKxzB,KAAK4yB,SAASO,EAAW,iBAAmBG,EAASG,EAAKzzB,KAAK4yB,SAASO,EAAW,kBAAoBG,EAASI,EAAK1zB,KAAK4yB,SAASO,EAAW,gBAAkBG,EAASrG,EAAKjtB,KAAK4yB,SAASO,EAAW,mBAAqBG,EAASK,EAAK3zB,KAAK4yB,SAAS5uB,EAAM8iB,OAAQ,sBAAwByM,EAAQK,EAAK5zB,KAAK4yB,SAAS5uB,EAAM8iB,OAAQ,uBAAyByM,EAAQM,EAAK7zB,KAAK4yB,SAAS5uB,EAAM8iB,OAAQ,qBAAuByM,EAAQO,EAAK9zB,KAAK4yB,SAAS5uB,EAAM8iB,OAAQ,wBAA0ByM,EACvlBQ,EAAIZ,EAAUa,YACdxf,EAAI2e,EAAUc,aAElB,OADAjwB,EAAM8iB,OAAOiF,MAAMsH,QAAU,QACtB,CAAEjiB,MAAO2iB,EAAIP,EAAKC,EAAKE,EAAKC,EAAIviB,OAAQmD,EAAIkf,EAAKzG,EAAK4G,EAAKC,EACtE,EAWA7O,EAAgBpd,UAAU+kB,aAAe,WACrC,IACI9J,EAAIqD,EAAI0I,EAAIC,EAAIoF,EAAIC,EADpBre,EAAQ9V,KAERgE,EAAQhE,KACRo0B,EAAW,SAAUL,EAAGvf,GACxB,IAAIsO,EAAIqD,EACR4N,GAA+C,QAAzCjR,EAAK9e,EAAMiiB,OAAOoC,yBAAsC,IAAPvF,EAAgBA,EAAK,EAC5EtO,GAAgD,QAA1C2R,EAAKniB,EAAMiiB,OAAOqC,0BAAuC,IAAPnC,EAAgBA,EAAK,EAC7EniB,EAAMinB,WAAW7Z,MAAQ2iB,EACzB/vB,EAAMinB,WAAW5Z,OAASmD,EACtBxQ,EAAM8iB,kBAAkBuN,mBACxBrwB,EAAM8iB,OAAO1V,MAAQ2iB,EACrB/vB,EAAM8iB,OAAOzV,OAASmD,GAEjBxQ,EAAM8iB,kBAAkBwN,YAC7Bxe,EAAMgR,OAAOyF,aAAa,UAAW,OAAOzgB,OAAOioB,EAAG,KAAKjoB,OAAO0I,IAClEsB,EAAMgR,OAAOyF,aAAa,QAAS,GAAGzgB,OAAOioB,IAC7Cje,EAAMgR,OAAOyF,aAAa,SAAU,GAAGzgB,OAAO0I,IAC9CsB,EAAM2V,KAAK8I,QAAQvwB,EAAMinB,YACzBnV,EAAMuV,aAAaU,MAAM3a,MAAQ,GAAGtF,OAAOioB,EAAG,MAC9Cje,EAAMuV,aAAaU,MAAM1a,OAAS,GAAGvF,OAAO0I,EAAG,OAG/C/J,QAAQ+nB,MAAM,0GAEdxuB,EAAMiiB,OAAO2B,kBAGb5jB,EAAMwwB,cAAa,EAE3B,EACA,GAAIxwB,EAAMiiB,OAAOe,WAAahjB,EAAMiiB,OAAOiB,YAAa,CAEpD,IAAI9V,EAAQnO,WAAWwxB,YAActzB,SAASuzB,gBAAgBV,aAAe7yB,SAASkrB,KAAK2H,YACvF3iB,EAASpO,WAAW0xB,aAAexzB,SAASuzB,gBAAgBT,cAAgB9yB,SAASkrB,KAAK4H,aAC9FjwB,EAAM8iB,OAAOiF,MAAMC,SAAW,WAC9BhoB,EAAM8iB,OAAOiF,MAAM3a,OAAmD,QAAzC0R,EAAK9e,EAAMiiB,OAAOoC,yBAAsC,IAAPvF,EAAgBA,EAAK,GAAO1R,EAAQ,KAClHpN,EAAM8iB,OAAOiF,MAAM1a,QAAoD,QAAzC8U,EAAKniB,EAAMiiB,OAAOoC,yBAAsC,IAAPlC,EAAgBA,EAAK,GAAO9U,EAAS,KACpHrN,EAAM8iB,OAAOiF,MAAMG,IAAM,MACzBloB,EAAM8iB,OAAOiF,MAAME,KAAO,MAC1BmI,EAAShjB,EAAOC,EACpB,MACK,GAAIrN,EAAMiiB,OAAOiB,YAAa,CAE/BljB,EAAM8iB,OAAOiF,MAAMC,SAAW,SAC9B,IAAI4I,EAAQ50B,KAAKkzB,6BACjBlvB,EAAM8iB,OAAOiF,MAAM3a,OAAmD,QAAzCyd,EAAK7qB,EAAMiiB,OAAOoC,yBAAsC,IAAPwG,EAAgBA,EAAK,GAAO+F,EAAMxjB,MAAQ,KACxHpN,EAAM8iB,OAAOiF,MAAM1a,QAAqD,QAA1Cyd,EAAK9qB,EAAMiiB,OAAOqC,0BAAuC,IAAPwG,EAAgBA,EAAK,GAAO8F,EAAMvjB,OAAS,KAC3HrN,EAAM8iB,OAAOiF,MAAMG,IAAM,GACzBloB,EAAM8iB,OAAOiF,MAAME,KAAO,GAC1BmI,EAASQ,EAAMxjB,MAAOwjB,EAAMvjB,OAChC,MAEIrN,EAAM8iB,OAAOiF,MAAM3a,MAAQ,GAC3BpN,EAAM8iB,OAAOiF,MAAM1a,OAAS,GAC5B+iB,EAAoD,QAA1CF,EAAKlwB,EAAMiiB,OAAOgC,0BAAuC,IAAPiM,EAAgBA,EAAK,KAAkD,QAA3CC,EAAKnwB,EAAMiiB,OAAOkC,2BAAwC,IAAPgM,EAAgBA,EAAK,KAEhKnwB,EAAMiiB,OAAO+B,gBACbhkB,EAAM+oB,QACd,EAUA9H,EAAgBpd,UAAUgtB,wBAA0B,SAAUrK,GAC1D,IAAK,IAAIlqB,KAAKN,KAAKuS,SACXvS,KAAKuS,SAASjS,GAAGsvB,KAAKlJ,YAAc8D,EAAQsK,aAAa90B,KAAKuS,SAASjS,MACvEN,KAAKuS,SAASjS,GAAGsvB,KAAKjJ,YAAa,EAE/C,EAcA1B,EAAgBpd,UAAU8oB,gBAAkB,SAAUtoB,EAAO0sB,GACzD,IAAI/wB,EAAQhE,UACY,IAAb+0B,IACPA,EAAY,GAEhBA,GAAa/wB,EAAMynB,KAAKniB,MAAM3J,EAE9B,IAAK,IAAImxB,EAAS,EAAGA,EAAS9sB,EAAMuO,SAAShS,OAAQuwB,IAAU,CAC3D,IAAIte,EAAOxO,EAAMuO,SAASue,GAC1B,IAAKte,EAAKod,KAAKhJ,WAAapU,EAAKod,KAAKlJ,aAAelU,EAAKnI,SAAShC,GAAS0sB,EAExE,OAAO,IAAI9P,EAAgB+P,UAAUxiB,EAAMyS,EAAgB+P,UAAUC,QAAQC,UAAUpE,EAE/F,CACA,OAAO,IACX,EAUA7L,EAAgBpd,UAAUstB,YAAc,SAAUhW,GAC9C,IAAInb,EAAQhE,KACRqI,EAAQrI,KAAK2wB,gBAAgB3sB,EAAM4sB,uBAAuBzR,EAAE8D,OAAOE,IAAIxjB,EAAGwf,EAAE8D,OAAOE,IAAIvjB,GAAIqlB,EAAgBmQ,wBAA0B31B,KAAK8K,IAAIvG,EAAMiiB,OAAOsC,WAAa,EAAKvkB,EAAMiiB,OAAOuC,WAAa,IAC3M,GAAIngB,EACArE,EAAMuO,SAASlK,EAAMyoB,QAAQjS,UAAUwW,eAAelW,GAClDnf,KAAKs1B,YAAct1B,KAAKs1B,WAAWtV,OAAO,UACpB,SAAlB3X,EAAMwoB,UACFre,EAAOxO,EAAMuxB,MAAMltB,EAAMmtB,QAAQ5tB,aAAaS,EAAMotB,QAAQpb,aAAahS,EAAMqtB,MAC1E9F,KAAKlJ,aACVlU,EAAKod,KAAKjJ,YAAcnU,EAAKod,KAAKjJ,YAEf,UAAlBte,EAAMwoB,WACPre,EAAOxO,EAAMuO,SAASlK,EAAMyoB,SACvBlB,KAAKlJ,aACVlU,EAAKod,KAAKjJ,YAAcnU,EAAKod,KAAKjJ,YAE1C3iB,EAAM+oB,UAED/sB,KAAKs1B,YAAct1B,KAAKs1B,WAAWtV,OAAO,OAC/Chc,EAAMuO,SAASlK,EAAMyoB,QAAQlB,KAAKnJ,kBAAoBziB,EAAMuO,SAASlK,EAAMyoB,QAAQlB,KAAKnJ,iBACxFziB,EAAM+oB,eAGT,GAA2B,MAAvB/oB,EAAMwoB,cAAuB,CAClC,IAAIha,EAAOxO,EAAM4sB,uBAAuBzR,EAAE8D,OAAOE,IAAIxjB,EAAGwf,EAAE8D,OAAOE,IAAIvjB,GACrEoE,EAAMwoB,cAAcja,SAASnS,KAAK,IAAI6G,EAAS+G,OAAOwE,EAAK7S,EAAG6S,EAAK5S,IACnEoE,EAAM+oB,QACV,CACJ,EAYA9H,EAAgBpd,UAAU+oB,uBAAyB,SAAUjxB,EAAGC,GAC5D,MAAO,CACHD,GAAIA,EAAIK,KAAKimB,OAAOsC,UAAYvoB,KAAKimB,OAAOvD,SAAW1iB,KAAKimB,OAAOmB,OACnExnB,GAAIA,EAAII,KAAKimB,OAAOuC,UAAYxoB,KAAKimB,OAAOtD,SAAW3iB,KAAKimB,OAAOoB,OAE3E,EAaApC,EAAgBpd,UAAU8tB,oBAAsB,SAAUh2B,EAAGC,GACzD,MAAO,CAAED,EAAGA,EAAIK,KAAKimB,OAAOsC,UAAYvoB,KAAKimB,OAAOvD,QAAS9iB,EAAGA,EAAII,KAAKimB,OAAOuC,UAAYxoB,KAAKimB,OAAOtD,QAC5G,EASAsC,EAAgBpd,UAAU+tB,uBAAyB,WAC/C,OAAO51B,KAAKysB,gBAAgBlsB,MAChC,EAWA0kB,EAAgBpd,UAAUguB,iBAAmB,SAAU1W,GACnD,IAAInb,EAAQhE,KACZ,GAAgB,GAAZmf,EAAEmD,OAAN,CAEA,IAAIwT,EAAiB9xB,EAAM2sB,gBAAgB3sB,EAAM4sB,uBAAuBzR,EAAE8D,OAAOE,IAAIxjB,EAAGwf,EAAE8D,OAAOE,IAAIvjB,GAAIqlB,EAAgBmQ,wBAA0B31B,KAAK8K,IAAIvG,EAAMiiB,OAAOsC,UAAWvkB,EAAMiiB,OAAOuC,YACjM,GAAKsN,EAAL,CAGA,GAA+B,UAA3BA,EAAejF,UAAwB7sB,EAAMuO,SAASujB,EAAehF,QAAQlB,KAAKjJ,WAGlF,IAAK,IAAIrmB,EAAI,EAAGA,EAAI0D,EAAMuO,SAAShS,OAAQD,IACnC0D,EAAMuO,SAASjS,GAAGsvB,KAAKjJ,aACvB3iB,EAAMyoB,gBAAgBrsB,KAAK,IAAI6kB,EAAgB+P,UAAUhxB,EAAMuO,SAASjS,GAAI2kB,EAAgB+P,UAAUC,QAAQC,UAAU50B,IACxH0D,EAAMuO,SAASjS,GAAGue,UAAUkX,mBAAmB5W,QAItD,CAED,IAAKnb,EAAMuO,SAASujB,EAAehF,QAAQlB,KAAKhJ,UAC5C,OACJ5iB,EAAMyoB,gBAAgBrsB,KAAK01B,GACI,SAA3BA,EAAejF,SACf7sB,EAAMuxB,MAAMO,EAAeN,QAAQ5tB,aAAakuB,EAAeL,QAC1Dpb,aAAayb,EAAeJ,KAC5B7W,UAAUkX,mBAAmB5W,GACF,UAA3B2W,EAAejF,UACpB7sB,EAAMuO,SAASujB,EAAehF,QAAQjS,UAAUkX,mBAAmB5W,EAC3E,CACAnb,EAAM+oB,QAxBI,CAHA,CA4Bd,EAYA9H,EAAgBpd,UAAUmuB,iBAAmB,SAAU7W,GACnD,IAAInb,EAAQhE,KACRi2B,EAAgB,CAAEt2B,EAAGwf,EAAE8D,OAAOQ,WAAW9jB,EAAGC,EAAGuf,EAAE8D,OAAOQ,WAAW7jB,GAUvE,GATAuf,EAAE8D,OAAOQ,WAAW9jB,GAAKqE,EAAMiiB,OAAOsC,UACtCpJ,EAAE8D,OAAOQ,WAAW7jB,GAAKoE,EAAMiiB,OAAOuC,UAQlCxoB,KAAKs1B,aAAet1B,KAAKs1B,WAAWtV,OAAO,QAAUhgB,KAAKs1B,WAAWtV,OAAO,aAAc,CAC1F,IAAKhgB,KAAKimB,OAAOwD,UACb,OAEJzlB,EAAMwqB,UAAUxqB,EAAMynB,KAAK4B,OAAOziB,QAAQ1K,IAAIif,EAAE8D,OAAOQ,aACvDzf,EAAM+oB,QACV,MAOI,IAAK,IAAIzsB,KAFT6e,EAAE8D,OAAOQ,WAAW9jB,GAAKqE,EAAMynB,KAAKniB,MAAM3J,EAC1Cwf,EAAE8D,OAAOQ,WAAW7jB,GAAKoE,EAAMynB,KAAKniB,MAAM1J,EAC5BoE,EAAMyoB,gBAAiB,CACjC,IAAI5iB,EAAI7F,EAAMyoB,gBAAgBnsB,GAC9B,GAAkB,SAAduJ,EAAEgnB,SACF7sB,EAAMuxB,MAAM1rB,EAAE2rB,QAAQxoB,eAAenD,EAAE4rB,OAAQ5rB,EAAE6rB,IAAK,IAAIzuB,EAAS+G,OAAOmR,EAAE8D,OAAOQ,WAAW9jB,EAAGwf,EAAE8D,OAAOQ,WAAW7jB,IACrHoE,EAAMuxB,MAAM1rB,EAAE2rB,QAAQ5tB,aAAaiC,EAAE4rB,QAAQpb,aAAaxQ,EAAE6rB,KAAK7W,UAAUqX,cAAc/W,QAExF,GAAkB,UAAdtV,EAAEgnB,SAAsB,CAC7B,IAAK7sB,EAAMuO,SAAS1I,EAAEinB,QAAQlB,KAAKhJ,UAC/B,SACJ5iB,EAAMuO,SAAS1I,EAAEinB,QAAQ5wB,IAAIif,EAAE8D,OAAOQ,YACtCzf,EAAMuO,SAAS1I,EAAEinB,QAAQjS,UAAUqX,cAAc/W,EACrD,CACJ,CAGJA,EAAE8D,OAAOQ,WAAW9jB,EAAIs2B,EAAct2B,EACtCwf,EAAE8D,OAAOQ,WAAW7jB,EAAIq2B,EAAcr2B,EACtCoE,EAAM+oB,QACV,EAWA9H,EAAgBpd,UAAUsuB,eAAiB,SAAUhX,GACjD,IAAInb,EAAQhE,KACZ,GAAgB,GAAZmf,EAAEmD,OAAN,CAKA,IAAK,IAAIhiB,KAHJ6e,EAAE8D,OAAOO,YACVxf,EAAMmxB,YAAYhW,GAERnb,EAAMyoB,gBAAiB,CACjC,IAAI5iB,EAAI7F,EAAMyoB,gBAAgBnsB,GACZ,SAAduJ,EAAEgnB,SACF7sB,EAAMuxB,MAAM1rB,EAAE2rB,QAAQ5tB,aAAaiC,EAAE4rB,QAAQpb,aAAaxQ,EAAE6rB,KAAK7W,UAAUuX,iBAAiBjX,GAEzE,UAAdtV,EAAEgnB,UACP7sB,EAAMuO,SAAS1I,EAAEinB,QAAQjS,UAAUuX,iBAAiBjX,EAE5D,CACAnb,EAAMyoB,gBAAkB,GACxBzoB,EAAM+oB,QAdI,CAed,EAWA9H,EAAgBpd,UAAUwuB,kBAAoB,SAAUlX,GACpD,GAAKnf,KAAKimB,OAAOuD,WAAjB,CAGA,IAAI8M,EAAW,KAEXtyB,EAAQhE,KACRu2B,EAAKpX,EACLoX,EAAG3wB,OAAS,EACZ5B,EAAM0qB,QAAQ1qB,EAAMiiB,OAAOmB,OAASkP,EAAUtyB,EAAMiiB,OAAOoB,OAASiP,EAAU,IAAIrvB,EAAS+G,OAAOmR,EAAE8D,OAAOE,IAAIxjB,EAAGwf,EAAE8D,OAAOE,IAAIvjB,IAE1H22B,EAAG3wB,OAAS,GACjB5B,EAAM0qB,QAAQ1qB,EAAMiiB,OAAOmB,OAASkP,EAAUtyB,EAAMiiB,OAAOoB,OAASiP,EAAU,IAAIrvB,EAAS+G,OAAOmR,EAAE8D,OAAOE,IAAIxjB,EAAGwf,EAAE8D,OAAOE,IAAIvjB,IAEnIuf,EAAEnZ,iBACFhC,EAAM+oB,QAZN,CAaJ,EAQA9H,EAAgBpd,UAAU2sB,aAAe,SAAUzH,GAC/C/sB,KAAKyrB,KAAK4B,OAAO1tB,EACbK,KAAKsqB,KAAK+C,OAAO1tB,EACbK,KAAKimB,OAAOvD,QACR1iB,KAAKirB,WAAW7Z,OAASpR,KAAKimB,OAAO4B,qBAAuB,KACxE7nB,KAAKyrB,KAAK4B,OAAOztB,EACbI,KAAKsqB,KAAK+C,OAAOztB,EACbI,KAAKimB,OAAOtD,QACR3iB,KAAKirB,WAAW5Z,QAAUrR,KAAKimB,OAAO6B,qBAAuB,KACrEiF,GACA/sB,KAAK+sB,QAEb,EAQA9H,EAAgBpd,UAAU2mB,UAAY,SAAUgI,GAC5Cx2B,KAAKyrB,KAAK4B,OAAOhf,IAAImoB,GACrBx2B,KAAKsqB,KAAK+C,OAAOhf,IAAImoB,GACrBx2B,KAAKimB,OAAOvD,QAAU8T,EAAU72B,EAChCK,KAAKimB,OAAOtD,QAAU6T,EAAU52B,CACpC,EAUAqlB,EAAgBpd,UAAU6mB,QAAU,SAAU+H,EAAaC,EAAaC,GACpE,IAAIC,EAAS52B,KAAK4wB,uBAAuB+F,EAAeh3B,EAAGg3B,EAAe/2B,GAC1EI,KAAKyrB,KAAKniB,MAAM3J,EAAIK,KAAKsqB,KAAKhhB,MAAM3J,EAAIK,KAAKimB,OAAOmB,OAAS3nB,KAAK6K,IAAImsB,EAAa,KACnFz2B,KAAKyrB,KAAKniB,MAAM1J,EAAII,KAAKsqB,KAAKhhB,MAAM1J,EAAII,KAAKimB,OAAOoB,OAAS5nB,KAAK6K,IAAIosB,EAAa,KACnF,IAAIG,EAAS72B,KAAK4wB,uBAAuB+F,EAAeh3B,EAAGg3B,EAAe/2B,GACtEk3B,EAAa92B,KAAKyrB,KAAK4B,OAAO1tB,GAAKk3B,EAAOl3B,EAAIi3B,EAAOj3B,GAAKK,KAAKyrB,KAAKniB,MAAM3J,EAC1Eo3B,EAAa/2B,KAAKyrB,KAAK4B,OAAOztB,GAAKi3B,EAAOj3B,EAAIg3B,EAAOh3B,GAAKI,KAAKyrB,KAAKniB,MAAM1J,EAC9EI,KAAKwuB,UAAU,CAAE7uB,EAAGm3B,EAAYl3B,EAAGm3B,GACvC,EACA9R,EAAgBpd,UAAUglB,sBAAwB,WAC9C,IAAI/W,EAAQ9V,KACRgE,EAAQhE,KA0BZ,GAzBIA,KAAKimB,OAAOmD,YAEZ,IAAI1D,EAAepE,aAAathB,KAAKqrB,aAAerrB,KAAKqrB,aAAerrB,KAAK8mB,QACxEjH,MAAK,SAAUV,GAChBnb,EAAM6xB,iBAAiB1W,EAC3B,IACKgD,MAAK,SAAUhD,GAChBnb,EAAMgyB,iBAAiB7W,EAC3B,IACKY,IAAG,SAAUZ,GACdnb,EAAMmyB,eAAehX,EACzB,IAGAnb,EAAMyG,QAAQU,IAAI,+BAElBnL,KAAKimB,OAAOsD,iBAEZ,IAAI7D,EAAepE,aAAathB,KAAKqrB,aAAerrB,KAAKqrB,aAAerrB,KAAK8mB,QAAQrE,OAAM,SAAUtD,GACjGnb,EAAMqyB,kBAAkBlX,EAC5B,IAGAnb,EAAMyG,QAAQU,IAAI,qCAElBnL,KAAKimB,OAAOoD,YAAa,CAEzB,IAAI2N,EAAW,SAAU7T,GACrB,IAAIpQ,EAAS/O,EAAM8iB,OAAOmQ,wBAC1B,MAAO,CAAEt3B,EAAGwjB,EAAIxjB,EAAIoT,EAAOkZ,KAAMrsB,EAAGujB,EAAIvjB,EAAImT,EAAOmZ,IACvD,EAEA,GAAyC,mBAA9BjpB,WAAwB,aACY,mBAApCA,WAA8B,kBACrC,IACI,IAAIi0B,EAAe,KACfC,EAAe,KACfC,EAAiB,KACjBC,EAAuB,KACvBC,EAAe,WACfJ,EAAe,KACfC,EAAe,KACfC,EAAiB,KACjBC,EAAuB,KACvBrzB,EAAMyoB,gBAAkB,EAC5B,EACI8K,EAAU,CAEVt1B,WAAY,SAAU6B,GAClB,GAA0B,GAAtBA,EAAIC,QAAQxD,SACZ22B,EAAe,IAAIjwB,EAAS+G,OAAOgpB,EAAS,CAAEr3B,EAAGmE,EAAIC,QAAQ,GAAGyzB,QAAS53B,EAAGkE,EAAIC,QAAQ,GAAG0zB,WAC3FN,EAAe,IAAIlwB,EAAS+G,OAAOgpB,EAAS,CAAEr3B,EAAGmE,EAAIC,QAAQ,GAAGyzB,QAAS53B,EAAGkE,EAAIC,QAAQ,GAAG0zB,YAC3FL,EAAiBpzB,EAAM2sB,gBAAgB3sB,EAAM4sB,uBAAuBsG,EAAav3B,EAAGu3B,EAAat3B,GAAIqlB,EAAgByS,wBAA0Bj4B,KAAK8K,IAAIvG,EAAMiiB,OAAOsC,UAAWvkB,EAAMiiB,OAAOuC,cAC5I,UAA3B4O,EAAevG,UAAsB,CACvD,IAAI8G,EAAiB3zB,EAAMuO,SAAS6kB,EAAetG,QAC/C8G,EAAY,CACZ3U,OAAQ,CACJC,cAAc,EACdO,WAAY,CAAE9jB,EAAG,EAAGC,EAAG,GACvB4jB,YAAY,EACZ5B,aAAcuV,EAAavsB,QAC3BkX,aAAcqV,EAAavsB,QAC3BigB,OAAQ8M,IAGhB3zB,EAAMyoB,gBAAkB,CAAC2K,GACzBO,EAAe9Y,UAAUkX,mBAAmB6B,EAChD,CAER,EACAh1B,UAAW,SAAUkB,GACjB,GAA0B,GAAtBA,EAAIC,QAAQxD,QAAe62B,EAAgB,CAG3C,GAFAtzB,EAAIkC,iBACJlC,EAAI+zB,mBACCV,IAAiBD,EAClB,OAEJ,IAAInU,EAAMiU,EAAS,CAAEr3B,EAAGmE,EAAIC,QAAQ,GAAGyzB,QAAS53B,EAAGkE,EAAIC,QAAQ,GAAG0zB,UAC9DK,EAAQ9zB,EAAM4sB,uBAAuB7N,EAAIpjB,EAAGojB,EAAInjB,GAChDyV,EAAO,IAAIpO,EAAS+G,OAAOhK,EAAM4sB,uBAAuBsG,EAAav3B,EAAGu3B,EAAat3B,IAAI0V,WAAWwiB,GACxG,GAA+B,UAA3BV,EAAevG,SAAsB,CACrC,IAAK7sB,EAAMuO,SAAS6kB,EAAetG,QAAQlB,KAAKhJ,UAC5C,OACJ5iB,EAAMuO,SAAS6kB,EAAetG,QAAQ5wB,IAAImV,GAC1C,IAAIsiB,EAAiB3zB,EAAMuO,SAAS6kB,EAAetG,QAC/C8G,EAAY,CACZ1U,cAAc,EACdD,OAAQ,CACJQ,WAAYpO,EAAKzK,QACjB4Y,YAAY,EACZ5B,aAAcuV,EAAavsB,QAC3BkX,aAAcqV,EAAavsB,QAAQ1K,IAAImV,GACvCwV,OAAQ8M,IAGhBA,EAAe9Y,UAAUqX,cAAc0B,GACvC5zB,EAAM+oB,QACV,CACAmK,EAAe,IAAIjwB,EAAS+G,OAAO+U,EACvC,MACK,GAA0B,GAAtBjf,EAAIC,QAAQxD,OAAa,CAC9B,IAAKuV,EAAMmQ,OAAOwD,UACd,OAGJ3lB,EAAIkC,iBACJlC,EAAI+zB,kBACJ7zB,EAAMwqB,UAAUxqB,EAAMynB,KAAK4B,OACtBziB,QACAsJ,MAAMpQ,EAAI6B,OAAQ7B,EAAI8B,SAC3B5B,EAAM+oB,QACV,CACJ,EACAlqB,SAAU,SAAUiB,GAEhB,GAAIszB,GAA6C,UAA3BA,EAAevG,SAAsB,CACvD,IAAKsG,EACD,OAEJ,IAAIQ,EAAiB3zB,EAAMuO,SAAS6kB,EAAetG,QAC/C8G,EAAY,CACZ1U,cAAc,EACdD,OAAQ,CACJQ,WAAY,CAAE9jB,EAAG,EAAGC,EAAG,GACvB4jB,YAAY,EACZ5B,aAAcuV,EAAavsB,QAC3BkX,aAAcqV,EAAavsB,QAC3BigB,OAAQ8M,IAIZT,GAAgBC,GAAgBA,EAAa9sB,SAAS6sB,GAAgB,KAEtES,EAAe9Y,UAAUwW,eAAeuC,GAGxCD,EAAe9Y,UAAUuX,iBAAiBwB,EAElD,CACAN,GACJ,EACAx0B,YAAa,SAAUgB,GACnBwzB,GACJ,EACAp1B,gBAAiB,SAAU4B,GACvBuzB,EAAuBrzB,EAAMynB,KAAKniB,MAAMsB,OAC5C,EACAzI,cAAe,SAAU2B,GACrBuzB,EAAuB,IAC3B,EACAj1B,MAAO,SAAU0B,GACb,GAAKgS,EAAMmQ,OAAOuD,WAAlB,CAGA,IAAIuO,EAAaj0B,EAAIC,QAAQi0B,KAAK,GAC9BC,EAAan0B,EAAIC,QAAQi0B,KAAK,GAClC,GAAKl0B,EAAIC,SAAYszB,GAAyBU,GAAeE,EAA7D,CAIA,IAAIC,EAAU,IAAIjxB,EAAS+G,OAAO+pB,EAAWP,QAASO,EAAWN,SAC7DU,EAAU,IAAIlxB,EAAS+G,OAAOiqB,EAAWT,QAASS,EAAWR,SAC7D9tB,EAAS,IAAIwJ,EAAO2B,KAAKojB,EAASC,GAASxkB,OAAO,IACtD3P,EAAM0qB,QAAQ2I,EAAqB13B,EAAImE,EAAIjC,KAAMw1B,EAAqBz3B,EAAIkE,EAAIjC,KAAM8H,GACpF3F,EAAM+oB,QANN,CALA,CAYJ,GAEAqL,OAA0B,mBAG1BC,EADwBD,OAA0B,mBAChCp4B,KAAKqrB,aAAerrB,KAAKqrB,aAAerrB,KAAK8mB,OAAQyQ,GAIvE,IAAIrS,EAAyBoT,QAAQt4B,KAAKqrB,aAAerrB,KAAKqrB,aAAerrB,KAAK8mB,OAAQyQ,EAElG,CACA,MAAOpY,GACH1U,QAAQ+nB,MAAM,qCACd/nB,QAAQ+nB,MAAMrT,EAClB,MAEKlc,WAAmB,QAAoC,mBAAxBA,WAAmB,OACvDwH,QAAQ+nB,MAAM,+FAId/nB,QAAQC,KAAK,kFAErB,MAEI1G,EAAMyG,QAAQU,IAAI,+BAElBnL,KAAKimB,OAAOqD,WAEZtpB,KAAKs1B,WAAa,IAAI7P,EAAarH,WAAW,CAAEM,UAAU,IACrDmB,KAAK,UAAU,WAChB7b,EAAM0uB,gBAAe,EACzB,IACK7S,KAAK,SAAS,WACf7b,EAAMwoB,cAAgB,IAAIrb,EAAUQ,QACpC3N,EAAM+oB,QACV,IACKhN,GAAG,SAAS,WAEc,MAAvB/b,EAAMwoB,gBAEVxoB,EAAM6wB,wBAAwB7wB,EAAMwoB,eACpCxoB,EAAMwoB,cAAgB,KACtBxoB,EAAM+oB,SACV,IAGA/oB,EAAMyG,QAAQU,IAAI,iCAE1B,EAUA8Z,EAAgBpd,UAAU0wB,UAAY,SAAUC,GAG5C,IAAI1e,EAAQ7W,WAAkB,MAG9B,GAAI6W,GAAoC,mBAApBA,EAAMye,UACtB,OAAQv4B,KAAKsmB,KAAOxM,EAAMye,UAAUv4B,KAAMw4B,GAG1C,KAAM,+HAEd,EAMAvT,EAAgBpd,UAAU4wB,OAAS,WAC/B,OAAOz4B,KAAKsmB,IAChB,EAGArB,EAAgBiD,qBAAuB,KAEvCjD,EAAgBmD,sBAAwB,IAExCnD,EAAgBmQ,wBAA0B,EAE1CnQ,EAAgByS,wBAA0B,GAK1CzS,EAAgB+P,WAAanS,EAAoB,WACzC,SAAS6V,EAAQV,EAAMnH,GACnB7wB,KAAKg4B,KAAOA,EACZh4B,KAAK6wB,SAAWA,CACpB,CAQA,OAPA6H,EAAQ7wB,UAAU8wB,SAAW,WACzB,OAAO34B,KAAK6wB,UAAY5L,EAAgB+P,UAAUC,MACtD,EACAyD,EAAQ7wB,UAAUqtB,UAAY,SAAUpE,GAEpC,OADA9wB,KAAK8wB,OAASA,EACP9wB,IACX,EACO04B,CACX,CAb4C,GAc5C9T,EAAkB/B,EAAI,aACtBA,EAAGoS,OAAS,SACZpS,GAIJoC,EAAgBnL,MAAQ,CASpB8e,gBAAiB,SAAU9a,EAAM+a,GAC7B,IAAK,IAAIC,KAAKD,EACV,GAAKA,EAAUxY,eAAeyY,GAG9B,GAAIhb,EAAKuC,eAAeyY,GAAI,CACxB,IAAIC,SAAajb,EAAKgb,GAClBE,EAASH,EAAUC,GACvB,IAGYhb,EAAKgb,GAFF,WAAPC,EACsB,iBAAXC,EACGzI,UAAUtgB,KAAKC,MAAM8oB,IAErBA,EAEF,UAAPD,GACiB,iBAAXC,EACGxqB,OAA4B,EAArByB,KAAKC,MAAM8oB,IAKtBH,EAAUC,EAM5B,CACA,MAAO3Z,GACH1U,QAAQ+nB,MAAM,gBAAiBsG,EAAGE,EAAQ7Z,EAC9C,CACJ,MAEIrB,EAAKgb,GAAKD,EAAUC,GAG5B,OAAOhb,CACX,EAoCAiR,YAAa,SAAU7tB,EAASkmB,EAAQC,GAEpCnmB,EAAQ6qB,MAAMkN,gBAAkB,MAClB,GAAV7R,GAA2B,GAAVC,EAEjBnmB,EAAQ6qB,MAAMmN,eAAe,aAG7Bh4B,EAAQ6qB,MAAMoN,UAAY,SAAW/R,EAAS,IAAMC,EAAS,GACrE,EAEAN,MAAO,CAQHE,IAAK,SAAUjX,EAAKuP,EAAK6Z,GACrB,OAAKppB,EAAIqQ,eAAed,QAED,IAAZvP,EAAIuP,GACJ6Z,EACJppB,EAAIuP,GAHA6Z,CAIf,EASArb,IAAK,SAAU/N,EAAKuP,EAAK6Z,GACrB,IAAKppB,EAAIqQ,eAAed,GACpB,OAAO6Z,EACX,GAAwB,iBAAbppB,EAAIuP,GACX,OAAOvP,EAAIuP,GAEX,IACI,OAA8B,EAAvBtP,KAAKC,MAAMF,EAAIuP,GAC1B,CACA,MAAOJ,GACH,OAAOia,CACX,CAER,EASAjS,KAAM,SAAUnX,EAAKuP,EAAK6Z,GACtB,IAAKppB,EAAIqQ,eAAed,GACpB,OAAO6Z,EACX,GAAuB,kBAAZppB,EAAIuP,GACX,OAAOvP,EAAIuP,GAEX,IACI,QAAStP,KAAKC,MAAMF,EAAIuP,GAC5B,CACA,MAAOJ,GACH,OAAOia,CACX,CAER,EASAnQ,KAAM,SAAUjZ,EAAKuP,EAAK6Z,GACtB,OAAKppB,EAAIqQ,eAAed,GAEA,mBAAbvP,EAAIuP,GACJ6Z,EACJppB,EAAIuP,GAHA6Z,CAIf,GAWJvJ,2BAA4B,SAAU3e,GAClC,IAAK,IAAI5Q,EAAI,EAAGA,EAAI4Q,EAAWtJ,aAAarH,OAAQD,IAEhD4Q,EAAWtJ,aAAatH,GAAG0H,WAAW6W,UAAU0Q,iBAAgB,SAAUpQ,GACtE,IAAIsW,EAASvkB,EAAW9I,wBAAwB+W,EAAE8D,OAAO4H,QACzD3Z,EAAWtJ,aAAa6tB,GAAQztB,WAAWkM,OAAOiL,EAAE8D,OAAOQ,WAAW9jB,GAAIwf,EAAE8D,OAAOQ,WAAW7jB,GAC9FsR,EAAWlE,eAAwB,EAATyoB,EAAYvkB,EAAW/J,YAAagY,EAAE8D,OAAOQ,YACvEvS,EAAWtI,kBACf,IACAsI,EAAWtJ,aAAatH,GAAGmI,kBAAkBoW,UAAU0Q,iBAAgB,SAAUpQ,GAC7E,IAAIsW,EAASvkB,EAAW1I,+BAA+B2W,EAAE8D,OAAO4H,QAC3D3Z,EAAWtJ,aAAa6tB,GAAQztB,WAAW4nB,KAAKnJ,mBAErDvV,EAAW/D,8BAAuC,EAATsoB,GAAY,GACrD,GAEAvkB,EAAWtI,mBACf,IACAsI,EAAWtJ,aAAatH,GAAGqI,gBAAgBkW,UAAU0Q,iBAAgB,SAAUpQ,GAC3E,IAAIsW,EAASvkB,EAAWxI,6BAA6ByW,EAAE8D,OAAO4H,QACzD3Z,EAAWtJ,aAAa6tB,EAASvkB,EAAWtJ,aAAarH,QAAQ0H,SAAS2nB,KAAKnJ,mBAEpFvV,EAAWhJ,4BAAqC,EAATutB,GAAY,GACnD,GAEAvkB,EAAWtI,mBACf,IACItI,EAAI,GAAK4Q,EAAWtJ,aAAarH,QAGjC2Q,EAAWtJ,aAAasJ,EAAWtJ,aAAarH,OAAS,GAAG0H,SAAS4W,UAAU0Q,iBAAgB,SAAUpQ,GACrG,IAAKjO,EAAWvJ,eAAgB,CAC5B,IAAI8tB,EAASvkB,EAAW3I,sBAAsB4W,EAAE8D,OAAO4H,QACvD3Z,EAAWlE,eAAwB,EAATyoB,EAAYvkB,EAAW7J,kBAAmB,IAAIJ,EAAS+G,OAAO,CAAErO,EAAGwf,EAAE8D,OAAOQ,WAAW9jB,EAAGC,EAAGuf,EAAE8D,OAAOQ,WAAW7jB,IAC/I,CACAsR,EAAWtI,kBACf,GAGZ,GAEGqc,CACX,CA7oEoC,GA8oEpCte,EAAQse,gBAAkBA,EAC1Bte,EAAA,QAAkBse,C,gBC3vElBxe,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQgL,aAAU,EAClB,IAAI2T,EAAe,EAAQ,KACvBxe,EAAW,EAAQ,IACnBqM,EAAS,EAAQ,KACjByS,EAAa,EAAQ,KACrB5e,EAAiB,EAAQ,KACzBoM,EAAW,EAAQ,IACnBnM,EAAW,EAAQ,KACnBoP,EAAc,EAAQ,KAYtB1E,EAAyB,WASzB,SAASA,EAAQY,EAAU8mB,GAIvBr5B,KAAKkH,UAAY,UACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,YAChB,IAAZ8K,IACPA,EAAW,IAEfvS,KAAKuS,SAAWA,EAChBvS,KAAKq5B,OAASA,IAAU,CAC5B,CA00BA,OAj0BA1nB,EAAQ9J,UAAUyxB,UAAY,SAAU9mB,GACpCxS,KAAKuS,SAASnS,KAAKoS,EACvB,EAUAb,EAAQ9J,UAAU0xB,YAAc,SAAU/mB,EAAMgnB,GAE5Cx5B,KAAKuS,SAAS/R,OAAOg5B,EAAO,EAAGhnB,EACnC,EAWAb,EAAQ9J,UAAU4xB,UAAY,SAAUC,GACpC,OAAO,IAAIvmB,EAAO2B,KAAK9U,KAAK25B,YAAYD,GAAY15B,KAAK25B,YAAYD,EAAY,GACrF,EAWA/nB,EAAQ9J,UAAU+xB,SAAW,WAEzB,IADA,IAAIC,EAAQ,GACHv5B,EAAI,EAAGA,EAAI,EAAIN,KAAKuS,SAAShS,OAAQD,IAE1Cu5B,EAAMz5B,KAAKJ,KAAKy5B,UAAUn5B,IAK9B,OAHKN,KAAKq5B,QAAUr5B,KAAKuS,SAAShS,OAAS,GACvCs5B,EAAMz5B,KAAKJ,KAAKy5B,UAAUz5B,KAAKuS,SAAShS,OAAS,IAE9Cs5B,CACX,EAYAloB,EAAQ9J,UAAUiyB,gBAAkB,SAAUJ,GAC1C,IAAIjlB,EAAKzU,KAAKuS,SAASmnB,EAAY15B,KAAKuS,SAAShS,QAC7C8T,EAAKrU,KAAKuS,UAAUmnB,EAAY15B,KAAKuS,SAAShS,OAAS,GAAKP,KAAKuS,SAAShS,QAAQqK,QAClF4R,EAAKxc,KAAKuS,UAAUmnB,EAAY,GAAK15B,KAAKuS,SAAShS,QAAQqK,QAM3DmvB,EAAU/5B,KAAKg6B,aAAaN,GAE5BO,EAAO,IAAIhzB,EAAS+G,OAAO,EAAG,GAC9BksB,EAAQ,IAAIjzB,EAAS+G,OAAOyG,EAAG9U,EAAI0U,EAAG1U,EAAG8U,EAAG7U,EAAIyU,EAAGzU,GACnDu6B,EAAQ,IAAIlzB,EAAS+G,OAAOwO,EAAG7c,EAAI8U,EAAG9U,EAAG6c,EAAG5c,EAAI6U,EAAG7U,GACnDw6B,EAAYH,EAAK5vB,SAAS6vB,GAC1BG,EAAYJ,EAAK5vB,SAAS8vB,GAE1BG,EAAajkB,EAAYO,UAAU0jB,WAAWJ,EAAOC,GACrDI,EAAgBH,EAAYC,EAChC,OAAIN,EACOt6B,KAAKgG,GAAKhG,KAAK6F,KAAKg1B,EAAaC,GAGjC96B,KAAKgG,GAAKhG,KAAK6F,KAAKg1B,EAAaC,EAEhD,EAUA5oB,EAAQ9J,UAAUmyB,aAAe,SAAUN,GACvC,IAAI3d,EAAI/b,KAAKuS,UAAUmnB,EAAY15B,KAAKuS,SAAShS,OAAS,GAAKP,KAAKuS,SAAShS,QAAQqK,QACjFoR,EAAIhc,KAAKuS,SAASmnB,EAAY15B,KAAKuS,SAAShS,QAC5C0b,EAAIjc,KAAKuS,UAAUmnB,EAAY,GAAK15B,KAAKuS,SAAShS,QAAQqK,QAI9D,OAFoBgb,EAAW+J,SAAS7V,MAAM0gB,YAAYze,EAAGC,EAAGC,GAEzC,CAC3B,EAiBAtK,EAAQ9J,UAAU8xB,YAAc,SAAUH,GACtC,OAAIA,EAAQ,EACDx5B,KAAKuS,SAASvS,KAAKuS,SAAShS,OAAUd,KAAK2E,IAAIo1B,GAASx5B,KAAKuS,SAAShS,QAGtEP,KAAKuS,SAASinB,EAAQx5B,KAAKuS,SAAShS,OAEnD,EAUAoR,EAAQ9J,UAAUtG,KAAO,SAAU0H,GAC/B,IAAK,IAAI3I,KAAKN,KAAKuS,SACfvS,KAAKuS,SAASjS,GAAGJ,IAAI+I,GAEzB,OAAOjJ,IACX,EAaA2R,EAAQ9J,UAAUitB,aAAe,SAAUtiB,GAIvC,IADA,IAAIioB,GAAS,EACJn6B,EAAI,EAAGo6B,EAAI16B,KAAKuS,SAAShS,OAAS,EAAGD,EAAIN,KAAKuS,SAAShS,OAAQm6B,EAAIp6B,IAAK,CAC7E,IAAIq6B,EAAK36B,KAAKuS,SAASjS,GAAGX,EAAGi7B,EAAK56B,KAAKuS,SAASjS,GAAGV,EAC/Ci7B,EAAK76B,KAAKuS,SAASmoB,GAAG/6B,EAAGm7B,EAAK96B,KAAKuS,SAASmoB,GAAG96B,EACnCg7B,EAAKpoB,EAAK5S,GAAKk7B,EAAKtoB,EAAK5S,GAAK4S,EAAK7S,GAAMk7B,EAAKF,IAAOnoB,EAAK5S,EAAIg7B,IAAQE,EAAKF,GAAMD,IAE7FF,GAAUA,EAElB,CACA,OAAOA,CACX,EAYA9oB,EAAQ9J,UAAUkzB,cAAgB,SAAUC,GACxC,IAAIllB,EAAQ9V,KACZ,OAAOg7B,EAAMC,OAAM,SAAUzoB,GAAQ,OAAOsD,EAAMgf,aAAatiB,EAAO,GAC1E,EAWAb,EAAQ9J,UAAUqzB,gBAAkB,SAAU1Q,GAC1C,IAAK,IAAIlqB,EAAI,EAAGA,EAAIkqB,EAAQjY,SAAShS,OAAQD,IACzC,IAAKN,KAAK80B,aAAatK,EAAQjY,SAASjS,IACpC,OAAO,EAIf,IAAI66B,EAAc,IAAIhoB,EAAO2B,KAAK,IAAI7N,EAAS+G,OAAU,IAAI/G,EAAS+G,QACtE,IAAS1N,EAAI,EAAGA,EAAIkqB,EAAQjY,SAAShS,OAAQD,IAGzC,GAFA66B,EAAY5mB,EAAElG,IAAImc,EAAQjY,SAASjS,IACnC66B,EAAY5sB,EAAEF,IAAImc,EAAQjY,UAAUjS,EAAI,GAAKkqB,EAAQjY,SAAShS,SAC1DP,KAAKwL,kBAAkB2vB,GAAa,GAAM56B,OAAS,EAEnD,OAAO,EAGf,OAAO,CACX,EAWAoR,EAAQ9J,UAAUuzB,KAAO,WACrB,OAAOzpB,EAAQmI,MAAMshB,KAAKp7B,KAAKuS,SACnC,EAUAZ,EAAQ9J,UAAUwzB,WAAa,WAC3B,OAAO1pB,EAAQmI,MAAMuhB,WAAWr7B,KAAKuS,SACzC,EASAZ,EAAQ9J,UAAUyzB,YAAc,WAE5B,OAAO3pB,EAAQmI,MAAMwhB,YAAYt7B,KAAKuS,SAC1C,EAaAZ,EAAQ9J,UAAU0zB,UAAY,WAE1B,IADA,IAAIh7B,EAAS,EACJD,EAAI,EAAGA,EAAIN,KAAKuS,SAAShS,OAAQD,IACtCC,GAAUP,KAAKuS,SAASjS,EAAI,GAAG+J,SAASrK,KAAKuS,SAASjS,IAK1D,OAHKN,KAAKq5B,QAAUr5B,KAAKuS,SAAShS,OAAS,IACvCA,GAAUP,KAAKuS,SAAS,GAAGlI,SAASrK,KAAKuS,SAASvS,KAAKuS,SAAShS,OAAS,KAEtEA,CACX,EAWAoR,EAAQ9J,UAAUyB,MAAQ,SAAUkyB,EAAQ7xB,GACxC,IAAK,IAAIrJ,KAAKN,KAAKuS,SACsB,mBAA1BvS,KAAKuS,SAASjS,GAAGgJ,MACxBtJ,KAAKuS,SAASjS,GAAGgJ,MAAMkyB,EAAQ7xB,GAE/Bc,QAAQU,IAAI,mCAAoCnL,KAAKuS,SAASjS,IAEtE,OAAON,IACX,EAWA2R,EAAQ9J,UAAU7F,OAAS,SAAUgD,EAAO2E,GACxC,IAAK,IAAIrJ,KAAKN,KAAKuS,SACfvS,KAAKuS,SAASjS,GAAG0B,OAAOgD,EAAO2E,GAEnC,OAAO3J,IACX,EAWA2R,EAAQ9J,UAAU4zB,cAAgB,WAC9B,GAA6B,IAAzBz7B,KAAKuS,SAAShS,OACd,OAAO,KAGX,IADA,IAAIoJ,EAAS3J,KAAKuS,SAAS,GAAG3H,QACrBtK,EAAI,EAAGA,EAAIN,KAAKuS,SAAShS,OAAQD,IACtCqJ,EAAOzJ,IAAIF,KAAKuS,SAASjS,IAI7B,OAFAqJ,EAAOhK,GAAKK,KAAKuS,SAAShS,OAC1BoJ,EAAO/J,GAAKI,KAAKuS,SAAShS,OACnBoJ,CACX,EAcAgI,EAAQ9J,UAAU6zB,YAAc,WAC5B,GAA6B,IAAzB17B,KAAKuS,SAAShS,OACd,OAAO,KAIX,IAFA,IAAIoJ,EAAS,IAAI1C,EAAS+G,OAAO,EAAK,GAClCkB,EAAIlP,KAAKuS,SAAShS,OACbD,EAAI,EAAGA,EAAI4O,EAAG5O,IAAK,CAExB,IAAIq7B,EAAM37B,KAAKuS,SAASjS,GACpBmH,EAAOzH,KAAKuS,UAAUjS,EAAI,GAAK4O,GAC/BssB,EAASG,EAAIh8B,EAAI8H,EAAK7H,EAAI6H,EAAK9H,EAAIg8B,EAAI/7B,EAC3C+J,EAAOhK,IAAMg8B,EAAIh8B,EAAI8H,EAAK9H,GAAK67B,EAC/B7xB,EAAO/J,IAAM+7B,EAAI/7B,EAAI6H,EAAK7H,GAAK47B,CACnC,CACA,IAAIJ,EAAOp7B,KAAKo7B,OAGhB,OAFAzxB,EAAOhK,GAAK,GAAK,EAAIy7B,GACrBzxB,EAAO/J,GAAK,GAAK,EAAIw7B,GACdzxB,CACX,EAaAgI,EAAQ9J,UAAU2D,kBAAoB,SAAUC,EAAMC,GAGlD,YAF2B,IAAvBA,IAAiCA,GAAqB,GAEnDiG,EAAQmI,MACV8hB,sBAAsBnwB,EAAMzL,KAAKuS,SAAUvS,KAAKq5B,OAAQ3tB,GACxDqK,KAAI,SAAU8lB,GAAqB,OAAOA,EAAkBhb,YAAc,GACnF,EAUAlP,EAAQ9J,UAAUkE,yBAA2B,SAAUN,EAAMC,GACzD,IAAIoK,EAAQ9V,KAGZ,YAF2B,IAAvB0L,IAAiCA,GAAqB,GAEnDiG,EAAQmI,MAAM8hB,sBAAsBnwB,EAAMzL,KAAKuS,SAAUvS,KAAKq5B,OAAQ3tB,GAAoBqK,KAAI,SAAU8lB,GAC3G,IAAIC,EAAWhmB,EAAM2jB,UAAUoC,EAAkBE,WACjD,OAAO,IAAI3oB,EAASW,OAAO+nB,EAASvnB,EAAE3J,QAASkxB,EAASvtB,EAAE3D,SAASwW,OAAOya,EAAkBhb,aAChG,GACJ,EAWAlP,EAAQ9J,UAAUm0B,gCAAkC,SAAUvwB,EAAMC,GAChE,IAAIoK,EAAQ9V,KAGZ,YAF2B,IAAvB0L,IAAiCA,GAAqB,GAEnDiG,EAAQmI,MAAM8hB,sBAAsBnwB,EAAMzL,KAAKuS,SAAUvS,KAAKq5B,OAAQ3tB,GAAoBqK,KAAI,SAAU8lB,GAC3G,IAAIC,EAAWhmB,EAAM2jB,UAAUoC,EAAkBE,WACjD,MAAO,CACHlb,aAAc,IAAIzN,EAASW,OAAO+nB,EAASvnB,EAAE3J,QAASkxB,EAASvtB,EAAE3D,SAASwW,OAAOya,EAAkBhb,cACnGkb,UAAWF,EAAkBE,UAErC,GACJ,EAUApqB,EAAQ9J,UAAUo0B,wBAA0B,SAAUxwB,EAAMC,QAC7B,IAAvBA,IAAiCA,GAAqB,GAC1D,IAAIwwB,EAA2Bl8B,KAAKm8B,6BAA6B1wB,EAAMC,GACvE,OAAIwwB,EACOA,EAAyBrb,aAGzB,IAEf,EAUAlP,EAAQ9J,UAAUs0B,6BAA+B,SAAU1wB,EAAMC,QAClC,IAAvBA,IAAiCA,GAAqB,GAC1D,IAAI0wB,EAAmBp8B,KAAKwL,kBAAkBC,EAAMC,GACpD,GAAI0wB,EAAiB77B,QAAU,EAE3B,OAAO,KAMX,IAHA,IAAI87B,EAAsB,IAAIp1B,EAAS+G,OAAOQ,OAAO8tB,UAAW9tB,OAAO8tB,WACnEJ,GAA4B,EAC5BK,EAAU/tB,OAAO8tB,UACZh8B,EAAI,EAAGA,EAAI87B,EAAiB77B,OAAQD,IAAK,CAC9C,IAAIk8B,EAAUJ,EAAiB97B,GAC3B0J,EAAOwyB,EAAQnyB,SAASoB,EAAK8I,GAC7BvK,EAAOuyB,IAEPA,EAAUvyB,EACVqyB,EAAsBG,EACtBN,EAA2B57B,EAEnC,CAEA,MAAO,CAAEy7B,UAAWG,EAA0Brb,aAAcwb,EAChE,EAUA1qB,EAAQ9J,UAAU40B,wBAA0B,SAAUC,GAElD,IADA,IAAI1B,EAAQ,GACH16B,EAAI,EAAGA,EAAIN,KAAKuS,SAAShS,OAAQD,IAAK,CAC3C,IAAIk8B,EAAUx8B,KAAKuS,SAASjS,GACxBq8B,EAAW38B,KAAKuS,UAAUjS,EAAI,GAAKN,KAAKuS,SAAShS,QAGrD,GAFAy6B,EAAM56B,KAAKo8B,EAAQ5xB,UAEd5K,KAAKq5B,QAAU/4B,EAAI,IAAMN,KAAKuS,SAAShS,OAExC,IADA,IAAIq8B,EAAa,GAAOF,EAAqB,GACpChC,EAAI,EAAGA,GAAKgC,EAAoBhC,IACrCM,EAAM56B,KAAKo8B,EAAQ5xB,QAAQiyB,KAAKF,EAAUC,EAAalC,GAGnE,CACA,OAAO,IAAI/oB,EAAQqpB,EAAOh7B,KAAKq5B,OACnC,EAMA1nB,EAAQ9J,UAAUi1B,2BAA6B,SAAUjuB,GACrD,GAAIA,GAAc,EACd,MAAM,IAAIC,MAAM,2CAA6CD,EAAa,KAE9E,IAAIE,EAAS,IAAI4C,EAAQ,GAAI3R,KAAKq5B,QAClC,GAA6B,IAAzBr5B,KAAKuS,SAAShS,OACd,OAAOwO,EAGX,IAAIC,EAAe,IAAI/H,EAAS+G,OAAOhO,KAAKuS,SAAS,IAErD,GADAxD,EAAOwD,SAASnS,KAAK4O,GACQ,IAAzBhP,KAAKuS,SAAShS,OACd,OAAOwO,EAWX,IATA,IACIE,EADYjP,KAAKu7B,YACM1sB,EACvBK,EAAIlP,KAAKuS,SAAShS,OAClBw8B,EAAe,EACfC,EAAmB,IAAI/1B,EAAS+G,OAAOhO,KAAKuS,SAAS,IACrDpD,EAAgBH,EAAa3E,SAAS2yB,GACtCC,EAAUj9B,KAAKq5B,OAASnqB,EAAIA,EAAI,EAChCG,EAAcJ,EACd3O,EAAI,EACDA,EAAIuO,GAAckuB,EAAeE,GAEpC,GAAI5tB,EAAcF,EAAe,CAC7B,IAAIG,EAAWN,EAAapE,QAAQsyB,QAAQF,EAAkB3tB,GAC9DN,EAAOwD,SAASnS,KAAKkP,GACrBD,GAAeJ,EACf3O,GACJ,MAEIy8B,IACA/tB,EAAeguB,EACfA,EAAmB,IAAI/1B,EAAS+G,OAAOhO,KAAKuS,SAASwqB,EAAe7tB,IACpEG,GAA4BF,EAC5BA,EAAgBH,EAAa3E,SAAS2yB,GAG9C,OAAOjuB,CACX,EAUA4C,EAAQ9J,UAAUyG,UAAY,WAC1B,OAAOxH,EAAS6H,OAAO2D,oBAAoBtS,KAAKuS,SACpD,EAUAZ,EAAQ9J,UAAU+C,MAAQ,WACtB,OAAO,IAAI+G,EAAQ3R,KAAKuS,SAASwD,KAAI,SAAUvD,GAAQ,OAAOA,EAAK5H,OAAS,IAAI5K,KAAKq5B,OACzF,EAiBA1nB,EAAQ9J,UAAUs1B,uBAAyB,SAAUpI,GAMjD,IALA,IAAIqI,OAA2B,IAAdrI,EAA4B,EAAMA,EAC/CiG,EAAQh7B,KAAKuS,SAAS8qB,QACtB/8B,EAAI,EACJg9B,EAAQ,IAAInqB,EAAO2B,KAAK,IAAI7N,EAAS+G,OAAU,IAAI/G,EAAS+G,QAC5DuvB,EAAQ,IAAIpqB,EAAO2B,KAAK,IAAI7N,EAAS+G,OAAU,IAAI/G,EAAS+G,QACzD1N,EAAI,EAAI06B,EAAMz6B,QAAUy6B,EAAMz6B,OAAS,GAAG,CAC7C,IAAIi9B,EAAQxC,EAAM16B,GACdm9B,EAAQzC,GAAO16B,EAAI,GAAK06B,EAAMz6B,QAClC+8B,EAAM/oB,EAAIipB,EACVF,EAAM/uB,EAAIkvB,EACVF,EAAMhpB,EAAIkpB,EACV,IAAIC,GAAc,EACdhD,EAAIp6B,EAAI,EACZ,EAAG,CACC,IAAIq9B,EAAQ3C,EAAMN,EAAIM,EAAMz6B,QAC5Bg9B,EAAMhvB,EAAIovB,GACVD,EAAcJ,EAAMM,SAASL,EAAOH,KAGhC1C,GAER,OAASgD,GAGLhD,EAAIp6B,EAAI,GAER06B,EAAMx6B,OAAOF,EAAI,EAAGo6B,EAAIp6B,EAAI,GAEhCA,GACJ,CACA,OAAO,IAAIqR,EAAQqpB,EAAOh7B,KAAKq5B,OACnC,EAaA1nB,EAAQ9J,UAAUg2B,sBAAwB,WACtC,GAAI79B,KAAKuS,SAAShS,OAAS,EACvB,MAAO,GACX,IAAIu9B,EAAU,GACVC,EAAM/9B,KAAKuS,SAAS,GACpByrB,EAAMh+B,KAAKuS,SAAS,GACpB0rB,EAAa,IAAIh3B,EAAS+G,OAAO+vB,EAAIp+B,GAAKq+B,EAAIr+B,EAAIo+B,EAAIp+B,GAAK,EAAGo+B,EAAIn+B,GAAKo+B,EAAIp+B,EAAIm+B,EAAIn+B,GAAK,GAC5Fk+B,EAAQ19B,KAAK69B,GAEb,IADA,IAAIC,EAAQl+B,KAAKq5B,OAASr5B,KAAKuS,SAAShS,OAASP,KAAKuS,SAAShS,OAAS,EAC/DuK,EAAI,EAAGA,EAAIozB,EAAOpzB,IACvBizB,EAAM/9B,KAAKuS,SAASzH,EAAI9K,KAAKuS,SAAShS,QACtCy9B,EAAMh+B,KAAKuS,UAAUzH,EAAI,GAAK9K,KAAKuS,SAAShS,QACxC09B,EAAa,IAAIh3B,EAAS+G,OAAO+vB,EAAIp+B,GAAKq+B,EAAIr+B,EAAIo+B,EAAIp+B,GAAK,EAAGo+B,EAAIn+B,GAAKo+B,EAAIp+B,EAAIm+B,EAAIn+B,GAAK,GAC5Fk+B,EAAQ19B,KAAK29B,GACbD,EAAQ19B,KAAK69B,GACbF,EAAMC,EAEV,OAAOF,CACX,EASAnsB,EAAQ9J,UAAUs2B,2BAA6B,WAC3C,IAAIC,EAAQp+B,KAAK69B,wBACjB,GAAoB,GAAhBO,EAAM79B,OACN,MAAO,GAEX,IADA,IAAIqP,EAAS,CAAC,KAAOwuB,EAAM,GAAGz+B,EAAI,IAAMy+B,EAAM,GAAGx+B,GACxCU,EAAI,EAAGA,EAAI89B,EAAM79B,OAAQD,GAAK,EACnCsP,EAAOxP,KAAK,KAAOg+B,EAAM99B,GAAGX,EAAI,IAAMy+B,EAAM99B,GAAGV,EAAI,KAAOw+B,EAAM99B,EAAI,GAAGX,EAAI,IAAMy+B,EAAM99B,EAAI,GAAGV,GAElG,OAAOgQ,EAAOC,KAAK,IACvB,EAgBA8B,EAAQ9J,UAAUw2B,kBAAoB,SAAUC,GAG5C,QAFwB,IAAbA,IACPA,EAAY,GACZt+B,KAAKuS,SAAShS,OAAS,EACvB,MAAO,GACX,IAAIg+B,EAAU,GACVhqB,EAAIvU,KAAKuS,SAAS,GAClBhE,EAAIvO,KAAKuS,SAAS,GAClB0rB,EAAa,IAAIh3B,EAAS+G,OAAOuG,EAAE5U,GAAK4O,EAAE5O,EAAI4U,EAAE5U,GAAK,EAAG4U,EAAE3U,GAAK2O,EAAE3O,EAAI2U,EAAE3U,GAAK,GAChF2+B,EAAQn+B,KAAK69B,GAEb,IADA,IAAIC,EAAQl+B,KAAKq5B,OAASr5B,KAAKuS,SAAShS,OAAS,EAAIP,KAAKuS,SAAShS,OAC1DuK,EAAI,EAAGA,EAAIozB,EAAOpzB,IAAK,CACxByJ,EAAIvU,KAAKuS,SAASzH,EAAI9K,KAAKuS,SAAShS,QACpCgO,EAAIvO,KAAKuS,UAAUzH,EAAI,GAAK9K,KAAKuS,SAAShS,QAD9C,IAEIia,EAAIxa,KAAKuS,UAAUzH,EAAI,GAAK9K,KAAKuS,SAAShS,QAC1Ci+B,EAAU,IAAIv3B,EAAS+G,OAAOuG,EAAE5U,GAAK4O,EAAE5O,EAAI4U,EAAE5U,GAAK,EAAG4U,EAAE3U,GAAK2O,EAAE3O,EAAI2U,EAAE3U,GAAK,GACzE6+B,EAAU,IAAIx3B,EAAS+G,OAAOO,EAAE5O,GAAK6a,EAAE7a,EAAI4O,EAAE5O,GAAK,EAAG4O,EAAE3O,GAAK4a,EAAE5a,EAAI2O,EAAE3O,GAAK,GACzE8+B,EAAK,IAAIz3B,EAAS+G,OAAOwwB,EAAQ7+B,GAAK4O,EAAE5O,EAAI6+B,EAAQ7+B,GAAK2+B,EAAWE,EAAQ5+B,GAAK2O,EAAE3O,EAAI4+B,EAAQ5+B,GAAK0+B,GACpGK,EAAK,IAAI13B,EAAS+G,OAAOywB,EAAQ9+B,GAAK4O,EAAE5O,EAAI8+B,EAAQ9+B,GAAK2+B,EAAWG,EAAQ7+B,GAAK2O,EAAE3O,EAAI6+B,EAAQ7+B,GAAK0+B,GACxGC,EAAQn+B,KAAKs+B,GACbH,EAAQn+B,KAAKu+B,GACbJ,EAAQn+B,KAAKq+B,EACjB,CACA,OAAOF,CACX,EASA5sB,EAAQ9J,UAAU+2B,uBAAyB,SAAUN,GACjD,IAAIF,EAAQp+B,KAAKq+B,kBAAkBC,GACnC,GAAoB,GAAhBF,EAAM79B,OACN,MAAO,GAGX,IADA,IAAIqP,EAAS,CAAC,KAAOwuB,EAAM,GAAGz+B,EAAI,IAAMy+B,EAAM,GAAGx+B,GACxCU,EAAI,EAAGA,EAAI89B,EAAM79B,OAAQD,GAAK,EACnCsP,EAAOxP,KAAK,KACRg+B,EAAM99B,GAAGX,EACT,IACAy+B,EAAM99B,GAAGV,EACT,KACAw+B,EAAM99B,EAAI,GAAGX,EACb,IACAy+B,EAAM99B,EAAI,GAAGV,EACb,KACAw+B,EAAM99B,EAAI,GAAGX,EACb,IACAy+B,EAAM99B,EAAI,GAAGV,GAErB,OAAOgQ,EAAOC,KAAK,IACvB,EAUA8B,EAAQ9J,UAAUg3B,kBAAoB,SAAUP,GAI5C,IAHA,IAAIF,EAAQp+B,KAAKq+B,kBAAkBC,GAE/BQ,EAAW,GACNx+B,EAAI,EAAGA,EAAI,EAAI89B,EAAM79B,OAAQD,GAAK,EACvCw+B,EAAS1+B,KAAK,CAACg+B,EAAM99B,GAAI89B,EAAM99B,EAAI,GAAI89B,EAAM99B,EAAI,GAAI89B,EAAM99B,EAAI,KAEnE,OAAOglB,EAAaze,WAAWgG,UAAUiyB,EAC7C,EAMAntB,EAAQ9J,UAAUtB,QAAU,WACxB,IAAK,IAAIjG,EAAI,EAAGA,EAAIN,KAAKuS,SAAShS,OAAQD,IACtCN,KAAKuS,SAASjS,GAAGiG,UAErBvG,KAAKuP,aAAc,CACvB,EACAoC,EAAQmI,MAAQ,CASZshB,KAAM,SAAU7oB,GAIZ,IADA,IAAIwsB,EAAQ,EACHz+B,EAAI,EAAG0+B,EAAIzsB,EAAShS,OAAQD,EAAI0+B,EAAG1+B,IAKxCy+B,GAJWxsB,EAASjS,GAAGX,EACZ4S,GAAUjS,EAAI,GAAK0+B,GAAGp/B,EAGV,GACvBm/B,GAHWxsB,GAAUjS,EAAI,GAAK0+B,GAAGr/B,EACtB4S,EAASjS,GAAGV,EAEA,GAE3B,OAAOH,KAAK2E,IAAI26B,EACpB,EACAzD,YAAa,SAAU/oB,GACnB,OAAOZ,EAAQmI,MAAMuhB,WAAW9oB,GAAY,CAChD,EAQA8oB,WAAY,SAAU9oB,GAGlB,IAFA,IAAI0sB,EAAM,EACN/vB,EAAIqD,EAAShS,OACRD,EAAI,EAAGA,EAAI4O,EAAG5O,IAAK,CACxB,IAAIo6B,GAAKp6B,EAAI,GAAK4O,EAClB+vB,IAAQ1sB,EAASmoB,GAAG/6B,EAAI4S,EAASjS,GAAGX,IAAM4S,EAASjS,GAAGV,EAAI2S,EAASmoB,GAAG96B,EAC1E,CACA,OAAOq/B,CACX,EAUArD,sBAAuB,SAAUnwB,EAAM8G,EAAU8mB,EAAQ3tB,GAIrD,IAFA,IAAIiQ,EAAqB,GACrBzM,EAAImqB,EAAS9mB,EAAShS,OAAS,EAAIgS,EAAShS,OACvCD,EAAI,EAAGA,EAAI4O,EAAG5O,IAAK,CACxB,IAAIw7B,EAAW,IAAI3oB,EAAO2B,KAAKvC,EAASjS,EAAI4O,GAAIqD,GAAUjS,EAAI,GAAK4O,IAC/D2R,EAAeib,EAASjb,aAAapV,GAGpB,OAAjBoV,IACAib,EAASjmB,SAASgL,GAAc,IAC9BnV,IAAsBD,EAAKoK,SAASgL,EAAcnV,IACpDiQ,EAAmBvb,KAAK,CAAE27B,UAAWz7B,EAAGugB,aAAcA,GAE9D,CACA,OAAOlF,CACX,GAEGhK,CACX,CA/1B4B,GAg2B5BhL,EAAQgL,QAAUA,C,gBC/3BlBlL,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQgpB,cAAW,EACnB,IAAI7oB,EAAW,EAAQ,IACnBsP,EAAW,EAAQ,KACnBjD,EAAS,EAAQ,KACjBhC,EAAY,EAAQ,KACpBnK,EAAiB,EAAQ,KACzBoM,EAAW,EAAQ,IACnBnM,EAAW,EAAQ,KACnBoP,EAAc,EAAQ,KAkBtBsZ,EAA0B,WAU1B,SAASA,EAASpb,EAAGhG,EAAGiM,GAIpBxa,KAAKkH,UAAY,WACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAKuU,EAAIA,EACTvU,KAAKuO,EAAIA,EACTvO,KAAKwa,EAAIA,EACTxa,KAAKk/B,kBACT,CA0ZA,OA7YAvP,EAAS9iB,UAAY,SAAU4C,GAC3B,GAAIA,EAAIlP,OAAS,EACb,KAAM,oEAAoEuL,OAAO2D,EAAIlP,OAAQ,KACjG,OAAO,IAAIovB,EAASlgB,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAC5C,EAaAkgB,EAAS9nB,UAAUs3B,QAAU,WACzB,OAAO1/B,KAAK2E,IAAIurB,EAAS7V,MAAMuhB,WAAWr7B,KAAKuU,EAAE5U,EAAGK,KAAKuU,EAAE3U,EAAGI,KAAKuO,EAAE5O,EAAGK,KAAKuO,EAAE3O,EAAGI,KAAKwa,EAAE7a,EAAGK,KAAKwa,EAAE5a,GACvG,EAWA+vB,EAAS9nB,UAAU6zB,YAAc,WAC7B,OAAO,IAAIz0B,EAAS+G,QAAQhO,KAAKuU,EAAE5U,EAAIK,KAAKuO,EAAE5O,EAAIK,KAAKwa,EAAE7a,GAAK,GAAIK,KAAKuU,EAAE3U,EAAII,KAAKuO,EAAE3O,EAAII,KAAKwa,EAAE5a,GAAK,EACxG,EAUA+vB,EAAS9nB,UAAUu3B,gBAAkB,SAAU5D,GAC3C,IAAI6D,EAAWr/B,KAAK07B,cAIpB,OAHA17B,KAAKuU,EAAEjL,MAAMkyB,EAAQ6D,GACrBr/B,KAAKuO,EAAEjF,MAAMkyB,EAAQ6D,GACrBr/B,KAAKwa,EAAElR,MAAMkyB,EAAQ6D,GACdr/B,IACX,EAUA2vB,EAAS9nB,UAAUyG,UAAY,WAE3B,OAAOtO,KAAK+S,QAChB,EAWA4c,EAAS9nB,UAAUtG,KAAO,SAAU0H,GAIhC,OAHAjJ,KAAKuU,EAAErU,IAAI+I,GACXjJ,KAAKuO,EAAErO,IAAI+I,GACXjJ,KAAKwa,EAAEta,IAAI+I,GACJjJ,IACX,EAgBA2vB,EAAS9nB,UAAUy3B,gBAAkB,WAGjC,OADAt/B,KAAKk/B,mBACE,IAAI9oB,EAASlD,OAAOlT,KAAK2J,OAAOiB,QAAS5K,KAAKqT,OACzD,EAcAsc,EAAS9nB,UAAU03B,WAAa,SAAUC,GACtC,IAAIjrB,EAAIvU,KAAKuU,EAAEjM,OAAOk3B,EAAIjrB,IAAMvU,KAAKuU,EAAEjM,OAAOk3B,EAAIjxB,IAAMvO,KAAKuU,EAAEjM,OAAOk3B,EAAIhlB,GACtEjM,EAAIvO,KAAKuO,EAAEjG,OAAOk3B,EAAIjrB,IAAMvU,KAAKuO,EAAEjG,OAAOk3B,EAAIjxB,IAAMvO,KAAKuO,EAAEjG,OAAOk3B,EAAIhlB,GACtEA,EAAIxa,KAAKwa,EAAElS,OAAOk3B,EAAIjrB,IAAMvU,KAAKwa,EAAElS,OAAOk3B,EAAIjxB,IAAMvO,KAAKwa,EAAElS,OAAOk3B,EAAIhlB,GAC1E,OAAQjG,GAAKhG,GAAOgG,GAAKiG,GAAOjM,GAAKiM,CACzC,EAYAmV,EAAS9nB,UAAU43B,eAAiB,SAAUC,EAAOC,GACjD,OAAK3/B,KAAKuU,EAAEjM,OAAOo3B,IAAU1/B,KAAKuO,EAAEjG,OAAOq3B,IAAY3/B,KAAKuU,EAAEjM,OAAOq3B,IAAU3/B,KAAKuO,EAAEjG,OAAOo3B,GAClF1/B,KAAKwa,EACXxa,KAAKuO,EAAEjG,OAAOo3B,IAAU1/B,KAAKwa,EAAElS,OAAOq3B,IAAY3/B,KAAKuO,EAAEjG,OAAOq3B,IAAU3/B,KAAKwa,EAAElS,OAAOo3B,GAClF1/B,KAAKuU,EAETvU,KAAKuO,CAChB,EAaAohB,EAAS9nB,UAAUq3B,iBAAmB,WAGlC,IAOIU,EAAIC,EAPJ9jB,EAAI/b,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,EACtBqc,EAAIhc,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,EACtBqc,EAAIjc,KAAKwa,EAAE7a,EAAIK,KAAKuU,EAAE5U,EACtByd,EAAIpd,KAAKwa,EAAE5a,EAAII,KAAKuU,EAAE3U,EACtBkgC,EAAI/jB,GAAK/b,KAAKuU,EAAE5U,EAAIK,KAAKuO,EAAE5O,GAAKqc,GAAKhc,KAAKuU,EAAE3U,EAAII,KAAKuO,EAAE3O,GACvDmgC,EAAI9jB,GAAKjc,KAAKuU,EAAE5U,EAAIK,KAAKwa,EAAE7a,GAAKyd,GAAKpd,KAAKuU,EAAE3U,EAAII,KAAKwa,EAAE5a,GACvDogC,EAAI,GAAOjkB,GAAK/b,KAAKwa,EAAE5a,EAAII,KAAKuO,EAAE3O,GAAKoc,GAAKhc,KAAKwa,EAAE7a,EAAIK,KAAKuO,EAAE5O,IAElE,GAAIF,KAAK2E,IAAI47B,GAAKrQ,EAASsQ,QAAS,CAEhC,IAAIltB,EAAS/S,KAAK+S,SAClB/S,KAAK2J,OAAS,IAAI1C,EAAS+G,QAAQ+E,EAAOxI,IAAI5K,EAAIoT,EAAOzI,IAAI3K,GAAK,GAAIoT,EAAOxI,IAAI3K,EAAImT,EAAOzI,IAAI1K,GAAK,GACrGggC,EAAK5/B,KAAK2J,OAAOhK,EAAIoT,EAAOxI,IAAI5K,EAChCkgC,EAAK7/B,KAAK2J,OAAO/J,EAAImT,EAAOxI,IAAI3K,CACpC,KACK,CACD,IAAIsgC,GAAM9iB,EAAI0iB,EAAI9jB,EAAI+jB,GAAKC,EACvBG,GAAMpkB,EAAIgkB,EAAI9jB,EAAI6jB,GAAKE,EAC3BhgC,KAAK2J,OAAS,IAAI1C,EAAS+G,OAAOkyB,EAAIC,GACtCP,EAAK5/B,KAAK2J,OAAOhK,EAAIK,KAAKuU,EAAE5U,EAC5BkgC,EAAK7/B,KAAK2J,OAAO/J,EAAII,KAAKuU,EAAE3U,CAChC,CACAI,KAAKogC,eAAiBR,EAAKA,EAAKC,EAAKA,EACrC7/B,KAAKqT,OAAS5T,KAAKC,KAAKM,KAAKogC,eACjC,EAWAzQ,EAAS9nB,UAAUw4B,eAAiB,SAAU7gC,GAC1C,IAAIogC,EAAK5/B,KAAK2J,OAAOhK,EAAIH,EAAEG,EACvBkgC,EAAK7/B,KAAK2J,OAAO/J,EAAIJ,EAAEI,EAE3B,OADmBggC,EAAKA,EAAKC,EAAKA,GACX7/B,KAAKogC,cAChC,EASAzQ,EAAS9nB,UAAUkL,OAAS,WACxB,OAAO,IAAIjM,EAAS6H,OAAO,IAAI1H,EAAS+G,OAAO2hB,EAAS7V,MAAMwmB,KAAKtgC,KAAKuU,EAAE5U,EAAGK,KAAKuO,EAAE5O,EAAGK,KAAKwa,EAAE7a,GAAIgwB,EAAS7V,MAAMwmB,KAAKtgC,KAAKuU,EAAE3U,EAAGI,KAAKuO,EAAE3O,EAAGI,KAAKwa,EAAE5a,IAAK,IAAIqH,EAAS+G,OAAO2hB,EAAS7V,MAAMymB,KAAKvgC,KAAKuU,EAAE5U,EAAGK,KAAKuO,EAAE5O,EAAGK,KAAKwa,EAAE7a,GAAIgwB,EAAS7V,MAAMymB,KAAKvgC,KAAKuU,EAAE3U,EAAGI,KAAKuO,EAAE3O,EAAGI,KAAKwa,EAAE5a,IAChR,EAaA+vB,EAAS9nB,UAAU2D,kBAAoB,SAAUC,EAAMC,GAGnD,YAF2B,IAAvBA,IAAiCA,GAAqB,GAEnDyF,EAAUQ,QAAQmI,MACpB8hB,sBAAsBnwB,EAAM,CAACzL,KAAKuU,EAAGvU,KAAKuO,EAAGvO,KAAKwa,IAAI,EAAO9O,GAC7DqK,KAAI,SAAU8lB,GAAqB,OAAOA,EAAkBhb,YAAc,GACnF,EAUA8O,EAAS9nB,UAAUkE,yBAA2B,SAAUN,EAAMC,GAC1D,IAAIoK,EAAQ9V,KAGZ,YAF2B,IAAvB0L,IAAiCA,GAAqB,GAEnDyF,EAAUQ,QAAQmI,MACpB8hB,sBAAsBnwB,EAAM,CAACzL,KAAKuU,EAAGvU,KAAKuO,EAAGvO,KAAKwa,IAAI,EAAO9O,GAC7DqK,KAAI,SAAU8lB,GAEf,IAAIC,EAAWhmB,EAAM2jB,UAAUoC,EAAkBE,WACjD,OAAO,IAAI3oB,EAASW,OAAO+nB,EAASvnB,EAAE3J,QAASkxB,EAASvtB,EAAE3D,SAASwW,OAAOya,EAAkBhb,aAChG,GACJ,EAEA8O,EAAS9nB,UAAU4xB,UAAY,SAAUsC,GACrC,IAAIyE,EAAWzE,EAAY,EAC3B,OAAoB,IAAbyE,EAAiB,IAAIrtB,EAAO2B,KAAK9U,KAAKuU,EAAGvU,KAAKuO,GAAkB,IAAbiyB,EAAiB,IAAIrtB,EAAO2B,KAAK9U,KAAKuO,EAAGvO,KAAKwa,GAAK,IAAIrH,EAAO2B,KAAK9U,KAAKwa,EAAGxa,KAAKuU,EAC9I,EAWAob,EAAS9nB,UAAU6J,UAAY,WAC3B,OAAO,IAAIP,EAAUQ,QAAQ,CAAC3R,KAAKuU,EAAGvU,KAAKuO,EAAGvO,KAAKwa,GACvD,EASAmV,EAAS9nB,UAAU2yB,YAAc,WAG7B,OAAO7K,EAAS7V,MAAM0gB,YAAYx6B,KAAKuU,EAAGvU,KAAKuO,EAAGvO,KAAKwa,EAC3D,EAYAmV,EAAS9nB,UAAUyL,cAAgB,SAAUzJ,GACzC,OAAO8lB,EAAS7V,MAAM2mB,kBAAkB52B,EAAElK,EAAGkK,EAAEjK,EAAGI,KAAKuU,EAAE5U,EAAGK,KAAKuU,EAAE3U,EAAGI,KAAKuO,EAAE5O,EAAGK,KAAKuO,EAAE3O,EAAGI,KAAKwa,EAAE7a,EAAGK,KAAKwa,EAAE5a,EAC/G,EAMA+vB,EAAS9nB,UAAU64B,sBAAwB,WACvC,IAAIpD,EAAQ,IAAInqB,EAAO2B,KAAK9U,KAAKuU,EAAGvU,KAAKuO,GACrCgvB,EAAQ,IAAIpqB,EAAO2B,KAAK9U,KAAKuO,EAAGvO,KAAKwa,GACrCmmB,EAAQ,IAAIxtB,EAAO2B,KAAK9U,KAAKwa,EAAGxa,KAAKuU,GACrCqsB,EAAYvqB,EAAYO,UAAUiqB,WAAW7gC,KAAKuO,EAAGvO,KAAKuU,EAAGvU,KAAKwa,EAAG,GAAG,GACxEsmB,EAAYzqB,EAAYO,UAAUiqB,WAAW7gC,KAAKwa,EAAGxa,KAAKuO,EAAGvO,KAAKuU,EAAG,GAAG,GAExEsM,EAAe+f,EAAU/f,aAAaigB,GAK1C,OAAO,IAAInR,EAHS2N,EAAM5pB,gBAAgBmN,GACtB0c,EAAM7pB,gBAAgBmN,GACtB8f,EAAMjtB,gBAAgBmN,GAE9C,EASA8O,EAAS9nB,UAAUk5B,YAAc,WAC7B,OAAO/gC,KAAK0gC,wBAAwBpB,iBACxC,EASA3P,EAAS9nB,UAAUm5B,YAAc,WAG7B,OAFKhhC,KAAK2J,QAAW3J,KAAKqT,QACtBrT,KAAKk/B,mBACFl/B,KAAK2J,OAAOiB,OACvB,EASA+kB,EAAS9nB,UAAUwK,SAAW,WAC1B,MAAO,SAAWrS,KAAKuU,EAAElC,WAAa,SAAWrS,KAAKuO,EAAE8D,WAAa,SAAWrS,KAAKwa,EAAEnI,WAAa,GACxG,EAMAsd,EAAS9nB,UAAUtB,QAAU,WACzBvG,KAAKuU,EAAEhO,UACPvG,KAAKuO,EAAEhI,UACPvG,KAAKwa,EAAEjU,UACPvG,KAAKuP,aAAc,CACvB,EAOAogB,EAASsQ,QAAU,KACnBtQ,EAAS7V,MAAQ,CAEbymB,KAAM,SAAUhsB,EAAGhG,EAAGiM,GAClB,OAAOjG,GAAKhG,GAAKgG,GAAKiG,EAAIjG,EAAIhG,GAAKgG,GAAKhG,GAAKiM,EAAIjM,EAAIiM,CACzD,EACA8lB,KAAM,SAAU/rB,EAAGhG,EAAGiM,GAClB,OAAOjG,GAAKhG,GAAKgG,GAAKiG,EAAIjG,EAAIhG,GAAKgG,GAAKhG,GAAKiM,EAAIjM,EAAIiM,CACzD,EACA6gB,WAAY,SAAU4F,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAC3C,MAAO,KAAQF,EAAMC,EAAMH,IAAQC,EAAME,GAAOJ,GAAOG,EAAME,GAAOH,EAAMG,EAC9E,EAMAb,kBAAmB,SAAUc,EAAIC,EAAIP,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAK1D,IAAIlG,EAAOzL,EAAS7V,MAAMuhB,WAAW4F,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAC1DG,EAAK,GAAK,EAAIrG,IAAU8F,EAAMG,EAAMJ,EAAMK,GAAOA,EAAMJ,GAAOK,GAAMN,EAAMI,GAAOG,GACjF12B,EAAK,GAAK,EAAIswB,IAAU6F,EAAMG,EAAMF,EAAMC,GAAOD,EAAME,GAAOG,GAAMJ,EAAMF,GAAOO,GACrF,OAAOC,EAAI,GAAK32B,EAAI,GAAK,EAAI22B,EAAI32B,EAAI,CACzC,EAQA0vB,YAAa,SAAUjmB,EAAGhG,EAAGiM,GACzB,OAAQjM,EAAE3O,EAAI2U,EAAE3U,IAAM4a,EAAE7a,EAAI4O,EAAE5O,IAAM6a,EAAE5a,EAAI2O,EAAE3O,IAAM2O,EAAE5O,EAAI4U,EAAE5U,EAC9D,GAEGgwB,CACX,CA/a6B,GAgb7BhpB,EAAQgpB,SAAWA,C,cCvenBlpB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQa,kBAAe,EACvB,IAAIA,EAA8B,WAC9B,SAASA,IACT,CAKA,OAJAA,EAAaC,KAAO,WAChB,MAAO,GAAGqE,OAAOtE,EAAak6B,UAClC,EACAl6B,EAAak6B,QAAU,EAChBl6B,CACX,CARiC,GASjCb,EAAQa,aAAeA,C,gBCQvBf,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ6oB,cAAW,EACnB,IAAIrc,EAAS,EAAQ,KACjBC,EAAW,EAAQ,IACnBnM,EAAW,EAAQ,KACnBD,EAAiB,EAAQ,KACzBD,EAAqB,EAAQ,KAC7BqP,EAAW,EAAQ,KACnBtP,EAAW,EAAQ,IASnB0oB,EAA0B,WAU1B,SAASA,EAAS7lB,EAAQ8lB,EAAM9K,GAI5B3kB,KAAKkH,UAAY,WACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAK2J,OAASA,EACd3J,KAAKyvB,KAAOA,EACZzvB,KAAK2kB,SAAWA,GAAY,CAChC,CA+fA,OAzfA6K,EAAS3nB,UAAU+C,MAAQ,WACvB,OAAO,IAAI4kB,EAASxvB,KAAK2J,OAAOiB,QAAS5K,KAAKyvB,KAAK7kB,QAAS5K,KAAK2kB,SACrE,EASA6K,EAAS3nB,UAAUqqB,QAAU,WACzB,OAAOzyB,KAAK2E,IAAIpE,KAAKiyB,gBACzB,EASAzC,EAAS3nB,UAAUoqB,cAAgB,WAI/B,OAAO,IAAIhrB,EAAS+G,OAAOhO,KAAKyvB,MAAMztB,QAAQhC,KAAK2kB,SAAU3kB,KAAK2J,QAAQhK,EAAIK,KAAK2J,OAAOhK,CAC9F,EASA6vB,EAAS3nB,UAAUsqB,QAAU,WACzB,OAAO1yB,KAAK2E,IAAIpE,KAAKgyB,gBACzB,EASAxC,EAAS3nB,UAAUmqB,cAAgB,WAE/B,OAAO,IAAI/qB,EAAS+G,OAAOhO,KAAKyvB,MAAMztB,QAAQhC,KAAK2kB,SAAU3kB,KAAK2J,QAAQ/J,EAAII,KAAK2J,OAAO/J,CAC9F,EASA4vB,EAAS3nB,UAAU85B,iBAAmB,WAClC,IAUIC,EAAOC,EAVPttB,EAAIvU,KAAKkyB,UACT3jB,EAAIvO,KAAKmyB,UAET2P,EAAOriC,KAAKsiC,OAAOxzB,EAAI9O,KAAKyW,IAAIlW,KAAK2kB,UAAWpQ,EAAI9U,KAAKwW,IAAIjW,KAAK2kB,WAClEqd,EAAOF,EAAOriC,KAAKgG,GAEnBw8B,EAAOjiC,KAAK2J,OAAOhK,EAAI4U,EAAI9U,KAAKwW,IAAI6rB,GAAQriC,KAAKwW,IAAIjW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAI4rB,GAAQriC,KAAKyW,IAAIlW,KAAK2kB,UACzGud,EAAOliC,KAAK2J,OAAO/J,EAAI2U,EAAI9U,KAAKwW,IAAI6rB,GAAQriC,KAAKyW,IAAIlW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAI4rB,GAAQriC,KAAKwW,IAAIjW,KAAK2kB,UACzGwd,EAAOniC,KAAK2J,OAAOhK,EAAI4U,EAAI9U,KAAKwW,IAAI+rB,GAAQviC,KAAKwW,IAAIjW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAI8rB,GAAQviC,KAAKyW,IAAIlW,KAAK2kB,UACzGyd,EAAOpiC,KAAK2J,OAAO/J,EAAI2U,EAAI9U,KAAKwW,IAAI+rB,GAAQviC,KAAKyW,IAAIlW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAI8rB,GAAQviC,KAAKwW,IAAIjW,KAAK2kB,UAEzGsd,EAAOE,GACPP,EAAQ,IAAI36B,EAAS+G,OAAOi0B,EAAMC,GAClCL,EAAQ,IAAI56B,EAAS+G,OAAOm0B,EAAMC,KAGlCR,EAAQ,IAAI36B,EAAS+G,OAAOm0B,EAAMC,GAClCP,EAAQ,IAAI56B,EAAS+G,OAAOi0B,EAAMC,IAGtC,IAOIG,EAAOC,EAPPC,EAAO9iC,KAAKsiC,MAAMxzB,EAAI9O,KAAKwW,IAAIjW,KAAK2kB,UAAWpQ,EAAI9U,KAAKyW,IAAIlW,KAAK2kB,WACjE6d,EAAOD,EAAO9iC,KAAKgG,GAEnBg9B,EAAOziC,KAAK2J,OAAOhK,EAAI4U,EAAI9U,KAAKwW,IAAIssB,GAAQ9iC,KAAKwW,IAAIjW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAIqsB,GAAQ9iC,KAAKyW,IAAIlW,KAAK2kB,UACzG+d,EAAO1iC,KAAK2J,OAAO/J,EAAI2U,EAAI9U,KAAKwW,IAAIssB,GAAQ9iC,KAAKyW,IAAIlW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAIqsB,GAAQ9iC,KAAKwW,IAAIjW,KAAK2kB,UACzGge,EAAO3iC,KAAK2J,OAAOhK,EAAI4U,EAAI9U,KAAKwW,IAAIusB,GAAQ/iC,KAAKwW,IAAIjW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAIssB,GAAQ/iC,KAAKyW,IAAIlW,KAAK2kB,UACzGie,EAAO5iC,KAAK2J,OAAO/J,EAAI2U,EAAI9U,KAAKwW,IAAIusB,GAAQ/iC,KAAKyW,IAAIlW,KAAK2kB,UAAYpW,EAAI9O,KAAKyW,IAAIssB,GAAQ/iC,KAAKwW,IAAIjW,KAAK2kB,UAU7G,OARI+d,EAAOE,GACPP,EAAQ,IAAIp7B,EAAS+G,OAAOy0B,EAAMC,GAClCJ,EAAQ,IAAIr7B,EAAS+G,OAAO20B,EAAMC,KAGlCP,EAAQ,IAAIp7B,EAAS+G,OAAO20B,EAAMC,GAClCN,EAAQ,IAAIr7B,EAAS+G,OAAOy0B,EAAMC,IAE/B,CAACd,EAAOC,EAAOQ,EAAOC,EACjC,EAaA9S,EAAS3nB,UAAUyG,UAAY,WAG3B,IAAIu0B,EAAK7iC,KAAKkyB,UACV4Q,EAAK9iC,KAAKmyB,UACV4Q,EAAKF,EAAKpjC,KAAKwW,IAAIjW,KAAK2kB,UACxBqe,EAAKH,EAAKpjC,KAAKyW,IAAIlW,KAAK2kB,UACxBse,EAAKH,EAAKrjC,KAAKwW,IAAIjW,KAAK2kB,SAAWllB,KAAKgG,GAAK,GAC7Cy9B,EAAKJ,EAAKrjC,KAAKyW,IAAIlW,KAAK2kB,SAAWllB,KAAKgG,GAAK,GAC7C09B,EAAiB1jC,KAAKC,KAAKqjC,EAAKA,EAAKE,EAAKA,GAC1CG,EAAkB3jC,KAAKC,KAAKsjC,EAAKA,EAAKE,EAAKA,GAC/C,OAAO,IAAIp8B,EAAS6H,OAAO,CAAEhP,EAAGK,KAAK2J,OAAOhK,EAAIwjC,EAAgBvjC,EAAGI,KAAK2J,OAAO/J,EAAIwjC,GAAmB,CAAEzjC,EAAGK,KAAK2J,OAAOhK,EAAIwjC,EAAgBvjC,EAAGI,KAAK2J,OAAO/J,EAAIwjC,GAClK,EAWA5T,EAAS3nB,UAAUtG,KAAO,SAAU0H,GAGhC,OAFAjJ,KAAK2J,OAAOzJ,IAAI+I,GAChBjJ,KAAKyvB,KAAKvvB,IAAI+I,GACPjJ,IACX,EAUAwvB,EAAS3nB,UAAUyB,MAAQ,SAAUkyB,GAEjC,OADAx7B,KAAKyvB,KAAKnmB,MAAMkyB,EAAQx7B,KAAK2J,QACtB3J,IACX,EAUAwvB,EAAS3nB,UAAU7F,OAAS,SAAUgD,GAGlC,OAFAhF,KAAKyvB,KAAKztB,OAAOgD,EAAOhF,KAAK2J,QAC7B3J,KAAK2kB,UAAY3f,EACVhF,IACX,EAUAwvB,EAAS3nB,UAAU8L,OAAS,SAAU3O,GAGlC,IAAIuP,EAAIvU,KAAKkyB,UACT3jB,EAAIvO,KAAKmyB,UACb,OAAO,IAAIlrB,EAAS+G,OAAOwhB,EAAS1V,MAAM7B,iBAAiBjY,KAAK2J,OAAOhK,EAAGK,KAAK2J,OAAO/J,EAAG2U,EAAGhG,EAAGvJ,IAAQhD,OAAOhC,KAAK2kB,SAAU3kB,KAAK2J,OACtI,EAcA6lB,EAAS3nB,UAAUw7B,SAAW,SAAUr+B,EAAOzE,GAC3C,IAAI8H,EAAQrI,KAAK2T,OAAO3O,EAAQhF,KAAK2kB,UACjC2e,EAAOtjC,KAAKujC,UAEZC,EAAS,IAAIrwB,EAAO2B,KAAKzM,EAAOi7B,EAAK,IAAIt+B,QAEzCy+B,EAAcD,GADL,IAAIrwB,EAAO2B,KAAKzM,EAAOi7B,EAAK,IAAIt+B,QACRw+B,GAAU,EAC3CE,EAAYr7B,EAAMuC,QAAQ+4B,KAAK,IAAI/4B,QAAQ5I,OAAOyhC,EAAap7B,GAC/Du7B,EAAYv7B,EACXuC,QACA+4B,KAAK,IACL/4B,QACA5I,OAAOvC,KAAKgG,GAAKg+B,EAAap7B,GAC/Bw7B,EAAe7jC,KAAK2J,OAAOU,SAASq5B,GAAa1jC,KAAK2J,OAAOU,SAASu5B,GACpE,IAAIxwB,EAASW,OAAO1L,EAAOu7B,GAC3B,IAAIxwB,EAASW,OAAO1L,EAAOq7B,GAIjC,MAHsB,iBAAXnjC,GACPsjC,EAAaC,UAAUvjC,GAEpBsjC,CACX,EAgBArU,EAAS3nB,UAAUgM,UAAY,SAAU7O,EAAOzE,GAE5C,OADaP,KAAKqjC,SAASr+B,EAAOzE,GACpBwc,MAAM/I,MACxB,EASAwb,EAAS3nB,UAAU0zB,UAAY,WAK3B,IAAIhnB,EAAIvU,KAAKkyB,UACT3jB,EAAIvO,KAAKmyB,UACb,OAAO1yB,KAAKgG,IAAM,GAAK8O,EAAIhG,GAAK9O,KAAKC,MAAM,EAAI6U,EAAIhG,IAAMgG,EAAI,EAAIhG,IACrE,EASAihB,EAAS3nB,UAAU07B,QAAU,WAEzB,IAAIQ,EAAK/jC,KAAKkyB,UACV8R,EAAKhkC,KAAKmyB,UACV8R,EAAQF,EAAKA,EAAKC,EAAKA,EAEvBnf,EAAIplB,KAAKC,KAAKD,KAAK2E,IAAI6/B,IAE3B,OAAIA,EAAQ,EACD,CACHjkC,KAAK2J,OAAOiB,QAAQs5B,KAAKrf,GAAG7iB,OAAOhC,KAAK2kB,SAAU3kB,KAAK2J,QACvD3J,KAAK2J,OAAOiB,QAAQs5B,MAAMrf,GAAG7iB,OAAOhC,KAAK2kB,SAAU3kB,KAAK2J,SAIrD,CACH3J,KAAK2J,OAAOiB,QAAQ+4B,KAAK9e,GAAG7iB,OAAOhC,KAAK2kB,SAAU3kB,KAAK2J,QACvD3J,KAAK2J,OAAOiB,QAAQ+4B,MAAM9e,GAAG7iB,OAAOhC,KAAK2kB,SAAU3kB,KAAK2J,QAGpE,EASA6lB,EAAS3nB,UAAUs8B,uBAAyB,SAAUt1B,GAGlD,IAFA,IAAIu1B,EAAS5U,EAAS1V,MAAMuqB,sBAAsBrkC,KAAKkyB,UAAWlyB,KAAKmyB,UAAWtjB,GAC9EE,EAAS,GACJzO,EAAI,EAAGA,EAAI8jC,EAAO7jC,OAAQD,IAC/ByO,EAAO3O,KAAKJ,KAAK2T,OAAOywB,EAAO9jC,KAEnC,OAAOyO,CACX,EAWAygB,EAAS3nB,UAAU2D,kBAAoB,SAAUkM,EAAKhM,QAGvB,IAAvBA,IAAiCA,GAAqB,GAE1D,IAAI44B,EAActkC,KAAK4K,QACnB25B,EAAU7sB,EAAI9M,QAEdsC,EAAao3B,EAAY36B,OAAOiB,QAAQmS,MAC5CunB,EAAY/iC,KAAK2L,GACjBq3B,EAAQrkC,IAAIgN,GAGZ,IAAIs3B,GAAkBF,EAAY3f,SAClC2f,EAAYtiC,OAAOwiC,GACnBD,EAAQhwB,EAAEvS,OAAOwiC,EAAgBF,EAAY36B,QAC7C46B,EAAQh2B,EAAEvM,OAAOwiC,EAAgBF,EAAY36B,QAG7C,IAAIuoB,EAAUoS,EAAYpS,UACtBC,EAAUmS,EAAYnS,UACtBsS,EAAiBvS,EAAUC,EAAU,CAAExyB,EAAGwyB,EAAUD,EAAStyB,EAAG,GAAQ,CAAED,EAAG,EAAKC,EAAGsyB,EAAUC,GAEnGmS,EAAY7U,KAAKhmB,QAAQg7B,GACzBF,EAAQhwB,EAAE9K,QAAQg7B,GAClBF,EAAQh2B,EAAE9E,QAAQg7B,GAGlB,IACIvjB,EADY,IAAI9K,EAASlD,OAAO,IAAIjM,EAAS+G,OAAUs2B,EAAYpS,WACzC1mB,kBAAkB+4B,EAAS74B,GAQzD,OANAwV,EAAcwjB,SAAQ,SAAU7sB,GAE5BA,EAAkBpO,QAAQ,CAAE9J,EAAG,EAAI8kC,EAAe9kC,EAAGC,EAAG,EAAI6kC,EAAe7kC,GAAK0kC,EAAY36B,QAC5FkO,EAAkB7V,QAAQwiC,EAAgBF,EAAY36B,QACtDkO,EAAkB1C,IAAIjI,EAC1B,IACOgU,CACX,EAUAsO,EAAS3nB,UAAUkE,yBAA2B,SAAUN,EAAMC,GAC1D,IAAIoK,EAAQ9V,KAIZ,YAH2B,IAAvB0L,IAAiCA,GAAqB,GAEjC1L,KAAKwL,kBAAkBC,EAAMC,GAC5BqK,KAAI,SAAUvD,GAEpC,IACIxN,EADiB,IAAImO,EAAO2B,KAAKgB,EAAMnM,OAAQ6I,GACxBxN,QAE3B,OAAO8Q,EAAMjC,UAAU7O,EAC3B,GACJ,EAUAwqB,EAAS3nB,UAAU88B,cAAgB,SAAUC,EAAqBtG,GA4B9D,IAAIuG,EAAuD,EAAxCplC,KAAK6K,IAAI,EAAGs6B,GAAuB,GACtDtG,OAAiC,IAAdA,EAA4B,QAAWA,EAO1D,IANA,IAAIpM,EAAUlyB,KAAKkyB,UACfC,EAAUnyB,KAAKmyB,UACfrlB,EAAS,GACTs3B,EAAS5U,EAAS1V,MAAMuqB,sBAAsBnS,EAASC,EAAS0S,GAChEC,EAAWV,EAAO,GAAKpkC,KAAK2kB,SAC5B3c,EAAahI,KAAK2T,OAAOmxB,GACpBxkC,EAAI,EAAGA,EAAI8jC,EAAO7jC,OAAQD,IAAK,CACpC,IAAIykC,EAAYX,GAAQ9jC,EAAI,GAAK8jC,EAAO7jC,QAAUP,KAAK2kB,SACnD1c,EAAWjI,KAAK2T,OAAOoxB,GAC3B,GAAItlC,KAAK2E,IAAI+tB,GAAW,MAAU1yB,KAAK2E,IAAI8tB,GAAW,KAAQ,CAE1D,IAAI7c,EAAOrN,EAAWsN,WAAWrN,GAC7BF,EAAQ,IAAIhB,EAAmByJ,iBAAiBxI,EAAW4C,QAAS3C,EAAS2C,QAAS5C,EAAW4C,QAAQsJ,MAAe,KAATmB,EAAK1V,EAAoB,KAAT0V,EAAKzV,GAAYqI,EAAS2C,QAAQsJ,MAAgB,MAATmB,EAAK1V,EAAqB,MAAT0V,EAAKzV,IAClMkN,EAAO1M,KAAK2H,EAChB,KACK,CACD,IAAIi9B,EAAehlC,KAAK6T,UAAUixB,EAAW9kC,KAAK2kB,UAC9CsgB,EAAajlC,KAAK6T,UAAUkxB,EAAY/kC,KAAK2kB,UAE7C9D,EAAemkB,EAAankB,aAAaokB,GAGzCC,EAAYl9B,EAAWsN,WAAWuL,GAClCskB,EAAUl9B,EAASqN,WAAWuL,GAC9B9Y,EAAQ,IAAIhB,EAAmByJ,iBAAiBxI,EAAW4C,QAAS3C,EAAS2C,QAAS5C,EAAW4C,QAAQ1K,IAAIglC,EAAU57B,MAAMg1B,IAAar2B,EAAS2C,QAAQ1K,IAAIilC,EAAQ77B,MAAMg1B,KACjLxxB,EAAO1M,KAAK2H,EAChB,CACAC,EAAaC,EACb68B,EAAWC,CACf,CACA,OAAOj4B,CACX,EAMA0iB,EAAS3nB,UAAUtB,QAAU,WACzBvG,KAAK2J,OAAOpD,UACZvG,KAAKyvB,KAAKlpB,UACVvG,KAAKuP,aAAc,CACvB,EAKAigB,EAAS1V,MAAQ,CAYb7B,iBAAkB,SAAUC,EAASC,EAAS+Z,EAASC,EAASntB,GAG5D,IAAIy8B,EAAIhiC,KAAKyW,IAAIzW,KAAKgG,GAAK,EAAIT,GAC3BwV,EAAI/a,KAAKwW,IAAIxW,KAAKgG,GAAK,EAAIT,GAC/B,MAAO,CACHrF,EAAGuY,EAAWga,EAAUC,EAAUsP,EAAKhiC,KAAKC,KAAKD,KAAK0O,IAAI+jB,EAAU1X,EAAG,GAAK/a,KAAK0O,IAAIgkB,EAAUsP,EAAG,IAClG7hC,EAAGuY,EAAW+Z,EAAUC,EAAU3X,EAAK/a,KAAKC,KAAKD,KAAK0O,IAAI+jB,EAAU1X,EAAG,GAAK/a,KAAK0O,IAAIgkB,EAAUsP,EAAG,IAE1G,EASA2D,WAAY,SAAUlT,EAASC,EAASkT,GAEpC,IAAIC,EAAS7lC,KAAK8lC,IAAIF,GAClBG,EAAUF,EAASA,EAEvB,OADa7lC,KAAKgG,GAAK,EAAI4/B,EAAM5lC,KAAKgmC,MAAOvT,EAAUC,GAAWmT,GAAWnT,EAAUD,EAAUsT,GAErG,EAOAnB,sBAAuB,SAAUnS,EAASC,EAAStjB,GAE/C,IADA,IAAIu1B,EAAS,GACJ9jC,EAAI,EAAGA,EAAIuO,EAAYvO,IAAK,CACjC,IAAI+kC,EAAM5lC,KAAKgG,GAAK,EAAkB,EAAVhG,KAAKgG,GAAUoJ,EAAcvO,EACrDolC,EAAQlW,EAAS1V,MAAMsrB,WAAWlT,EAASC,EAASkT,GACxDjB,EAAO9jC,GAAKolC,CAChB,CACA,OAAOtB,CACX,GAEG5U,CACX,CAnhB6B,GAohB7B7oB,EAAQ6oB,SAAWA,C,gBC9iBnB/oB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ+oB,oBAAiB,EACzB,IAAI5oB,EAAW,EAAQ,IACnBC,EAAqB,EAAQ,KAC7BsP,EAAc,EAAQ,KACtBlD,EAAS,EAAQ,KACjBnM,EAAiB,EAAQ,KACzB6e,EAAa,EAAQ,KACrB5e,EAAW,EAAQ,KAYnByoB,EAAgC,WAahC,SAASA,EAAehF,EAASpU,EAAYC,GAIzCvW,KAAKkH,UAAY,iBACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAK0qB,QAAUA,EACf1qB,KAAKsW,WAAaD,EAAYO,UAAUmB,WAAWzB,EAAY,EAAa,EAAV7W,KAAKgG,IACvEzF,KAAKuW,SAAWF,EAAYO,UAAUmB,WAAWxB,EAAU,EAAa,EAAV9W,KAAKgG,GACvE,CA4WA,OAlWAiqB,EAAe7nB,UAAUtG,KAAO,SAAU0H,GAEtC,OADAjJ,KAAK0qB,QAAQnpB,KAAK0H,GACXjJ,IACX,EAUA0vB,EAAe7nB,UAAU6O,cAAgB,SAAU1R,GAC/CA,EAAQqR,EAAYO,UAAUC,cAAc7R,GAC5C,IAAI2gC,EAAStvB,EAAYO,UAAUC,cAAc7W,KAAKsW,YAClDsvB,EAASvvB,EAAYO,UAAUC,cAAc7W,KAAKuW,UAQtD,OAAIovB,GAAUC,EACH5gC,GAAS2gC,GAAU3gC,EAAQ4gC,EAI3B5gC,GAAS2gC,GAAU3gC,EAAQ4gC,CAE1C,EASAlW,EAAe7nB,UAAUqB,cAAgB,WACrC,OAAOlJ,KAAK0qB,QAAQ/W,OAAO3T,KAAKsW,WACpC,EASAoZ,EAAe7nB,UAAUwB,YAAc,WACnC,OAAOrJ,KAAK0qB,QAAQ/W,OAAO3T,KAAKuW,SACpC,EAaAmZ,EAAe7nB,UAAUyG,UAAY,WACjC,IAAIwH,EAAQ9V,KAGRyW,EADWzW,KAAK0qB,QAAQiX,mBACF/rB,QAAO,SAAUvN,GACvC,IAAIrD,EAAQ,IAAImO,EAAO2B,KAAKgB,EAAM4U,QAAQ/gB,OAAQtB,GAAOrD,QAAU8Q,EAAM4U,QAAQ/F,SACjF,OAAO7O,EAAMY,cAAc1R,EAC/B,IACA,OAAO8B,EAAS6H,OAAO2D,oBAAoB,CAACtS,KAAKkJ,gBAAiBlJ,KAAKqJ,eAAeyC,OAAO2K,GACjG,EAYAiZ,EAAe7nB,UAAU2D,kBAAoB,SAAUkM,EAAKhM,GACxD,IAAIoK,EAAQ9V,UACe,IAAvB0L,IAAiCA,GAAqB,GAE1D,IAAIiM,EAAuB3X,KAAK0qB,QAAQlf,kBAAkBkM,EAAKhM,GAE3DkM,EAAU,IAAIzE,EAAO2B,KAAK9U,KAAK0qB,QAAQ/gB,OAAQ,IAAI1C,EAAS+G,QAChE,OAAO2J,EAAqB/B,QAAO,SAAUiC,GACzCD,EAAQrJ,EAAEF,IAAIwJ,GACd,IAAIC,EAAYF,EAAQ5S,QACxB,OAAO8Q,EAAMY,cAAcoB,EAAYhC,EAAM4U,QAAQ/F,SACzD,GACJ,EAYA+K,EAAe7nB,UAAUkE,yBAA2B,SAAUN,EAAMC,GAChE,IAAIoK,EAAQ9V,KAIZ,YAH2B,IAAvB0L,IAAiCA,GAAqB,GAEjC1L,KAAKwL,kBAAkBC,EAAMC,GAC5BqK,KAAI,SAAUvD,GAEpC,IACIxN,EADiB,IAAImO,EAAO2B,KAAKgB,EAAM4U,QAAQ/gB,OAAQ6I,GAChCxN,QAI3B,OAAO8Q,EAAM4U,QAAQ7W,UAAU7O,EACnC,GACJ,EAUA0qB,EAAe7nB,UAAU88B,cAAgB,SAAUC,EAAqBtG,GAIpE,IAAIuG,EAAuD,EAAxCplC,KAAK6K,IAAI,EAAGs6B,GAAuB,GACtDtG,OAAiC,IAAdA,EAA4B,QAAWA,EAW1D,IAVA,IAAIpM,EAAUlyB,KAAK0qB,QAAQwH,UACvBC,EAAUnyB,KAAK0qB,QAAQyH,UACvB7b,EAAaoZ,EAAe2C,mBAAmBwT,eAAe7lC,KAAKsW,YACnEC,EAAWmZ,EAAe2C,mBAAmBwT,eAAe7lC,KAAKuW,UAEjE6tB,EAAS1U,EAAe2C,mBAAmBgS,sBAAsBnS,EAASC,EAAS7b,EAAYC,EAAUsuB,GAEzG/3B,EAAS,GACTg4B,GAFJV,EAAS,CAAC9tB,GAAYxK,OAAOs4B,GAAQt4B,OAAO,CAACyK,KAEvB,GAClBvO,EAAahI,KAAK0qB,QAAQ/W,OAAOmxB,GAC5BxkC,EAAI,EAAGA,EAAI,EAAI8jC,EAAO7jC,OAAQD,IAAK,CACxC,IAAIykC,EAAYX,GAAQ9jC,EAAI,GAAK8jC,EAAO7jC,QACpC0H,EAAWjI,KAAK0qB,QAAQ/W,OAAOoxB,GAC/BC,EAAehlC,KAAK0qB,QAAQ7W,UAAUixB,EAAW9kC,KAAK0qB,QAAQ/F,UAC9DsgB,EAAajlC,KAAK0qB,QAAQ7W,UAAUkxB,EAAY/kC,KAAK0qB,QAAQ/F,UAEjE,GAAIllB,KAAK2E,IAAI+tB,GAAW,MAAU1yB,KAAK2E,IAAI8tB,GAAW,KAAQ,CAC1D,IAAI7c,EAAOrN,EAAWsN,WAAWrN,GAC7BF,EAAQ,IAAIhB,EAAmByJ,iBAAiBxI,EAAW4C,QAAS3C,EAAS2C,QAAS5C,EAAW4C,QAAQsJ,MAAe,KAATmB,EAAK1V,EAAoB,KAAT0V,EAAKzV,GAAYqI,EAAS2C,QAAQsJ,MAAgB,MAATmB,EAAK1V,EAAqB,MAAT0V,EAAKzV,IAClMkN,EAAO1M,KAAK2H,EAChB,KACK,CAED,IAAI8Y,EAAemkB,EAAankB,aAAaokB,GAG7C,GAAIpkB,EAAc,CAGd,IAAIqkB,EAAYl9B,EAAWsN,WAAWuL,GAClCskB,EAAUl9B,EAASqN,WAAWuL,GAC9B9Y,EAAQ,IAAIhB,EAAmByJ,iBAAiBxI,EAAW4C,QAAS3C,EAAS2C,QAAS5C,EAAW4C,QAAQ1K,IAAIglC,EAAU57B,MAAMg1B,IAAar2B,EAAS2C,QAAQ1K,IAAIilC,EAAQ77B,MAAMg1B,KACjLxxB,EAAO1M,KAAK2H,EAChB,CACJ,CACAC,EAAaC,EACb68B,EAAWC,CACf,CACA,OAAOj4B,CACX,EAMA4iB,EAAe7nB,UAAUtB,QAAU,WAC/BvG,KAAK0qB,QAAQnkB,UACbvG,KAAKuP,aAAc,CACvB,EACAmgB,EAAe2C,mBAAqB,CAShCja,eAAgB,SAAUzY,EAAGC,EAAGsyB,EAASC,EAAS7b,EAAYC,EAAUoO,EAAUtM,QACvD,IAAZA,IACPA,EAAU,CAAEC,aAAa,SACL,IAAbqM,IACPA,EAAW,GAKfrO,EAAaD,EAAYO,UAAUkvB,QAAQxvB,EAAsB,EAAV7W,KAAKgG,IAC5D8Q,EAAWF,EAAYO,UAAUkvB,QAAQvvB,EAAoB,EAAV9W,KAAKgG,IAGxD,IAAIjE,EAAM,IAAIyF,EAAS+G,OAAO6X,EAAW2J,SAAS1V,MAAM7B,iBAAiBtY,EAAGC,EAAGsyB,EAASC,EAAS5b,IAC7FlV,EAAQ,IAAI4F,EAAS+G,OAAO6X,EAAW2J,SAAS1V,MAAM7B,iBAAiBtY,EAAGC,EAAGsyB,EAASC,EAAS7b,IACnG9U,EAAIQ,OAAO2iB,EAAU,CAAEhlB,EAAGA,EAAGC,EAAGA,IAChCyB,EAAMW,OAAO2iB,EAAU,CAAEhlB,EAAGA,EAAGC,EAAGA,IAElC,IACI6Y,EADApD,EAAOkB,EAAWD,EAGlBmC,EADApD,EAAO,EACQ5V,KAAK2E,IAAIiR,GAAQ5V,KAAKgG,GAAK,EAAI,EAG/BhG,KAAK2E,IAAIiR,GAAQ5V,KAAKgG,GAAK,EAAI,EAElD,IACIkT,EAAW,GACXN,EAAQC,aACRK,EAASvY,KAAK,IAAKiB,EAAM1B,EAAG0B,EAAMzB,GAGtC,IAAImmC,EAAM,IAAMtmC,KAAKgG,GAErB,OADAkT,EAASvY,KAAK,IAAK8xB,EAASC,EAASxN,EAAWohB,EAAKttB,EAPrC,EAO8DjX,EAAI7B,EAAG6B,EAAI5B,GAClF+Y,CACX,EAqBA0rB,sBAAuB,SAAUnS,EAASC,EAAS7b,EAAYC,EAAUyvB,GACrE,IAAIC,EAAgBpgB,EAAW2J,SAAS1V,MAAMuqB,sBAAsBnS,EAASC,EAAS6T,GAStFC,GARAA,EAAgBA,EAAclwB,KAAI,SAAU/Q,GAAS,OAAO0qB,EAAe2C,mBAAmBwT,eAAe7gC,EAAQ,KAQvF4Q,QAPT,SAAU5Q,GAC3B,OAAIsR,EAAaC,EACNvR,GAASsR,GAActR,GAASuR,EAEhCvR,GAASsR,GAAetR,GAASuR,GAAYvR,GAAS,CACrE,IASA,IAJA,IAAIkhC,EAAaxW,EAAe2C,mBAAmB8T,wBAAwB7vB,EAAYC,EAAU0vB,GAG7F7B,EAAS,GACJ9jC,EAAI,EAAGA,EAAI2lC,EAAc1lC,OAAQD,IACtC8jC,EAAOhkC,KAAK6lC,GAAeC,EAAa5lC,GAAK2lC,EAAc1lC,SAE/D,OAAO6jC,CACX,EACA+B,wBAAyB,SAAU7vB,EAAYC,EAAU0vB,GAErD,GAAI3vB,EAAaC,EAEb,IADA,IAAIrH,EAAI+2B,EAAc1lC,OACbD,EAAI,EAAGA,EAAI4O,EAAG5O,IAAK,CACxB,IAAI8lC,EAAK/vB,EAAYO,UAAUmB,WAAWkuB,EAAc3lC,GAAI,EAAa,EAAVb,KAAKgG,IACpE,GAAI2gC,GAAM9vB,GAAc8vB,GAAM7vB,EAC1B,OAAOjW,CAEf,CAEJ,OAAO,CACX,EACAulC,eAAgB,SAAU7gC,GAAS,OAAQA,EAAQ,EAAc,EAAVvF,KAAKgG,GAAST,EAAQA,CAAQ,EAkBrFqhC,2BAA4B,SAAU5iC,EAAIE,EAAI2iC,EAAIC,EAAIlB,EAAKmB,EAAIC,EAAI/iC,EAAIE,GAInE,IAAIQ,EAAM3E,KAAK2E,IACX8R,EAAMzW,KAAKyW,IACXD,EAAMxW,KAAKwW,IACXvW,EAAOD,KAAKC,KACZyO,EAAM,SAAUe,GAChB,OAAOA,EAAIA,CACf,EACIw3B,EAASxwB,EAAImvB,GACbsB,EAAS1wB,EAAIovB,GAEb1lC,EAAKgnC,GAAUljC,EAAKC,GAAO,EAAKgjC,GAAU/iC,EAAKC,GAAO,EACtDhE,GAAM8mC,GAAUjjC,EAAKC,GAAO,EAAKijC,GAAUhjC,EAAKC,GAAO,EACvD29B,EAAKpzB,EAAIxO,GAAI6hC,EAAKrzB,EAAIvO,GAAIgnC,EAAMz4B,EAAIm4B,GAAKO,EAAM14B,EAAIo4B,GAEnDO,EAAIvF,EAAKqF,EAAMpF,EAAKqF,EACpBC,EAAI,GACJR,EAAK5mC,EAAKonC,GAAK1iC,EAAIkiC,GACnBC,EAAK7mC,EAAKonC,GAAK1iC,EAAImiC,KAGnBD,EAAKliC,EAAIkiC,GACTC,EAAKniC,EAAImiC,IAGb,IAAI7wB,EAAO8wB,IAAOC,GAAM,EAAI,EAExBM,EAAIrnC,EAAKD,KAAK2E,KAAKwiC,EAAMC,EAAMD,EAAMpF,EAAKqF,EAAMtF,IAAOqF,EAAMpF,EAAKqF,EAAMtF,KAAQ7rB,EAChFsxB,EAAOD,GAAKT,EAAK1mC,GAAM2mC,EACvBU,EAAOF,IAAMR,EAAK5mC,GAAM2mC,EACxBpG,EAAKyG,EAASK,EAAMN,EAASO,GAAOxjC,EAAKC,GAAM,EAC/Cy8B,EAAKuG,EAASM,EAAML,EAASM,GAAOtjC,EAAKC,GAAM,EAE/C+F,EAAS,IAAI1C,EAAS+G,OAAOkyB,EAAIC,GACjC1Q,EAAO9lB,EAAOiB,QAAQsJ,MAAMoyB,EAAIC,GAChC7b,EAAU,IAAI7E,EAAW2J,SAAS7lB,EAAQ8lB,EAAM,GAKpD,OAHA/E,EAAQ1oB,OAAOqjC,GAGR,IAAI3V,EAAehF,EAFT,IAAIvX,EAAO2B,KAAK4V,EAAQ/gB,OAAQ,IAAI1C,EAAS+G,OAAOvK,EAAIE,IAAKqB,QAE9BqgC,EADjC,IAAIlyB,EAAO2B,KAAK4V,EAAQ/gB,OAAQ,IAAI1C,EAAS+G,OAAOtK,EAAIE,IAAKoB,QACZqgC,EACpE,GAEG3V,CACX,CAnYmC,GAoYnC/oB,EAAQ+oB,eAAiBA,C,qBCrZzB,IACQzP,EADJC,EAAalgB,MAAQA,KAAKkgB,YACtBD,EAAgB,SAAU3L,EAAG/F,GAI7B,OAHA0R,EAAgBxZ,OAAO0Z,gBAClB,CAAEC,UAAW,cAAgBhQ,OAAS,SAAUkE,EAAG/F,GAAK+F,EAAE8L,UAAY7R,CAAG,GAC1E,SAAU+F,EAAG/F,GAAK,IAAK,IAAI1E,KAAK0E,EAAO9H,OAAOoB,UAAUwY,eAAeC,KAAK/R,EAAG1E,KAAIyK,EAAEzK,GAAK0E,EAAE1E,GAAI,EAC7FoW,EAAc3L,EAAG/F,EAC5B,EACO,SAAU+F,EAAG/F,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIgS,UAAU,uBAAyBC,OAAOjS,GAAK,iCAE7D,SAASkS,IAAOzgB,KAAKF,YAAcwU,CAAG,CADtC2L,EAAc3L,EAAG/F,GAEjB+F,EAAEzM,UAAkB,OAAN0G,EAAa9H,OAAOia,OAAOnS,IAAMkS,EAAG5Y,UAAY0G,EAAE1G,UAAW,IAAI4Y,EACnF,GAEJha,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQoN,YAAS,EACjB,IAAI4M,EAAc,EAAQ,KACtB1Z,EAAW,EAAQ,KAUnB8M,EAAwB,SAAU6M,GAWlC,SAAS7M,EAAOypB,EAAOC,GACnB,IAAI3nB,EAAQ8K,EAAON,KAAKtgB,KAAMw9B,EAAOC,GAAO,SAAUlpB,EAAGhG,GAAK,OAAO,IAAIwF,EAAOQ,EAAGhG,EAAI,KAAMvO,KAK7F,OADA8V,EAAM5O,UAAY,SACX4O,CACX,CAgIA,OAjJAoK,EAAUnM,EAAQ6M,GAuBlB7M,EAAOlM,UAAUmM,KAAO,WACpB,IAAIxU,EAAIQ,KAAK4K,QAKb,OAJApL,EAAE2V,IAAInV,KAAKuU,IACX/U,EAAI,IAAIuU,EAAO,IAAI9M,EAAS+G,OAAU,IAAI/G,EAAS+G,QAAQxO,EAAE+O,EAAE3O,EAAGJ,EAAE+O,EAAE5O,KACpE4U,EAAErU,IAAIF,KAAKuU,GACb/U,EAAE+O,EAAErO,IAAIF,KAAKuU,GACN/U,CACX,EAQAuU,EAAOlM,UAAUq/B,QAAU,WACvB,IAAIluB,EAAMhZ,KAAKuU,EAGf,OAFAvU,KAAKuU,EAAIvU,KAAKuO,EACdvO,KAAKuO,EAAIyK,EACFhZ,IACX,EAMA+T,EAAOlM,UAAUkV,IAAM,WAGnB,OAFA/c,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAKK,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GACzCK,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAAKI,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAClCI,IACX,EAUA+T,EAAOlM,UAAUgZ,aAAe,SAAUpV,GACtC,IAAIqV,EAAc9gB,KAAK8gB,YAAYrV,GACnC,GAAmB,GAAfqV,EACA,OAAO,KACX,IAAIvM,EAAIvU,KAAKuU,EAAE3U,EAAI6L,EAAK8I,EAAE3U,EACtB2O,EAAIvO,KAAKuU,EAAE5U,EAAI8L,EAAK8I,EAAE5U,EACtBohB,GAActV,EAAK8C,EAAE5O,EAAI8L,EAAK8I,EAAE5U,GAAK4U,GAAK9I,EAAK8C,EAAE3O,EAAI6L,EAAK8I,EAAE3U,GAAK2O,EACjEyS,GAAchhB,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAK4U,GAAKvU,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAAK2O,EAMrE,OALAgG,EAAIwM,EAAaD,EACjBvS,EAAIyS,EAAaF,EAIV,IAAI7Z,EAAS+G,OAAOhO,KAAKuU,EAAE5U,EAAI4U,GAAKvU,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAIK,KAAKuU,EAAE3U,EAAI2U,GAAKvU,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GACvG,EAUAmU,EAAOlM,UAAUs/B,cAAgB,WAE7B,IAAIC,EAAYpnC,KAAKuU,EAAE3J,QACnB5C,EAAahI,KAAKuO,EAAE3D,QAAQuK,IAAInV,KAAKuU,GACrCyE,EAAMhR,EAAWrI,EAGrB,OAFAqI,EAAWrI,GAAKqI,EAAWpI,EAC3BoI,EAAWpI,EAAIoZ,EACR,IAAIjF,EAAOqzB,EAAWp/B,EAAW9H,IAAIF,KAAKuU,GACrD,EAUAR,EAAOlM,UAAU7F,OAAS,SAAUgD,GAEhC,OADAhF,KAAKuO,EAAEvM,OAAOgD,EAAOhF,KAAKuU,GACnBvU,IACX,EACA+T,EAAO+F,MAAQ,CA0BXutB,eAAgB,SAAUC,EAAIC,EAAIC,EAASpgB,EAAQC,GAC/C,IAAIriB,EAAQvF,KAAKsiC,OAAOwF,EAAG3nC,EAAI0nC,EAAG1nC,GAAKynB,GAASkgB,EAAG5nC,EAAI2nC,EAAG3nC,GAAKynB,GAC3D7U,EAAW,GAKf,OAJAA,EAASnS,KAAK,IAAI6G,EAAS+G,OAAOu5B,EAAG5nC,EAAIynB,EAASogB,EAAU/nC,KAAKwW,IAAIjR,GAAQuiC,EAAG3nC,EAAIynB,EAASmgB,EAAU/nC,KAAKyW,IAAIlR,KAChHuN,EAASnS,KAAK,IAAI6G,EAAS+G,OAAOu5B,EAAG5nC,EAAIynB,EAAmB,KAAVogB,EAAiB/nC,KAAKwW,IAAIjR,EAAQvF,KAAKgG,GAAK,GAAI8hC,EAAG3nC,EAAIynB,EAAmB,KAAVmgB,EAAiB/nC,KAAKyW,IAAIlR,EAAQvF,KAAKgG,GAAK,KAC9J8M,EAASnS,KAAK,IAAI6G,EAAS+G,OAAOu5B,EAAG5nC,EAAIynB,EAAQmgB,EAAG3nC,EAAIynB,IACxD9U,EAASnS,KAAK,IAAI6G,EAAS+G,OAAOu5B,EAAG5nC,EAAIynB,EAAmB,KAAVogB,EAAiB/nC,KAAKwW,IAAIjR,EAAQvF,KAAKgG,GAAK,GAAI8hC,EAAG3nC,EAAIynB,EAAmB,KAAVmgB,EAAiB/nC,KAAKyW,IAAIlR,EAAQvF,KAAKgG,GAAK,KACvJ8M,CACX,GAEGwB,CACX,CAnJ2B,CAmJzB4M,EAAYU,WACd1a,EAAQoN,OAASA,C,gBChLjBtN,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ0a,eAAY,EACpB,IAAIpa,EAAW,EAAQ,KACnBD,EAAiB,EAAQ,KAQzBqa,EAA2B,WAS3B,SAASA,EAAU9M,EAAGhG,EAAGk5B,GACrBznC,KAAKuH,IAAMP,EAAeQ,aAAaC,OACvCzH,KAAKuU,EAAIA,EACTvU,KAAKuO,EAAIA,EACTvO,KAAKynC,QAAUA,CACnB,CA0SA,OAlSApmB,EAAUxZ,UAAUtH,OAAS,WACzB,OAAOd,KAAKC,KAAKD,KAAK0O,IAAInO,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,EAAG,GAAKF,KAAK0O,IAAInO,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,EAAG,GACtF,EAUAyhB,EAAUxZ,UAAUi8B,UAAY,SAAUvjC,GACtC,OAAOP,KAAKsJ,MAAM/I,EAASP,KAAKO,SACpC,EAUA8gB,EAAUxZ,UAAUsN,IAAM,SAAUlM,GAGhC,OAFAjJ,KAAKuU,EAAEY,IAAIlM,GACXjJ,KAAKuO,EAAE4G,IAAIlM,GACJjJ,IACX,EAUAqhB,EAAUxZ,UAAU3H,IAAM,SAAU+I,GAGhC,OAFAjJ,KAAKuU,EAAErU,IAAI+I,GACXjJ,KAAKuO,EAAErO,IAAI+I,GACJjJ,IACX,EAWAqhB,EAAUxZ,UAAU6/B,OAAS,WACzB,IAAI1uB,EAAMhZ,KAAKuU,EAGf,OAFAvU,KAAKuU,EAAIvU,KAAKuO,EACdvO,KAAKuO,EAAIyK,EACFhZ,IACX,EASAqhB,EAAUxZ,UAAU8/B,UAAY,WAE5B,OADA3nC,KAAKuO,EAAEF,IAAIrO,KAAKuU,EAAE5U,GAAKK,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAKK,KAAKO,SAAUP,KAAKuU,EAAE3U,GAAKI,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAAKI,KAAKO,UAC9FP,IACX,EAUAqhB,EAAUxZ,UAAUyB,MAAQ,SAAUkyB,GAElC,OADAx7B,KAAKuO,EAAEF,IAAIrO,KAAKuU,EAAE5U,GAAKK,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAK67B,EAAQx7B,KAAKuU,EAAE3U,GAAKI,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAAK47B,GAClFx7B,IACX,EAUAqhB,EAAUxZ,UAAUuZ,OAAS,SAAUwmB,GACnC,IAAIvyB,EAAOrV,KAAKuU,EAAEe,WAAWsyB,GAG7B,OAFA5nC,KAAKuU,EAAErU,IAAImV,GACXrV,KAAKuO,EAAErO,IAAImV,GACJrV,IACX,EAUAqhB,EAAUxZ,UAAUtG,KAAO,SAAU0H,GAGjC,OAFAjJ,KAAKuU,EAAErU,IAAI+I,GACXjJ,KAAKuO,EAAErO,IAAI+I,GACJjJ,IACX,EAUAqhB,EAAUxZ,UAAU7C,MAAQ,SAAUyG,GACtB,MAARA,QAA+B,IAARA,IACvBA,EAAOzL,KAAKynC,QAAQ,IAAIxgC,EAAS+G,OAAO,EAAG,GAAI,IAAI/G,EAAS+G,OAAO,IAAK,KAG5E,IAAI65B,EAAK7nC,KAAKuO,EAAE3D,QAAQuK,IAAInV,KAAKuU,GAC7BtP,EAAKwG,EAAK8C,EAAE3D,QAAQuK,IAAI1J,EAAK8I,GAGjC,OAAO9U,KAAKsiC,MAAM98B,EAAGtF,EAAGsF,EAAGrF,GAAKH,KAAKsiC,MAAM8F,EAAGloC,EAAGkoC,EAAGjoC,EACxD,EAaAyhB,EAAUxZ,UAAU8L,OAAS,SAAU7I,GACnC,OAAO,IAAI7D,EAAS+G,OAAOhO,KAAKuU,EAAE5U,GAAKK,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,GAAKmL,EAAG9K,KAAKuU,EAAE3U,GAAKI,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,GAAKkL,EACxG,EAYAuW,EAAUxZ,UAAUiZ,YAAc,SAAUrV,GAExC,OAAQA,EAAK8C,EAAE3O,EAAI6L,EAAK8I,EAAE3U,IAAMI,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,IAAM8L,EAAK8C,EAAE5O,EAAI8L,EAAK8I,EAAE5U,IAAMK,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,EACtG,EAaAyhB,EAAUxZ,UAAU+1B,SAAW,SAAUnyB,EAAMq8B,GAC3C,OAAOroC,KAAK2E,IAAIpE,KAAK8gB,YAAYrV,UAA6B,IAAZq8B,EAA0B7gC,EAAS+G,OAAOiyB,QAAU6H,EAC1G,EAaAzmB,EAAUxZ,UAAU+B,YAAc,SAAUC,GACxC,IAAIk+B,EAAK1mB,EAAU2mB,QAAQC,MAAMjoC,KAAKuU,EAAGvU,KAAKuO,GAC9C,OAAW,IAAPw5B,EACO,IACDl+B,EAAElK,EAAIK,KAAKuU,EAAE5U,IAAMK,KAAKuO,EAAE5O,EAAIK,KAAKuU,EAAE5U,IAAMkK,EAAEjK,EAAII,KAAKuU,EAAE3U,IAAMI,KAAKuO,EAAE3O,EAAII,KAAKuU,EAAE3U,IAAMmoC,CAKpG,EAaA1mB,EAAUxZ,UAAUgO,SAAW,SAAUxN,EAAO6/B,EAAkBJ,GAC9D,IAAIh9B,EAAI9K,KAAK4J,YAAYvB,GAErBgC,EAAW5K,KAAKC,KAAK2hB,EAAU2mB,QAAQC,MAAM5/B,EAAOrI,KAAK2T,OAAO7I,KACpE,YAAgC,IAArBo9B,GAAoCA,EACpC79B,GAAYy9B,QAAyCA,EAAU7gC,EAAS+G,OAAOiyB,UAAYn1B,GAAK,GAAKA,GAAK,EAG1GT,GAAYy9B,QAAyCA,EAAU7gC,EAAS+G,OAAOiyB,QAE9F,EAUA5e,EAAUxZ,UAAU6L,gBAAkB,SAAU7J,GAC5C,IAAIiB,EAAI9K,KAAK4J,YAAYC,GACzB,OAAO7J,KAAK2T,OAAO7I,EACvB,EAUAuW,EAAUxZ,UAAUsgC,cAAgB,SAAUt+B,GAG1C,OAAOpK,KAAKC,KAAK2hB,EAAU2mB,QAAQC,MAAMp+B,EAAG7J,KAAK2T,OAAO3T,KAAK4J,YAAYC,KAC7E,EASAwX,EAAUxZ,UAAU+C,MAAQ,WACxB,OAAO5K,KAAKynC,QAAQznC,KAAKuU,EAAE3J,QAAS5K,KAAKuO,EAAE3D,QAC/C,EASAyW,EAAUxZ,UAAUwK,SAAW,WAC3B,MAAO,SAAWrS,KAAKuU,EAAElC,WAAa,SAAWrS,KAAKuO,EAAE8D,WAAa,IACzE,EAMAgP,EAAUxZ,UAAUtB,QAAU,WAC1BvG,KAAKuU,EAAEhO,UACPvG,KAAKuO,EAAEhI,UACPvG,KAAKuP,aAAc,CACvB,EAIA8R,EAAU2mB,QAAU,CAChBC,MAAO,SAAUzoC,EAAGu0B,GAChB,OAAQv0B,EAAEG,EAAIo0B,EAAEp0B,IAAMH,EAAEG,EAAIo0B,EAAEp0B,IAAMH,EAAEI,EAAIm0B,EAAEn0B,IAAMJ,EAAEI,EAAIm0B,EAAEn0B,EAC9D,GAEGyhB,CACX,CAzT8B,GA0T9B1a,EAAQ0a,UAAYA,C,gBC9SpB5a,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQqH,YAAS,EACjB,IAAI+X,EAAe,EAAQ,KACvB/e,EAAiB,EAAQ,KACzBohC,EAAoB,EAAQ,KAC5B/xB,EAAc,EAAQ,KACtBvP,EAAW,EAAQ,IAenBkH,EAAwB,WASxB,SAASA,EAAOrO,EAAGC,GAMf,GAFAI,KAAKkH,UAAY,SACjBlH,KAAKuH,IAAMP,EAAeQ,aAAaC,YACvB,IAAL9H,EACPK,KAAKL,EAAI,EACTK,KAAKJ,EAAI,OAER,GAAgB,iBAALD,GAA6B,iBAALC,EACpCI,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,MAER,CACD,IAAIyoC,EAAQ1oC,EACU,iBAAX0oC,EAAM1oC,GAAmC,iBAAX0oC,EAAMzoC,GAC3CI,KAAKL,EAAI0oC,EAAM1oC,EACfK,KAAKJ,EAAIyoC,EAAMzoC,IAIXI,KAAKL,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEA+d,IAET1d,KAAKJ,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEA8d,IAErB,CACA1d,KAAK4vB,KAAO,IAAI7J,EAAaQ,WAC7BvmB,KAAK6e,UAAY,IAAIupB,EAAkBE,gBAAgBtoC,KAC3D,CA4kBA,OAjkBAgO,EAAOnG,UAAUwG,IAAM,SAAU1O,EAAGC,GAChC,GAAgB,iBAALD,GAA6B,iBAALC,EAC/BI,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,MAER,CACD,IAAIyoC,EAAQ1oC,EACU,iBAAX0oC,EAAM1oC,GAAmC,iBAAX0oC,EAAMzoC,GAC3CI,KAAKL,EAAI0oC,EAAM1oC,EACfK,KAAKJ,EAAIyoC,EAAMzoC,IAIXI,KAAKL,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEA+d,IAET1d,KAAKJ,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEA8d,IAErB,CACA,OAAO1d,IACX,EAUAgO,EAAOnG,UAAU0gC,KAAO,SAAU5oC,GAE9B,OADAK,KAAKL,EAAIA,EACFK,IACX,EAUAgO,EAAOnG,UAAU2gC,KAAO,SAAU5oC,GAE9B,OADAI,KAAKJ,EAAIA,EACFI,IACX,EASAgO,EAAOnG,UAAU4gC,KAAO,WAEpB,OADAzoC,KAAKL,GAAKK,KAAKL,EACRK,IACX,EASAgO,EAAOnG,UAAU6gC,KAAO,WAEpB,OADA1oC,KAAKJ,GAAKI,KAAKJ,EACRI,IACX,EAcAgO,EAAOnG,UAAU3H,IAAM,SAAUP,EAAGC,GAChC,GAAgB,iBAALD,GAA6B,iBAALC,EAC/BI,KAAKL,GAAKA,EACVK,KAAKJ,GAAKA,MAET,CACD,IAAIyoC,EAAQ1oC,EACZ,GAAsB,iBAAX0oC,EAAM1oC,GAAmC,iBAAX0oC,EAAMzoC,EAC3CI,KAAKL,GAAK0oC,EAAM1oC,EAChBK,KAAKJ,GAAKyoC,EAAMzoC,MAEf,CACD,GAAgB,iBAALD,EAGP,KAAM,cAAcmM,cAAcnM,EAAG,4BACzC,GAHIK,KAAKL,GAAKA,EAGE,iBAALC,EAGP,KAAM,cAAckM,cAAclM,EAAG,4BAFrCI,KAAKJ,GAAKA,CAGlB,CACJ,CACA,OAAOI,IACX,EAaAgO,EAAOnG,UAAUtG,KAAO,SAAU0H,GAC9B,OAAOjJ,KAAKE,IAAI+I,EACpB,EAWA+E,EAAOnG,UAAUqM,MAAQ,SAAUy0B,EAASC,GAGxC,OAFA5oC,KAAKL,GAAKgpC,EACV3oC,KAAKJ,GAAKgpC,EACH5oC,IACX,EAUAgO,EAAOnG,UAAU87B,KAAO,SAAUgF,GAE9B,OADA3oC,KAAKL,GAAKgpC,EACH3oC,IACX,EAUAgO,EAAOnG,UAAUq8B,KAAO,SAAU0E,GAE9B,OADA5oC,KAAKJ,GAAKgpC,EACH5oC,IACX,EAcAgO,EAAOnG,UAAUsN,IAAM,SAAUxV,EAAGC,GAChC,GAAgB,iBAALD,GAA6B,iBAALC,EAC/BI,KAAKL,GAAKA,EACVK,KAAKJ,GAAKA,MAET,CACD,IAAIyoC,EAAQ1oC,EACZ,GAAsB,iBAAX0oC,EAAM1oC,GAAmC,iBAAX0oC,EAAMzoC,EAC3CI,KAAKL,GAAK0oC,EAAM1oC,EAChBK,KAAKJ,GAAKyoC,EAAMzoC,MAEf,CACD,GAAgB,iBAALD,EAGP,KAAM,cAAcmM,cAAcnM,EAAG,4BACzC,GAHIK,KAAKL,GAAKA,EAGE,iBAALC,EAGP,KAAM,cAAckM,cAAclM,EAAG,4BAFrCI,KAAKJ,GAAKA,CAGlB,CACJ,CACA,OAAOI,IACX,EAWAgO,EAAOnG,UAAUoM,MAAQ,SAAU00B,EAASC,GAGxC,OAFA5oC,KAAKL,GAAKgpC,EACV3oC,KAAKJ,GAAKgpC,EACH5oC,IACX,EAUAgO,EAAOnG,UAAUghC,KAAO,SAAUF,GAE9B,OADA3oC,KAAKL,GAAKgpC,EACH3oC,IACX,EAUAgO,EAAOnG,UAAUihC,KAAO,SAAUF,GAE9B,OADA5oC,KAAKJ,GAAKgpC,EACH5oC,IACX,EAYAgO,EAAOnG,UAAUS,OAAS,SAAUuiB,GAChC,IAAIke,EAAMtpC,KAAK2E,IAAIpE,KAAKL,EAAIkrB,EAAOlrB,GAAKqO,EAAOiyB,QAC3C+I,EAAMvpC,KAAK2E,IAAIpE,KAAKJ,EAAIirB,EAAOjrB,GAAKoO,EAAOiyB,QAE/C,OADa8I,GAAOC,CAExB,EASAh7B,EAAOnG,UAAU+C,MAAQ,WACrB,OAAO,IAAIoD,EAAOhO,KAAKL,EAAGK,KAAKJ,EACnC,EAUAoO,EAAOnG,UAAUwC,SAAW,SAAUmI,GAElC,OAAO6D,EAAYO,UAAUqyB,MAAMjpC,KAAKL,EAAGK,KAAKJ,EAAG4S,EAAK7S,EAAG6S,EAAK5S,EACpE,EAUAoO,EAAOnG,UAAU7C,MAAQ,SAAUiO,GAC/B,IAAIsB,OAAsB,IAAXtB,EACTxT,KAAKgG,GAAK,EAAIhG,KAAKsiC,MAAM/hC,KAAKL,EAAGK,KAAKJ,GACtCH,KAAKgG,GAAK,EAAIhG,KAAKsiC,MAAM9uB,EAAOtT,EAAIK,KAAKL,EAAGsT,EAAOrT,EAAII,KAAKJ,GAElE,OAAO2U,EAAI,EAAc,EAAV9U,KAAKgG,GAAS8O,EAAIA,CACrC,EAYAvG,EAAOnG,UAAUyN,WAAa,SAAU9C,GACpC,OAAO,IAAIxE,EAAOwE,EAAK7S,EAAIK,KAAKL,EAAG6S,EAAK5S,EAAII,KAAKJ,EACrD,EAYAoO,EAAOnG,UAAUyB,MAAQ,SAAUkyB,EAAQ7xB,GACvC,OAAO3J,KAAKyJ,QAAQ,CAAE9J,EAAG67B,EAAQ57B,EAAG47B,GAAU7xB,EAClD,EAaAqE,EAAOnG,UAAUg1B,KAAO,SAAUqM,EAAQp+B,GACtC,IAAIuK,EAAOrV,KAAKsV,WAAW4zB,GAI3B,OAFAlpC,KAAKL,GAAK0V,EAAK1V,EAAImL,EACnB9K,KAAKJ,GAAKyV,EAAKzV,EAAIkL,EACZ9K,IACX,EAUAgO,EAAOnG,UAAUq1B,QAAU,SAAUgM,EAAQ/+B,GACzC,IAAIH,EAAOhK,KAAKqK,SAAS6+B,GACrB7zB,EAAOrV,KAAKsV,WAAW4zB,GACvBC,EAAY9zB,EAAK1V,EAAIqK,EAArBm/B,EAA8B9zB,EAAKzV,EAAIoK,EAI3C,OAFAhK,KAAKL,GAAKwpC,EAASh/B,EACnBnK,KAAKJ,GAAKupC,EAASh/B,EACZnK,IACX,EAYAgO,EAAOnG,UAAU4B,QAAU,SAAU2/B,EAASz/B,GAM1C,OALKA,QAA4B,IAAXA,IAClBA,EAAS,CAAEhK,EAAG,EAAGC,EAAG,IAExBI,KAAKL,EAAIgK,EAAOhK,GAAKK,KAAKL,EAAIgK,EAAOhK,GAAKypC,EAAQzpC,EAClDK,KAAKJ,EAAI+J,EAAO/J,GAAKI,KAAKJ,EAAI+J,EAAO/J,GAAKwpC,EAAQxpC,EAC3CI,IACX,EAYAgO,EAAOnG,UAAU7F,OAAS,SAAUgD,EAAO2E,GAClCA,QAA4B,IAAXA,IAClBA,EAAS,CAAEhK,EAAG,EAAGC,EAAG,IAExBI,KAAKmV,IAAIxL,GACT3E,GAASvF,KAAKsiC,MAAM/hC,KAAKJ,EAAGI,KAAKL,GACjC,IAAIgB,EAAMX,KAAKqK,SAAS2D,EAAOq7B,MAI/B,OAHArpC,KAAKL,EAAIgB,EAAMlB,KAAKwW,IAAIjR,GACxBhF,KAAKJ,EAAIe,EAAMlB,KAAKyW,IAAIlR,GACxBhF,KAAKE,IAAIyJ,GACF3J,IACX,EAaAgO,EAAOnG,UAAUyhC,eAAiB,SAAUC,GAGxC,OAFAvpC,KAAKL,GAAK4pC,EACVvpC,KAAKJ,GAAK2pC,EACHvpC,IACX,EASAgO,EAAOnG,UAAUqpB,MAAQ,WAGrB,OAFAlxB,KAAKL,EAAIF,KAAKyxB,MAAMlxB,KAAKL,GACzBK,KAAKJ,EAAIH,KAAKyxB,MAAMlxB,KAAKJ,GAClBI,IACX,EASAgO,EAAOnG,UAAUkV,IAAM,WAGnB,OAFA/c,KAAKL,GAAKK,KAAKL,EACfK,KAAKJ,GAAKI,KAAKJ,EACRI,IACX,EASAgO,EAAOnG,UAAUzD,IAAM,WAGnB,OAFApE,KAAKL,EAAIF,KAAK2E,IAAIpE,KAAKL,GACvBK,KAAKJ,EAAIH,KAAK2E,IAAIpE,KAAKJ,GAChBI,IACX,EAWAgO,EAAOnG,UAAUyG,UAAY,WAEzB,OAAOxH,EAAS6H,OAAO2D,oBAAoB,CAACtS,MAChD,EAUAgO,EAAOnG,UAAUwK,SAAW,SAAUm3B,GAClC,YAAyB,IAAdA,EACA,IAAMxpC,KAAKL,EAAI,IAAMK,KAAKJ,EAAI,IAG9B,IAAMI,KAAKL,EAAEkR,QAAQ24B,GAAa,IAAMxpC,KAAKJ,EAAEiR,QAAQ24B,GAAa,GAEnF,EAMAx7B,EAAOnG,UAAUtB,QAAU,WACvBvG,KAAK6e,UAAU4qB,qBACfzpC,KAAKuP,aAAc,CACvB,EAOAvB,EAAO07B,aAAe,SAAUC,GAC5B,OAAO,IAAI37B,EAAO27B,EAASp/B,IAAI5K,EAAIF,KAAK2S,UAAYu3B,EAASr/B,IAAI3K,EAAIgqC,EAASp/B,IAAI5K,GAAIgqC,EAASp/B,IAAI3K,EAAIH,KAAK2S,UAAYu3B,EAASr/B,IAAI1K,EAAI+pC,EAASp/B,IAAI3K,GAC1J,EACAoO,EAAOq7B,KAAO,IAAIr7B,EAAO,EAAG,GAO5BA,EAAOiyB,QAAU,KACjBjyB,EAAO8L,MAAQ,CA2BXutB,eAAgB,SAAUC,EAAIC,EAAIC,EAASpgB,EAAQC,GAC/C5c,QAAQC,KAAK,4GACb,IAAI1F,EAAQvF,KAAKsiC,OAAOwF,EAAG3nC,EAAI0nC,EAAG1nC,GAAKynB,GAASkgB,EAAG5nC,EAAI2nC,EAAG3nC,GAAKynB,GAC3D7U,EAAW,GAKf,OAJAA,EAASnS,KAAK,IAAI4N,EAAOu5B,EAAG5nC,EAAIynB,EAASogB,EAAU/nC,KAAKwW,IAAIjR,GAAQuiC,EAAG3nC,EAAIynB,EAASmgB,EAAU/nC,KAAKyW,IAAIlR,KACvGuN,EAASnS,KAAK,IAAI4N,EAAOu5B,EAAG5nC,EAAIynB,EAAmB,KAAVogB,EAAiB/nC,KAAKwW,IAAIjR,EAAQvF,KAAKgG,GAAK,GAAI8hC,EAAG3nC,EAAIynB,EAAmB,KAAVmgB,EAAiB/nC,KAAKyW,IAAIlR,EAAQvF,KAAKgG,GAAK,KACrJ8M,EAASnS,KAAK,IAAI4N,EAAOu5B,EAAG5nC,EAAIynB,EAAQmgB,EAAG3nC,EAAIynB,IAC/C9U,EAASnS,KAAK,IAAI4N,EAAOu5B,EAAG5nC,EAAIynB,EAAmB,KAAVogB,EAAiB/nC,KAAKwW,IAAIjR,EAAQvF,KAAKgG,GAAK,GAAI8hC,EAAG3nC,EAAIynB,EAAmB,KAAVmgB,EAAiB/nC,KAAKyW,IAAIlR,EAAQvF,KAAKgG,GAAK,KAC9I8M,CACX,EAOAq3B,YAAa,SAAUr3B,EAAUi3B,GAC7B,OAAOv5B,KAAK45B,UAAUt3B,EAASwD,KAAI,SAAUvD,GACzC,YAA4BqP,WAAd2nB,EACR,CAAE7pC,EAAG6S,EAAK7S,EAAGC,EAAG4S,EAAK5S,GACrB,CAAED,EAAG6O,OAAOgE,EAAK7S,EAAEkR,QAAQ24B,IAAa5pC,EAAG4O,OAAOgE,EAAK5S,EAAEiR,QAAQ24B,IAC3E,IACJ,GAEGx7B,CACX,CA3nB2B,GA4nB3BrH,EAAQqH,OAASA,C,cC9qBjBvH,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ4f,gBAAa,EAQrB,IAAIA,EAA4B,WAU5B,SAASA,IAKL,IAAK,IAAIhH,KAJTvf,KAAK4mB,WAAY,EACjB5mB,KAAK0mB,YAAa,EAClB1mB,KAAK2mB,YAAa,EAClB3mB,KAAK6mB,SAAU,EACCN,EAAWC,MACvBxmB,KAAKuf,GAAOgH,EAAWC,MAAMjH,EACrC,CAcA,OANAgH,EAAWC,MAAQ,CACfI,WAAW,EACXF,YAAY,EACZC,YAAY,EACZE,SAAS,GAENN,CACX,CAhC+B,GAiC/B5f,EAAQ4f,WAAaA,C,cC3CrB9f,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ2hC,qBAAkB,EAO1B,IAAIA,EAAiC,WAQjC,SAASA,EAAgBzd,GACrB7qB,KAAKwiB,MAAQ,GACbxiB,KAAKmiB,KAAO,GACZniB,KAAK8pC,UAAY,GACjB9pC,KAAK+pC,QAAU,GACf/pC,KAAK6qB,OAASA,CAClB,CAmOA,OAzNAyd,EAAgBzgC,UAAUmiC,iBAAmB,SAAU/qB,GAEnD,OADAqpB,EAAgB2B,aAAajqC,KAAKwiB,MAAOvD,GAClCjf,IACX,EAeAsoC,EAAgBzgC,UAAUqiC,oBAAsB,SAAUjrB,GAEtD,OADAjf,KAAKwiB,MAAQ8lB,EAAgB6B,gBAAgBnqC,KAAKwiB,MAAOvD,GAClDjf,IACX,EAeAsoC,EAAgBzgC,UAAU0nB,gBAAkB,SAAUtQ,GAElD,OADAqpB,EAAgB2B,aAAajqC,KAAKmiB,KAAMlD,GACjCjf,IACX,EAeAsoC,EAAgBzgC,UAAUuiC,mBAAqB,SAAUnrB,GAErD,OADAjf,KAAKmiB,KAAOmmB,EAAgB6B,gBAAgBnqC,KAAKmiB,KAAMlD,GAChDjf,IACX,EAUAsoC,EAAgBzgC,UAAUwiC,qBAAuB,SAAUprB,GAEvD,OADAqpB,EAAgB2B,aAAajqC,KAAK8pC,UAAW7qB,GACtCjf,IACX,EAeAsoC,EAAgBzgC,UAAUyiC,wBAA0B,SAAUrrB,GAE1D,OADAjf,KAAK8pC,UAAYxB,EAAgB6B,gBAAgBnqC,KAAK8pC,UAAW7qB,GAC1Djf,IACX,EAUAsoC,EAAgBzgC,UAAU0iC,mBAAqB,SAAUtrB,GAGrD,OADAqpB,EAAgB2B,aAAajqC,KAAK+pC,QAAS9qB,GACpCjf,IACX,EAeAsoC,EAAgBzgC,UAAU2iC,sBAAwB,SAAUvrB,GAGxD,OADAjf,KAAK+pC,QAAUzB,EAAgB6B,gBAAgBnqC,KAAK+pC,QAAS9qB,GACtDjf,IACX,EAWAsoC,EAAgBzgC,UAAUwtB,eAAiB,SAAUlW,GACjDmpB,EAAgBmC,WAAWzqC,KAAMA,KAAKwiB,MAAOrD,EACjD,EAWAmpB,EAAgBzgC,UAAUquB,cAAgB,SAAU/W,GAChDmpB,EAAgBmC,WAAWzqC,KAAMA,KAAKmiB,KAAMhD,EAChD,EAWAmpB,EAAgBzgC,UAAUkuB,mBAAqB,SAAU5W,GACrDmpB,EAAgBmC,WAAWzqC,KAAMA,KAAK8pC,UAAW3qB,EACrD,EAWAmpB,EAAgBzgC,UAAUuuB,iBAAmB,SAAUjX,GACnDmpB,EAAgBmC,WAAWzqC,KAAMA,KAAK+pC,QAAS5qB,EACnD,EAIAmpB,EAAgBzgC,UAAU4hC,mBAAqB,WAC3CzpC,KAAKwiB,MAAQ,GACbxiB,KAAKmiB,KAAO,GACZniB,KAAK8pC,UAAY,GACjB9pC,KAAK+pC,QAAU,EACnB,EAIAzB,EAAgBmC,WAAa,SAAUzmC,EAAO6a,EAAWM,GACrD,IAAIurB,EAAKvrB,EAKT,IAAK,IAAI7e,UAJe,IAAboqC,EAAGznB,OACVynB,EAAGznB,OAAS,CAAE4H,OAAQ7mB,EAAM6mB,QAE5B6f,EAAGznB,OAAO4H,OAAS7mB,EAAM6mB,OACfhM,EACVA,EAAUve,GAAGoqC,EAErB,EAIApC,EAAgB2B,aAAe,SAAUprB,EAAW8rB,GAChD,IAAK,IAAIrqC,KAAKue,EACV,GAAIA,EAAUve,IAAMqqC,EAChB,OAAO,EAGf,OADA9rB,EAAUze,KAAKuqC,IACR,CACX,EAIArC,EAAgB6B,gBAAkB,SAAUtrB,EAAW+rB,GACnD,IAAK,IAAItqC,EAAI,EAAGA,EAAIue,EAAUte,OAAQD,IAClC,GAAIue,EAAUve,IAAMsqC,EAChB,OAAO/rB,EAAUre,OAAOF,EAAG,GAEnC,OAAOue,CACX,EACOypB,CACX,CAlPoC,GAmPpC3hC,EAAQ2hC,gBAAkBA,C,eC3M1B7hC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQglB,eAAY,EACpB,IAAI5kB,EAAqB,EAAQ,KAC7BE,EAAW,EAAQ,KACnBoe,EAAiB,EAAQ,KACzBjS,EAAW,EAAQ,IAUnBuY,EAA2B,WAS3B,SAASA,EAAUkf,EAASC,GACxB9qC,KAAKurB,IAAMsf,EAEX7qC,KAAKqtB,OAAS,IAAIpmB,EAAS+G,OAAO,EAAG,GACrChO,KAAKsJ,MAAQ,IAAIrC,EAAS+G,OAAO,EAAG,GACpChO,KAAK8qC,WAAaA,CACtB,CAuiCA,OAjiCAnf,EAAU9jB,UAAUkjC,gBAAkB,SAAUC,GAC5C,IACInoB,EAAIC,EADJhN,EAAQ9V,KAEZA,KAAKurB,IAAI0f,aAA8G,QAAhGpoB,EAAKmoB,aAAqD,EAASA,EAAcE,iBAA8B,IAAProB,EAAgBA,EAAK,IAAI9M,KAAI,SAAUo1B,GAGlK,OAAOA,EAAgBr1B,EAAMxM,MAAM3J,CACvC,KACAK,KAAKurB,IAAI6f,gBAAoH,QAAjGtoB,EAAKkoB,aAAqD,EAASA,EAAcK,kBAA+B,IAAPvoB,EAAgBA,EAAK,GAAK9iB,KAAKsJ,MAAM3J,CAC9K,EAaAgsB,EAAU9jB,UAAUyjC,YAAc,SAAUlnB,GACpCpkB,KAAK8qC,YACL9qC,KAAKurB,IAAIggB,UAAYnnB,EACrBpkB,KAAKurB,IAAIjB,SAGTtqB,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIkgB,SAEjB,EAKA9f,EAAU9jB,UAAU0lB,eAAiB,SAAUlH,GAE/C,EAWAsF,EAAU9jB,UAAU6lB,aAAe,SAAUrH,GAE7C,EAQAsF,EAAU9jB,UAAU6jC,iBAAmB,SAAUC,GAC7C3rC,KAAKurB,IAAIqgB,yBAA2BD,EAAcE,WAAa,aACnE,EAuBAlgB,EAAU9jB,UAAUupB,aAAe,SAAU7pB,GAE7C,EASAokB,EAAU9jB,UAAUspB,oBAAsB,SAAUjqB,GAEpD,EAeAykB,EAAU9jB,UAAU4D,KAAO,SAAU67B,EAAIC,EAAInjB,EAAO+F,EAAW6gB,GAC3DhrC,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YACT/rC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAI2nC,EAAG3nC,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI0nC,EAAG1nC,EAAII,KAAKsJ,MAAM1J,GACvFI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAI4nC,EAAG5nC,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI2nC,EAAG3nC,EAAII,KAAKsJ,MAAM1J,GACvFI,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKurB,IAAIkgB,SACTzrC,KAAKurB,IAAI0gB,SACb,EAgBAtgB,EAAU9jB,UAAU0qB,MAAQ,SAAU+U,EAAIC,EAAInjB,EAAO+F,EAAW+hB,EAAYlB,QACrD,IAAfkB,IAAyBA,EAAa,GAC1C,IAAIC,EAAwB,IAAIllC,EAAS+G,OAAO,EAAG,GACnDhO,KAAKosC,UAAU9E,EAAIC,EAAInjB,EAAO+F,EAAW+hB,OAAYrqB,EAAWsqB,GAChEnsC,KAAKyL,KAAK67B,EAAI6E,EAAuB/nB,EAAO+F,EAAW6gB,EAC3D,EAkBArf,EAAU9jB,UAAUwkC,iBAAmB,SAAUrkC,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,EAAW+hB,EAAYlB,GACrI,IAAImB,EAAwB,IAAIllC,EAAS+G,OAAO,EAAG,GAEnDhO,KAAKosC,UAAUzjC,EAAiBV,EAAUmc,EAAO+F,EAAW+hB,OAAYrqB,EAAWsqB,GACnF,IAAI92B,EAAO82B,EAAsB72B,WAAWrN,GAE5CjI,KAAK2xB,YAAY3pB,EAAY,CAAErI,EAAGsI,EAAStI,EAAI0V,EAAK1V,EAAGC,EAAGqI,EAASrI,EAAIyV,EAAKzV,GAAK6I,EAAmB,CAAE9I,EAAGgJ,EAAgBhJ,EAAI0V,EAAK1V,EAAGC,EAAG+I,EAAgB/I,EAAIyV,EAAKzV,GAAKwkB,EAAO+F,EAAW6gB,EAC5L,EAiBArf,EAAU9jB,UAAUukC,UAAY,SAAU9E,EAAIC,EAAInjB,EAAO+F,EAAW+hB,EAAYlB,EAAesB,QAExE,IAAfJ,IAAyBA,EAAa,GAC1ClsC,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YACT/rC,KAAK+qC,gBAAgBC,GACrB,IAAIz4B,EAAWa,EAASW,OAAO+F,MAAMutB,eAAeC,EAAIC,EAAI2E,EAAYlsC,KAAKsJ,MAAM3J,EAAGK,KAAKsJ,MAAM1J,GAC7F0sC,IACAA,EAA4B3sC,EAAI4S,EAAS,GAAG5S,EAAIK,KAAKsJ,MAAM3J,EAC3D2sC,EAA4B1sC,EAAI2S,EAAS,GAAG3S,EAAII,KAAKsJ,MAAM1J,GAE/DI,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAI4S,EAAS,GAAG5S,EAAGK,KAAKqtB,OAAOztB,EAAI2S,EAAS,GAAG3S,GAC3E,IAAK,IAAIU,EAAI,EAAGA,EAAIiS,EAAShS,OAAQD,IACjCN,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAI4S,EAASjS,GAAGX,EAAGK,KAAKqtB,OAAOztB,EAAI2S,EAASjS,GAAGV,GAE/EI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAI4S,EAAS,GAAG5S,EAAGK,KAAKqtB,OAAOztB,EAAI2S,EAAS,GAAG3S,GAC3EI,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAI0gB,SACb,EAeAtgB,EAAU9jB,UAAUkc,MAAQ,SAAUA,EAAOiI,EAAUpO,EAAM2uB,QAC3C,IAAVA,IAAoBA,EAAQ,GAC3BxoB,EAAMyoB,UAAazoB,EAAM0oB,eAI9BzsC,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAImhB,YAAcH,EAGvBvsC,KAAKurB,IAAIohB,UAAU5oB,EAAO,EAAG,EAAGA,EAAM0oB,aAAe,EACrD1oB,EAAM6oB,cAAgB,EACtB5sC,KAAKqtB,OAAO1tB,EAAIqsB,EAASrsB,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIosB,EAASpsB,EAAII,KAAKsJ,MAAM1J,EAAGge,EAAKje,EAAIK,KAAKsJ,MAAM3J,EAAGie,EAAKhe,EAAII,KAAKsJ,MAAM1J,GACjII,KAAKurB,IAAI0gB,UACb,EAiBAtgB,EAAU9jB,UAAUglC,aAAe,SAAUC,EAAcC,EAAaviB,EAASwiB,EAAiBroB,GAC9F,IAAIsoB,EAAoBziB,EAAQlc,YAK5B4+B,GAHyB,IAAIjmC,EAAS+G,OAAOg/B,EAAgBrtC,EAAGqtC,EAAgBptC,GAAG0V,WAAW23B,EAAkBr7B,aAG5F,IAAI3K,EAAS+G,OAAO++B,EAAY37B,MAAO27B,EAAY17B,SAEvE87B,EAAsB,IAAIlmC,EAAS+G,OAAO++B,EAAYxiC,IAAI5K,EAAGotC,EAAYxiC,IAAI3K,GAAGuV,IAAI63B,GACxFhtC,KAAKurB,IAAIugB,OAET9rC,KAAKurB,IAAIviB,UAAUhJ,KAAKqtB,OAAO1tB,EAAIqtC,EAAgBrtC,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIotC,EAAgBptC,EAAII,KAAKsJ,MAAM1J,GACpH+rB,EAAUyhB,QAAQC,SAASrtC,KAAKurB,IAAK,CACjC5rB,GAAIqtC,EAAgBrtC,EAAIK,KAAKsJ,MAAM3J,EACnCC,GAAIotC,EAAgBptC,EAAII,KAAKsJ,MAAM1J,GACpCI,KAAKsJ,MAAOkhB,EAAQjY,UACvBvS,KAAKurB,IAAIjiB,MAAMtJ,KAAKsJ,MAAM3J,EAAGK,KAAKsJ,MAAM1J,GACxCI,KAAKurB,IAAIvpB,OAAO2iB,GAChB3kB,KAAKurB,IAAIohB,UAAUG,EAAc,EAAG,EAAGA,EAAaL,aAAe,EACnEK,EAAaF,cAAgB,EAC7BO,EAAoBxtC,EACpBwtC,EAAoBvtC,EACpBstC,EAAkBvtC,EAClButC,EAAkBttC,GAElBI,KAAKurB,IAAI0gB,SACb,EA4FAtgB,EAAU9jB,UAAUylC,KAAO,SAAUthB,EAAU5a,EAAOC,EAAQ+S,EAAO+F,EAAW6gB,GAC5EhrC,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YACT/rC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIqsB,EAASrsB,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIosB,EAASpsB,EAAII,KAAKsJ,MAAM1J,GACnGI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,GAAKqsB,EAASrsB,EAAIyR,GAASpR,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIosB,EAASpsB,EAAII,KAAKsJ,MAAM1J,GAC7GI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,GAAKqsB,EAASrsB,EAAIyR,GAASpR,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAKosB,EAASpsB,EAAIyR,GAAUrR,KAAKsJ,MAAM1J,GACxHI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIqsB,EAASrsB,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAKosB,EAASpsB,EAAIyR,GAAUrR,KAAKsJ,MAAM1J,GAE9GI,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAI0gB,SACb,EAiBAtgB,EAAU9jB,UAAU8pB,YAAc,SAAU3pB,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,EAAW6gB,GAChHhjC,aAAsBjB,EAAmByJ,iBACzCxQ,KAAK2xB,YAAY3pB,EAAWA,WAAYA,EAAWC,SAAUD,EAAWS,kBAAmBT,EAAWW,gBAAiByb,EAAO+F,IAIlInqB,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YACT/rC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIqI,EAAWrI,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIoI,EAAWpI,EAAII,KAAKsJ,MAAM1J,GACvGI,KAAKurB,IAAIiiB,cAAcxtC,KAAKqtB,OAAO1tB,EAAI8I,EAAkB9I,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI6I,EAAkB7I,EAAII,KAAKsJ,MAAM1J,EAAGI,KAAKqtB,OAAO1tB,EAAIgJ,EAAgBhJ,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+I,EAAgB/I,EAAII,KAAKsJ,MAAM1J,EAAGI,KAAKqtB,OAAO1tB,EAAIsI,EAAStI,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIqI,EAASrI,EAAII,KAAKsJ,MAAM1J,GAEtTI,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAI0gB,UACb,EAgBAtgB,EAAU9jB,UAAU4lC,gBAAkB,SAAUzlC,EAAY0lC,EAAczlC,EAAUmc,EAAO+F,EAAW6gB,GAElGhrC,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YACT/rC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIqI,EAAWrI,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIoI,EAAWpI,EAAII,KAAKsJ,MAAM1J,GACvGI,KAAKurB,IAAIoiB,iBAAiB3tC,KAAKqtB,OAAO1tB,EAAI+tC,EAAa/tC,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI8tC,EAAa9tC,EAAII,KAAKsJ,MAAM1J,EAAGI,KAAKqtB,OAAO1tB,EAAIsI,EAAStI,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIqI,EAASrI,EAAII,KAAKsJ,MAAM1J,GAC3MI,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAI0gB,SACb,EAkBAtgB,EAAU9jB,UAAU+lC,gBAAkB,SAAU5hC,EAAMoY,EAAO+F,EAAW6gB,GACpE,GAAKh/B,GAAuB,GAAfA,EAAKzL,OAAlB,CAMA,IAAI0H,EACAQ,EACAE,EAJJ3I,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YAIT/rC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIqM,EAAK,GAAGrM,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIoM,EAAK,GAAGpM,EAAII,KAAKsJ,MAAM1J,GACjG,IAAK,IAAIU,EAAI,EAAGA,EAAI0L,EAAKzL,OAAQD,GAAK,EAClCmI,EAAoBuD,EAAK1L,GACzBqI,EAAkBqD,EAAK1L,EAAI,GAC3B2H,EAAW+D,EAAK1L,EAAI,GACpBN,KAAKurB,IAAIiiB,cAAcxtC,KAAKqtB,OAAO1tB,EAAI8I,EAAkB9I,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI6I,EAAkB7I,EAAII,KAAKsJ,MAAM1J,EAAGI,KAAKqtB,OAAO1tB,EAAIgJ,EAAgBhJ,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+I,EAAgB/I,EAAII,KAAKsJ,MAAM1J,EAAGI,KAAKqtB,OAAO1tB,EAAIsI,EAAStI,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIqI,EAASrI,EAAII,KAAKsJ,MAAM1J,GAE1TI,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAI0gB,SAlBT,CAmBJ,EAaAtgB,EAAU9jB,UAAUgmC,OAAS,SAAU7lC,EAAYC,GAG/CjI,KAAKqI,MAAML,EAAY,iBACvBhI,KAAK8tC,OAAO7lC,EAAU,EAAG,sBAC7B,EAWA0jB,EAAU9jB,UAAUuiB,WAAa,SAAUpiB,EAAYC,GAEnDjI,KAAKyL,KAAKzD,EAAYC,EAAU,8BAA0B4Z,EAC9D,EAWA8J,EAAU9jB,UAAUxC,IAAM,SAAUwE,EAAGua,GACnCpkB,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAInK,OAAO3hB,KAAKyxB,MAAMlxB,KAAKqtB,OAAO1tB,EAAIK,KAAKsJ,MAAM3J,EAAIkK,EAAElK,GAAIF,KAAKyxB,MAAMlxB,KAAKqtB,OAAOztB,EAAII,KAAKsJ,MAAM1J,EAAIiK,EAAEjK,IAC5GI,KAAKurB,IAAIygB,OAAOvsC,KAAKyxB,MAAMlxB,KAAKqtB,OAAO1tB,EAAIK,KAAKsJ,MAAM3J,EAAIkK,EAAElK,EAAI,GAAIF,KAAKyxB,MAAMlxB,KAAKqtB,OAAOztB,EAAII,KAAKsJ,MAAM1J,EAAIiK,EAAEjK,EAAI,IACpHI,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAI0gB,SACb,EAWAtgB,EAAU9jB,UAAUQ,MAAQ,SAAUwB,EAAGua,GAErCpkB,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAIwiB,IAAI/tC,KAAKqtB,OAAO1tB,EAAIkK,EAAElK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAIiK,EAAEjK,EAAII,KAAKsJ,MAAM1J,EAHrE,EAGgF,EAAG,EAAIH,KAAKgG,IAAI,GAC7GzF,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKsrC,YAAYlnB,EACrB,EAiBAuH,EAAU9jB,UAAU2L,OAAS,SAAU7J,EAAQ0J,EAAQ+Q,EAAO+F,EAAW6gB,GACrEhrC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAIb,QAAQ1qB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAGyT,EAASrT,KAAKsJ,MAAM3J,EAAG0T,EAASrT,KAAKsJ,MAAM1J,EAAG,EAAK,EAAe,EAAVH,KAAKgG,IAChKzF,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,EACrB,EAmBAuH,EAAU9jB,UAAUyqB,UAAY,SAAU3oB,EAAQ0J,EAAQiD,EAAYC,EAAU6N,EAAO+F,EAAW9R,GACzFA,GAAYA,EAAQ21B,WACrBhuC,KAAKurB,IAAIwgB,YAEb/rC,KAAK+qC,gBAAgB1yB,GACrBrY,KAAKurB,IAAIb,QAAQ1qB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAGyT,EAASrT,KAAKsJ,MAAM3J,EAAG0T,EAASrT,KAAKsJ,MAAM1J,EAAG,EAAK0W,EAAYC,GAAU,GACvK8B,GAAYA,EAAQ21B,YAErBhuC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,GAAS,WAElC,EAiBAuH,EAAU9jB,UAAU6iB,QAAU,SAAU/gB,EAAQskC,EAASC,EAAS9pB,EAAO+F,EAAWxF,EAAUqmB,QAClE,IAAbrmB,IACPA,EAAW,GAEf3kB,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAIb,QAAQ1qB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAGquC,EAAUjuC,KAAKsJ,MAAM3J,EAAGuuC,EAAUluC,KAAKsJ,MAAM1J,EAAG+kB,EAAU,EAAe,EAAVllB,KAAKgG,IACvKzF,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,EACrB,EAiBAuH,EAAU9jB,UAAUimC,OAAS,SAAUnkC,EAAQiU,EAAMwG,EAAO+F,EAAW6gB,GACnEhrC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAI+hB,KAAKttC,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIie,EAAO,GAAO5d,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIge,EAAO,GAAO5d,KAAKsJ,MAAM1J,EAAGge,EAAO5d,KAAKsJ,MAAM3J,EAAGie,EAAO5d,KAAKsJ,MAAM1J,GACrKI,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKsrC,YAAYlnB,EACrB,EAeAuH,EAAU9jB,UAAUmjB,KAAO,SAAUrhB,EAAQyH,EAAOC,EAAQ88B,EAAOC,EAAOhqB,GACtEpkB,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YAGT,IAFA,IAAIp5B,GAAQlT,KAAK4uC,KAAe,GAATh9B,EAAgB+8B,GAASA,EAC5Cx7B,EAAOvB,EAAS,EACX1R,GAAKF,KAAK4uC,KAAc,GAARj9B,EAAe+8B,GAASA,EAAOxuC,EAAIyR,EAAQ,EAAGzR,GAAKwuC,EACxEnuC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIA,GAAKK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAI+S,GAAQ3S,KAAKsJ,MAAM1J,GAC9GI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIA,GAAKK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIgT,GAAQ5S,KAAKsJ,MAAM1J,GAIlH,IAFA,IAAI6S,GAAQhT,KAAK4uC,KAAc,GAARj9B,EAAe+8B,GAASA,EAC3Cz7B,EAAOtB,EAAQ,EACVxR,GAAKH,KAAK4uC,KAAe,GAATh9B,EAAgB+8B,GAASA,EAAOxuC,EAAIyR,EAAS,EAAGzR,GAAKwuC,EAC1EpuC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAI8S,GAAQzS,KAAKsJ,MAAM3J,EAAI,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIA,GAAKI,KAAKsJ,MAAM1J,GAClHI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAI+S,GAAQ1S,KAAKsJ,MAAM3J,EAAI,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIA,GAAKI,KAAKsJ,MAAM1J,GAEtHI,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKurB,IAAIkgB,SACTzrC,KAAKurB,IAAIgiB,WACb,EAiBA5hB,EAAU9jB,UAAUwpB,OAAS,SAAU1nB,EAAQyH,EAAOC,EAAQ88B,EAAOC,EAAOhqB,GACxEpkB,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT,IAAK,IAAIpsC,GAAKF,KAAK4uC,KAAc,GAARj9B,EAAe+8B,GAASA,EAAOxuC,EAAIyR,EAAQ,EAAGzR,GAAKwuC,EACxE,IAAK,IAAIvuC,GAAKH,KAAK4uC,KAAe,GAATh9B,EAAgB+8B,GAASA,EAAOxuC,EAAIyR,EAAS,EAAGzR,GAAKwuC,EAE1EpuC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIA,GAAKK,KAAKsJ,MAAM3J,EAAI,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIA,GAAKI,KAAKsJ,MAAM1J,GAC/GI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIA,GAAKK,KAAKsJ,MAAM3J,EAAI,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIA,GAAKI,KAAKsJ,MAAM1J,GAC/GI,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIA,GAAKK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIA,GAAKI,KAAKsJ,MAAM1J,EAAI,GAC/GI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,GAAKgK,EAAOhK,EAAIA,GAAKK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,GAAK+J,EAAO/J,EAAIA,GAAKI,KAAKsJ,MAAM1J,EAAI,GAGvHI,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKurB,IAAIkgB,SACTzrC,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAI0gB,SACb,EAgBAtgB,EAAU9jB,UAAUgqB,cAAgB,SAAUloB,EAAQiU,EAAMwG,GACxDpkB,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAIie,EAAO,EAAK5d,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,GAC5GI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIge,EAAO,GAC1G5d,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAIie,EAAO,EAAK5d,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,GAC5GI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIge,EAAO,GAC1G5d,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKsrC,YAAYlnB,EACrB,EAgBAuH,EAAU9jB,UAAU+pB,aAAe,SAAUjoB,EAAQiU,EAAMwG,GACvDpkB,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAI+hB,KAAKttC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAIie,EAAO,EAAK5d,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIge,EAAO,EAAKA,EAAMA,GAChI5d,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKsrC,YAAYlnB,EACrB,EAgBAuH,EAAU9jB,UAAUiqB,aAAe,SAAUnoB,EAAQ0J,EAAQ+Q,GACzD/Q,EAASA,GAAU,EACnBrT,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAIwiB,IAAI/tC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAGyT,EAAQ,EAAG,EAAI5T,KAAKgG,IAAI,GACvHzF,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAIpB,UAAY,EACrBnqB,KAAKsrC,YAAYlnB,EACrB,EAeAuH,EAAU9jB,UAAUypB,UAAY,SAAU3nB,EAAQ0J,EAAQ+Q,EAAO+F,GAC7DnqB,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAI0T,EAAQrT,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,GACxGI,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAI0T,EAAQrT,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,GACxGI,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIyT,GACnGrT,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIyT,GACnGrT,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIpB,UAAYA,GAAa,GAClCnqB,KAAKurB,IAAIkgB,SACTzrC,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAI0gB,SACb,EAeAtgB,EAAU9jB,UAAUrC,MAAQ,SAAUmE,EAAQ0J,EAAQ+Q,EAAO+F,GACzDnqB,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAI0T,EAAQrT,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIyT,GAC5GrT,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAI0T,EAAQrT,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIyT,GAC5GrT,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAI0T,EAAQrT,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIyT,GAC5GrT,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAIgK,EAAOhK,EAAIK,KAAKsJ,MAAM3J,EAAI0T,EAAQrT,KAAKqtB,OAAOztB,EAAI+J,EAAO/J,EAAII,KAAKsJ,MAAM1J,EAAIyT,GAC5GrT,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKurB,IAAIkgB,SACTzrC,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAI0gB,SACb,EAcAtgB,EAAU9jB,UAAU2iB,QAAU,SAAUA,EAASpG,EAAO+F,EAAW6gB,GAC/DhrC,KAAK+xB,SAASvH,EAAQjY,SAAUiY,EAAQ6O,OAAQjV,EAAO+F,EAAW6gB,EACtE,EAeArf,EAAU9jB,UAAUkqB,SAAW,SAAUxf,EAAU8mB,EAAQjV,EAAO+F,EAAW6gB,GACzE,KAAIz4B,EAAShS,QAAU,GAAvB,CAGAP,KAAKurB,IAAIugB,OACT9rC,KAAK+qC,gBAAgBC,GACrBhrC,KAAKurB,IAAIwgB,YACT/rC,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAKurB,IAAInK,OAAOphB,KAAKqtB,OAAO1tB,EAAI4S,EAAS,GAAG5S,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI2S,EAAS,GAAG3S,EAAII,KAAKsJ,MAAM1J,GACzG,IAAK,IAAIU,EAAI,EAAGA,EAAIiS,EAAShS,OAAQD,IACjCN,KAAKurB,IAAIygB,OAAOhsC,KAAKqtB,OAAO1tB,EAAI4S,EAASjS,GAAGX,EAAIK,KAAKsJ,MAAM3J,EAAGK,KAAKqtB,OAAOztB,EAAI2S,EAASjS,GAAGV,EAAII,KAAKsJ,MAAM1J,GAExGy5B,GAEDr5B,KAAKurB,IAAIgiB,YACbvtC,KAAKsrC,YAAYlnB,GACjBpkB,KAAKurB,IAAIgiB,YACTvtC,KAAKurB,IAAI0f,YAAY,IACrBjrC,KAAKurB,IAAI0gB,SAfT,CAgBJ,EAoBAtgB,EAAU9jB,UAAUsc,KAAO,SAAUA,EAAMxkB,EAAGC,EAAGyY,GAE7C,IAAIwK,EAAIC,EAAIqD,EACZ9N,EAAUA,GAAW,CAAC,EACtBrY,KAAKurB,IAAIugB,OACT,IAAIwC,EAAOtuC,KAAKqtB,OAAO1tB,EAAIA,EAAIK,KAAKsJ,MAAM3J,EACtC4uC,EAAOvuC,KAAKqtB,OAAOztB,EAAIA,EAAII,KAAKsJ,MAAM1J,EACtCwkB,EAAQ/L,EAAQ+L,OAAS,SACzB/L,EAAQiM,UAAYjM,EAAQgM,cAE5BrkB,KAAKurB,IAAIijB,MACJn2B,EAAQmM,WAAanM,EAAQmM,WAAa,IAAM,KAC5CnM,EAAQkM,UAAYlM,EAAQkM,UAAY,IAAM,KAC9ClM,EAAQiM,SAAWjM,EAAQiM,SAAWtkB,KAAKsJ,MAAM3J,EAAI,MAAQ,MAC7D0Y,EAAQgM,YACkC,IAArChM,EAAQgM,WAAWoqB,QAAQ,KACvBp2B,EAAQgM,WACR,IAAKvY,OAAOuM,EAAQgM,WAAY,KACpC,UAEdhM,EAAQqM,YACR1kB,KAAKurB,IAAI7G,UAAYrM,EAAQqM,WAEjC,IAAIC,EAAuC,QAA3B9B,EAAKxK,EAAQsM,gBAA6B,IAAP9B,EAAgBA,EAAK,EACpE4B,GAAqG,QAAtF0B,EAAmC,QAA7BrD,EAAKzK,EAAQoM,kBAA+B,IAAP3B,EAAgBA,EAAKzK,EAAQiM,gBAA6B,IAAP6B,EAAgBA,EAAK,GAAKnmB,KAAKsJ,MAAM3J,EACtJK,KAAKurB,IAAIviB,UAAUslC,EAAMC,GACzBvuC,KAAKurB,IAAIvpB,OAAO2iB,GACZ3kB,KAAK8qC,YACL9qC,KAAKurB,IAAIggB,UAAYnnB,EACrBpkB,KAAKurB,IAAImjB,SAASvqB,EAAM,EAAGM,EAAa,KAGxCzkB,KAAKurB,IAAIigB,YAAcpnB,EACvBpkB,KAAKurB,IAAIojB,WAAWxqB,EAAM,EAAGM,EAAa,IAI9CzkB,KAAKurB,IAAI0gB,SACb,EAgBAtgB,EAAU9jB,UAAU+mC,MAAQ,SAAUzqB,EAAMxkB,EAAGC,EAAG+kB,EAAUP,GACxDpkB,KAAKurB,IAAIugB,OACT9rC,KAAKurB,IAAIijB,KAAO,oBAChBxuC,KAAKurB,IAAIviB,UAAUrJ,EAAGC,QACE,IAAb+kB,GACP3kB,KAAKurB,IAAIvpB,OAAO2iB,GACpB3kB,KAAKurB,IAAIggB,UAAYnnB,GAAS,QAC1BpkB,KAAK8qC,WACL9qC,KAAKurB,IAAImjB,SAASvqB,EAAM,EAAG,GAG3BnkB,KAAKurB,IAAIojB,WAAWxqB,EAAM,EAAG,GAEjCnkB,KAAKurB,IAAI0gB,SACb,EAgBAtgB,EAAU9jB,UAAUmE,KAAO,SAAU2M,EAAUyL,EAAO+F,EAAW9R,GAC7D,IAAI/D,EAAI+D,GAAWA,EAAQw2B,QAAUl2B,EAAW0M,EAAeuG,aAAakjB,aAAan2B,GACzF0M,EAAeuG,aAAamjB,kBAAkBz6B,EAAGtU,KAAKqtB,OAAQrtB,KAAKsJ,OAC/D8a,IACApkB,KAAKurB,IAAIigB,YAAcpnB,GAE3BpkB,KAAKurB,IAAIpB,UAAYA,GAAa,EAClCnqB,KAAK+qC,gBAAgB1yB,GACjBrY,KAAK8qC,YACD1mB,IACApkB,KAAKurB,IAAIggB,UAAYnnB,GAEzBpkB,KAAKurB,IAAIjB,KAAK,IAAI0kB,OAAO16B,EAAEzE,KAAK,SAG5BuU,IACApkB,KAAKurB,IAAIigB,YAAcpnB,GAE3BpkB,KAAKurB,IAAIkgB,OAAO,IAAIuD,OAAO16B,EAAEzE,KAAK,OAE1C,EASA8b,EAAU9jB,UAAU2lB,MAAQ,SAAUpJ,GAClCpkB,KAAKurB,IAAI0jB,UAAU,EAAG,EAAGjvC,KAAKurB,IAAIzE,OAAO1V,MAAOpR,KAAKurB,IAAIzE,OAAOzV,QAChErR,KAAKurB,IAAIggB,UAAYnnB,EACrBpkB,KAAKurB,IAAI2jB,SAAS,EAAG,EAAGlvC,KAAKurB,IAAIzE,OAAO1V,MAAOpR,KAAKurB,IAAIzE,OAAOzV,OACnE,EACAsa,EAAUyhB,QAAU,CAGhBC,SAAU,SAAU9hB,EAAK8B,EAAQ/jB,EAAOiJ,GACpCgZ,EAAIwgB,YAEJxgB,EAAInK,OAAOiM,EAAO1tB,EAAI4S,EAAS,GAAG5S,EAAI2J,EAAM3J,EAAG0tB,EAAOztB,EAAI2S,EAAS,GAAG3S,EAAI0J,EAAM1J,GAChF,IAAK,IAAIU,EAAI,EAAGA,EAAIiS,EAAShS,OAAQD,IAAK,CACtC,IAAIkS,EAAOD,EAASjS,GACpBirB,EAAIygB,OAAO3e,EAAO1tB,EAAI6S,EAAK7S,EAAI2J,EAAM3J,EAAG0tB,EAAOztB,EAAI4S,EAAK5S,EAAI0J,EAAM1J,EACtE,CACA2rB,EAAIgiB,YACJhiB,EAAI4jB,MACR,GAEGxjB,CACX,CAvjC8B,GAwjC9BhlB,EAAQglB,UAAYA,C,gBChnCpBllB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ2kB,iBAAc,EACtB,IAAIrkB,EAAW,EAAQ,KAWnBqkB,EAA6B,WAS7B,SAASA,EAAYuf,EAASC,GAC1B9qC,KAAKovC,GAAKvE,EACV7qC,KAAKqtB,OAAS,IAAIpmB,EAAS+G,OAAO,EAAG,GACrChO,KAAKsJ,MAAQ,IAAIrC,EAAS+G,OAAO,EAAG,GACpChO,KAAK8qC,WAAaA,EAClB9qC,KAAKqvC,QAAU,EACA,MAAXxE,QAAsC,IAAZA,IAE9B7qC,KAAKsvC,QAAU,IAAIC,EAAI1E,GAMvB7qC,KAAKwvC,YAAcxvC,KAAKsvC,QAAQG,cAAcnkB,EAAYokB,SAAU1vC,KAAKovC,GAAGO,eAC5E3vC,KAAK4vC,YAAc5vC,KAAKsvC,QAAQG,cAAcnkB,EAAYukB,SAAU7vC,KAAKovC,GAAGU,iBAC5E9vC,KAAK+vC,SAAW/vC,KAAKsvC,QAAQU,YAAYhwC,KAAKwvC,YAAaxvC,KAAK4vC,aAEhE5vC,KAAKiwC,cAAgBjwC,KAAKovC,GAAGc,eAG7BzlC,QAAQU,IAAI,kBAChB,CA6pBA,OA5pBAmgB,EAAYzjB,UAAUsoC,OAAS,SAAUxwC,GACrC,OAASK,KAAKsJ,MAAM3J,EAAIA,EAAIK,KAAKqtB,OAAO1tB,GAAKK,KAAKovC,GAAGtoB,OAAO1V,MAAS,EAAM,CAC/E,EACAka,EAAYzjB,UAAUuoC,OAAS,SAAUxwC,GACrC,OAASI,KAAKqtB,OAAOztB,EAAII,KAAKsJ,MAAM1J,EAAIA,GAAKI,KAAKovC,GAAGtoB,OAAOzV,OAAU,EAAM,CAChF,EAKAia,EAAYzjB,UAAU6jB,aAAe,SAAUof,GAC3C,IAAIuF,EAAO,IAAI/kB,EAAY,KAAMwf,GAMjC,OALAuF,EAAKjB,GAAKpvC,KAAKovC,GACfiB,EAAKf,QAAUtvC,KAAKsvC,QACpBe,EAAKb,YAAcxvC,KAAKwvC,YACxBa,EAAKT,YAAc5vC,KAAK4vC,YACxBS,EAAKN,SAAW/vC,KAAK+vC,SACdM,CACX,EAKA/kB,EAAYzjB,UAAU0lB,eAAiB,SAAUlH,GAC7CrmB,KAAKqvC,QAAU,EACfrvC,KAAKqmB,WAAaA,CACtB,EAWAiF,EAAYzjB,UAAU6lB,aAAe,SAAUrH,GAE/C,EAQAiF,EAAYzjB,UAAU6jC,iBAAmB,SAAUC,GAEnD,EAuBArgB,EAAYzjB,UAAUupB,aAAe,SAAU7pB,GAE3CvH,KAAKswC,MAAQ/oC,CACjB,EASA+jB,EAAYzjB,UAAUspB,oBAAsB,SAAUjqB,GAEtD,EAYAokB,EAAYzjB,UAAU4D,KAAO,SAAU67B,EAAIC,EAAInjB,GAC3C,IAAI7R,EAAW,IAAIg+B,aAAa,GAChCh+B,EAAS,GAAKvS,KAAKmwC,OAAO7I,EAAG3nC,GAC7B4S,EAAS,GAAKvS,KAAKowC,OAAO9I,EAAG1nC,GAC7B2S,EAAS,GAAKvS,KAAKqvC,QACnB98B,EAAS,GAAKvS,KAAKmwC,OAAO5I,EAAG5nC,GAC7B4S,EAAS,GAAKvS,KAAKowC,OAAO7I,EAAG3nC,GAC7B2S,EAAS,GAAKvS,KAAKqvC,QACnBrvC,KAAKqvC,SAAW,KAIhBrvC,KAAKovC,GAAGoB,WAAWxwC,KAAKovC,GAAGqB,aAAczwC,KAAKiwC,eAE9CjwC,KAAKovC,GAAGsB,WAAW1wC,KAAKovC,GAAGqB,aAAcl+B,EAAUvS,KAAKovC,GAAGuB,aAI3D,IAAIC,EAAQ5wC,KAAKovC,GAAGyB,kBAAkB7wC,KAAK+vC,SAAU,YAErD/vC,KAAKovC,GAAG0B,oBAAoBF,EAAO,EAAG5wC,KAAKovC,GAAG2B,OAAO,EAAO,EAAG,GAE/D/wC,KAAKovC,GAAG4B,wBAAwBJ,GAIhC5wC,KAAKovC,GAAGzc,SAAS,EAAG,EAAG3yB,KAAKovC,GAAGtoB,OAAO1V,MAAOpR,KAAKovC,GAAGtoB,OAAOzV,QAC5D,IAAI4/B,EAAkBjxC,KAAKovC,GAAG8B,mBAAmBlxC,KAAK+vC,SAAU,mBAKhE/vC,KAAKovC,GAAG+B,WAAWF,EAHG,CAAC,EAAK,IAI5BjxC,KAAKovC,GAAGjlB,UAAU,GAElBnqB,KAAKovC,GAAGgC,WAAWpxC,KAAKovC,GAAGiC,MAAO,EAAG9+B,EAAShS,OAAS,EAG3D,EAaA+qB,EAAYzjB,UAAU0qB,MAAQ,SAAU+U,EAAIC,EAAInjB,GAEhD,EAiBAkH,EAAYzjB,UAAUwkC,iBAAmB,SAAUrkC,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,EAAW+hB,GAE/H,EAcA5gB,EAAYzjB,UAAUukC,UAAY,SAAU9E,EAAIC,EAAInjB,EAAO+F,EAAW+hB,GAEtE,EAeA5gB,EAAYzjB,UAAUkc,MAAQ,SAAUA,EAAOiI,EAAUpO,EAAM2uB,QAC7C,IAAVA,IAAoBA,EAAQ,EAEpC,EAgBAjhB,EAAYzjB,UAAUglC,aAAe,SAAUC,EAAcC,EAAaviB,EAASwiB,EAAiBroB,GAEpG,EAYA2G,EAAYzjB,UAAUyjC,YAAc,SAAUlnB,GAE9C,EAeAkH,EAAYzjB,UAAU8pB,YAAc,SAAU3pB,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,GAE/G,EAgBAmB,EAAYzjB,UAAU+lC,gBAAkB,SAAU5hC,EAAMoY,EAAO+F,GAE/D,EAaAmB,EAAYzjB,UAAUgmC,OAAS,SAAU7lC,EAAYC,GAErD,EAWAqjB,EAAYzjB,UAAUuiB,WAAa,SAAUpiB,EAAYC,GAEzD,EAWAqjB,EAAYzjB,UAAUxC,IAAM,SAAUwE,EAAGua,GAEzC,EAWAkH,EAAYzjB,UAAUQ,MAAQ,SAAUwB,EAAGua,GAE3C,EAeAkH,EAAYzjB,UAAU2L,OAAS,SAAU7J,EAAQ0J,EAAQ+Q,EAAO+F,GAEhE,EAcAmB,EAAYzjB,UAAUyqB,UAAY,SAAU3oB,EAAQ0J,EAAQiD,EAAYC,EAAU6N,EAAO+F,GAEzF,EAeAmB,EAAYzjB,UAAU6iB,QAAU,SAAU/gB,EAAQskC,EAASC,EAAS9pB,EAAO+F,EAAWxF,GAEtF,EAeA2G,EAAYzjB,UAAUimC,OAAS,SAAUnkC,EAAQiU,EAAMwG,EAAO+F,GAE9D,EAUAmB,EAAYzjB,UAAUylC,KAAO,SAAUthB,EAAU5a,EAAOC,EAAQ+S,EAAO+F,GAEvE,EAeAmB,EAAYzjB,UAAUmjB,KAAO,SAAUrhB,EAAQyH,EAAOC,EAAQ88B,EAAOC,EAAOhqB,GAE5E,EAiBAkH,EAAYzjB,UAAUwpB,OAAS,SAAU1nB,EAAQyH,EAAOC,EAAQ88B,EAAOC,EAAOhqB,GAE9E,EAgBAkH,EAAYzjB,UAAUgqB,cAAgB,SAAUloB,EAAQiU,EAAMwG,GAE9D,EAgBAkH,EAAYzjB,UAAU+pB,aAAe,SAAUjoB,EAAQiU,EAAMwG,GAE7D,EAgBAkH,EAAYzjB,UAAUiqB,aAAe,SAAUnoB,EAAQiU,EAAMwG,GAE7D,EAeAkH,EAAYzjB,UAAUypB,UAAY,SAAU3nB,EAAQ0J,EAAQ+Q,EAAO+F,GAEnE,EAeAmB,EAAYzjB,UAAUrC,MAAQ,SAAUmE,EAAQ0J,EAAQ+Q,EAAO+F,GAE/D,EAWAmB,EAAYzjB,UAAU2iB,QAAU,SAAUA,EAASpG,EAAO+F,GAEtD,IADA,IAAI5X,EAAW,IAAIg+B,aAAuC,EAA1B/lB,EAAQjY,SAAShS,QACxCD,EAAI,EAAGA,EAAIkqB,EAAQjY,SAAShS,OAAQD,IACzCiS,EAAa,EAAJjS,EAAQ,GAAKN,KAAKmwC,OAAO3lB,EAAQjY,SAASjS,GAAGX,GACtD4S,EAAa,EAAJjS,EAAQ,GAAKN,KAAKowC,OAAO5lB,EAAQjY,SAASjS,GAAGV,GACtD2S,EAAa,EAAJjS,EAAQ,GAAKN,KAAKqvC,QAE/BrvC,KAAKqvC,SAAW,KAKhBrvC,KAAKovC,GAAGoB,WAAWxwC,KAAKovC,GAAGqB,aAAczwC,KAAKiwC,eAE9CjwC,KAAKovC,GAAGsB,WAAW1wC,KAAKovC,GAAGqB,aAAcl+B,EAAUvS,KAAKovC,GAAGuB,aAI3D,IAAIC,EAAQ5wC,KAAKovC,GAAGyB,kBAAkB7wC,KAAK+vC,SAAU,YAErD/vC,KAAKovC,GAAG0B,oBAAoBF,EAAO,EAAG5wC,KAAKovC,GAAG2B,OAAO,EAAO,EAAG,GAE/D/wC,KAAKovC,GAAG4B,wBAAwBJ,GAEhC5wC,KAAKovC,GAAGoB,WAAWxwC,KAAKovC,GAAGqB,aAAc,MAEzCzwC,KAAKovC,GAAGzc,SAAS,EAAG,EAAG3yB,KAAKovC,GAAGtoB,OAAO1V,MAAOpR,KAAKovC,GAAGtoB,OAAOzV,QAC5D,IAAI4/B,EAAkBjxC,KAAKovC,GAAG8B,mBAAmBlxC,KAAK+vC,SAAU,mBAKhE/vC,KAAKovC,GAAG+B,WAAWF,EAHG,CAAC,EAAK,IAK5BjxC,KAAKovC,GAAGgC,WAAWpxC,KAAKovC,GAAGkC,aAAc,EAAG/+B,EAAShS,OAAS,EAGlE,EAaA+qB,EAAYzjB,UAAUkqB,SAAW,SAAUxf,EAAU8mB,EAAQjV,EAAO+F,GAEpE,EAoBAmB,EAAYzjB,UAAUsc,KAAO,SAAUA,EAAMxkB,EAAGC,EAAGyY,GAEnD,EAcAiT,EAAYzjB,UAAU+mC,MAAQ,SAAUzqB,EAAMxkB,EAAGC,EAAG+kB,EAAUP,GAE9D,EAaAkH,EAAYzjB,UAAUmE,KAAO,SAAU2M,EAAUyL,EAAO+F,EAAW9R,GAEnE,EASAiT,EAAYzjB,UAAU2lB,MAAQ,SAAUpJ,GAKpCpkB,KAAKovC,GAAGmC,WAAW,EAAK,EAAK,EAAK,GAElCvxC,KAAKovC,GAAGoC,OAAOxxC,KAAKovC,GAAGqC,YAEvBzxC,KAAKovC,GAAG5hB,MAAMxtB,KAAKovC,GAAGsC,iBAAmB1xC,KAAKovC,GAAGuC,iBACrD,EAEArmB,EAAYokB,SAAW,gYAEvBpkB,EAAYukB,SAAW,yGAChBvkB,CACX,CA7rBgC,GA8rBhC3kB,EAAQ2kB,YAAcA,EAItB,IAAIikB,EAAqB,WACrB,SAASA,EAAIH,GACTpvC,KAAKovC,GAAKA,CACd,CA+CA,OA9CAG,EAAI1nC,UAAU6oC,WAAa,SAAU1V,GAEjC,IAAI4W,EAAU5xC,KAAKovC,GAAGc,eAOtB,OALAlwC,KAAKovC,GAAGoB,WAAWxwC,KAAKovC,GAAGqB,aAAcmB,GAEzC5xC,KAAKovC,GAAGsB,WAAW1wC,KAAKovC,GAAGqB,aAAczV,EAAOh7B,KAAKovC,GAAGuB,aAExD3wC,KAAKovC,GAAGoB,WAAWxwC,KAAKovC,GAAGqB,aAAc,MAClCmB,CACX,EAEArC,EAAI1nC,UAAU4nC,cAAgB,SAAUoC,EAAYC,GAEhD,IAAIC,EAAS/xC,KAAKovC,GAAG4C,aAAaF,GAMlC,OAJA9xC,KAAKovC,GAAG6C,aAAaF,EAAQF,GAE7B7xC,KAAKovC,GAAGK,cAAcsC,GACL/xC,KAAKovC,GAAG8C,mBAAmBH,EAAQ/xC,KAAKovC,GAAG+C,gBAMrDJ,GAJHtnC,QAAQC,KAAK,mBAAqB1K,KAAKovC,GAAGgD,iBAAiBL,IAC3D/xC,KAAKovC,GAAGiD,aAAaN,GACd,KAGf,EACAxC,EAAI1nC,UAAUmoC,YAAc,SAAUsC,EAAYC,GAG9C,IAAIC,EAAUxyC,KAAKovC,GAAGqD,gBActB,OAZAzyC,KAAKovC,GAAGsD,aAAaF,EAASF,GAE9BtyC,KAAKovC,GAAGsD,aAAaF,EAASD,GAE9BvyC,KAAKovC,GAAGuD,YAAYH,GAEpBxyC,KAAKovC,GAAGwD,WAAWJ,GAEnBxyC,KAAKovC,GAAGyD,aAAaL,EAASF,GAC9BtyC,KAAKovC,GAAGyD,aAAaL,EAASD,GAC9BvyC,KAAKovC,GAAGiD,aAAaC,GACrBtyC,KAAKovC,GAAGiD,aAAaE,GACdC,CACX,EACOjD,CACX,CAnDwB,E,gBChrBxB9oC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQilB,kBAAe,EACvB,IAAIrG,EAAiB,EAAQ,KACzBxe,EAAqB,EAAQ,KAC7BE,EAAW,EAAQ,KACnBD,EAAiB,EAAQ,KACzBoM,EAAW,EAAQ,IACnB0/B,EAAa,IAAMrzC,KAAKgG,GAUxBmmB,EAA8B,WAmB9B,SAASA,EAAasB,EAASG,EAAQ/jB,EAAO2hB,EAAY6f,EAAY5kB,EAAY6sB,EAAaC,EAAOC,EAAaC,EAAUC,EAAgBC,GAUzI,GATApzC,KAAKktB,QAAUA,EACfltB,KAAKqtB,OAAS,IAAIpmB,EAAS+G,OAAO,EAAG,GAAGK,IAAIgf,GAC5CrtB,KAAKsJ,MAAQ,IAAIrC,EAAS+G,OAAO,EAAG,GAAGK,IAAI/E,GAC3CtJ,KAAK8qC,WAAaA,EAClB9qC,KAAK+yC,YAAcxiB,QAAQwiB,GAC3B/yC,KAAKkmB,WAAaA,EAClBlmB,KAAKqzC,qBAAuB,CAAC,EAC7BrzC,KAAKszC,MAAQ,IAAIC,IACjBvzC,KAAKu0B,QAAQtJ,GACT8nB,EAAa,CACb,KAAKC,GAAUC,GAAgBC,GAAaC,GACxC,KAAM,iGAEVnzC,KAAKgzC,MAAQA,EACbhzC,KAAKizC,YAAcA,EACnBjzC,KAAKkzC,SAAWA,EAChBlzC,KAAKwzC,iBAAmBL,EACpBC,IACApzC,KAAKozC,UAAYA,EAEzB,MAEIpzC,KAAKyzC,aAAavtB,GAClBlmB,KAAK0zC,cACL1zC,KAAKgzC,MAAQhzC,KAAK2zC,cAAc,KAChC3zC,KAAKizC,YAAcjzC,KAAK2zC,cAAc,KACtC3zC,KAAKktB,QAAQd,YAAYpsB,KAAKgzC,MAEtC,CAmiDA,OA5hDApnB,EAAa/jB,UAAU4rC,aAAe,SAAUvtB,GAC5ClmB,KAAKozC,UAAYpzC,KAAK2zC,cAAc,SACpC3zC,KAAKktB,QAAQd,YAAYpsB,KAAKozC,WAC9BpzC,KAAK4zC,iBAAiB1tB,EAC1B,EAMA0F,EAAa/jB,UAAU+rC,iBAAmB,SAAU1tB,GAGhD,IAAI2tB,EAAO,CACP,OAAU,mBAEV,QAAW,UACX,SAAY,WACZ,QAAW,UACX,cAAiB,gBACjB,OAAU,SACV,aAAgB,eAChB,OAAU,SACV,KAAQ,OACR,OAAU,SACV,MAAS,QACT,KAAQ,QAGRC,EAAQ,GAEZ,IAAK,IAAIhb,KAAK+a,EAAM,CAChB,IAAI3sC,EAAY2sC,EAAK/a,GACjBib,EAAe7tB,EAAW4S,GAC1Bib,EACAD,EAAM1zC,KAAK,IAAI0L,OAAO5E,EAAW,4BAA4B4E,OAAOioC,EAAa3vB,MAAO,oBAAoBtY,OAAOioC,EAAa5pB,UAAW,SAG3I1f,QAAQC,KAAK,iDAAiDoB,OAAOgtB,EAAG,wBAEhF,CACI94B,KAAKg0C,kBACLF,EAAM1zC,KAAK,2BACXJ,KAAKg0C,gBAAgBtP,SAAQ,SAAU99B,EAAO2Y,GAC1Cu0B,EAAM1zC,KAAKmf,EAAM,MAAQ3Y,EAAQ,KACrC,KAGJ5G,KAAKozC,UAAUa,UAAYH,EAAMjkC,KAAK,KAC1C,EAIA+b,EAAa/jB,UAAU6rC,YAAc,WACjC1zC,KAAKkzC,SAAWlzC,KAAK2zC,cAAc,QAEnC3zC,KAAKwzC,iBAAmBxzC,KAAK2zC,cAAc,QAC3C3zC,KAAKktB,QAAQd,YAAYpsB,KAAKkzC,SAClC,EAYAtnB,EAAa/jB,UAAUqsC,mBAAqB,SAAUC,GAClDn0C,KAAKg0C,gBAAkBG,CAC3B,EAYAvoB,EAAa/jB,UAAUusC,YAAc,SAAU70B,EAAK80B,GAChD,IAAK90B,EACD,OAAO,KAEX,IAAI+0B,EAAOt0C,KAAKszC,MAAMiB,IAAIh1B,GAC1B,OAAI+0B,GAAQA,EAAKD,SAASG,gBAAkBH,EAASG,eACjDx0C,KAAKszC,MAAMmB,OAAOl1B,GACX+0B,GAEJ,IACX,EAWA1oB,EAAa/jB,UAAU8rC,cAAgB,SAAUU,GAC7C,OAAOlzC,SAASgsB,gBAAgB,6BAA8BknB,EAClE,EAaAzoB,EAAa/jB,UAAU6sC,SAAW,SAAUL,GAIxC,IAAIC,EAAOt0C,KAAKo0C,YAAYp0C,KAAKswC,MAAO+D,GAaxC,OAZKC,IAGDA,EAAOt0C,KAAK2zC,cAAcU,IAE1Br0C,KAAKqzC,qBAAqBxH,WAE1ByI,EAAKvoB,MAAM,kBAAkB/rB,KAAKqzC,qBAAqBxH,WAKpDyI,CACX,EAqBA1oB,EAAa/jB,UAAU8sC,cAAgB,SAAUL,EAAMptC,EAAWkd,EAAO+F,EAAW6gB,GAEhF,OADAhrC,KAAK40C,eAAeN,EAAMptC,EAAWlH,KAAK8qC,WAAY1mB,EAAO+F,EAAW6gB,GACjEhrC,KAAK60C,UAAUP,OAAMzyB,EAChC,EAaA+J,EAAa/jB,UAAUgtC,UAAY,SAAUP,EAAMQ,GAK/C,OAJKR,EAAKlhB,aAEL0hB,QAAqDA,EAAgB90C,KAAKizC,aAAa7mB,YAAYkoB,GAEjGA,CACX,EAaA1oB,EAAa/jB,UAAUktC,eAAiB,SAAUT,EAAMptC,GAChDlH,KAAKg1C,aACLV,EAAK/nB,aAAa,QAAS,GAAGzgB,OAAO5E,EAAW,KAAK4E,OAAO9L,KAAKg1C,eAGjEV,EAAK/nB,aAAa,QAASrlB,EAEnC,EACA0kB,EAAa/jB,UAAU+sC,eAAiB,SAAUN,EAAMptC,EAAW+tC,EAAU7wB,EAAO+F,EAAW6gB,GAS3F,OARAhrC,KAAK+0C,eAAeT,EAAMptC,GAC1BotC,EAAK/nB,aAAa,OAAQ0oB,GAAY7wB,EAAQA,EAAQ,QACtDkwB,EAAK/nB,aAAa,SAAU0oB,EAAW,OAAS7wB,GAAS,QACzDkwB,EAAK/nB,aAAa,eAAgB,GAAGzgB,OAAOqe,GAAa,IACrDnqB,KAAKswC,OACLgE,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAKswC,QAE3CtwC,KAAK+qC,gBAAgBuJ,EAAMtJ,GACpBsJ,CACX,EASA1oB,EAAa/jB,UAAU0sB,QAAU,SAAUtJ,GACvCjrB,KAAKirB,WAAaA,EAClBjrB,KAAKktB,QAAQX,aAAa,UAAW,OAAOzgB,OAAO9L,KAAKirB,WAAW7Z,MAAO,KAAKtF,OAAO9L,KAAKirB,WAAW5Z,SACtGrR,KAAKktB,QAAQX,aAAa,QAAS,GAAGzgB,OAAO9L,KAAKirB,WAAW7Z,QAC7DpR,KAAKktB,QAAQX,aAAa,SAAU,GAAGzgB,OAAO9L,KAAKirB,WAAW5Z,QAClE,EAKAua,EAAa/jB,UAAU6jB,aAAe,SAAUof,GAI5C,OAHW,IAAIlf,EAAa5rB,KAAKktB,QAASltB,KAAKqtB,OAAQrtB,KAAKsJ,MAAOtJ,KAAKirB,WAAY6f,EAAY9qC,KAAKkmB,YACrG,EACAlmB,KAAKgzC,MAAOhzC,KAAKizC,YAAajzC,KAAKkzC,SAAUlzC,KAAKwzC,iBAAkBxzC,KAAKozC,UAE7E,EAQAxnB,EAAa/jB,UAAU6jC,iBAAmB,SAAUC,GAChD3rC,KAAKqzC,qBAAuB1H,CAChC,EAWA/f,EAAa/jB,UAAUupB,aAAe,SAAU7pB,GAC5CvH,KAAKswC,MAAQ/oC,CACjB,EAWAqkB,EAAa/jB,UAAUspB,oBAAsB,SAAUjqB,GACnDlH,KAAKg1C,aAAe9tC,CACxB,EAWA0kB,EAAa/jB,UAAU0lB,eAAiB,SAAUlH,GAE9CrmB,KAAKszC,MAAM9lB,QAEX,IAAK,IAAIltB,EAAI,EAAGA,EAAIN,KAAKizC,YAAYiC,WAAW30C,OAAQD,IAAK,CAGzD,IAAI60C,EAAQn1C,KAAKizC,YAAYiC,WAAW50C,GACxCN,KAAKszC,MAAMjlC,IAAI8mC,EAAMC,aAAa,MAAOD,EAC7C,CACAn1C,KAAKq1C,qBACT,EAWAzpB,EAAa/jB,UAAU6lB,aAAe,SAAUrH,GAC5CrmB,KAAK4zC,iBAAiB5zC,KAAKkmB,YACtBlmB,KAAK+yC,cAKN/yC,KAAKktB,QAAQooB,aAAat1C,KAAKwzC,iBAAkBxzC,KAAKkzC,UACtDlzC,KAAKktB,QAAQooB,aAAat1C,KAAKizC,YAAajzC,KAAKgzC,QAErD,IAAIuC,EAAWv1C,KAAKgzC,MACpBhzC,KAAKgzC,MAAQhzC,KAAKizC,YAClBjzC,KAAKizC,YAAcsC,EACnB,IAAIC,EAAcx1C,KAAKkzC,SACvBlzC,KAAKkzC,SAAWlzC,KAAKwzC,iBACrBxzC,KAAKwzC,iBAAmBgC,CAC5B,EAMA5pB,EAAa/jB,UAAUkjC,gBAAkB,SAAUuJ,EAAMtJ,GACrD,IAAIl1B,EAAQ9V,KACRgrC,GACAA,EAAcE,WACdF,EAAcE,UAAU3qC,OAAS,GACjCqrB,EAAa6pB,qBAAqBnB,EAAKnpB,WACvCmpB,EAAK/nB,aAAa,mBAAoBye,EAAcE,UAC/Cn1B,KAAI,SAAU2/B,GACf,OAAOA,EAAe5/B,EAAMxM,MAAM3J,CACtC,IACKkQ,KAAK,MACNm7B,EAAcK,YACdiJ,EAAK/nB,aAAa,oBAAqB,GAAGzgB,OAAOk/B,EAAcK,WAAarrC,KAAKsJ,MAAM3J,IAGnG,EACAisB,EAAa/jB,UAAU8tC,GAAK,SAAUh2C,GAClC,OAAOK,KAAKqtB,OAAO1tB,EAAIK,KAAKsJ,MAAM3J,EAAIA,CAC1C,EACAisB,EAAa/jB,UAAU+tC,GAAK,SAAUh2C,GAClC,OAAOI,KAAKqtB,OAAOztB,EAAII,KAAKsJ,MAAM1J,EAAIA,CAC1C,EAeAgsB,EAAa/jB,UAAU4D,KAAO,SAAU67B,EAAIC,EAAInjB,EAAO+F,EAAW6gB,GAO9D,IAAIv/B,EAAOzL,KAAK61C,aAAavO,EAAIC,EAAInjB,EAAO+F,EAAW6gB,GACvD,OAAOhrC,KAAK20C,cAAclpC,EAAM,OAAQ2Y,EAAO+F,GAAa,EAAG6gB,EACnE,EAgBApf,EAAa/jB,UAAU0qB,MAAQ,SAAU+U,EAAIC,EAAInjB,EAAO+F,EAAW+hB,EAAYlB,QACxD,IAAfkB,IAAyBA,EAAa,GAC1C,IAAI4J,EAAQ91C,KAAK00C,SAAS,KACtBvI,EAAwB,CAAExsC,EAAG,EAAGC,EAAG,GAEnCwsC,EAAYpsC,KAAK+1C,kBAAkBzO,EAAIC,EAAInjB,EAAO+F,EAAW+hB,OAAYrqB,EAAWsqB,GACpF1gC,EAAOzL,KAAK61C,aAAavO,EAAI6E,EAAuB/nB,EAAO+F,EAAW6gB,GAK1E,OAJA8K,EAAM1pB,YAAY3gB,GAClBqqC,EAAM1pB,YAAYggB,GAClBpsC,KAAK+0C,eAAee,EAAO,gBAC3B91C,KAAK60C,UAAUiB,OAAOj0B,GACfi0B,CACX,EAkBAlqB,EAAa/jB,UAAUwkC,iBAAmB,SAAUrkC,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,EAAW+hB,EAAYlB,QACrH,IAAfkB,IAAyBA,EAAa,GAC1C,IAAI4J,EAAQ91C,KAAK00C,SAAS,KAEtBvI,EAAwB,IAAIllC,EAAS+G,OAAO,EAAG,GAC/Co+B,EAAYpsC,KAAK+1C,kBAAkBptC,EAAiBV,EAAUmc,EAAO+F,EAAW+hB,OAAYrqB,EAAWsqB,GACvG92B,EAAO82B,EAAsB72B,WAAWrN,GACxCiiB,EAASlqB,KAAKg2C,oBAAoBhuC,EAAY,CAAErI,EAAGsI,EAAStI,EAAI0V,EAAK1V,EAAGC,EAAGqI,EAASrI,EAAIyV,EAAKzV,GAAK6I,EAAmB,CAAE9I,EAAGgJ,EAAgBhJ,EAAI0V,EAAK1V,EAAGC,EAAG+I,EAAgB/I,EAAIyV,EAAKzV,GAAKwkB,EAAO+F,EAAW6gB,GAK7M,OAJA8K,EAAM1pB,YAAYlC,GAClB4rB,EAAM1pB,YAAYggB,GAClBpsC,KAAK+0C,eAAee,EAAO,qBAC3B91C,KAAK60C,UAAUiB,OAAOj0B,GACfi0B,CACX,EAgBAlqB,EAAa/jB,UAAUukC,UAAY,SAAU9E,EAAIC,EAAInjB,EAAO+F,EAAW+hB,EAAYlB,QAC5D,IAAfkB,IAAyBA,EAAa,GAC1C,IAAIoI,EAAOt0C,KAAK+1C,kBAAkBzO,EAAIC,EAAInjB,EAAO+F,EAAW+hB,EAAYlB,GACxE,OAAOhrC,KAAK20C,cAAcL,EAAM,YAAalwB,EAAO+F,GAAa,EAAG6gB,EACxE,EAeApf,EAAa/jB,UAAUkc,MAAQ,SAAUA,EAAOiI,EAAUpO,EAAM2uB,GAC5D,IAAIz2B,EAAQ9V,UACE,IAAVusC,IAAoBA,EAAQ,GAChC,IAAI+H,EAAOt0C,KAAK00C,SAAS,SAErBuB,EAAe,SAAUlyB,GACzB,GAAIA,EAAM0oB,aAAc,CACpB,IAAIyJ,EAASt4B,EAAKje,EAAIokB,EAAM0oB,aACxB0J,EAASv4B,EAAKhe,EAAImkB,EAAM6oB,cAC5B0H,EAAK/nB,aAAa,QAAS,GAAGzgB,OAAOiY,EAAM0oB,aAAe32B,EAAMxM,MAAM3J,IACtE20C,EAAK/nB,aAAa,SAAU,GAAGzgB,OAAOiY,EAAM6oB,cAAgB92B,EAAMxM,MAAM1J,IACxE00C,EAAK/nB,aAAa,UAAW,MAE7B+nB,EAAK/nB,aAAa,UAAW,GAAGzgB,OAAOygC,IAEvC+H,EAAK/nB,aAAa,YAAa,aAAazgB,OAAOgK,EAAM6/B,GAAG3pB,EAASrsB,GAAI,KAAKmM,OAAOgK,EAAM8/B,GAAG5pB,EAASpsB,GAAI,YAAYkM,OAAOoqC,EAAQ,KAAKpqC,OAAOqqC,EAAQ,KAC9J,CACJ,EAWA,OAVApyB,EAAMriB,iBAAiB,QAAQ,SAAUgD,GACrCuxC,EAAalyB,EACjB,IAGAuwB,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO,IACjCwoC,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO,IACjCwoC,EAAK/nB,aAAa,UAAW,QAC7B0pB,EAAalyB,GACbuwB,EAAK/nB,aAAa,OAAQxI,EAAMqyB,KACzBp2C,KAAK20C,cAAcL,EAAM,QAAS,KAAM,KACnD,EAgBA1oB,EAAa/jB,UAAUglC,aAAe,SAAUC,EAAcC,EAAaviB,EAASwiB,EAAiBroB,GAEjG,IAAI0xB,EAAuB,IAAIpvC,EAAS+G,OAAO++B,EAAYxiC,KAAKK,QAAQ5I,OAAO2iB,EAAUqoB,GAiBrFsJ,EAAet2C,KAAK00C,SAAS,YAC7B6B,EAAa,YAAYzqC,OAAO9E,EAAeQ,aAAaC,QAChE6uC,EAAa/pB,aAAa,KAAMgqB,GAChC,IAAIvD,EAAQhzC,KAAK00C,SAAS,KACtB8B,EAAYx2C,KAAK00C,SAAS,SAC9B8B,EAAUjqB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK21C,GAAGU,EAAqB12C,KACnE62C,EAAUjqB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK41C,GAAGS,EAAqBz2C,KACnE42C,EAAUjqB,aAAa,QAAS,GAAGzgB,OAAOihC,EAAY37B,QACtDolC,EAAUjqB,aAAa,SAAU,GAAGzgB,OAAOihC,EAAY17B,SACvDmlC,EAAUjqB,aAAa,OAAQugB,EAAasJ,KAG5CI,EAAUjqB,aAAa,YAAa,UAAUzgB,OAAO6Y,EAAWmuB,EAAY,MAAMhnC,OAAO9L,KAAK21C,GAAGU,EAAqB12C,GAAI,MAAMmM,OAAO9L,KAAK41C,GAAGS,EAAqBz2C,GAAI,MACxK,IAAI62C,EAAWz2C,KAAK00C,SAAS,QACzB/7B,EAAW,GACf,GAAI6R,EAAQjY,SAAShS,OAAS,EAAG,CAE7BoY,EAASvY,KAAK,IAAK,GAAG0L,OAAO9L,KAAK21C,GAAGnrB,EAAQjY,SAAS,GAAG5S,IAAK,GAAGmM,OAAO9L,KAAK41C,GAAGprB,EAAQjY,SAAS,GAAG3S,KACpG,IAAK,IAAIU,EAAI,EAAGA,EAAIkqB,EAAQjY,SAAShS,OAAQD,IACzCqY,EAASvY,KAAK,IAAK,GAAG0L,OAAO9L,KAAK21C,GAAGnrB,EAAQjY,SAASjS,GAAGX,IAAK,GAAGmM,OAAO9L,KAAK41C,GAAGprB,EAAQjY,SAASjS,GAAGV,IAE5G,CACA62C,EAASlqB,aAAa,IAAK5T,EAAS9I,KAAK,MACzCymC,EAAalqB,YAAYqqB,GACzBz2C,KAAKwzC,iBAAiBpnB,YAAYkqB,GAClCtD,EAAM5mB,YAAYoqB,GAClBxD,EAAMzmB,aAAa,mBAAoB,GAAGzgB,OAAO9L,KAAK21C,GAAGU,EAAqB12C,GAAI,KAAKmM,OAAO9L,KAAK41C,GAAGS,EAAqBz2C,KAC3HozC,EAAMzmB,aAAa,YAAa,SAASzgB,OAAO9L,KAAKsJ,MAAM3J,EAAG,MAAMmM,OAAO9L,KAAKsJ,MAAM1J,EAAG,MACzF,IAAI82C,EAAW12C,KAAK00C,SAAS,KAK7B,OAJAgC,EAAStqB,YAAY4mB,GACrB0D,EAASnqB,aAAa,YAAa,QAAQzgB,OAAOyqC,EAAY,MAE9Dv2C,KAAK20C,cAAc+B,EAAU,QAAS,KAAM,MACrCA,CACX,EAiBA9qB,EAAa/jB,UAAU8pB,YAAc,SAAU3pB,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,EAAW6gB,GACvH,IAAIsJ,EAAOt0C,KAAKg2C,oBAAoBhuC,EAAYC,EAAUQ,EAAmBE,EAAiByb,EAAO+F,EAAW6gB,GAChH,OAAOhrC,KAAK60C,UAAUP,OAAMzyB,EAChC,EAkBA+J,EAAa/jB,UAAU+lC,gBAAkB,SAAU5hC,EAAMoY,EAAO+F,EAAW6gB,GACvE,IAAIsJ,EAAOt0C,KAAK00C,SAAS,QAEzB,GADA10C,KAAK+qC,gBAAgBuJ,EAAMtJ,IACtBh/B,GAAuB,GAAfA,EAAKzL,OACd,OAAO+zC,EAQX,IALA,IAEIrsC,EACAQ,EACAE,EAJA2L,EAAI,CAAC,IAAKtU,KAAK21C,GAAG3pC,EAAK,GAAGrM,GAAIK,KAAK41C,GAAG5pC,EAAK,GAAGpM,IAKzCU,EAAI,EAAGA,EAAI0L,EAAKzL,OAAQD,GAAK,EAClCmI,EAAoBuD,EAAK1L,GACzBqI,EAAkBqD,EAAK1L,EAAI,GAC3B2H,EAAW+D,EAAK1L,EAAI,GACpBgU,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGltC,EAAkB9I,GAAIK,KAAK41C,GAAGntC,EAAkB7I,GAAII,KAAK21C,GAAGhtC,EAAgBhJ,GAAIK,KAAK41C,GAAGjtC,EAAgB/I,GAAII,KAAK21C,GAAG1tC,EAAStI,GAAIK,KAAK41C,GAAG3tC,EAASrI,IAG1K,OADA00C,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,kBAAmBlwB,EAAO+F,GAAa,EAC3E,EAaAyB,EAAa/jB,UAAUgmC,OAAS,SAAU7lC,EAAYC,GAElDjI,KAAKqI,MAAML,EAAY,iBACvBhI,KAAK8tC,OAAO7lC,EAAU,EAAG,sBAC7B,EAWA2jB,EAAa/jB,UAAUuiB,WAAa,SAAUpiB,EAAYC,GACtDjI,KAAKyL,KAAKzD,EAAYC,EAAU,uBACpC,EAWA2jB,EAAa/jB,UAAUxC,IAAM,SAAUwE,EAAGua,GACtC,IAAIkwB,EAAOt0C,KAAK00C,SAAS,QAKzB,OAJAJ,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK21C,GAAG9rC,EAAElK,KAC5C20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK41C,GAAG/rC,EAAEjK,KAC5C00C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK21C,GAAG9rC,EAAElK,KAC5C20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK41C,GAAG/rC,EAAEjK,KACrCI,KAAK20C,cAAcL,EAAM,MAAOlwB,EAAO,EAClD,EAWAwH,EAAa/jB,UAAUQ,MAAQ,SAAUwB,EAAGua,GACxC,IACIkwB,EAAOt0C,KAAK00C,SAAS,UAIzB,OAHAJ,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK21C,GAAG9rC,EAAElK,KAC5C20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK41C,GAAG/rC,EAAEjK,KAC5C00C,EAAK/nB,aAAa,IAAK,GAAGzgB,OAJb,IAKN9L,KAAK20C,cAAcL,EAAM,QAASlwB,EAAO,EACpD,EAiBAwH,EAAa/jB,UAAU2L,OAAS,SAAU7J,EAAQ0J,EAAQ+Q,EAAO+F,EAAW6gB,GAExE,IAAIsJ,EAAOt0C,KAAK00C,SAAS,UAKzB,OAJA10C,KAAK+qC,gBAAgBuJ,EAAMtJ,GAC3BsJ,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK21C,GAAGhsC,EAAOhK,KACjD20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK41C,GAAGjsC,EAAO/J,KACjD00C,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAOuH,EAASrT,KAAKsJ,MAAM3J,IAC9CK,KAAK20C,cAAcL,EAAM,SAAUlwB,EAAO+F,GAAa,EAClE,EAgBAyB,EAAa/jB,UAAUyqB,UAAY,SAAU3oB,EAAQ0J,EAAQiD,EAAYC,EAAU6N,EAAO+F,EAAW6gB,GACjG,IAAIsJ,EAAOt0C,KAAK00C,SAAS,QACzB10C,KAAK+qC,gBAAgBuJ,EAAMtJ,GAC3B,IAAI2L,EAAUpxB,EAAepP,aAAa6B,kBAAkBI,eAAepY,KAAK21C,GAAGhsC,EAAOhK,GAAIK,KAAK41C,GAAGjsC,EAAO/J,GAAIyT,EAASrT,KAAKsJ,MAAM3J,EACrI2W,EAAYC,GAEZ,OADA+9B,EAAK/nB,aAAa,IAAKoqB,EAAQ9mC,KAAK,MAC7B7P,KAAK20C,cAAcL,EAAM,YAAalwB,EAAO+F,GAAa,EACrE,EAiBAyB,EAAa/jB,UAAU6iB,QAAU,SAAU/gB,EAAQskC,EAASC,EAAS9pB,EAAO+F,EAAWxF,EAAUqmB,QACrE,IAAbrmB,IACPA,EAAW,GAEf,IAAI2vB,EAAOt0C,KAAK00C,SAAS,WAQzB,OAPA10C,KAAK+qC,gBAAgBuJ,EAAMtJ,GAC3BsJ,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK21C,GAAGhsC,EAAOhK,KACjD20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK41C,GAAGjsC,EAAO/J,KACjD00C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAOmiC,EAAUjuC,KAAKsJ,MAAM3J,IACvD20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAOoiC,EAAUluC,KAAKsJ,MAAM1J,IAEvD00C,EAAK/nB,aAAa,YAAa,UAAUzgB,OAAmB,IAAX6Y,EAAkBllB,KAAKgG,GAAI,KAAKqG,OAAO9L,KAAK21C,GAAGhsC,EAAOhK,GAAI,KAAKmM,OAAO9L,KAAK41C,GAAGjsC,EAAO/J,GAAI,MACnII,KAAK20C,cAAcL,EAAM,UAAWlwB,EAAO+F,GAAa,EACnE,EAiBAyB,EAAa/jB,UAAUimC,OAAS,SAAUnkC,EAAQiU,EAAMwG,EAAO+F,EAAW6gB,GACtE,IAAIsJ,EAAOt0C,KAAK00C,SAAS,aAMzB,OALA10C,KAAK+qC,gBAAgBuJ,EAAMtJ,GAC3BsJ,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK21C,GAAGhsC,EAAOhK,EAAIie,EAAO,KAC3D02B,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK41C,GAAGjsC,EAAO/J,EAAIge,EAAO,KAC3D02B,EAAK/nB,aAAa,QAAS,GAAGzgB,OAAO8R,EAAO5d,KAAKsJ,MAAM3J,IACvD20C,EAAK/nB,aAAa,SAAU,GAAGzgB,OAAO8R,EAAO5d,KAAKsJ,MAAM1J,IACjDI,KAAK20C,cAAcL,EAAM,SAAUlwB,EAAO+F,GAAa,EAClE,EAeAyB,EAAa/jB,UAAUylC,KAAO,SAAUthB,EAAU5a,EAAOC,EAAQ+S,EAAO+F,EAAW6gB,GAC/E,IAAIsJ,EAAOt0C,KAAK00C,SAAS,QAMzB,OALA10C,KAAK+qC,gBAAgBuJ,EAAMtJ,GAC3BsJ,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK21C,GAAG3pB,EAASrsB,KAClD20C,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK41C,GAAG5pB,EAASpsB,KAClD00C,EAAK/nB,aAAa,QAAS,GAAGzgB,OAAOsF,EAAQpR,KAAKsJ,MAAM3J,IACxD20C,EAAK/nB,aAAa,SAAU,GAAGzgB,OAAOuF,EAASrR,KAAKsJ,MAAM1J,IACnDI,KAAK20C,cAAcL,EAAM,OAAQlwB,EAAO+F,GAAa,EAChE,EAeAyB,EAAa/jB,UAAUmjB,KAAO,SAAUrhB,EAAQyH,EAAOC,EAAQ88B,EAAOC,EAAOhqB,GA6BzE,IAJA,IAAIkwB,EAAOt0C,KAAK00C,SAAS,QACrBpgC,EAAI,GACJ3B,GAAQlT,KAAK4uC,KAAe,GAATh9B,EAAgB+8B,GAASA,EAC5Cx7B,EAAOvB,EAAS,EACX1R,GAAKF,KAAK4uC,KAAc,GAARj9B,EAAe+8B,GAASA,EAAOxuC,EAAIyR,EAAQ,EAAGzR,GAAKwuC,EACxE75B,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAIA,GAAIK,KAAK41C,GAAGjsC,EAAO/J,EAAI+S,IACtD2B,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAIA,GAAIK,KAAK41C,GAAGjsC,EAAO/J,EAAIgT,IAI1D,IAFA,IAAIH,GAAQhT,KAAK4uC,KAAc,GAARj9B,EAAe+8B,GAASA,EAC3Cz7B,EAAOtB,EAAQ,EACVxR,GAAKH,KAAK4uC,KAAe,GAATh9B,EAAgB+8B,GAASA,EAAOxuC,EAAIyR,EAAS,EAAGzR,GAAKwuC,EAC1E95B,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAI8S,GAAOzS,KAAK41C,GAAGjsC,EAAO/J,EAAIA,IACzD0U,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAI+S,GAAO1S,KAAK41C,GAAGjsC,EAAO/J,EAAIA,IAG7D,OADA00C,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,OAAQlwB,EAAO,EACnD,EAiBAwH,EAAa/jB,UAAUwpB,OAAS,SAAU1nB,EAAQyH,EAAOC,EAAQ88B,EAAOC,EAAOhqB,GAG3E,IAFA,IAAIkwB,EAAOt0C,KAAK00C,SAAS,QACrBpgC,EAAI,GACC3U,GAAKF,KAAK4uC,KAAc,GAARj9B,EAAe+8B,GAASA,EAAOxuC,EAAIyR,EAAQ,EAAGzR,GAAKwuC,EACxE,IAAK,IAAIvuC,GAAKH,KAAK4uC,KAAe,GAATh9B,EAAgB+8B,GAASA,EAAOxuC,EAAIyR,EAAS,EAAGzR,GAAKwuC,EAE1E95B,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAIA,GAAK,EAAGK,KAAK41C,GAAGjsC,EAAO/J,EAAIA,IAC1D0U,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAIA,GAAK,EAAGK,KAAK41C,GAAGjsC,EAAO/J,EAAIA,IAC1D0U,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAIA,GAAIK,KAAK41C,GAAGjsC,EAAO/J,EAAIA,GAAK,GAC3D0U,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGhsC,EAAOhK,EAAIA,GAAIK,KAAK41C,GAAGjsC,EAAO/J,EAAIA,GAAK,GAInE,OADA00C,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,SAAUlwB,EAAO,EACrD,EAgBAwH,EAAa/jB,UAAUgqB,cAAgB,SAAUloB,EAAQiU,EAAMwG,GAC3D,IAAIkwB,EAAOt0C,KAAK00C,SAAS,QACrBpgC,EAAI,CACJ,IACAtU,KAAK21C,GAAGhsC,EAAOhK,GAAKie,EAAO,EAC3B5d,KAAK41C,GAAGjsC,EAAO/J,GACf,IACAI,KAAK21C,GAAGhsC,EAAOhK,GACfK,KAAK41C,GAAGjsC,EAAO/J,GAAKge,EAAO,EAC3B,IACA5d,KAAK21C,GAAGhsC,EAAOhK,GAAKie,EAAO,EAC3B5d,KAAK41C,GAAGjsC,EAAO/J,GACf,IACAI,KAAK21C,GAAGhsC,EAAOhK,GACfK,KAAK41C,GAAGjsC,EAAO/J,GAAKge,EAAO,EAC3B,KAGJ,OADA02B,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,gBAAiBlwB,EAAO,EAC5D,EAgBAwH,EAAa/jB,UAAU+pB,aAAe,SAAUjoB,EAAQiU,EAAMwG,GAC1D,IAAIkwB,EAAOt0C,KAAK00C,SAAS,QAKzB,OAJAJ,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK21C,GAAGhsC,EAAOhK,GAAKie,EAAO,IAC5D02B,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAO9L,KAAK41C,GAAGjsC,EAAO/J,GAAKge,EAAO,IAC5D02B,EAAK/nB,aAAa,QAAS,GAAGzgB,OAAO8R,IACrC02B,EAAK/nB,aAAa,SAAU,GAAGzgB,OAAO8R,IAC/B5d,KAAK20C,cAAcL,EAAM,eAAgBlwB,EAAO,EAC3D,EAgBAwH,EAAa/jB,UAAUiqB,aAAe,SAAUnoB,EAAQ0J,EAAQ+Q,GAC5D/Q,EAASA,GAAU,EACnB,IAAIihC,EAAOt0C,KAAK00C,SAAS,UAIzB,OAHAJ,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK21C,GAAGhsC,EAAOhK,KACjD20C,EAAK/nB,aAAa,KAAM,GAAGzgB,OAAO9L,KAAK41C,GAAGjsC,EAAO/J,KACjD00C,EAAK/nB,aAAa,IAAK,GAAGzgB,OAAOuH,IAC1BrT,KAAK20C,cAAcL,EAAM,eAAgBlwB,EAAO,EAC3D,EAeAwH,EAAa/jB,UAAUypB,UAAY,SAAU3nB,EAAQ0J,EAAQ+Q,EAAO+F,GAChE,IAAImqB,EAAOt0C,KAAK00C,SAAS,QACrBpgC,EAAI,CACJ,IACAtU,KAAK21C,GAAGhsC,EAAOhK,GAAK0T,EACpBrT,KAAK41C,GAAGjsC,EAAO/J,GACf,IACAI,KAAK21C,GAAGhsC,EAAOhK,GAAK0T,EACpBrT,KAAK41C,GAAGjsC,EAAO/J,GACf,IACAI,KAAK21C,GAAGhsC,EAAOhK,GACfK,KAAK41C,GAAGjsC,EAAO/J,GAAKyT,EACpB,IACArT,KAAK21C,GAAGhsC,EAAOhK,GACfK,KAAK41C,GAAGjsC,EAAO/J,GAAKyT,GAGxB,OADAihC,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,YAAalwB,EAAO+F,GAAa,GACrE,EAeAyB,EAAa/jB,UAAUrC,MAAQ,SAAUmE,EAAQ0J,EAAQ+Q,EAAO+F,GAC5D,IAAImqB,EAAOt0C,KAAK00C,SAAS,QACrBpgC,EAAI,CACJ,IACAtU,KAAK21C,GAAGhsC,EAAOhK,GAAK0T,EACpBrT,KAAK41C,GAAGjsC,EAAO/J,GAAKyT,EACpB,IACArT,KAAK21C,GAAGhsC,EAAOhK,GAAK0T,EACpBrT,KAAK41C,GAAGjsC,EAAO/J,GAAKyT,EACpB,IACArT,KAAK21C,GAAGhsC,EAAOhK,GAAK0T,EACpBrT,KAAK41C,GAAGjsC,EAAO/J,GAAKyT,EACpB,IACArT,KAAK21C,GAAGhsC,EAAOhK,GAAK0T,EACpBrT,KAAK41C,GAAGjsC,EAAO/J,GAAKyT,GAGxB,OADAihC,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,QAASlwB,EAAO+F,GAAa,EACjE,EAYAyB,EAAa/jB,UAAU2iB,QAAU,SAAUA,EAASpG,EAAO+F,GACvD,OAAOnqB,KAAK+xB,SAASvH,EAAQjY,SAAUiY,EAAQ6O,OAAQjV,EAAO+F,EAClE,EAeAyB,EAAa/jB,UAAUkqB,SAAW,SAAUxf,EAAU8mB,EAAQjV,EAAO+F,EAAW6gB,GAC5E,IAAIsJ,EAAOt0C,KAAK00C,SAAS,QAEzB,GADA10C,KAAK+qC,gBAAgBuJ,EAAMtJ,GACJ,GAAnBz4B,EAAShS,OACT,OAAO+zC,EAKX,IAFA,IAAIhgC,EAAI,CAAC,IAAKtU,KAAK21C,GAAGpjC,EAAS,GAAG5S,GAAIK,KAAK41C,GAAGrjC,EAAS,GAAG3S,IACtDsP,EAAIqD,EAAShS,OACRD,EAAI,EAAGA,EAAI4O,EAAG5O,IACnBgU,EAAElU,KAAK,IAAKJ,KAAK21C,GAAGpjC,EAASjS,GAAGX,GAAIK,KAAK41C,GAAGrjC,EAASjS,GAAGV,IAK5D,OAHKy5B,GACD/kB,EAAElU,KAAK,KACXk0C,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,UAAWlwB,EAAO+F,GAAa,EACnE,EAoBAyB,EAAa/jB,UAAUsc,KAAO,SAAUA,EAAMxkB,EAAGC,EAAGyY,GAChD,IAAIwK,EAAIC,EAAIqD,EAER/B,GADJ/L,EAAUA,GAAW,CAAC,GACF+L,OAAS,QACzBK,GAAqG,QAAtF3B,EAAmC,QAA7BD,EAAKxK,EAAQoM,kBAA+B,IAAP5B,EAAgBA,EAAKxK,EAAQiM,gBAA6B,IAAPxB,EAAgBA,EAAK,GAAK9iB,KAAKsJ,MAAM3J,EAGlJ+kB,EAAkC,SAAtBrM,EAAQqM,WAA8C,UAAtBrM,EAAQqM,UAClD,QACsB,WAAtBrM,EAAQqM,UACJ,SACsB,UAAtBrM,EAAQqM,WAA+C,QAAtBrM,EAAQqM,UACrC,MACA,QACVuU,EAAkB,GAAGntB,OAAO9L,KAAK21C,GAAGh2C,GAAI,OAAOmM,OAAO9L,KAAK41C,GAAGh2C,GAAI,MAClEoJ,EAAY,aAAa8C,OAAO9L,KAAK21C,GAAGh2C,GAAI,KAAKmM,OAAO9L,KAAK41C,GAAGh2C,GAAK6kB,EAAa,EAAG,KAKrFziB,EAASqW,EAAQsM,SAAW,UAAU7Y,OAAOuM,EAAQsM,SAAWmuB,EAAY,SAAW,GACvFwB,EAAOt0C,KAAK00C,SAAS,KACrBpE,EAAQtwC,KAAKswC,MACjBtwC,KAAKswC,MAAQA,EAAQ,QACrB,IAAIsG,EAAW52C,KAAK00C,SAAS,QAc7B,OAbAJ,EAAKloB,YAAYwqB,GACjBA,EAASrqB,aAAa,cAA6C,QAA7BpG,EAAK9N,EAAQgM,kBAA+B,IAAP8B,EAAgBA,EAAK,IAChGywB,EAASrqB,aAAa,YAAalU,EAAQiM,SAAW,GAAGxY,OAAOuM,EAAQiM,SAAWtkB,KAAKsJ,MAAM3J,GAAK,IACnGi3C,EAASrqB,aAAa,aAAclU,EAAQkM,UAAY,GAAGzY,OAAOuM,EAAQkM,WAAa,IACvFqyB,EAASrqB,aAAa,cAAelU,EAAQmM,WAAa,GAAG1Y,OAAOuM,EAAQmM,YAAc,IAC1FoyB,EAASrqB,aAAa,cAAe7H,GACrCkyB,EAASrqB,aAAa,mBAAoB,OAC1CqqB,EAASrqB,aAAa,YAAavqB,GACnCsyC,EAAK/nB,aAAa,mBAAoB0M,GACtCqb,EAAK/nB,aAAa,YAAavjB,GAC/B4tC,EAAS3C,UAAY9vB,EAErBnkB,KAAKswC,MAAQA,EACNtwC,KAAK20C,cAAcL,EAAM,OAAQlwB,EAAO,EACnD,EAcAwH,EAAa/jB,UAAU+mC,MAAQ,SAAUzqB,EAAMxkB,EAAGC,EAAG+kB,EAAUP,GAC3D,IAAIkwB,EAAOt0C,KAAK00C,SAAS,QAQzB,OANAJ,EAAK/nB,aAAa,YAAa,aAAazgB,OAAOnM,EAAG,KAAKmM,OAAOlM,EAAG,cAAckM,QAAS6Y,GAAY,GAAKllB,KAAKgG,GAAM,IAAK,MAC7H6uC,EAAK/nB,aAAa,cAAe,SACjC+nB,EAAK/nB,aAAa,YAAa,OAC/B+nB,EAAK/nB,aAAa,aAAc,UAChC+nB,EAAK/nB,aAAa,cAAe,WACjC+nB,EAAKL,UAAY9vB,EACVnkB,KAAK20C,cAAcL,EAAM,QAASlwB,GAAS,QAAS,KAC/D,EAgBAwH,EAAa/jB,UAAUmE,KAAO,SAAU2M,EAAUyL,EAAO+F,EAAW9R,GAChE,IAAIi8B,EAAOt0C,KAAK00C,SAAS,QACzB10C,KAAK+qC,gBAAgBuJ,EAAMj8B,GAE3B,IAAI/D,EAAI+D,GAAWA,EAAQw2B,QAAUl2B,EAAWiT,EAAakjB,aAAan2B,GAG1E,OAFAiT,EAAamjB,kBAAkBz6B,EAAGtU,KAAKqtB,OAAQrtB,KAAKsJ,OACpDgrC,EAAK/nB,aAAa,IAAKjY,EAAEzE,KAAK,MACvB7P,KAAK20C,cAAcL,EAAM,OAAQlwB,EAAO+F,EACnD,EAYAyB,EAAa/jB,UAAU2lB,MAAQ,SAAUpJ,GAGrC,IAAIpkB,KAAK+yC,YAAT,CAIA/yC,KAAKswC,MAAQ,aACbtwC,KAAKg1C,aAAe,KACpB,IAAIV,EAAOt0C,KAAK00C,SAAS,QAGzBJ,EAAK/nB,aAAa,IAAK,KACvB+nB,EAAK/nB,aAAa,IAAK,KACvB+nB,EAAK/nB,aAAa,QAAS,GAAGzgB,OAAO9L,KAAKirB,WAAW7Z,QACrDkjC,EAAK/nB,aAAa,SAAU,GAAGzgB,OAAO9L,KAAKirB,WAAW5Z,SAEtDrR,KAAK20C,cAAcL,EAAMt0C,KAAKswC,MAAO,KAAM,MAC3CgE,EAAK/nB,aAAa,YAAyB,IAAVnI,EAAwB,OAASA,GAElEpkB,KAAKswC,MAAQ,IAfb,CAgBJ,EAMA1kB,EAAa/jB,UAAUwtC,oBAAsB,WACzC,KAAOr1C,KAAKizC,YAAY4D,WACpB72C,KAAKizC,YAAY6D,YAAY92C,KAAKizC,YAAY4D,WAElD,KAAO72C,KAAKwzC,iBAAiBqD,WACzB72C,KAAKwzC,iBAAiBsD,YAAY92C,KAAKwzC,iBAAiBqD,UAEhE,EASAjrB,EAAamrB,UAAY,WACrB,OAAO51C,SAASgsB,gBAAgB,6BAA8B,MAClE,EASAvB,EAAakjB,aAAe,SAAU1c,GAElC,IADA,IAAIie,EAAO,IAAIjgC,MAAMgiB,EAAK7xB,QACjBD,EAAI,EAAG4O,EAAIkjB,EAAK7xB,OAAQD,EAAI4O,EAAG5O,IACpC+vC,EAAK/vC,GAAK8xB,EAAK9xB,GAEnB,OAAO+vC,CACX,EAWAzkB,EAAamjB,kBAAoB,SAAU3c,EAAM/E,EAAQ/jB,GAsBrD,IApBA,IAAI0tC,EAAO,SAAUxd,GACjBpH,EAAKoH,GAASnM,EAAO1tB,EAAI2J,EAAM3J,EAAI6O,OAAO4jB,EAAKoH,GACnD,EACIyd,EAAO,SAAUzd,GACjBpH,EAAKoH,GAASnM,EAAOztB,EAAI0J,EAAM1J,EAAI4O,OAAO4jB,EAAKoH,GACnD,EAEI0d,EAAM,SAAU1d,GAChBpH,EAAKoH,GAASlwB,EAAM3J,EAAI6O,OAAO4jB,EAAKoH,GACxC,EACI2d,EAAM,SAAU3d,GAChBpH,EAAKoH,GAASlwB,EAAM1J,EAAI4O,OAAO4jB,EAAKoH,GACxC,EACIl5B,EAAI,EACJ82C,EAAY,CAAEz3C,EAAG+d,IAAK9d,EAAG8d,KAEzB25B,EAAO,SAAU7d,GACjB4d,EAAUz3C,EAAI6O,OAAO4jB,EAAKoH,IAC1B4d,EAAUx3C,EAAI4O,OAAO4jB,EAAKoH,EAAQ,GACtC,EACOl5B,EAAI8xB,EAAK7xB,QAEZ,OADU6xB,EAAK9xB,IAEX,IAAK,IAEL,IAAK,IAEL,IAAK,IAED02C,EAAK12C,EAAI,GACT22C,EAAK32C,EAAI,GACT+2C,EAAK/2C,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAEL,IAAK,IAEL,IAAK,IAED42C,EAAI52C,EAAI,GACR62C,EAAI72C,EAAI,GACR+2C,EAAK/2C,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAED02C,EAAK12C,EAAI,GACT82C,EAAUz3C,EAAI6O,OAAO4jB,EAAK9xB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAED42C,EAAI52C,EAAI,GACR82C,EAAUz3C,EAAI6O,OAAO4jB,EAAK9xB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAED22C,EAAK32C,EAAI,GACT82C,EAAUx3C,EAAI4O,OAAO4jB,EAAK9xB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAED62C,EAAI72C,EAAI,GACR82C,EAAUx3C,EAAI4O,OAAO4jB,EAAK9xB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAED02C,EAAK12C,EAAI,GACT22C,EAAK32C,EAAI,GACT02C,EAAK12C,EAAI,GACT22C,EAAK32C,EAAI,GACT02C,EAAK12C,EAAI,GACT22C,EAAK32C,EAAI,GACT+2C,EAAK/2C,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAED42C,EAAI52C,EAAI,GACR62C,EAAI72C,EAAI,GACR42C,EAAI52C,EAAI,GACR62C,EAAI72C,EAAI,GACR42C,EAAI52C,EAAI,GACR62C,EAAI72C,EAAI,GACR+2C,EAAK/2C,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IACL,IAAK,IAGD02C,EAAK12C,EAAI,GACT22C,EAAK32C,EAAI,GACT02C,EAAK12C,EAAI,GACT22C,EAAK32C,EAAI,GACT+2C,EAAK/2C,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IACL,IAAK,IAGD42C,EAAI52C,EAAI,GACR62C,EAAI72C,EAAI,GACR42C,EAAI52C,EAAI,GACR62C,EAAI72C,EAAI,GACR+2C,EAAK/2C,EAAI,GACTA,GAAK,EACL,MAC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","sources":["webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/alloy_finger.js","webpack://plotboilerplate/./node_modules/alloyfinger-typescript/src/esm/index.js","webpack://plotboilerplate/./src/cjs/BezierPath.js","webpack://plotboilerplate/./src/cjs/Bounds.js","webpack://plotboilerplate/./src/cjs/Circle.js","webpack://plotboilerplate/./src/cjs/CircleSector.js","webpack://plotboilerplate/./src/cjs/CubicBezierCurve.js","webpack://plotboilerplate/./src/cjs/Grid.js","webpack://plotboilerplate/./src/cjs/KeyHandler.js","webpack://plotboilerplate/./src/cjs/Line.js","webpack://plotboilerplate/./src/cjs/MouseHandler.js","webpack://plotboilerplate/./src/cjs/PBImage.js","webpack://plotboilerplate/./src/cjs/PBText.js","webpack://plotboilerplate/./src/cjs/PlotBoilerplate.js","webpack://plotboilerplate/./src/cjs/Polygon.js","webpack://plotboilerplate/./src/cjs/Triangle.js","webpack://plotboilerplate/./src/cjs/UIDGenerator.js","webpack://plotboilerplate/./src/cjs/VEllipse.js","webpack://plotboilerplate/./src/cjs/VEllipseSector.js","webpack://plotboilerplate/./src/cjs/Vector.js","webpack://plotboilerplate/./src/cjs/VertTuple.js","webpack://plotboilerplate/./src/cjs/Vertex.js","webpack://plotboilerplate/./src/cjs/VertexAttr.js","webpack://plotboilerplate/./src/cjs/VertexListeners.js","webpack://plotboilerplate/./src/cjs/draw.js","webpack://plotboilerplate/./src/cjs/drawgl.js","webpack://plotboilerplate/./src/cjs/drawutilssvg.js","webpack://plotboilerplate/./src/cjs/geomutils.js","webpack://plotboilerplate/webpack/bootstrap","webpack://plotboilerplate/webpack/runtime/define property getters","webpack://plotboilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://plotboilerplate/webpack/runtime/make namespace object","webpack://plotboilerplate/./src/cjs/entry.js"],"sourcesContent":["/* Port from AlloyFinger v0.1.15\n * Original by dntzhang\n * Typescript port by Ikaros Kappler\n * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n *\n * @date    2021-02-10 (Typescript port)\n * @version 0.1.18\n */\n;\n/**\n * Tiny math function to calculate the length of a vector in euclidean space.\n *\n * @param {XYCoords} v - The vector in {x,y} notation.\n * @return {number} The length of the vector.\n */\nconst getLen = (v) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n};\n/**\n * Tiny math function to calculate the dot product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The dot product of both vectors.\n */\nconst dot = (v1, v2) => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n/**\n * Tiny math function to calculate the angle between two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The angle (in radians) between the two vectors.\n */\nconst getAngle = (v1, v2) => {\n    const mr = getLen(v1) * getLen(v2);\n    if (mr === 0)\n        return 0;\n    var r = dot(v1, v2) / mr;\n    if (r > 1)\n        r = 1;\n    return Math.acos(r);\n};\n/**\n * Tiny math function to calculate the cross product of two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The cross product of both vectors.\n */\nconst cross = (v1, v2) => {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n/**\n * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n *\n * @param {XYCoords} v1 - The first vector in {x,y} notation.\n * @param {XYCoords} v2 - The second vector in {x,y} notation.\n * @return {number} The rotate-angle in degrees for the two vectors.\n */\nconst getRotateAngle = (v1, v2) => {\n    var angle = getAngle(v1, v2);\n    if (cross(v1, v2) > 0) {\n        angle *= -1;\n    }\n    return angle * 180 / Math.PI;\n};\n/**\n * A HandlerAdmin holds all the added event handlers for one kind of event type.\n */\nclass HandlerAdmin {\n    constructor(el) {\n        this.handlers = [];\n        this.el = el;\n    }\n    ;\n    add(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    del(handler) {\n        if (!handler)\n            this.handlers = [];\n        for (var i = this.handlers.length; i >= 0; i--) {\n            if (this.handlers[i] === handler) {\n                this.handlers.splice(i, 1);\n            }\n        }\n    }\n    ;\n    dispatch(..._args) {\n        for (var i = 0, len = this.handlers.length; i < len; i++) {\n            const handler = this.handlers[i];\n            if (typeof handler === 'function') {\n                handler.apply(this.el, arguments);\n            }\n        }\n    }\n    ;\n} // END class HandlerAdmin\n/**\n * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n */\nconst wrapFunc = (el, handler) => {\n    const handlerAdmin = new HandlerAdmin(el);\n    handlerAdmin.add(handler);\n    return handlerAdmin;\n};\n/**\n * @classdesc The AlloyFinger main class. Use this to add handler functions for\n *            touch events to any HTML- or SVG-Element.\n **/\nexport class AlloyFinger {\n    constructor(el, option) {\n        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n        this.start = this.start.bind(this);\n        this.move = this.move.bind(this);\n        this.end = this.end.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.element.addEventListener(\"touchstart\", this.start, false);\n        this.element.addEventListener(\"touchmove\", this.move, false);\n        this.element.addEventListener(\"touchend\", this.end, false);\n        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n        this.preV = { x: null, y: null };\n        this.pinchStartLen = null;\n        this.zoom = 1;\n        this.isDoubleTap = false;\n        const noop = () => { };\n        this.rotate = wrapFunc(this.element, option.rotate || noop);\n        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n        this.pinch = wrapFunc(this.element, option.pinch || noop);\n        this.swipe = wrapFunc(this.element, option.swipe || noop);\n        this.tap = wrapFunc(this.element, option.tap || noop);\n        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n        this.longTap = wrapFunc(this.element, option.longTap || noop);\n        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n        this._cancelAllHandler = this.cancelAll.bind(this);\n        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n            globalThis.addEventListener('scroll', this._cancelAllHandler);\n        }\n        this.delta = null;\n        this.last = null;\n        this.now = null;\n        this.tapTimeout = null;\n        this.singleTapTimeout = null;\n        this.longTapTimeout = null;\n        this.swipeTimeout = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n        this.preTapPosition = { x: null, y: null };\n    }\n    ;\n    start(evt) {\n        if (!evt.touches)\n            return;\n        const _self = this;\n        this.now = Date.now();\n        this.x1 = evt.touches[0].pageX;\n        this.y1 = evt.touches[0].pageY;\n        this.delta = this.now - (this.last || this.now);\n        this.touchStart.dispatch(evt, this.element);\n        if (this.preTapPosition.x !== null) {\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n            if (this.isDoubleTap)\n                clearTimeout(this.singleTapTimeout);\n        }\n        this.preTapPosition.x = this.x1;\n        this.preTapPosition.y = this.y1;\n        this.last = this.now;\n        const preV = this.preV;\n        const len = evt.touches.length;\n        if (len > 1) {\n            this._cancelLongTap();\n            this._cancelSingleTap();\n            const v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n            preV.x = v.x;\n            preV.y = v.y;\n            this.pinchStartLen = getLen(preV);\n            this.multipointStart.dispatch(evt, this.element);\n        }\n        this._preventTap = false;\n        this.longTapTimeout = setTimeout((() => {\n            _self.longTap.dispatch(evt, _self.element);\n            _self._preventTap = true;\n        }).bind(_self), 750);\n    }\n    ;\n    move(event) {\n        if (!event.touches)\n            return;\n        const afEvent = event;\n        const preV = this.preV;\n        const len = event.touches.length;\n        const currentX = event.touches[0].pageX;\n        const currentY = event.touches[0].pageY;\n        this.isDoubleTap = false;\n        if (len > 1) {\n            const sCurrentX = afEvent.touches[1].pageX;\n            const sCurrentY = afEvent.touches[1].pageY;\n            const v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n            if (preV.x !== null) {\n                if (this.pinchStartLen > 0) {\n                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n                    this.pinch.dispatch(afEvent, this.element);\n                }\n                afEvent.angle = getRotateAngle(v, preV);\n                this.rotate.dispatch(afEvent, this.element);\n            }\n            preV.x = v.x;\n            preV.y = v.y;\n            if (this.x2 !== null && this.sx2 !== null) {\n                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.twoFingerPressMove.dispatch(afEvent, this.element);\n            this.sx2 = sCurrentX;\n            this.sy2 = sCurrentY;\n        }\n        else {\n            if (this.x2 !== null) {\n                afEvent.deltaX = currentX - this.x2;\n                afEvent.deltaY = currentY - this.y2;\n                //move事件中添加对当前触摸点到初始触摸点的判断，\n                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n                //\n                // translation:\n                //    Add the judgment of the current touch point to the initial touch point in the event,\n                //    If it has been greater than a certain distance (such as 10), it is considered to be\n                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n                const movedX = Math.abs(this.x1 - this.x2);\n                const movedY = Math.abs(this.y1 - this.y2);\n                if (movedX > 10 || movedY > 10) {\n                    this._preventTap = true;\n                }\n            }\n            else {\n                afEvent.deltaX = 0;\n                afEvent.deltaY = 0;\n            }\n            this.pressMove.dispatch(afEvent, this.element);\n        }\n        this.touchMove.dispatch(afEvent, this.element);\n        this._cancelLongTap();\n        this.x2 = currentX;\n        this.y2 = currentY;\n        if (len > 1) {\n            event.preventDefault();\n        }\n    }\n    ; // END move\n    end(event) {\n        if (!event.changedTouches)\n            return;\n        const afEvent = event;\n        this._cancelLongTap();\n        const self = this;\n        if (afEvent.touches.length < 2) {\n            this.multipointEnd.dispatch(afEvent, this.element);\n            this.sx2 = this.sy2 = null;\n        }\n        //swipe\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n            this.swipeTimeout = setTimeout(function () {\n                self.swipe.dispatch(afEvent, self.element);\n            }, 0);\n        }\n        else {\n            this.tapTimeout = setTimeout(function () {\n                if (!self._preventTap) {\n                    self.tap.dispatch(afEvent, self.element);\n                }\n                // trigger double tap immediately\n                if (self.isDoubleTap) {\n                    self.doubleTap.dispatch(afEvent, self.element);\n                    self.isDoubleTap = false;\n                }\n            }, 0);\n            if (!self.isDoubleTap) {\n                self.singleTapTimeout = setTimeout(function () {\n                    self.singleTap.dispatch(afEvent, self.element);\n                }, 250);\n            }\n        }\n        this.touchEnd.dispatch(afEvent, this.element);\n        this.preV.x = 0;\n        this.preV.y = 0;\n        this.zoom = 1;\n        this.pinchStartLen = null;\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\n    }\n    ; // END end\n    cancelAll() {\n        this._preventTap = true;\n        clearTimeout(this.singleTapTimeout);\n        clearTimeout(this.tapTimeout);\n        clearTimeout(this.longTapTimeout);\n        clearTimeout(this.swipeTimeout);\n    }\n    ;\n    cancel(evt) {\n        this.cancelAll();\n        this.touchCancel.dispatch(evt, this.element);\n    }\n    ;\n    _cancelLongTap() {\n        clearTimeout(this.longTapTimeout);\n    }\n    ;\n    _cancelSingleTap() {\n        clearTimeout(this.singleTapTimeout);\n    }\n    ;\n    _swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n    }\n    ;\n    on(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.add(handler);\n        }\n    }\n    ;\n    off(evt, handler) {\n        if (this[evt]) {\n            // Force the generic parameter into it's expected candidate here ;)\n            const admin = this[evt];\n            admin.del(handler);\n        }\n    }\n    ;\n    destroy() {\n        if (this.singleTapTimeout) {\n            clearTimeout(this.singleTapTimeout);\n        }\n        if (this.tapTimeout) {\n            clearTimeout(this.tapTimeout);\n        }\n        if (this.longTapTimeout) {\n            clearTimeout(this.longTapTimeout);\n        }\n        if (this.swipeTimeout) {\n            clearTimeout(this.swipeTimeout);\n        }\n        this.element.removeEventListener(\"touchstart\", this.start);\n        this.element.removeEventListener(\"touchmove\", this.move);\n        this.element.removeEventListener(\"touchend\", this.end);\n        this.element.removeEventListener(\"touchcancel\", this.cancel);\n        this.rotate.del();\n        this.touchStart.del();\n        this.multipointStart.del();\n        this.multipointEnd.del();\n        this.pinch.del();\n        this.swipe.del();\n        this.tap.del();\n        this.doubleTap.del();\n        this.longTap.del();\n        this.singleTap.del();\n        this.pressMove.del();\n        this.twoFingerPressMove.del();\n        this.touchMove.del();\n        this.touchEnd.del();\n        this.touchCancel.del();\n        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n        }\n    }\n    ; // END destroy\n}\n;\nexport default AlloyFinger;\n//# sourceMappingURL=alloy_finger.js.map","/**\n * TypeScript port by Ikaros Kappler.\n *\n * Original file from https://github.com/AlloyTeam/AlloyFinger\n *\n * @date 2021-02-10\n */\nimport { AlloyFinger } from './alloy_finger';\nexport { AlloyFinger };\nexport default AlloyFinger;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @modified 2022-01-31 Added `BezierPath.getEvenDistributionVertices(number)`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2023-10-06 Adding the `BezierPath.toPathPoints()` method.\n * @modified 2023-10-07 Adding the `BezierPath.fromCurve(CubicBezierCurve)` static function.\n * @modified 2025-04-09 Added the `BezierPath.move` method to match the convention – which just calls `translate`.\n * @modified 2025-04-09 Modified the `BezierPath.translate` method: chaning parameter `Vertex` to more generalized `XYCoords`.\n * @modified 2025-04-14 Class `BezierPath` is now implementing interface `Intersectable`.\n * @version 2.7.0\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BezierPath = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath() {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        // pathPoints: Array<Vertex> | undefined | null) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        // if (!pathPoints) {\n        //   pathPoints = [];\n        // }\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.move = function (amount) {\n        return this.translate(amount);\n    };\n    /**\n     * Scale the whole bezier path by the given uniform factor.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} scaleFactor - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaleFactor) {\n        return this.scaleXY({ x: scaleFactor, y: scaleFactor }, anchor);\n    };\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scaleXY = function (scaleFactors, anchor) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scaleXY(scaleFactors, anchor);\n            curve.getStartControlPoint().scaleXY(scaleFactors, anchor);\n            curve.getEndControlPoint().scaleXY(scaleFactors, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scaleXY(scaleFactors, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this shape.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the shape's outline.\n     */\n    BezierPath.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        return this.bezierCurves.reduce(function (accu, curCurve) {\n            return accu.concat(curCurve.lineIntersections(line, inVectorBoundsOnly));\n        }, []);\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    BezierPath.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        return this.bezierCurves.reduce(function (accu, curCurve) {\n            return accu.concat(curCurve.lineIntersectionTangents(line, inVectorBoundsOnly));\n        }, []);\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.adjustNeighbourControlPoint = function (_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get n 'equally' distributed vertices along this Bézier path.\n     *\n     * As the changing curvature of the B slines makes prediction of distances difficult, the\n     * returned vertices' distances are only relatively equal:\n     *  - the distance grows where curvature is large.\n     *  - the distance shrinks where curvature is small.\n     *\n     * Only the distance mean of all consecutive is 1/n-th of the total arc length.\n     *\n     * Usually this approximation is good enough for most use cases.\n     *\n     * @param {number} pointCount - (must be at least 2) The number of desired points (start and end point included).\n     * @return {Array<Vertex>}\n     */\n    BezierPath.prototype.getEvenDistributionVertices = function (pointCount) {\n        if (pointCount < 2) {\n            throw new Error(\"pointCount must be larger than one; is \" + pointCount + \".\");\n        }\n        var result = [];\n        if (this.bezierCurves.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex_1.Vertex(this.bezierCurves[0].startPoint);\n        result.push(polygonPoint);\n        // if (this.bezierCurves.length === 1) {\n        //   return result;\n        // }\n        var perimeter = this.totalArcLength;\n        var stepSize = perimeter / (pointCount - 1);\n        var n = this.bezierCurves.length;\n        var curveIndex = 0;\n        var segmentLength = this.bezierCurves[0].arcLength;\n        var curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && curveIndex < n) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = this.bezierCurves[curveIndex].getPoint(curSegmentU);\n                result.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                curveIndex++;\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = curveIndex < n ? this.bezierCurves[curveIndex].arcLength : 0;\n            }\n        }\n        result.push(new Vertex_1.Vertex(this.bezierCurves[n - 1].endPoint));\n        return result;\n    };\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(); // undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof BezierPath\n     */\n    BezierPath.prototype.destroy = function () {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].destroy();\n        }\n        this.isDestroyed = true;\n    };\n    /**\n     * Convert this path to an array of path points that can be drawn by the default DrawLib\n     * implementations.\n     *\n     * @method toPathPoints\n     * @instance\n     * @memberof BezierPath\n     * @return {Array<XYCoords>}\n     */\n    BezierPath.prototype.toPathPoints = function () {\n        if (this.bezierCurves.length === 0) {\n            return [];\n        }\n        if (this.bezierCurves.length === 1) {\n            return [\n                this.bezierCurves[0].startPoint,\n                this.bezierCurves[0].startControlPoint,\n                this.bezierCurves[0].endControlPoint,\n                this.bezierCurves[0].endPoint\n            ];\n        }\n        var arr = [];\n        arr.push(this.bezierCurves[0].startPoint);\n        arr.push(this.bezierCurves[0].startControlPoint);\n        for (var i = 1; i < this.bezierCurves.length; i++) {\n            arr.push(this.bezierCurves[i - 1].endControlPoint);\n            arr.push(this.bezierCurves[i - 1].endPoint);\n            arr.push(this.bezierCurves[i].startPoint);\n            arr.push(this.bezierCurves[i].startControlPoint);\n        }\n        arr.push(this.bezierCurves[0].endControlPoint);\n        arr.push(this.bezierCurves[0].endPoint);\n        return arr;\n    };\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    /**\n     * Construct a new path with a single curve. Adding more curves is always possible.\n     *\n     * @method fromCurve\n     * @param {CubicBezierCurve} curve - The curve to construct a new path from.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The constructed bezier path instance.\n     */\n    BezierPath.fromCurve = function (curve) {\n        var path = new BezierPath(); // []);\n        path.addCurve(curve);\n        return path;\n    };\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj)) {\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        }\n        var arr = obj; // FORCE?\n        if (arr.length < 1) {\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        }\n        // Create an empty bezier path\n        var bPath = new BezierPath(); // undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    };\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    BezierPath.fromReducedList = function (pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(); // null); // No points yet\n        var startPoint = new Vertex_1.Vertex();\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular !== null && adjustCircular !== void 0 ? adjustCircular : false;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @modified 2022-02-01 Added the `toString` function.\n * @modified 2022-10-09 Added the `fromDimension` function.\n * @modified 2022-11-28 Added the `clone` method.\n * @modified 2023-09-29 Added the `randomPoint` method.\n * @modified 2025-03-23 Added the `getMinDimension` and `getMaxDimension` methods.\n * @modified 2025-04-18 Change parameter type in `Bounds.computeFromVertices` from `Vertex` to more general `XYCoords`.\n * @modified 2025-04-19 Added methods to `Bounds` class: `getNorthPoint`, `getSouthPoint`, `getEastPoint` and `getWestPoint`.\n * @modified 2025-04-26 Added static method `Bounds.computeFromBoundsSet` to calculate containing bounds for a set of bounding boxes.\n * @version  1.8.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bounds = void 0;\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Get the center point of the north bound.\n     *\n     * @method getNorthPoint\n     * @instance\n     * @memberof Bounds\n     * @return {Vertex} The \"northmost\" centered point of this bounding box.\n     */\n    Bounds.prototype.getNorthPoint = function () {\n        return new Vertex_1.Vertex(this.min.x + this.width / 2.0, this.min.y);\n    };\n    ;\n    /**\n     * Get the center point of the south bound.\n     *\n     * @method getNorthPoint\n     * @instance\n     * @memberof Bounds\n     * @return {Vertex} The \"southhmost\" centered point of this bounding box.\n     */\n    Bounds.prototype.getSouthPoint = function () {\n        return new Vertex_1.Vertex(this.min.x + this.width / 2.0, this.max.y);\n    };\n    ;\n    /**\n    * Get the center point of the west bound.\n    *\n    * @method getWestPoint\n    * @instance\n    * @memberof Bounds\n    * @return {Vertex} The \"westhmost\" centered point of this bounding box.\n    */\n    Bounds.prototype.getWestPoint = function () {\n        return new Vertex_1.Vertex(this.min.x, this.min.y + this.height / 2.0);\n    };\n    ;\n    /**\n    * Get the center point of the east bound.\n    *\n    * @method getEastPoint\n    * @instance\n    * @memberof Bounds\n    * @return {Vertex} The \"easthmost\" centered point of this bounding box.\n    */\n    Bounds.prototype.getEastPoint = function () {\n        return new Vertex_1.Vertex(this.max.x, this.min.y + this.height / 2.0);\n    };\n    ;\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    Bounds.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([new Vertex_1.Vertex(this.min), new Vertex_1.Vertex(this.max.x, this.min.y), new Vertex_1.Vertex(this.max), new Vertex_1.Vertex(this.min.x, this.max.y)], false);\n    };\n    /**\n     * Get the center of this boinding box.\n     *\n     * @method getCenter\n     * @instance\n     * @memberof Bounds\n     * @returns {Vertex} The center of these bounds.\n     */\n    Bounds.prototype.getCenter = function () {\n        return new Vertex_1.Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    };\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    Bounds.prototype.getMinDimension = function () {\n        return Math.min(this.width, this.height);\n    };\n    /**\n     * Get the minimum of `width` and `height`.\n     *\n     * @returns {number} The value of Math.min( this.width, this.height )\n     */\n    Bounds.prototype.getMaxDimension = function () {\n        return Math.max(this.width, this.height);\n    };\n    /**\n     * Generate a random point inside this bounds object. Safe areas at the border to avoid\n     * included.\n     *\n     * @method randomPoint\n     * @instance\n     * @memberof Bounds\n     * @param {horizontalSafeArea} - (optional) The horizonal (left and right) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval.\n     * @param {verticalSafeArea} - (optional) The vertical (top and bottom) safe area. No vertex will be created here. Can be used as percent in (0.0 ... 0.1) interval\n     * @returns {Vertex} A pseudo random point inside these bounds.\n     */\n    Bounds.prototype.randomPoint = function (horizontalSafeArea, verticalSafeArea) {\n        if (horizontalSafeArea === void 0) { horizontalSafeArea = 0; }\n        if (verticalSafeArea === void 0) { verticalSafeArea = 0; }\n        // Check if the safe areas are meant as percent\n        var absHorizontalSafeArea = horizontalSafeArea > 0 && horizontalSafeArea < 1 ? this.width * horizontalSafeArea : horizontalSafeArea;\n        var absVerticalSafeArea = verticalSafeArea > 0 && verticalSafeArea < 1 ? this.height * verticalSafeArea : verticalSafeArea;\n        return new Vertex_1.Vertex(this.min.x + absHorizontalSafeArea + Math.random() * (this.width - 2 * absHorizontalSafeArea), this.min.y + absVerticalSafeArea + Math.random() * (this.height - 2 * absVerticalSafeArea));\n    };\n    /**\n     * Convert these bounds to a human readable form.\n     *\n     * Note: the returned format might change in the future, so please do not\n     * rely on the returned string format.\n     *\n     * @method toString\n     * @instance\n     * @memberof Bounds\n     * @returns {string} Get these bounds in a human readable form.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{ min: \".concat(this.min.toString(), \", max : \").concat(this.max.toString(), \", width: \").concat(this.width, \", height : \").concat(this.height, \" }\");\n    };\n    /**\n     * Clone this bounds object (create a deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof Bounds\n     * @returns {Bounds} Creates a deep clone of this bounds object.\n     */\n    Bounds.prototype.clone = function () {\n        return new Bounds({ x: this.min.x, y: this.min.y }, { x: this.max.x, y: this.max.y });\n    };\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<XYCoords>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    Bounds.computeFromVertices = function (vertices) {\n        if (vertices.length == 0) {\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        }\n        var xMin = vertices[0].x;\n        var xMax = vertices[0].x;\n        var yMin = vertices[0].y;\n        var yMax = vertices[0].y;\n        var vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    /**\n    * Compute the minimal bounding box for a given set of existing bounding boxes.\n    *\n    * An empty vertex array will return an empty bounding box located at (0,0).\n    *\n    * @static\n    * @method computeFromBoundsSet\n    * @memberof Bounds\n    * @param {Array<IBounds>} boundingBoxes - The set of existing bounding boxes to get the containing bounding box for.\n    * @return The minimal Bounds for the given bounds instances.\n    **/\n    Bounds.computeFromBoundsSet = function (boundingBoxes) {\n        if (boundingBoxes.length == 0) {\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        }\n        var xMin = boundingBoxes[0].min.x;\n        var xMax = boundingBoxes[0].max.x;\n        var yMin = boundingBoxes[0].min.y;\n        var yMax = boundingBoxes[0].min.y;\n        var bounds;\n        for (var i in boundingBoxes) {\n            bounds = boundingBoxes[i];\n            xMin = Math.min(xMin, bounds.min.x);\n            xMax = Math.max(xMax, bounds.max.x);\n            yMin = Math.min(yMin, bounds.min.y);\n            yMax = Math.max(yMax, bounds.min.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    /**\n     * Create a new `Bounds` instance just from `width` and `height`, located at (0,0) or the optionally given origin.\n     *\n     * @param {number} width - The width of the bounds\n     * @param {number} height  - The height of the bounds\n     * @param {XYCoords={x:0,y:0}} origin - [optional] A origin to locate the new Bounds object at.\n     * @returns {Bounds} A new `Bounds` instance width given width and height, located at (0,0) or the given origin..\n     */\n    Bounds.fromDimension = function (width, height, origin) {\n        return new Bounds(origin !== null && origin !== void 0 ? origin : { x: 0, y: 0 }, { x: (origin ? origin.x : 0) + width, y: (origin ? origin.y : 0) + height });\n    };\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-08-15 Added the `containsPoint` function.\n * @modified 2022-08-23 Added the `lineIntersection` function.\n * @modified 2022-08-23 Added the `closestPoint` function.\n * @modified 2025-04-09 Added the `Circle.move(amount: XYCoords)` method.\n * @modified 2025-04-16 Class `Circle` now implements interface `Intersectable`.\n * @version  1.5.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Circle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    /**\n     * Move the circle by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Circle\n     * @return {Circle} this for chaining\n     **/\n    Circle.prototype.move = function (amount) {\n        this.center.add(amount);\n        return this;\n    };\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsPoint\n     * @param {XYCoords} point - The point to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if the given point is inside this circle.\n     */\n    Circle.prototype.containsPoint = function (point) {\n        return this.center.distance(point) < this.radius;\n    };\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    Circle.prototype.containsCircle = function (circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n        // return (new Vector(this.center.clone(), pointA).add(pointA) as Vector).perp() as Vector;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the bounding box (bounds) of this Circle.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Circle\n     * @return {Bounds} The rectangular bounds of this Circle.\n     **/\n    Circle.prototype.getBounds = function () {\n        return new Bounds_1.Bounds(this.center.clone().subXY(Math.abs(this.radius), Math.abs(this.radius)), this.center.clone().addXY(Math.abs(this.radius), Math.abs(this.radius)));\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // }\n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + (h * (p1.y - p0.y)) / d;\n        var y3 = p2.y - (h * (p1.x - p0.x)) / d;\n        var x4 = p2.x - (h * (p1.y - p0.y)) / d;\n        var y4 = p2.y + (h * (p1.x - p0.x)) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    /**\n     * Calculate the intersection points (if exists) with the given infinite line (defined by two points).\n     *\n     * @method lineIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Vertex} a- The first of the two points defining the line.\n     * @param {XYCoords} b - The second of the two points defining the line.\n     * @return {Line|null} The intersection points (as a line) or null if this circle does not intersect the line given.\n     **/\n    Circle.prototype.lineIntersection = function (a, b) {\n        // Based on the math from\n        //    https://mathworld.wolfram.com/Circle-LineIntersection.html\n        var interA = new Vertex_1.Vertex();\n        var interB = new Vertex_1.Vertex();\n        // First do a transformation, because the calculation is based on a cicle at (0,0)\n        var transA = new Vertex_1.Vertex(a).sub(this.center);\n        var transB = new Vertex_1.Vertex(b).sub(this.center);\n        var diff = transA.difference(transB);\n        // There is a special case if diff.y=0, where the intersection is not calcuatable.\n        // Use an non-zero epsilon here to approximate this case.\n        // TODO for the future: find a better solution\n        if (Math.abs(diff.y) === 0) {\n            diff.y = 0.000001;\n        }\n        var dist = transA.distance(transB);\n        var det = transA.x * transB.y - transA.y * transB.x;\n        var distSquared = dist * dist;\n        var radiusSquared = this.radius * this.radius;\n        // Check if circle and line have an intersection at all\n        if (radiusSquared * distSquared - det * det < 0) {\n            return null;\n        }\n        var belowSqrt = this.radius * this.radius * dist * dist - det * det;\n        var sqrt = Math.sqrt(belowSqrt);\n        interA.x = (det * diff.y + Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interB.x = (det * diff.y - Math.sign(diff.y) * diff.x * sqrt) / distSquared;\n        interA.y = (-det * diff.x + Math.abs(diff.y) * sqrt) / distSquared;\n        interB.y = (-det * diff.x - Math.abs(diff.y) * sqrt) / distSquared;\n        return new Line_1.Line(interA.add(this.center), interB.add(this.center));\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this circle.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the circle outline.\n     */\n    Circle.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        var intersectioLine = this.lineIntersection(line.a, line.b);\n        if (!intersectioLine) {\n            return [];\n        }\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return [intersectioLine.a, intersectioLine.b].filter(function (vert) { return line.hasPoint(vert, true); });\n        }\n        else {\n            return [intersectioLine.a, intersectioLine.b];\n        }\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    Circle.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.center, vert);\n            var angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return _this.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Calculate the closest point on the outline of this circle to the given point.\n     *\n     * @method closestPoint\n     * @instance\n     * @memberof Circle\n     * @param {XYCoords} vert - The point to find the closest circle point for.\n     * @return {Vertex} The closest point on this circle.\n     **/\n    Circle.prototype.closestPoint = function (vert) {\n        var lineIntersection = this.lineIntersection(this.center, vert);\n        if (!lineIntersection) {\n            // Note: this case should not happen as a radial from the center always intersect this circle.\n            return new Vertex_1.Vertex();\n        }\n        // Return closed of both\n        if (lineIntersection.a.distance(vert) < lineIntersection.b.distance(vert)) {\n            return lineIntersection.a;\n        }\n        else {\n            return lineIntersection.b;\n        }\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Circle.prototype.destroy = function () {\n        this.center.destroy();\n        this.isDestroyed = true;\n    };\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                         Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @modified 2024-01-30 Added a missing type in the `describeSVGArc` function.\n * @modified 2024-03-01 Added the `getStartPoint` and `getEndPoint` methods.\n * @modified 2024-03-08 Added the `containsAngle` method.\n * @modified 2024-03-09 Added the `circleSectorIntersection` method to find coherent sector intersections..\n * @modified 2024-03-09 Added the `angleAt` method to determine any angle at some ratio.\n * @modified 2025-04-02 Adding the `CircleSector.lineIntersections` and `CircleSector.lineIntersectionTangents` and implementing `Intersectable`.\n * @modified 2025-04-09 Adding the `CircleSector.move()` method.\n * @modified 2025-04-19 Tweaking the `CircleSector.containsAngle` method: all values (input angle, start- and end- angle) are wrapped into [0,2*PI) now.\n * @modified 2025-04-19 Class `CircleSector` implements interface `Bounded` now (method `getBounds` added).\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleSector = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nvar CircleSector = /** @class */ (function () {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    function CircleSector(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this ellipse.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CircleSector.prototype.getBounds = function () {\n        var _self = this;\n        var circleBounds = this.circle.getBounds();\n        // Calculage angles from east, west, north and south box points and check if they are inside\n        var candidates = [\n            circleBounds.getNorthPoint(),\n            circleBounds.getSouthPoint(),\n            circleBounds.getWestPoint(),\n            circleBounds.getEastPoint()\n        ].filter(function (point) {\n            // Check for each candidate points if they are contained in this sector. Drop if not.\n            var angle = new Line_1.Line(_self.circle.center, point).angle();\n            return _self.containsAngle(angle);\n        });\n        // Compute bounds and inlcude start end end point (they are definitely part of the bounds)\n        return Bounds_1.Bounds.computeFromVertices(candidates.concat([this.getStartPoint(), this.getEndPoint()]));\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Move the circle sector by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector} this for chaining\n     **/\n    CircleSector.prototype.move = function (amount) {\n        this.circle.move(amount);\n        return this;\n    };\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof CircleSector\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    CircleSector.prototype.containsAngle = function (angle) {\n        var wrappedAngle = geomutils_1.geomutils.mapAngleTo2PI(angle);\n        var wrappedStart = geomutils_1.geomutils.mapAngleTo2PI(this.startAngle);\n        var wrappedEnd = geomutils_1.geomutils.mapAngleTo2PI(this.endAngle);\n        // TODO: cleanup\n        // if (this.startAngle <= this.endAngle) {\n        //   return angle >= this.startAngle && angle < this.endAngle;\n        // } else {\n        //   // startAngle > endAngle\n        //   return angle >= this.startAngle || angle < this.endAngle;\n        // }\n        if (wrappedStart <= wrappedEnd) {\n            return wrappedAngle >= wrappedStart && wrappedAngle < wrappedEnd;\n        }\n        else {\n            // startAngle > endAngle\n            return wrappedAngle >= wrappedStart || wrappedAngle < wrappedEnd;\n        }\n    };\n    /**\n     * Get the angle inside this sector for a given ratio. 0.0 means startAngle, and 1.0 means endAngle.\n     *\n     * @param {number} t - The ratio inside [0..1].\n     * @method angleAt\n     * @instance\n     * @memberof CircleSector\n     * @return {number} The angle inside this sector at a given ratio.\n     */\n    CircleSector.prototype.angleAt = function (t) {\n        if (this.startAngle <= this.endAngle) {\n            var angleAtRatio = this.startAngle + (this.endAngle - this.startAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n        else {\n            // startAngle > endAngle\n            var angleAtRatio = this.startAngle + (Math.PI * 2 - this.startAngle + this.endAngle) * t;\n            return angleAtRatio % (Math.PI * 2.0);\n        }\n    };\n    /**\n     * Get the sectors starting point (on the underlying circle, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's stating point.\n     */\n    CircleSector.prototype.getStartPoint = function () {\n        return this.circle.vertAt(this.startAngle);\n    };\n    /**\n     * Get the sectors ending point (on the underlying circle, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CircleSector\n     * @return {Vertex} The sector's ending point.\n     */\n    CircleSector.prototype.getEndPoint = function () {\n        return this.circle.vertAt(this.endAngle);\n    };\n    /**\n     * Calculate the intersection of this circle sector and some other sector.\n     *\n     * If the two sectors do not corerently intersect (when not both points of the\n     * radical line are containted in both source sectors) then null is returned.\n     *\n     * See demo/53-circle-sector-intersections for a geometric visualisation.\n     *\n     * @method circleSectorIntersection\n     * @instance\n     * @memberof CircleSector\n     * @return {CircleSector | null} The intersecion of both sectors or null if they don't intersect.\n     */\n    CircleSector.prototype.circleSectorIntersection = function (sector) {\n        var radicalLine = this.circle.circleIntersection(sector.circle);\n        if (!radicalLine) {\n            // The circles to not intersect at all.\n            return null;\n        }\n        // Circles intersect. Check if this sector interval intersects, too.\n        var thisIntersectionAngleA = this.circle.center.angle(radicalLine.a);\n        var thisIntersectionAngleB = this.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!this.containsAngle(thisIntersectionAngleA) || !this.containsAngle(thisIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // Circles intersect. Check if the passed sector interval intersects, too.\n        var thatIntersectionAngleA = sector.circle.center.angle(radicalLine.a);\n        var thatIntersectionAngleB = sector.circle.center.angle(radicalLine.b);\n        // Is intersection inside this sector?\n        if (!sector.containsAngle(thatIntersectionAngleA) || !sector.containsAngle(thatIntersectionAngleB)) {\n            // At least one circle intersection point is not located in this sector.\n            //  -> no valid intersection at all\n            return null;\n        }\n        // The radical line has no direction. Thus the resulting sector _might_ be in reverse order.\n        // Make a quick logical check: the center of the gap must still be located inside the result sector.\n        // If not: reverse result.\n        var gapSector = new CircleSector(this.circle, this.endAngle, this.startAngle);\n        var centerOfOriginalGap = gapSector.angleAt(0.5);\n        var resultSector = new CircleSector(new Circle_1.Circle(this.circle.center.clone(), this.circle.radius), thisIntersectionAngleA, thisIntersectionAngleB);\n        if (resultSector.containsAngle(centerOfOriginalGap)) {\n            resultSector.startAngle = thisIntersectionAngleB;\n            resultSector.endAngle = thisIntersectionAngleA;\n        }\n        return resultSector;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    CircleSector.prototype.lineIntersections = function (ray, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // First get all line intersections from underlying ellipse.\n        var ellipseIntersections = this.circle.lineIntersections(ray, inVectorBoundsOnly);\n        // Drop all intersection points that are not contained in the circle sectors bounds.\n        var tmpLine = new Line_1.Line(this.circle.center, new Vertex_1.Vertex());\n        return ellipseIntersections.filter(function (intersectionPoint) {\n            tmpLine.b.set(intersectionPoint);\n            var lineAngle = tmpLine.angle();\n            return _this.containsAngle(geomutils_1.geomutils.wrapMinMax(lineAngle, 0, Math.PI * 2));\n        });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    CircleSector.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.circle.center, vert);\n            var angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return _this.circle.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     *\n     * @method destroy\n     * @instance\n     * @memberof CircleSector\n     * @return {void}\n     */\n    CircleSector.prototype.destroy = function () {\n        this.circle.destroy();\n        this.isDestroyed = true;\n    };\n    CircleSector.circleSectorUtils = {\n        /**\n         * Helper function to convert polar circle coordinates to cartesian coordinates.\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {number} angle - The angle in radians.\n         */\n        polarToCartesian: function (centerX, centerY, radius, angle) {\n            return {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        },\n        /**\n         * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n         * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radius, startAngle, endAngle, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            var end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n            var start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n            // Split full circles into two halves.\n            // Some browsers have problems to render full circles (described by start==end).\n            if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n                var firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n                var secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n                return firstHalf.concat(secondHalf);\n            }\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            var sweepFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n                sweepFlag = 1;\n            }\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }\n    };\n    return CircleSector;\n}()); // END class\nexports.CircleSector = CircleSector;\n//# sourceMappingURL=CircleSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `toSVGPathData` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-17 The `CubicBezierCurve` class now implements the new `PathSegment` interface.\n * @modified 2023-09-30 Added the function `CubicbezierCurve.getSubCurve(number,number)` – similar to `getSubCurveAt(...)` but with absolute position parameters.\n * @modified 2023-10-07 Added the `trimEnd`, `trimEndAt`, `trimStart`, `trimStartAt` methods.\n * @modified 2025-04-09 Added the `CubicBezierCurve.move` method to match the convention – which just calls `translate`.\n * @modified 2025-04-09 Modified the `CubicBezierCurve.translate` method: chaning parameter `Vertex` to more generalized `XYCoords`.\n * @modified 2025-04-13 Changed visibility of `CubicBezierCurve.utils` from 'private' to  'public'.\n * @modified 2025-04-13 Added helper function `CubicBezierCurve.utils.bezierCoeffs`.\n * @modified 2025-04-13 Added helper functopn `CubicBezierCurve.utils.sgn(number)` for division safe sign calculation.\n * @modified 2025-03-13 Class `CubicBezierCurve` is now implementing interface `Intersectable`.\n * @modified 2025-04-18 Added evaluation method for cubic Bézier curves `CubicBezierCurve.utils.evaluateT`.\n * @modified 2025-04-18 Refactored method `CubicBezierCurve.getPointAt` to use `evaluateT`.\n * @modified 2025-04-18 Fixed the `CubicBezierCurve.getBounds` method: now returning the real bounding box. Before it was an approximated one.\n * @modified 2025-ß4-18 Added helper methods for bounding box calculation `CubucBezierCurve.util.cubicPolyMinMax` and `cubicPoly`.\n * @version 2.9.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CubicBezierCurve = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        // this.arcLength = null;\n        this.updateArcLengths();\n    }\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\".concat(pointID, \"' invalid.\"));\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {XYCoords} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.move = function (amount) {\n        return this.translate(amount);\n    };\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone();\n        var pointB = new Vertex_1.Vertex(0, 0);\n        var curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @method getClosestT\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return {\n            t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getClosestT\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Bounds} The bounds of this ellipse.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        // Thanks to Richard \"RM\" for the Bézier bounds calculatin\n        //    https://jsfiddle.net/SalixAlba/QQnvm/4/\n        var xMinMax = CubicBezierCurve.utils.cubicPolyMinMax(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x);\n        var xl = xMinMax.min;\n        var xh = xMinMax.max;\n        var yMinMax = CubicBezierCurve.utils.cubicPolyMinMax(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y);\n        var yl = yMinMax.min;\n        var yh = yMinMax.max;\n        return Bounds_1.Bounds.computeFromVertices([\n            { x: xl, y: yl },\n            { x: xl, y: yh },\n            { x: xh, y: yh },\n            { x: xh, y: yl }\n        ]);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\".concat(id, \"'.\"));\n    };\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        // TODO: cleanup\n        // const x: number =\n        //   this.startPoint.x * Math.pow(1.0 - t, 3) +\n        //   this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2) +\n        //   this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) +\n        //   this.endPoint.x * Math.pow(t, 3);\n        // const y: number =\n        //   this.startPoint.y * Math.pow(1.0 - t, 3) +\n        //   this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2) +\n        //   this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) +\n        //   this.endPoint.y * Math.pow(t, 3);\n        var x = CubicBezierCurve.utils.evaluateT(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x, t);\n        var y = CubicBezierCurve.utils.evaluateT(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y, t);\n        return new Vertex_1.Vertex(x, y);\n    };\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 + b.x * (3 * nt2 - 6 * (t - t2)) + c.x * (6 * (t - t2) - 3 * t2) + 3 * d.x * t2;\n        var tY = -3 * a.y * nt2 + b.y * (3 * nt2 - 6 * (t - t2)) + c.y * (6 * (t - t2) - 3 * t2) + 3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    /**\n     * Trim off a start section of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimStartAt`.\n     *\n     * @method trimStart\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimStart = function (uValue) {\n        return this.trimStartAt(this.convertU2T(uValue));\n    };\n    /**\n     * Trim off a start section of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[uValue,1]` (so `[0.0,uValue]` is cut off).\n     *\n     * @method trimStartAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the head curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimStartAt = function (t) {\n        var subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, t, 1.0);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Trim off the end of this curve. The position parameter `uValue` is the absolute position on the\n     * curve in `[0...arcLength]`.\n     * The remaining curve will be the one in the bounds `[0,uValue]` (so `[1.0-uValue,1.0]` is cut off).\n     *\n     * Note this function just converts the absolute parameter to a relative one and call `trimEndAt`.\n     *\n     * @method trimEnd\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} uValue - The absolute position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimEnd = function (uValue) {\n        return this.trimEndAt(this.convertU2T(uValue));\n    };\n    /**\n     * Trim off the end of this curve. The position parameter `t` is the relative position in [0..1].\n     * The remaining curve will be the one in the bounds `[0,t]` (so `[1.0-t,1.0]` is cut off).\n     *\n     * @method trimEndAt\n     * @instance\n     * @memberof CubicBezierCurve\n     * @param {number} t - The relative position parameter where to cut off the tail curve.\n     * @returns {CubicBezierCurve} `this` for chanining.\n     */\n    CubicBezierCurve.prototype.trimEndAt = function (t) {\n        var subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, 0.0, t);\n        this.startPoint.set(subCurbePoints[0]);\n        this.startControlPoint.set(subCurbePoints[2]);\n        this.endPoint.set(subCurbePoints[1]);\n        this.endControlPoint.set(subCurbePoints[3]);\n        this.updateArcLengths();\n        return this;\n    };\n    /**\n     * Get a sub curve at the given start end end positions (values on the curve's length, between 0 and curve.arcLength).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurve\n     * @param {number} tStart – The start position of the desired sub curve (must be in [0..arcLength]).\n     * @param {number} tEnd – The end position if the desired cub curve (must be in [0..arcLength]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurve = function (uStart, uEnd) {\n        return this.getSubCurveAt(this.convertU2T(uStart), this.convertU2T(uEnd));\n    };\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        // This 'splits' the curve at the given point at t.\n        var subCurbePoints = CubicBezierCurve.utils.getSubCurvePointsAt(this, tStart, tEnd);\n        return new CubicBezierCurve(subCurbePoints[0], subCurbePoints[1], subCurbePoints[2], subCurbePoints[3]);\n    };\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, u / this.arcLength));\n    };\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    //---BEGIN PathSegment-------------------------\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    CubicBezierCurve.prototype.getStartTangent = function () {\n        return this.startControlPoint;\n    };\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    CubicBezierCurve.prototype.getEndTangent = function () {\n        return this.endControlPoint;\n    };\n    //---END PathSegment-------------------------\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this shape.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections with the shape outline.\n     */\n    CubicBezierCurve.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var intersectionTs = this.lineIntersectionTs(line);\n        var intersectionPoints = intersectionTs.map(function (t) {\n            return _this.getPointAt(t);\n        });\n        if (inVectorBoundsOnly) {\n            // const maxDist = line.length();\n            return intersectionPoints.filter(function (vert) { return line.hasPoint(vert, true); });\n        }\n        else {\n            return intersectionPoints;\n        }\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    CubicBezierCurve.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var intersectionTs = this.lineIntersectionTs(line);\n        var intersectionTangents = intersectionTs.map(function (t) {\n            var startPoint = _this.getPointAt(t);\n            var endPoint = _this.getTangentAt(t);\n            return new Vector_1.Vector(startPoint, endPoint.add(startPoint));\n        });\n        if (inVectorBoundsOnly) {\n            return intersectionTangents.filter(function (vec) { return line.hasPoint(vec.a, true); });\n        }\n        else {\n            return intersectionTangents;\n        }\n    };\n    //--- END --- Implement interface `Intersectable`\n    CubicBezierCurve.prototype.lineIntersectionTs = function (line) {\n        var A = line.b.y - line.a.y; // A=y2-y1\n        var B = line.a.x - line.b.x; // B=x1-x2\n        var C = line.a.x * (line.a.y - line.b.y) + line.a.y * (line.b.x - line.a.x); //C=x1*(y1-y2)+y1*(x2-x1)\n        // var bx = bezierCoeffs(px[0], px[1], px[2], px[3]);\n        // var by = bezierCoeffs(py[0], py[1], py[2], py[3]);\n        var bx = CubicBezierCurve.utils.bezierCoeffs(this.startPoint.x, this.startControlPoint.x, this.endControlPoint.x, this.endPoint.x);\n        var by = CubicBezierCurve.utils.bezierCoeffs(this.startPoint.y, this.startControlPoint.y, this.endControlPoint.y, this.endPoint.y);\n        var poly = Array(4);\n        poly[0] = A * bx[0] + B * by[0]; /*t^3*/\n        poly[1] = A * bx[1] + B * by[1]; /*t^2*/\n        poly[2] = A * bx[2] + B * by[2]; /*t*/\n        poly[3] = A * bx[3] + B * by[3] + C; /*1*/\n        var roots = CubicBezierCurve.utils.cubicRoots(poly);\n        return roots.filter(function (root) { return root != -1; });\n    };\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint || !curve.endPoint || !curve.startControlPoint || !curve.endControlPoint)\n            return false;\n        return (this.startPoint.equals(curve.startPoint) &&\n            this.endPoint.equals(curve.endPoint) &&\n            this.startControlPoint.equals(curve.startControlPoint) &&\n            this.endControlPoint.equals(curve.endControlPoint));\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    CubicBezierCurve.prototype.destroy = function () {\n        this.startPoint.destroy();\n        this.endPoint.destroy();\n        this.startControlPoint.destroy();\n        this.endControlPoint.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startPoint\" : [' +\n            this.getStartPoint().x +\n            \",\" +\n            this.getStartPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endPoint\" : [' +\n            this.getEndPoint().x +\n            \",\" +\n            this.getEndPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"startControlPoint\": [' +\n            this.getStartControlPoint().x +\n            \",\" +\n            this.getStartControlPoint().y +\n            \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            '\"endControlPoint\" : [' +\n            this.getEndControlPoint().x +\n            \",\" +\n            this.getEndControlPoint().y +\n            \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw 'Object member \"startPoint\" missing.';\n        if (!obj.endPoint)\n            throw 'Object member \"endPoint\" missing.';\n        if (!obj.startControlPoint)\n            throw 'Object member \"startControlPoint\" missing.';\n        if (!obj.endControlPoint)\n            throw 'Object member \"endControlPoint\" missing.';\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    /**\n     * Helper utils.\n     */\n    CubicBezierCurve.utils = {\n        evaluateT: function (p0, p1, p2, p3, t) {\n            return p0 * Math.pow(1.0 - t, 3) +\n                p1 * 3 * t * Math.pow(1.0 - t, 2) +\n                p2 * 3 * Math.pow(t, 2) * (1.0 - t) +\n                p3 * Math.pow(t, 3);\n        },\n        cubicPolyMinMax: function (p0, p1, p2, p3) {\n            // var polyX = CubicBezierCurve.utils.cubicPoly2(\n            //   p0, // P[0].X, // bezierCurve.startPoint.x,\n            //   p1, // P[1].X, // bezierCurve.startControlPoint.x,\n            //   p2, // P[2].X, // bezierCurve.endControlPoint.x,\n            //   p3 // P[3].X // bezierCurve.endPoint.x\n            // );\n            // var a = polyX.a;\n            // var b = polyX.b;\n            // var c = polyX.c;\n            // var disc = polyX.b * polyX.b - 4 * polyX.a * polyX.c;\n            var polyX = CubicBezierCurve.utils.cubicPoly(p0, // P[0].X, // bezierCurve.startPoint.x,\n            p1, // P[1].X, // bezierCurve.startControlPoint.x,\n            p2, // P[2].X, // bezierCurve.endControlPoint.x,\n            p3 // P[3].X // bezierCurve.endPoint.x\n            );\n            var a = polyX[0]; // .a;\n            var b = polyX[1]; // .b;\n            var c = polyX[2]; // .c;\n            //alert(\"a \"+a+\" \"+b+\" \"+c);\n            // var disc = b * b - 4 * a * c;\n            var disc = polyX[1] * polyX[1] - 4 * polyX[0] * polyX[2];\n            // var polyX = CubicBezierCurve.utils.bezierCoeffs(p3,p2,p1,p0);\n            // var a = polyX[0]; //polyX.a;\n            // var b = polyX[1]; // .b;\n            // var c = polyX[2]; //.c;\n            // var disc = polyX[1] * polyX[1] - 4 * polyX[0] * polyX[2];\n            // var xl = Math.min(bCurve.endPoint.x, bCurve.startPoint.x); // P[0].X;\n            // var xh = Math.max(bCurve.endPoint.x, bCurve.startPoint.x); // P[0].X;\n            var xl = Math.min(p3, p0); // P[0].X;\n            var xh = Math.max(p3, p0); // P[0].X;\n            // if (P[3].X < xl) xl = P[3].X;\n            // if (P[3].X > xh) xh = P[3].X;\n            if (disc >= 0) {\n                var t1 = (-b + Math.sqrt(disc)) / (2 * a);\n                // alert(\"t1 \" + t1);\n                if (t1 > 0 && t1 < 1) {\n                    // var x1 = evalBez(PX, t1);\n                    // var x1 = bCurve.getPointAt(t1).x;\n                    var x1 = CubicBezierCurve.utils.evaluateT(p0, p1, p2, p3, t1); // bCurve.getPointAt(t1).x;\n                    if (x1 < xl)\n                        xl = x1;\n                    if (x1 > xh)\n                        xh = x1;\n                }\n                var t2 = (-b - Math.sqrt(disc)) / (2 * a);\n                // alert(\"t2 \" + t2);\n                if (t2 > 0 && t2 < 1) {\n                    // var x2 = evalBez(PX, t2);\n                    // var x2 = bCurve.getPointAt(t2).x;\n                    var x2 = CubicBezierCurve.utils.evaluateT(p0, p1, p2, p3, t2); //\n                    if (x2 < xl)\n                        xl = x2;\n                    if (x2 > xh)\n                        xh = x2;\n                }\n            }\n            return { min: xl, max: xh };\n        },\n        /**\n         * Get the points of a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n         *\n         * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n         *\n         * @method getSubCurvePointsAt\n         * @param {CubicBezierCurve} curve – The curve to get the sub curve points from.\n         * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n         * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n         * @instance\n         * @memberof CubicBezierCurve\n         * @return {CubicBezierCurve} The sub curve as a new curve.\n         **/\n        getSubCurvePointsAt: function (curve, tStart, tEnd) {\n            var startVec = new Vector_1.Vector(curve.getPointAt(tStart), curve.getTangentAt(tStart));\n            var endVec = new Vector_1.Vector(curve.getPointAt(tEnd), curve.getTangentAt(tEnd).inv());\n            // Tangents are relative. Make absolute.\n            startVec.b.add(startVec.a);\n            endVec.b.add(endVec.a);\n            // This 'splits' the curve at the given point at t.\n            startVec.scale(0.33333333 * (tEnd - tStart));\n            endVec.scale(0.33333333 * (tEnd - tStart));\n            return [startVec.a, endVec.a, startVec.b, endVec.b];\n        },\n        /**\n         * Compute the cubic roots for the given cubic polynomial coefficients.\n         *\n         * Based on\n         *   http://mysite.verizon.net/res148h4j/javascript/script_exact_cubic.html#the%20source%20code\n         * Inspired by\n         *   https://www.particleincell.com/2013/cubic-line-intersection/\n         * Thanks to Stephan Schmitt and Particle-In-Cell!\n         *\n         * @param poly\n         * @returns\n         */\n        cubicRoots: function (poly) {\n            var a = poly[0];\n            var b = poly[1];\n            var c = poly[2];\n            var d = poly[3];\n            var A = b / a;\n            var B = c / a;\n            var C = d / a;\n            var S, T, Im;\n            var Q = (3 * B - Math.pow(A, 2)) / 9;\n            var R = (9 * A * B - 27 * C - 2 * Math.pow(A, 3)) / 54;\n            var D = Math.pow(Q, 3) + Math.pow(R, 2); // polynomial discriminant\n            var ts = []; // Array();\n            if (D >= 0) {\n                // complex or duplicate roots\n                S = CubicBezierCurve.utils.sgn(R + Math.sqrt(D)) * Math.pow(Math.abs(R + Math.sqrt(D)), 1 / 3);\n                T = CubicBezierCurve.utils.sgn(R - Math.sqrt(D)) * Math.pow(Math.abs(R - Math.sqrt(D)), 1 / 3);\n                ts[0] = -A / 3 + (S + T); // real root\n                ts[1] = -A / 3 - (S + T) / 2; // real part of complex root\n                ts[2] = -A / 3 - (S + T) / 2; // real part of complex root\n                Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // complex part of root pair\n                // Mark complex roots to be discarded\n                if (Im != 0) {\n                    ts[1] = -1;\n                    ts[2] = -1;\n                }\n            } // distinct real roots\n            else {\n                var th = Math.acos(R / Math.sqrt(-Math.pow(Q, 3)));\n                ts[0] = 2 * Math.sqrt(-Q) * Math.cos(th / 3) - A / 3;\n                ts[1] = 2 * Math.sqrt(-Q) * Math.cos((th + 2 * Math.PI) / 3) - A / 3;\n                ts[2] = 2 * Math.sqrt(-Q) * Math.cos((th + 4 * Math.PI) / 3) - A / 3;\n                Im = 0.0;\n            }\n            // Discard all t's out of spec and sort the rest\n            return ts.filter(function (t) { return t >= 0 && t <= 1.0; }).sort();\n        },\n        /**\n         * Compute the Bézier coefficients from the given Bézier point coordinates.\n         *\n         * @param {number} p0 - The start point coordinate.\n         * @param {number} p1 - The start control point coordinate.\n         * @param {number} p2 - The end control point coordinate.\n         * @param {number} p3 - The end point coordinate.\n         * @returns {[number,number,number,number]}\n         */\n        bezierCoeffs: function (p0, p1, p2, p3) {\n            var coeffs = [NaN, NaN, NaN, NaN]; //Array(4);\n            coeffs[0] = -p0 + 3 * p1 + -3 * p2 + p3;\n            coeffs[1] = 3 * p0 - 6 * p1 + 3 * p2;\n            coeffs[2] = -3 * p0 + 3 * p1;\n            coeffs[3] = p0;\n            return coeffs;\n        },\n        /**\n         * Calculate the cubic polynomial coefficients used to find the bounding box.\n         *\n         * @param {number} p0 - The start point coordinate.\n         * @param {number} p1 - The start control point coordinate.\n         * @param {number} p2 - The end control point coordinate.\n         * @param {number} p3 - The end point coordinate.\n         * @returns {[number,number,number]}\n         */\n        cubicPoly: function (p0, p1, p2, p3) {\n            return [\n                3 * p3 - 9 * p2 + 9 * p1 - 3 * p0,\n                6 * p0 - 12 * p1 + 6 * p2,\n                3 * p1 - 3 * p0\n            ];\n        },\n        /**\n         * sign of number, but is division safe: no zero returned :)\n         */\n        sgn: function (x) {\n            return x < 0.0 ? -1 : 1;\n        }\n    };\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grid = void 0;\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @modified 2022-02-02 Added the `destroy` method.\n * @version  1.1.0\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyHandler = void 0;\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n     **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = \"down\";\n        }\n    };\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == \"number\")\n            return key;\n        if (typeof key != \"string\")\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener(\"keydown\", (this._keyDownListener = function (e) {\n            _self.fireDownEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keypress\", (this._keyPressListener = function (e) {\n            _self.firePressEvent(e, _self);\n        }));\n        this.element.addEventListener(\"keyup\", (this._keyUpListener = function (e) {\n            _self.fireUpEvent(e, _self);\n        }));\n    };\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener(\"keydown\", this._keyDownListener);\n        this.element.removeEventListener(\"keypress\", this._keyPressListener);\n        this.element.removeEventListener(\"keyup\", this._keyUpListener);\n    };\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == \"number\")\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used any more.\n     */\n    KeyHandler.prototype.destroy = function () {\n        this.releaseListeners();\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    // prettier-ignore\n    KeyHandler.KEY_CODES = {\n        'break': 3, // alternate: 19\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29, // alternate: 235?\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36, // alternate: 172?\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46, // alternate: 8\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91, // left ⌘\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93, // right ⌘\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108, // firefox, 194 on chrome\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169, // (AZERTY)\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173, // firefox\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181, // firefox, alternate: 173\n        'unmute': 181, // alternate: 173?\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191, // 231 alternate?\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251, // Chrome/Edge\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-10-09 Changed the actual return value of the `intersection` function to null (was undefined before).\n * @modified 2022-10-17 Adding these methods from the `PathSegment` interface: getStartPoint, getEndPoint, revert.\n * @modified 2023-09-25 Changed param type of `intersection()` from Line to VertTuple.\n * @modified 2025-04-15 Class `Line` now implements interface `Intersectable`.\n * @modified 2025-04-16 Class `Line` now implements interface `IBounded`.\n * @version  2.4.0\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Line = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Vector_1 = require(\"./Vector\");\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0) {\n            return null;\n        }\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        var x = this.a.x + a * (this.b.x - this.a.x);\n        var y = this.a.y + a * (this.b.y - this.a.y);\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return null;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(x, y);\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Line.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Line\n     * @return {Bounds} The rectangular bounds of this Line.\n     **/\n    Line.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices([this.a, this.b]);\n    };\n    //--- END --- Implement interface `IBounded`\n    //--- Implement PathSegment ---\n    /**\n     * Get the start point of this path segment.\n     *\n     * @method getStartPoint\n     * @memberof PathSegment\n     * @return {Vertex} The start point of this path segment.\n     */\n    Line.prototype.getStartPoint = function () {\n        return this.a;\n    };\n    /**\n     * Get the end point of this path segment.\n     *\n     * @method getEndPoint\n     * @memberof PathSegment\n     * @return {Vertex} The end point of this path segment.\n     */\n    Line.prototype.getEndPoint = function () {\n        return this.b;\n    };\n    /**\n     * Get the tangent's end point at the start point of this segment.\n     *\n     * @method getStartTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the starting point's tangent.\n     */\n    Line.prototype.getStartTangent = function () {\n        return this.b;\n    };\n    /**\n     * Get the tangent's end point at the end point of this segment.\n     *\n     * @method getEndTangent\n     * @memberof PathSegment\n     * @return {Vertex} The end point of the ending point's tangent.\n     */\n    Line.prototype.getEndTangent = function () {\n        return this.a;\n    };\n    /**\n     * Inverse this path segment (in-place) and return this same instance (useful for chaining).\n     *\n     * @method reverse\n     * @memberof PathSegment\n     * @return {PathSegment} This path segment instance (for chaining).\n     */\n    Line.prototype.reverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    //--- END Implement PathSegment ---\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    Line.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        var intersection = this.intersection(line);\n        if (!intersection) {\n            return []; // Both lines parallel\n        }\n        if (this.hasPoint(intersection, true) && (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n            return [intersection];\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Line.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        var intersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (intersections.length === 0) {\n            return [];\n        }\n        var intrsctn = intersections[0];\n        return [new Vector_1.Vector(this.a.clone(), this.b.clone()).moveTo(intrsctn)];\n    };\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @modified 2022-08-16 Fixed a bug in the mouse button detection.\n * @version  1.2.1\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseHandler = exports.XWheelEvent = exports.XMouseEvent = void 0;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers[\"mousemove\"] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, \"mousemove\"));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, \"drag\"));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers[\"mouseup\"] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, \"mouseup\"));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers[\"mousedown\"] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, \"mousedown\"));\n        };\n        this.handlers[\"click\"] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, \"click\"));\n        };\n        this.handlers[\"wheel\"] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, \"wheel\"));\n        };\n        this.element.addEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.addEventListener(\"mouseup\", this.handlers[\"mouseup\"]);\n        this.element.addEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.addEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.addEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX, y: e.offsetY };\n    };\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} event - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    MouseHandler.prototype.mkParams = function (event, eventName) {\n        var _a, _b;\n        var rel = this.relPos(event);\n        var xEvent = event;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: event.button, // this.mouseButton,\n            leftButton: event.button === 0, // this.mouseButton === 0,\n            middleButton: event.button === 1, // this.mouseButton === 1,\n            rightButton: event.button === 2, // this.mouseButton === 2,\n            mouseDownPos: (_a = this.mouseDownPos) !== null && _a !== void 0 ? _a : { x: NaN, y: NaN },\n            draggedFrom: (_b = this.mouseDragPos) !== null && _b !== void 0 ? _b : { x: NaN, y: NaN },\n            wasDragged: this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y),\n            dragAmount: this.mouseDragPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 }\n        };\n        return xEvent;\n    };\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    };\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled(\"drag\");\n        this.listeners.drag = callback;\n        this.listenFor(\"mousedown\");\n        this.listenFor(\"mousemove\");\n        this.listenFor(\"mouseup\");\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled(\"mousemove\");\n        this.listenFor(\"mousemove\");\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled(\"mouseup\");\n        this.listenFor(\"mouseup\");\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled(\"mousedown\");\n        this.listenFor(\"mousedown\");\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled(\"click\");\n        this.listenFor(\"click\");\n        this.listeners.click = callback;\n        return this;\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled(\"wheel\");\n        this.listenFor(\"wheel\");\n        this.listeners.wheel = callback;\n        return this;\n    };\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\".concat(name, \"' callback. To keep the code simple there is only room for one.\");\n    };\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor(\"mousedown\");\n        this.unlistenFor(\"mousemove\");\n        this.unlistenFor(\"moseup\");\n        this.unlistenFor(\"click\");\n        this.unlistenFor(\"wheel\");\n        this.element.removeEventListener(\"mousemove\", this.handlers[\"mousemove\"]);\n        this.element.removeEventListener(\"mouseup\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"mousedown\", this.handlers[\"mousedown\"]);\n        this.element.removeEventListener(\"click\", this.handlers[\"click\"]);\n        this.element.removeEventListener(\"wheel\", this.handlers[\"wheel\"]);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `PBImage.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @version 1.2.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBImage = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    PBImage.prototype.destroy = function () {\n        this.upperLeft.destroy();\n        this.lowerRight.destroy();\n        this.isDestroyed = true;\n    };\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-11-16\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-25 Fixed a type error in the constructor. Nothing vital.\n * @version  1.1.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBText = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple text element: position, fontSize, fontFamily, color, textAlign, lineHeight and rotation.\n *\n * @requires FontOptions\n * @requires FontSize\n * @requires FontStyle\n * @requires FontWeight\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar PBText = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function PBText(text, anchor, options) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBText\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.text = text;\n        this.anchor = anchor !== null && anchor !== void 0 ? anchor : new Vertex_1.Vertex();\n        this.color = options === null || options === void 0 ? void 0 : options.color;\n        this.fontFamily = options === null || options === void 0 ? void 0 : options.fontFamily;\n        this.fontSize = options === null || options === void 0 ? void 0 : options.fontSize;\n        this.fontStyle = options === null || options === void 0 ? void 0 : options.fontStyle;\n        this.fontWeight = options === null || options === void 0 ? void 0 : options.fontWeight;\n        this.lineHeight = options === null || options === void 0 ? void 0 : options.lineHeight;\n        this.textAlign = options === null || options === void 0 ? void 0 : options.textAlign;\n        this.rotation = options === null || options === void 0 ? void 0 : options.rotation;\n    }\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    PBText.prototype.destroy = function () {\n        this.anchor.destroy();\n        this.isDestroyed = true;\n    };\n    return PBText;\n}()); // END class\nexports.PBText = PBText;\n//# sourceMappingURL=PBText.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @modified 2021-11-16 Adding the `PBText` drawable.\n * @modified 2022-08-01 Added `title` to the params.\n * @modified 2022-10-25 Added the `origin` to the default draw config.\n * @modified 2022-11-06 Adding an XML declaration to the SVG export routine.\n * @modified 2022-11-23 Added the `drawRaster` (default=true) option to the config/drawconfig.\n * @modified 2023-02-04 Fixed a bug in the `drawDrawable` function; fill's current classname was not set.\n * @modified 2023-02-10 Fixing an issue of the `style.position` setting when `fitToParent=true` from `absolute` to `static` (default).\n * @modified 2023-02-10 Cleaning up most type errors in the main class (mostly null checks).\n * @modified 2023-02-10 Adding `enableZoom` and `enablePan` (both default true) to have the option to disable these functions.\n * @modified 2023-09-29 Adding proper dicionary key and value types to the params of `PlotBoilerplate.utils.safeMergeByKeys` (was `object` before).\n * @modified 2024-07-08 Adding `PlotBoilerplate.getGUI()` to retrieve the GUI instance.\n * @modified 2024-08-25 Extending main class `PlotBoilerplate` optional param `isBackdropFiltersEnabled`.\n * @modified 2024-12-02 Adding the `triggerRedraw` to the `removeAll` method.\n * @modified 2025-05-07 Changing the return type of `removeVertex` from `void` to `boolean`.\n * @modified 2025-05-07 Handling content changes now with `contentChangeListeners`.\n * @modified 2025-05-07 Added `PlogBoilerplate.addContentChangeListener` and `.removeContentChangeListener`.\n * @modified 2025-05-07 Moving full vectors now by default when vector point a is moved.\n * @modified 2025-05-20 Applying `lineWith` parameter in the draw routine for vectors (had been missing).\n *\n * @version  1.21.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlotBoilerplate = void 0;\nvar alloyfinger_typescript_1 = require(\"alloyfinger-typescript\");\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar CircleSector_1 = require(\"./CircleSector\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar VEllipseSector_1 = require(\"./VEllipseSector\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar PBText_1 = require(\"./PBText\");\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enablePan=true] - (default true) Set to false if you want to disable panning completely.\n     * @param {boolean=} [config.enableZoom=true] - (default true) Set to false if you want to disable zooming completely.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     * @param {string=} [config.title=null] - Specify any hover tile here. It will be attached as a `title` attribute to the most elevated element.\n     */\n    function PlotBoilerplate(config, drawConfig) {\n        var _b, _c;\n        /**\n         * A list of content change listeners.\n         */\n        this.contentChangeListeners = [];\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        /**\n         * A storage variable for retrieving the GUI instance once it was created.\n         */\n        this._gui = null;\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas === \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        var f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: function () {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: function () {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            enableZoom: f.bool(config, \"enableZoom\", true), // default=true\n            enablePan: f.bool(config, \"enablePan\", true), // default=true\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false),\n            isBackdropFiltersEnabled: f.bool(config, \"isBackdropFiltersEnabled\", true)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            drawRaster: f.bool(config, \"drawRaster\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            // bezierPath: {\n            //   color: \"#0022a8\",\n            //   lineWidth: 1\n            // },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            text: {\n                color: \"rgba(192,0,128,0.5)\",\n                lineWidth: 1,\n                fill: true,\n                anchor: true\n            },\n            origin: {\n                color: \"#000000\"\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        var canvasElement = typeof config.canvas === \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        if (typeof canvasElement === \"undefined\") {\n            throw \"Cannot initialize PlotBoilerplate with a null canvas (element \\\"\".concat(config.canvas, \" not found).\");\n        }\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawgl_1.drawutilsgl === \"undefined\") {\n                console.warn(\"Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.\");\n                console.warn(\"Disabling GL and falling back to Canvas2D.\");\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                // Override the case 'null' here. If GL is not supported, well then nothing works.\n                var ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawgl_1.drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                // Override the case 'null' here. If context creation is not supported, well then nothing works.\n                var ctx = this.canvas.getContext(\"2d\");\n                this.draw = new draw_1.drawutils(ctx, false);\n                this.fill = new draw_1.drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg_1.drawutilssvg === \"undefined\")\n                throw \"The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.\";\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg_1.drawutilssvg(this.canvas, new Vertex_1.Vertex(), // offset\n            new Vertex_1.Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        // At this point the event cacher element is deinfed and located at highest elevation.\n        // Set `title` attribut?\n        if (config.title) {\n            this.eventCatcher.setAttribute(\"title\", config.title);\n        }\n        this.draw.scale.set((_b = this.config.scaleX) !== null && _b !== void 0 ? _b : 1.0, this.config.scaleY);\n        this.fill.scale.set((_c = this.config.scaleX) !== null && _c !== void 0 ? _c : 1.0, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        // Create fake SVG node\n        var svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg_1.drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear) {\n            pb.config.preClear();\n        }\n        tosvgDraw.clear(pb.config.backgroundColor || \"white\");\n        if (pb.config.preDraw) {\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        }\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        // Add: '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' ?\n        var blob = new Blob(['<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' + svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] !== \"function\") {\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        }\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        var _b, _c, _d, _e;\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleX) !== null && _c !== void 0 ? _c : 1.0);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, (_d = this.config.cssScaleX) !== null && _d !== void 0 ? _d : 1.0, (_e = this.config.cssScaleY) !== null && _e !== void 0 ? _e : 1.0);\n        }\n    };\n    /**\n     * Adds a new content change listener to this instance. Adding duplicates is not possible.\n     *\n     * @param {PBContentChangeListener} listener - The listenre to add.\n     * @method addContentChangeListener\n     * @instance\n     * @memberof PlotBoilerplate\n     * @returns {void}\n     */\n    PlotBoilerplate.prototype.addContentChangeListener = function (listener) {\n        for (var i in this.contentChangeListeners) {\n            if (this.contentChangeListeners[i] === listener) {\n                return;\n            }\n        }\n        this.contentChangeListeners.push(listener);\n    };\n    /**\n     * Removes an existing content change listener from this instance.\n     *\n     * @param {PBContentChangeListener} listener - The listenre to add.\n     * @method removeContentChangeListener\n     * @instance\n     * @memberof PlotBoilerplate\n     * @returns {void}\n     */\n    PlotBoilerplate.prototype.removeContentChangeListener = function (listener) {\n        for (var i = 0; i < this.contentChangeListeners.length; i++) {\n            if (this.contentChangeListeners[i] === listener) {\n                this.contentChangeListeners.splice(i, 1);\n                return;\n            }\n        }\n    };\n    PlotBoilerplate.prototype._fireContentChanged = function (addedDrawables, removedDrawables) {\n        for (var i in this.contentChangeListeners) {\n            var listener = this.contentChangeListeners[i];\n            if (listener && typeof listener === \"function\") {\n                listener({\n                    type: addedDrawables.length > 0 ? \"DRAWABLES_ADDED\" : \"DRAWABLES_REMOVED\",\n                    addedDrawables: addedDrawables,\n                    removedDrawables: removedDrawables\n                });\n            }\n        }\n    };\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw, doNotFireEvent) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false, doNotFireEvent);\n            }\n            // !doNotFireEvent && this._fireContentChanged(arr, []);\n        }\n        else {\n            var addedDrawables = [drawable];\n            if (drawable instanceof Vertex_1.Vertex) {\n                this.drawables.push(drawable);\n                this.vertices.push(drawable);\n            }\n            else if (drawable instanceof Line_1.Line) {\n                // Add some lines\n                this.drawables.push(drawable);\n                this.vertices.push(drawable.a);\n                this.vertices.push(drawable.b);\n                addedDrawables.push(drawable.a, drawable.b);\n            }\n            else if (drawable instanceof Vector_1.Vector) {\n                this.drawables.push(drawable);\n                this.vertices.push(drawable.a);\n                this.vertices.push(drawable.b);\n                addedDrawables.push(drawable.a, drawable.b);\n                drawable.a.listeners.addDragListener(function (event) {\n                    drawable.b.add(event.params.dragAmount);\n                });\n            }\n            else if (drawable instanceof VEllipse_1.VEllipse) {\n                this.vertices.push(drawable.center);\n                this.vertices.push(drawable.axis);\n                addedDrawables.push(drawable.center, drawable.axis);\n                this.drawables.push(drawable);\n                drawable.center.listeners.addDragListener(function (event) {\n                    drawable.axis.add(event.params.dragAmount);\n                });\n            }\n            else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n                this.vertices.push(drawable.ellipse.center);\n                this.vertices.push(drawable.ellipse.axis);\n                addedDrawables.push(drawable.ellipse.center, drawable.ellipse.axis);\n                this.drawables.push(drawable);\n                drawable.ellipse.center.listeners.addDragListener(function (event) {\n                    drawable.ellipse.axis.add(event.params.dragAmount);\n                });\n            }\n            else if (drawable instanceof Circle_1.Circle) {\n                this.vertices.push(drawable.center);\n                addedDrawables.push(drawable.center);\n                this.drawables.push(drawable);\n            }\n            else if (drawable instanceof CircleSector_1.CircleSector) {\n                this.vertices.push(drawable.circle.center);\n                addedDrawables.push(drawable.circle.center);\n                this.drawables.push(drawable);\n            }\n            else if (drawable instanceof Polygon_1.Polygon) {\n                this.drawables.push(drawable);\n                for (var i = 0; i < drawable.vertices.length; i++) {\n                    this.vertices.push(drawable.vertices[i]);\n                    addedDrawables.push(drawable.vertices[i]);\n                }\n            }\n            else if (drawable instanceof Triangle_1.Triangle) {\n                this.drawables.push(drawable);\n                this.vertices.push(drawable.a);\n                this.vertices.push(drawable.b);\n                this.vertices.push(drawable.c);\n                addedDrawables.push(drawable.a, drawable.b, drawable.c);\n            }\n            else if (drawable instanceof BezierPath_1.BezierPath) {\n                this.drawables.push(drawable);\n                var bezierPath = drawable;\n                for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                    if (!drawable.adjustCircular && i == 0) {\n                        this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                        addedDrawables.push(bezierPath.bezierCurves[i].startPoint);\n                    }\n                    this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                    this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                    this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                    addedDrawables.push(bezierPath.bezierCurves[i].endPoint, bezierPath.bezierCurves[i].startControlPoint, bezierPath.bezierCurves[i].endControlPoint);\n                    bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                    bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n                }\n                PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n            }\n            else if (drawable instanceof PBImage_1.PBImage) {\n                this.vertices.push(drawable.upperLeft);\n                this.vertices.push(drawable.lowerRight);\n                addedDrawables.push(drawable.upperLeft, drawable.lowerRight);\n                this.drawables.push(drawable);\n                // Todo: think about a IDragEvent interface\n                drawable.upperLeft.listeners.addDragListener(function (e) {\n                    drawable.lowerRight.add(e.params.dragAmount);\n                });\n                drawable.lowerRight.attr.selectable = false;\n            }\n            else if (drawable instanceof PBText_1.PBText) {\n                this.vertices.push(drawable.anchor);\n                addedDrawables.push(drawable.anchor);\n                this.drawables.push(drawable);\n                drawable.anchor.attr.selectable = false;\n            }\n            else {\n                throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n            }\n            !doNotFireEvent && this._fireContentChanged(addedDrawables, []);\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\") {\n            this.redraw();\n        }\n    };\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @param {removeWidth}\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices, doNotFireEvent) {\n        if (Array.isArray(drawable)) {\n            var removedDrawables_1 = [];\n            for (var i = 0; i < drawable.length; i++) {\n                if (this.remove(drawable[i], false, removeWithVertices, true)) {\n                    removedDrawables_1.push(drawable[i]);\n                }\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            !doNotFireEvent && this._fireContentChanged([], removedDrawables_1);\n            return removedDrawables_1.length > 0;\n        }\n        if (drawable instanceof Vertex_1.Vertex) {\n            var wasRemoved_1 = this.removeVertex(drawable, false, false);\n            if (redraw) {\n                this.redraw();\n            }\n            !doNotFireEvent && this._fireContentChanged([], [drawable]);\n            return wasRemoved_1;\n        }\n        var wasRemoved = false;\n        var removedDrawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable || this.drawables[i].uid === drawable.uid) {\n                this.drawables.splice(i, 1);\n                removedDrawables.push(drawable);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false, true);\n                        this.removeVertex(drawable.b, false, true);\n                        removedDrawables.push(drawable.a, drawable.b);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false, true);\n                        this.removeVertex(drawable.b, false, true);\n                        removedDrawables.push(drawable.a, drawable.b);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false, true);\n                        this.removeVertex(drawable.axis, false, true);\n                        removedDrawables.push(drawable.center, drawable.axis);\n                    }\n                    else if (drawable instanceof VEllipseSector_1.VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center, false, true);\n                        this.removeVertex(drawable.ellipse.axis, false, true);\n                        removedDrawables.push(drawable.ellipse.center, drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false, true);\n                    }\n                    else if (drawable instanceof CircleSector_1.CircleSector) {\n                        this.removeVertex(drawable.circle.center, false, true);\n                        removedDrawables.push(drawable.circle.center);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++) {\n                            this.removeVertex(drawable.vertices[i], false, true);\n                            removedDrawables.push(drawable.vertices[i]);\n                        }\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false, true);\n                        this.removeVertex(drawable.b, false, true);\n                        this.removeVertex(drawable.c, false, true);\n                        removedDrawables.push(drawable.a, drawable.b, drawable.c);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false, true);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false, true);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false, true);\n                            removedDrawables.push(drawable.bezierCurves[i].startPoint, drawable.bezierCurves[i].startControlPoint, drawable.bezierCurves[i].endControlPoint);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false, true);\n                                removedDrawables.push(drawable.bezierCurves[i].endPoint);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false, true);\n                        this.removeVertex(drawable.lowerRight, false, true);\n                        removedDrawables.push(drawable.upperLeft, drawable.lowerRight);\n                    }\n                    else if (drawable instanceof PBText_1.PBText) {\n                        this.removeVertex(drawable.anchor, false, true);\n                        removedDrawables.push(drawable.anchor);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n                !doNotFireEvent && this._fireContentChanged([], removedDrawables);\n                wasRemoved = true;\n            } // END if\n        } // END for\n        return wasRemoved;\n    };\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {boolean}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw, doNotFireEvent) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw) {\n                    this.redraw();\n                }\n                !doNotFireEvent && this._fireContentChanged([], [vert]);\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @param {boolean=true} triggerRedraw - By default this method triggers the redraw routine; passing `false` will suppress redrawing.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    PlotBoilerplate.prototype.removeAll = function (keepVertices, triggerRedraw) {\n        var removedDrawables = this.drawables;\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            removedDrawables = removedDrawables.concat(this.vertices);\n            this.vertices = [];\n        }\n        if (triggerRedraw || typeof triggerRedraw === \"undefined\") {\n            this.redraw();\n        }\n        removedDrawables.length > 0 && this._fireContentChanged([], removedDrawables);\n    };\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var _b, _c;\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0, (_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0));\n        if (p && p.typeName == \"vertex\") {\n            return this.vertices[p.vindex];\n        }\n        return undefined;\n    };\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function (draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        var gScale = {\n            x: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    };\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function (draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, this.drawConfig.origin.color);\n    };\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.fill.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    };\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawable = function (d, renderTime, draw, fill) {\n        if (d instanceof BezierPath_1.BezierPath) {\n            var curveIndex = 0;\n            for (var c in d.bezierCurves) {\n                // Restore these settings again in each loop (will be overwritten)\n                this.draw.setCurrentId(\"\".concat(d.uid, \"-\").concat(curveIndex));\n                this.fill.setCurrentId(\"\".concat(d.uid, \"-\").concat(curveIndex));\n                this.draw.setCurrentClassName(d.className);\n                this.fill.setCurrentClassName(d.className);\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-start-handle\"));\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.pathVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-start-handle\"));\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            df.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            df.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h2\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-start-control-handle\"));\n                        df.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        var df = this.drawConfig.bezier.controlVertex.fill ? fill : draw;\n                        df.setCurrentId(\"\".concat(d.uid, \"_h3\"));\n                        df.setCurrentClassName(\"\".concat(d.className, \"-end-control-handle\"));\n                        df.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(\"\".concat(d.uid, \"_l0\"));\n                    draw.setCurrentClassName(\"\".concat(d.className, \"-start-line\"));\n                    draw.handleLine(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint);\n                    draw.setCurrentId(\"\".concat(d.uid, \"_l1\"));\n                    draw.setCurrentClassName(\"\".concat(d.className, \"-end-line\"));\n                    draw.handleLine(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint);\n                }\n                curveIndex++;\n            } // END for\n        }\n        else if (d instanceof Polygon_1.Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle_1.Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipse_1.VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_e0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-v-line\"));\n                draw.handleLine(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n                draw.setCurrentId(\"\".concat(d.uid, \"_e1\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-h-line\"));\n                draw.handleLine(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis); // , \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\".concat(d.className));\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector_1.VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\".concat(d.className));\n            var data = VEllipseSector_1.VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle_1.Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector_1.CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex_1.Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line_1.Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector_1.Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color, this.drawConfig.vector.lineWidth);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-handle\"));\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage_1.PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_l0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-line\"));\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_h0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-lower-right\"));\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof PBText_1.PBText) {\n            fill.setCurrentId(d.uid);\n            fill.text(d.text, d.anchor.x, d.anchor.y, d);\n            if (this.drawConfig.text.anchor) {\n                draw.setCurrentId(\"\".concat(d.uid, \"_a0\"));\n                draw.setCurrentClassName(\"\".concat(d.className, \"-anchor\"));\n                (this.drawConfig.text.fill ? fill : draw).point(d.anchor, this.drawConfig.text.color);\n            }\n            d.anchor.attr.renderTime = renderTime;\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    };\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function (draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    };\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    };\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    };\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawAll = function (renderTime, draw, fill) {\n        if (this.config.drawRaster) {\n            this.drawGrid(draw);\n        }\n        if (this.config.drawOrigin) {\n            this.drawOrigin(draw);\n        }\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(null);\n        draw.setCurrentClassName(null);\n    }; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor || \"white\");\n    };\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        var _b, _c;\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * ((_b = this.config.cssScaleX) !== null && _b !== void 0 ? _b : 1.0), this.canvasSize.height * ((_c = this.config.cssScaleY) !== null && _c !== void 0 ? _c : 1.0)));\n    };\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    PlotBoilerplate.prototype.getFProp = function (elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    };\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    };\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _this = this;\n        var _b, _c, _d, _e, _f, _g;\n        var _self = this;\n        var _setSize = function (w, h) {\n            var _b, _c;\n            w *= (_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0;\n            h *= (_c = _self.config.canvasHeightFactor) !== null && _c !== void 0 ? _c : 1.0;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                _this.canvas.setAttribute(\"viewBox\", \"0 0 \".concat(w, \" \").concat(h));\n                _this.canvas.setAttribute(\"width\", \"\".concat(w));\n                _this.canvas.setAttribute(\"height\", \"\".concat(h));\n                _this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                _this.eventCatcher.style.width = \"\".concat(w, \"px\");\n                _this.eventCatcher.style.height = \"\".concat(h, \"px\");\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = ((_b = _self.config.canvasWidthFactor) !== null && _b !== void 0 ? _b : 1.0) * width + \"px\";\n            _self.canvas.style.height = ((_c = _self.config.canvasWidthFactor) !== null && _c !== void 0 ? _c : 1.0) * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"static\";\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = ((_d = _self.config.canvasWidthFactor) !== null && _d !== void 0 ? _d : 1.0) * space.width + \"px\";\n            _self.canvas.style.height = ((_e = _self.config.canvasHeightFactor) !== null && _e !== void 0 ? _e : 1.0) * space.height + \"px\";\n            _self.canvas.style.top = \"\";\n            _self.canvas.style.left = \"\";\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = \"\";\n            _self.canvas.style.height = \"\";\n            _setSize((_f = _self.config.defaultCanvasWidth) !== null && _f !== void 0 ? _f : 1024, (_g = _self.config.defaultCanvasHeight) !== null && _g !== void 0 ? _g : 768);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (e) {\n        var _self = this;\n        var point = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX || 1.0, _self.config.cssScaleY || 1.0));\n        if (point) {\n            _self.vertices[point.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (point.typeName == \"bpath\") {\n                    var vert = _self.paths[point.pindex].bezierCurves[point.cindex].getPointByID(point.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (point.typeName == \"vertex\") {\n                    var vert = _self.vertices[point.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler && this.keyHandler.isDown(\"y\")) {\n                _self.vertices[point.vindex].attr.bezierAutoAdjust = !_self.vertices[point.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    };\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var draggablePoint = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!draggablePoint)\n            return;\n        // Drag all selected elements?\n        if (draggablePoint.typeName == \"vertex\" && _self.vertices[draggablePoint.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[draggablePoint.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(draggablePoint);\n            if (draggablePoint.typeName == \"bpath\")\n                _self.paths[draggablePoint.pindex].bezierCurves[draggablePoint.cindex]\n                    .getPointByID(draggablePoint.pid)\n                    .listeners.fireDragStartEvent(e);\n            else if (draggablePoint.typeName == \"vertex\")\n                _self.vertices[draggablePoint.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler && (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\"))) {\n            if (!this.config.enablePan) {\n                return;\n            }\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        if (!this.config.enableZoom) {\n            return;\n        }\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.adjustOffset = function (redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    };\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _this = this;\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down(function (e) {\n                _self.mouseDownHandler(e);\n            })\n                .drag(function (e) {\n                _self.mouseDragHandler(e);\n            })\n                .up(function (e) {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel(function (e) {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                var bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" ||\n                typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var afProps = {\n                        // touchStart: (evt: TouchEvent) => {\n                        touchStart: function (evt) {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (evt) {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                if (!touchDownPos || !touchMovePos) {\n                                    return;\n                                }\n                                var rel = relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                if (!_this.config.enablePan) {\n                                    return;\n                                }\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (evt) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                if (!touchDownPos) {\n                                    return;\n                                }\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (evt) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (evt) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (evt) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (evt) {\n                            if (!_this.config.enableZoom) {\n                                return;\n                            }\n                            var touchItem0 = evt.touches.item(0);\n                            var touchItem1 = evt.touches.item(1);\n                            if (!evt.touches || !multiTouchStartScale || !touchItem0 || !touchItem1) {\n                                return;\n                            }\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(touchItem0.clientX, touchItem0.clientY);\n                            var fingerB = new Vertex_1.Vertex(touchItem1.clientX, touchItem1.clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"]) {\n                        // window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                        var createAlloyFinger = window[\"createAlloyFinger\"];\n                        createAlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                    else {\n                        /* tslint:disable-next-line */\n                        new alloyfinger_typescript_1.default(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    }\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function (props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        var utils = globalThis[\"utils\"];\n        // if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\") {\n        //   return (globalThis[\"utils\" as keyof Object] as any as ({createGUI : (pb:PlotBoilerplate,props:DatGuiProps|undefined)=>GUI })).createGUI(this, props);\n        if (utils && typeof utils.createGUI === \"function\") {\n            return (this._gui = utils.createGUI(this, props));\n        }\n        else {\n            throw \"Cannot create dat.GUI or lil-gui instance; did you load the ./utils/creategui helper function an the dat.GUI/lil-gui library?\";\n        }\n    };\n    /**\n     * Retriebe the GUI once it was created. If the `createGUI` method was not called or failed to create any\n     * GUI then null is returned.\n     * @returns {GUI | null}\n     */\n    PlotBoilerplate.prototype.getGUI = function () {\n        return this._gui;\n    };\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            class_1.prototype.isVertex = function () {\n                return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n            };\n            class_1.prototype.setVIndex = function (vindex) {\n                this.vindex = vindex;\n                return this;\n            };\n            return class_1;\n        }()),\n        __setFunctionName(_a, \"Draggable\"),\n        _a.VERTEX = \"vertex\",\n        _a);\n    /**\n     * A set of helper functions.\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k)) {\n                    continue;\n                }\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    var extVal = extension[k];\n                    try {\n                        if (typ == \"boolean\") {\n                            if (typeof extVal === \"string\")\n                                base[k] = Boolean(!!JSON.parse(extVal));\n                            else\n                                base[k] = extVal;\n                        }\n                        else if (typ == \"number\") {\n                            if (typeof extVal === \"string\")\n                                base[k] = Number(JSON.parse(extVal) * 1);\n                            else\n                                base[k] = extension[k];\n                        }\n                        else if (typ == \"function\" && typeof extVal == \"function\") {\n                            base[k] = extension[k];\n                        }\n                        else {\n                            // Probably a sting\n                            base[k] = extension[k];\n                        }\n                    }\n                    catch (e) {\n                        console.error(\"error in key \", k, extVal, e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /*\n        __safeMergeByKeys: <KeyType extends string | number | symbol, ValueType extends boolean | number | string | Function>(\n          base: Record<KeyType, ValueType>,\n          extension: Record<KeyType, string>\n        ): Record<KeyType, ValueType> => {\n          for (var k in extension) {\n            if (!extension.hasOwnProperty(k)) continue;\n            if (base.hasOwnProperty(k)) {\n              var typ = typeof base[k];\n              try {\n                if (typ == \"boolean\") base[k] = !!JSON.parse(extension[k]);\n                else if (typ == \"number\") base[k] = JSON.parse(extension[k]) * 1;\n                else if (typ == \"function\" && typeof extension[k] == \"function\") base[k] = extension[k];\n                else base[k] = extension[k];\n              } catch (e) {\n                console.error(\"error in key \", k, extension[k], e);\n              }\n            } else {\n              base[k] = extension[k];\n            }\n          }\n          return base;\n        },\n        *()\n    \n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            // element.style[\"transform-origin\"] = \"0 0\";\n            element.style.transformOrigin = \"0 0\";\n            if (scaleX == 1.0 && scaleY == 1.0) {\n                // element.style.transform = null;\n                element.style.removeProperty(\"transform\");\n            }\n            else\n                element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"undefined\")\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === \"number\")\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == \"boolean\")\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== \"function\")\n                    return fallback;\n                return obj[key];\n            }\n        }, // END fetch\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) {\n                    // && !bezierPath.adjustCircular ) {\n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\nexports.default = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @modified 2021-12-14 Added the `perimeter()` function.\n * @modified 2021-12-16 Added the `getEvenDistributionPolygon()` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Polygon.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-03-08 Added the `Polygon.clone()` function.\n * @modified 2023-09-25 Added the `Polygon.getInterpolationPolygon(number)` function.\n * @modified 2023-09-25 Added the `Polygon.lineIntersections(Line,boolean)` function.\n * @modified 2023-09-29 Added the `Polygon.closestLineIntersection(Line,boolean)` function.\n * @modified 2023-11-24 Added the `Polygon.containsPolygon(Polygon)' function.\n * @modified 2024-10-12 Added the `getEdgeAt` method.\n * @modified 2024-10-30 Added the `getEdges` method.\n * @modified 2024-12-02 Added the `elimitateColinearEdges` method.\n * @modified 2025-02-12 Added the `containsVerts` method to test multiple vertices for containment.\n * @modified 2025-03-28 Added the `Polygon.utils.locateLineIntersecion` static helper method.\n * @modified 2025-03-28 Added the `Polygon.lineIntersectionTangents` method.\n * @modified 2025-04-09 Added the `Polygon.getCentroid` method.\n * @modified 2025-05-16 Class `Polygon` now implements `IBounded`.\n * @modified 2025-05-20 Tweaking `Polygon.getInnerAngleAt` and `Polygo.isAngleAcute` to handle indices out of array bounds as well.\n * @modified 2025-06-07 Adding `Polygon.closestLineIntersectionIndex` to determine line intersections plus detected edge index.\n * @version 1.16.0\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polygon = void 0;\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof vertices == \"undefined\") {\n            vertices = [];\n        }\n        this.vertices = vertices;\n        this.isOpen = isOpen || false;\n    }\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVertex\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertex = function (vert) {\n        this.vertices.push(vert);\n    };\n    /**\n     * Add a vertex at a particular position of the `vertices` array.\n     *\n     * @method addVertexAt\n     * @param {Vertex} vert - The vertex to add.\n     * @param {number} index - The position to add the vertex at. Will be handled modulo.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertexAt = function (vert, index) {\n        // var moduloIndex = index % (this.vertices.length + 1);\n        this.vertices.splice(index, 0, vert);\n    };\n    /**\n     * Get a new instance of the line at the given start index. The returned line will consist\n     * of the vertex at `vertIndex` and `vertIndex+1` (will be handled modulo).\n     *\n     * @method getEdgeAt\n     * @param {number} vertIndex - The vertex index of the line to start.\n     * @instance\n     * @memberof Polygon\n     * @return {Line}\n     **/\n    Polygon.prototype.getEdgeAt = function (vertIndex) {\n        return new Line_1.Line(this.getVertexAt(vertIndex), this.getVertexAt(vertIndex + 1));\n    };\n    /**\n     * Converts this polygon into a sequence of lines. Please note that each time\n     * this method is called new lines are created. The underlying line vertices are no clones\n     * (instances).\n     *\n     * @method getEdges\n     * @instance\n     * @memberof Polygon\n     * @return {Array<Line>}\n     */\n    Polygon.prototype.getEdges = function () {\n        var lines = [];\n        for (var i = 0; i + 1 < this.vertices.length; i++) {\n            // var line = this.getLineAt(i).clone();\n            lines.push(this.getEdgeAt(i));\n        }\n        if (!this.isOpen && this.vertices.length > 0) {\n            lines.push(this.getEdgeAt(this.vertices.length - 1));\n        }\n        return lines;\n    };\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute. Please not that this is\n     * only working for clockwise polygons. If this polygon is not clockwise please use the\n     * `isClockwise` method and reverse polygon vertices if needed.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    Polygon.prototype.getInnerAngleAt = function (vertIndex) {\n        var p2 = this.vertices[vertIndex % this.vertices.length];\n        var p1 = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        var p3 = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // See\n        //    https://math.stackexchange.com/questions/149959/how-to-find-the-interior-angle-of-an-irregular-pentagon-or-polygon\n        // π−arccos((P2−P1)⋅(P3−P2)|P2−P1||P3−P2|)\n        // Check if triangle is acute (will be used later)\n        // Acute angles and obtuse angles need to be handled differently.\n        var isAcute = this.isAngleAcute(vertIndex);\n        // Differences\n        var zero = new Vertex_1.Vertex(0, 0);\n        var p2mp1 = new Vertex_1.Vertex(p2.x - p1.x, p2.y - p1.y);\n        var p3mp2 = new Vertex_1.Vertex(p3.x - p2.x, p3.y - p2.y);\n        var p2mp1_len = zero.distance(p2mp1);\n        var p3mp2_len = zero.distance(p3mp2);\n        // Dot products\n        var dotProduct = geomutils_1.geomutils.dotProduct(p2mp1, p3mp2);\n        var lengthProduct = p2mp1_len * p3mp2_len;\n        if (isAcute) {\n            return Math.PI - Math.acos(dotProduct / lengthProduct);\n        }\n        else {\n            return Math.PI + Math.acos(dotProduct / lengthProduct);\n        }\n    };\n    /**\n     * Checks if the angle at the given polygon vertex (index) is acute.\n     *\n     * @method isAngleAcute\n     * @instance\n     * @memberof Polygon\n     * @param {number} vertIndex - The index of the polygon vertex to check.\n     * @returns {boolean} `true` is angle is acute, `false` is obtuse.\n     */\n    Polygon.prototype.isAngleAcute = function (vertIndex) {\n        var A = this.vertices[(vertIndex + this.vertices.length - 1) % this.vertices.length].clone();\n        var B = this.vertices[vertIndex % this.vertices.length];\n        var C = this.vertices[(vertIndex + 1) % this.vertices.length].clone();\n        // Find local winding number for triangle A B C\n        var windingNumber = Triangle_1.Triangle.utils.determinant(A, B, C);\n        // console.log(\"vertIndex\", vertIndex, \"windingNumber\", windingNumber);\n        return windingNumber < 0;\n    };\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @method getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    Polygon.prototype.getVertexAt = function (index) {\n        if (index < 0) {\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        }\n        else {\n            return this.vertices[index % this.vertices.length];\n        }\n    };\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    Polygon.prototype.move = function (amount) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(amount);\n        }\n        return this;\n    };\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = yi > vert.y != yj > vert.y && vert.x < ((xj - xi) * (vert.y - yi)) / (yj - yi) + xi;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n    /**\n     * Check if all given vertices are inside this polygon.<br>\n     * <br>\n     * This method just uses the `Polygon.containsVert` method.\n     *\n     * @method containsVerts\n     * @param {XYCoords[]} verts - The vertices to check.\n     * @return {boolean} True if all passed vertices are inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVerts = function (verts) {\n        var _this = this;\n        return verts.every(function (vert) { return _this.containsVert(vert); });\n    };\n    /**\n     * Check if the passed polygon is completly contained inside this polygon.\n     *\n     * This means:\n     *  - all polygon's vertices must be inside this polygon.\n     *  - the polygon has no edge intersections with this polygon.\n     *\n     * @param {Polygon} polygon - The polygon to check if contained.\n     * @return {boolean}\n     */\n    Polygon.prototype.containsPolygon = function (polygon) {\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            if (!this.containsVert(polygon.vertices[i])) {\n                return false;\n            }\n        }\n        // All vertices are inside; check for intersections\n        var lineSegment = new Line_1.Line(new Vertex_1.Vertex(), new Vertex_1.Vertex());\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            lineSegment.a.set(polygon.vertices[i]);\n            lineSegment.b.set(polygon.vertices[(i + 1) % polygon.vertices.length]);\n            if (this.lineIntersections(lineSegment, true).length > 0) {\n                // Current segment has intersection(s) with this polygon.\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.area = function () {\n        return Polygon.utils.area(this.vertices);\n    };\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.signedArea = function () {\n        return Polygon.utils.signedArea(this.vertices);\n    };\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    Polygon.prototype.isClockwise = function () {\n        // return Polygon.utils.signedArea(this.vertices) < 0;\n        return Polygon.utils.isClockwise(this.vertices);\n    };\n    /**\n     * Get the perimeter of this polygon.\n     * The perimeter is the absolute length of the outline.\n     *\n     * If this polygon is open then the last segment (connecting the first and the\n     * last vertex) will be skipped.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.perimeter = function () {\n        var length = 0;\n        for (var i = 1; i < this.vertices.length; i++) {\n            length += this.vertices[i - 1].distance(this.vertices[i]);\n        }\n        if (!this.isOpen && this.vertices.length > 1) {\n            length += this.vertices[0].distance(this.vertices[this.vertices.length - 1]);\n        }\n        return length;\n    };\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == \"function\")\n                this.vertices[i].scale(factor, center);\n            else\n                console.log(\"There seems to be a null vertex!\", this.vertices[i]);\n        }\n        return this;\n    };\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    /**\n     * Get the mean `center` of this polygon by calculating the mean value of all vertices.\n     *\n     * Mean: (v[0] + v[1] + ... v[n-1]) / n\n     *\n     * @method getMeanCenter\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex|null} `null` is no vertices are available.\n     */\n    Polygon.prototype.getMeanCenter = function () {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        var center = this.vertices[0].clone();\n        for (var i = 1; i < this.vertices.length; i++) {\n            center.add(this.vertices[i]);\n        }\n        center.x /= this.vertices.length;\n        center.y /= this.vertices.length;\n        return center;\n    };\n    /**\n     * Get centroid.\n     * Centroids define the barycenter of any non self-intersecting convex polygon.\n     *\n     * If the polygon is self intersecting or non konvex then the barycenter is not well defined.\n     *\n     * https://mathworld.wolfram.com/PolygonCentroid.html\n     *\n     * @method getCentroid\n     * @instance\n     * @memberof Polygon\n     * @returns {Vertex|null}\n     */\n    Polygon.prototype.getCentroid = function () {\n        if (this.vertices.length === 0) {\n            return null;\n        }\n        var center = new Vertex_1.Vertex(0.0, 0.0);\n        var n = this.vertices.length;\n        for (var i = 0; i < n; i++) {\n            // center.add(this.vertices[i]);\n            var cur = this.vertices[i];\n            var next = this.vertices[(i + 1) % n];\n            var factor = cur.x * next.y - next.x * cur.y;\n            center.x += (cur.x + next.x) * factor;\n            center.y += (cur.y + next.y) * factor;\n        }\n        var area = this.area();\n        center.x *= 1 / (6 * area);\n        center.y *= 1 / (6 * area);\n        return center;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    Polygon.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        return Polygon.utils\n            .locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly)\n            .map(function (intersectionTuple) { return intersectionTuple.intersection; });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Polygon.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon.utils.locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly).map(function (intersectionTuple) {\n            var polyLine = _this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector_1.Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersection);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Polygon.prototype.lineIntersectionTangentsIndices = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon.utils.locateLineIntersecion(line, this.vertices, this.isOpen, inVectorBoundsOnly).map(function (intersectionTuple) {\n            var polyLine = _this.getEdgeAt(intersectionTuple.edgeIndex);\n            return {\n                intersection: new Vector_1.Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersection),\n                edgeIndex: intersectionTuple.edgeIndex\n            };\n        });\n    };\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A).\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {Vertex | null} - The intersection point within the polygon bounds.\n     */\n    Polygon.prototype.closestLineIntersection = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var closestInterSectionIndex = this.closestLineIntersectionIndex(line, inVectorBoundsOnly);\n        if (closestInterSectionIndex) {\n            return closestInterSectionIndex.intersection;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Get the closest line-polygon-intersection point (closest the line point A) plus the edge index..\n     *\n     * See demo `63-measure-angles-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are considered (located strictly between start and end vertex).\n     * @returns {PolygonIntersectionTuple| null} - A pair containing the intersection point and the affected polygon edge index.\n     */\n    Polygon.prototype.closestLineIntersectionIndex = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        var allIntersections = this.lineIntersections(line, inVectorBoundsOnly);\n        if (allIntersections.length <= 0) {\n            // Empty polygon -> no intersections\n            return null;\n        }\n        // Find the closest intersection\n        var closestIntersection = new Vertex_1.Vertex(Number.MAX_VALUE, Number.MAX_VALUE);\n        var closestInterSectionIndex = -1;\n        var curDist = Number.MAX_VALUE;\n        for (var i = 0; i < allIntersections.length; i++) {\n            var curVert = allIntersections[i];\n            var dist = curVert.distance(line.a);\n            if (dist < curDist) {\n                // && line.hasPoint(curVert)) {\n                curDist = dist;\n                closestIntersection = curVert;\n                closestInterSectionIndex = i;\n            }\n        }\n        // return [closestIntersection, closestInterSectionIndex];\n        return { edgeIndex: closestInterSectionIndex, intersection: closestIntersection };\n    };\n    /**\n     * Construct a new polygon from this polygon with more vertices on each edge. The\n     * interpolation count determines the number of additional vertices on each edge.\n     * An interpolation count of `0` will return a polygon that equals the source\n     * polygon.\n     *\n     * @param {number} interpolationCount\n     * @returns {Polygon} A polygon with `interpolationCount` more vertices (as as factor).\n     */\n    Polygon.prototype.getInterpolationPolygon = function (interpolationCount) {\n        var verts = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            var curVert = this.vertices[i];\n            var nextVert = this.vertices[(i + 1) % this.vertices.length];\n            verts.push(curVert.clone());\n            // Add interpolation points\n            if (!this.isOpen || i + 1 !== this.vertices.length) {\n                var lerpAmount = 1.0 / (interpolationCount + 1);\n                for (var j = 1; j <= interpolationCount; j++) {\n                    verts.push(curVert.clone().lerp(nextVert, lerpAmount * j));\n                }\n            }\n        }\n        return new Polygon(verts, this.isOpen);\n    };\n    /**\n     * Convert this polygon into a new polygon with n evenly distributed vertices.\n     *\n     * @param {number} pointCount - Must not be negative.\n     */\n    Polygon.prototype.getEvenDistributionPolygon = function (pointCount) {\n        if (pointCount <= 0) {\n            throw new Error(\"pointCount must be larger than zero; is \" + pointCount + \".\");\n        }\n        var result = new Polygon([], this.isOpen);\n        if (this.vertices.length === 0) {\n            return result;\n        }\n        // Fetch and add the start point from the source polygon\n        var polygonPoint = new Vertex_1.Vertex(this.vertices[0]);\n        result.vertices.push(polygonPoint);\n        if (this.vertices.length === 1) {\n            return result;\n        }\n        var perimeter = this.perimeter();\n        var stepSize = perimeter / pointCount;\n        var n = this.vertices.length;\n        var polygonIndex = 1;\n        var nextPolygonPoint = new Vertex_1.Vertex(this.vertices[1]);\n        var segmentLength = polygonPoint.distance(nextPolygonPoint);\n        var loopMax = this.isOpen ? n : n + 1;\n        var curSegmentU = stepSize;\n        var i = 1;\n        while (i < pointCount && polygonIndex < loopMax) {\n            // Check if next eq point is inside this segment\n            if (curSegmentU < segmentLength) {\n                var newPoint = polygonPoint.clone().lerpAbs(nextPolygonPoint, curSegmentU);\n                result.vertices.push(newPoint);\n                curSegmentU += stepSize;\n                i++;\n            }\n            else {\n                polygonIndex++;\n                polygonPoint = nextPolygonPoint;\n                nextPolygonPoint = new Vertex_1.Vertex(this.vertices[polygonIndex % n]);\n                curSegmentU = curSegmentU - segmentLength;\n                segmentLength = polygonPoint.distance(nextPolygonPoint);\n            }\n        }\n        return result;\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    Polygon.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices(this.vertices);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Create a deep copy of this polygon.\n     *\n     * @method clone\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} The cloned polygon.\n     */\n    Polygon.prototype.clone = function () {\n        return new Polygon(this.vertices.map(function (vert) { return vert.clone(); }), this.isOpen);\n    };\n    /**\n     * Create a new polygon without colinear adjacent edges. This method does not midify the current polygon\n     * but creates a new one.\n     *\n     * Please note that this method does NOT create deep clones of the vertices. Use Polygon.clone() if you need to.\n     *\n     * Please also note that the `tolerance` may become really large here, as the denominator of two closely\n     * parallel lines is usually pretty large. See the demo `57-eliminate-colinear-polygon-edges` to get\n     * an impression of how denominators work.\n     *\n     * @method elimitateColinearEdges\n     * @instance\n     * @memberof Polygon\n     * @param {number?} tolerance - (default is 1.0) The epsilon to detect co-linear edges.\n     * @return {Polygon} A new polygon without co-linear adjacent edges – respective the given epsilon.\n     */\n    Polygon.prototype.elimitateColinearEdges = function (tolerance) {\n        var eps = typeof tolerance === \"undefined\" ? 1.0 : tolerance;\n        var verts = this.vertices.slice(); // Creates a shallow copy\n        var i = 0;\n        var lineA = new Line_1.Line(new Vertex_1.Vertex(), new Vertex_1.Vertex());\n        var lineB = new Line_1.Line(new Vertex_1.Vertex(), new Vertex_1.Vertex());\n        while (i + 1 < verts.length && verts.length > 2) {\n            var vertA = verts[i];\n            var vertB = verts[(i + 1) % verts.length];\n            lineA.a = vertA;\n            lineA.b = vertB;\n            lineB.a = vertB;\n            var areColinear = false;\n            var j = i + 2;\n            do {\n                var vertC = verts[j % verts.length];\n                lineB.b = vertC;\n                areColinear = lineA.colinear(lineB, eps);\n                // console.log(\"are colinear?\", i, i + 1, j, areColinear);\n                if (areColinear) {\n                    j++;\n                }\n            } while (areColinear);\n            // Now j points to the first vertex that's NOT colinear to the current lineA\n            // -> delete all vertices in between\n            if (j - i > 2) {\n                // Means: there have been 'colinear vertices' in between\n                verts.splice(i + 1, j - i - 2);\n            }\n            i++;\n        }\n        return new Polygon(verts, this.isOpen);\n    };\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push(\"Q \" + qdata[i].x + \" \" + qdata[i].y + \", \" + qdata[i + 1].x + \" \" + qdata[i + 1].y);\n        }\n        return buffer.join(\" \");\n    };\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == \"undefined\")\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0) {\n            return \"\";\n        }\n        var buffer = [\"M \" + qdata[0].x + \" \" + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push(\"C \" +\n                qdata[i].x +\n                \" \" +\n                qdata[i].y +\n                \", \" +\n                qdata[i + 1].x +\n                \" \" +\n                qdata[i + 1].y +\n                \", \" +\n                qdata[i + 2].x +\n                \" \" +\n                qdata[i + 2].y);\n        }\n        return buffer.join(\" \");\n    };\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Polygon.prototype.destroy = function () {\n        for (var i = 0; i < this.vertices.length; i++) {\n            this.vertices[i].destroy();\n        }\n        this.isDestroyed = true;\n    };\n    Polygon.utils = {\n        /**\n         * Calculate the area of the given polygon (unsigned).\n         *\n         * Note that this does not work for self-intersecting polygons.\n         *\n         * @name area\n         * @return {number}\n         */\n        area: function (vertices) {\n            // Found at:\n            //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n            var total = 0.0;\n            for (var i = 0, l = vertices.length; i < l; i++) {\n                var addX = vertices[i].x;\n                var addY = vertices[(i + 1) % l].y;\n                var subX = vertices[(i + 1) % l].x;\n                var subY = vertices[i].y;\n                total += addX * addY * 0.5;\n                total -= subX * subY * 0.5;\n            }\n            return Math.abs(total);\n        },\n        isClockwise: function (vertices) {\n            return Polygon.utils.signedArea(vertices) < 0;\n        },\n        /**\n         * Calulate the signed polyon area by interpreting the polygon as a matrix\n         * and calculating its determinant.\n         *\n         * @name signedArea\n         * @return {number}\n         */\n        signedArea: function (vertices) {\n            var sum = 0;\n            var n = vertices.length;\n            for (var i = 0; i < n; i++) {\n                var j = (i + 1) % n;\n                sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n            }\n            return sum;\n        },\n        /**\n         * Find intersections of a line with a polygon (vertices).\n         *\n         * @param {VertTuple<any>} line - The line to find intersections with.\n         * @param {Array<Vertex>} vertices - The polygon's vertices.\n         * @param {boolean} isOpen - True if the polygon is open, false otherwise.\n         * @param {boolean} inVectorBoundsOnly - If only intersections in strict vector bounds should be returned.\n         * @returns\n         */\n        locateLineIntersecion: function (line, vertices, isOpen, inVectorBoundsOnly) {\n            // Find the intersections of all lines inside the edge bounds\n            var intersectionPoints = [];\n            var n = isOpen ? vertices.length - 1 : vertices.length;\n            for (var i = 0; i < n; i++) {\n                var polyLine = new Line_1.Line(vertices[i % n], vertices[(i + 1) % n]);\n                var intersection = polyLine.intersection(line);\n                // true => only inside bounds\n                // ignore last edge if open\n                if (intersection !== null &&\n                    polyLine.hasPoint(intersection, true) &&\n                    (!inVectorBoundsOnly || line.hasPoint(intersection, inVectorBoundsOnly))) {\n                    intersectionPoints.push({ edgeIndex: i, intersection: intersection });\n                }\n            }\n            return intersectionPoints;\n        }\n    };\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @modified  2022-02-02 Added the `destroy` method.\n * @modified  2022-02-02 Cleared the `Triangle.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified  2024-11-22 Added static utility function Triangle.utils.determinant; adapted method `determinant`.\n * @modified  2024-11-22 Changing visibility of `Triangle.utils` from `private` to `public`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `Intersectable`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `IBounded`.\n * @modified  2025-14-16 Class `Triangle` now implements interface `Intersectable`.\n * @modified  2025-14-16 Added method `Triangle.move`.\n * @version   2.10.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Triangle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\".concat(arr.length, \")\");\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    Triangle.prototype.getArea = function () {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    };\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Triangle.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Triangle\n     * @return {Bounds} The rectangular bounds of this Triangle.\n     **/\n    Triangle.prototype.getBounds = function () {\n        // return Bounds.computeFromVertices([this.a, this.b, this.c]);\n        return this.bounds();\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Move the Triangle's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Triangle\n     * @return {Triangle} this for chaining\n     **/\n    Triangle.prototype.move = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        this.c.add(amount);\n        return this;\n    };\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        // if( !this.center || !this.radius )\n        this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if ((this.a.equals(vert1) && this.b.equals(vert2)) || (this.a.equals(vert2) && this.b.equals(vert1)))\n            return this.c;\n        if ((this.b.equals(vert1) && this.c.equals(vert2)) || (this.b.equals(vert2) && this.c.equals(vert1)))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return dist_squared <= this.radius_squared;\n    };\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get all line intersections with this polygon.\n     *\n     * This method returns all intersections (as vertices) with this shape. The returned array of vertices is in no specific order.\n     *\n     * See demo `47-closest-vector-projection-on-polygon` for how it works.\n     *\n     * @param {VertTuple} line - The line to find intersections with.\n     * @param {boolean} inVectorBoundsOnly - If set to true only intersecion points on the passed vector are returned (located strictly between start and end vertex).\n     * @returns {Array<Vertex>} - An array of all intersections within the polygon bounds.\n     */\n    Triangle.prototype.lineIntersections = function (line, inVectorBoundsOnly) {\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines inside the edge bounds\n        return Polygon_1.Polygon.utils\n            .locateLineIntersecion(line, [this.a, this.b, this.c], false, inVectorBoundsOnly)\n            .map(function (intersectionTuple) { return intersectionTuple.intersection; });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param inVectorBoundsOnly\n     * @returns\n     */\n    Triangle.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersection tangents of all lines inside the edge bounds\n        return Polygon_1.Polygon.utils\n            .locateLineIntersecion(line, [this.a, this.b, this.c], false, inVectorBoundsOnly)\n            .map(function (intersectionTuple) {\n            // const polyLine = this.getEdgeAt(intersectionTuple.edgeIndex);\n            var polyLine = _this.getEdgeAt(intersectionTuple.edgeIndex);\n            return new Vector_1.Vector(polyLine.a.clone(), polyLine.b.clone()).moveTo(intersectionTuple.intersection);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    Triangle.prototype.getEdgeAt = function (edgeIndex) {\n        var modIndex = edgeIndex % 3;\n        return modIndex === 0 ? new Line_1.Line(this.a, this.b) : modIndex === 1 ? new Line_1.Line(this.b, this.c) : new Line_1.Line(this.c, this.a);\n    };\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        // return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n        return Triangle.utils.determinant(this.a, this.b, this.c);\n    };\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        // Cast to non-null here because we know there _is_ an intersection\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \", c : \" + this.c.toString() + \"}\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Triangle.prototype.destroy = function () {\n        this.a.destroy();\n        this.b.destroy();\n        this.c.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return a >= b && a >= c ? a : b >= a && b >= c ? b : c;\n        },\n        min3: function (a, b, c) {\n            return a <= b && a <= c ? a : b <= a && b <= c ? b : c;\n        },\n        signedArea: function (p0x, p0y, p1x, p1y, p2x, p2y) {\n            return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n            var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n            var s = (1 / (2 * area)) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = (1 / (2 * area)) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && 1 - s - t > 0;\n        },\n        /**\n         * Calculate the determinant of the three vertices a, b and c (in this order).\n         * @param {XYCords} a - The first vertex.\n         * @param {XYCords} b - The first vertex.\n         * @param {XYCords} c - The first vertex.\n         * @returns {nmber}\n         */\n        determinant: function (a, b, c) {\n            return (b.y - a.y) * (c.x - b.x) - (c.y - b.y) * (b.x - a.x);\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UIDGenerator = void 0;\nvar UIDGenerator = /** @class */ (function () {\n    function UIDGenerator() {\n    }\n    UIDGenerator.next = function () {\n        return \"\".concat(UIDGenerator.current++);\n    };\n    UIDGenerator.current = 0;\n    return UIDGenerator;\n}());\nexports.UIDGenerator = UIDGenerator;\n//# sourceMappingURL=UIDGenerator.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `VEllipse.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2025-03-31 ATTENTION: modified the winding direction of the `tangentAt` method to match with the Circle method. This is a breaking change!\n * @modified 2025-03-31 Adding the `VEllipse.move(amount: XYCoords)` method.\n * @modified 2025-04-19 Adding the `VEllipse.getBounds()` method.\n * @modified 2025-04-24 Adding the `VEllipse.getExtremePoints()` method for calculating minima and maxima.\n * @version  1.4.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipse = void 0;\nvar Line_1 = require(\"./Line\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Circle_1 = require(\"./Circle\");\nvar Bounds_1 = require(\"./Bounds\");\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    VEllipse.prototype.clone = function () {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    };\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.radiusH = function () {\n        return Math.abs(this.signedRadiusH());\n    };\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusH = function () {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    };\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    VEllipse.prototype.radiusV = function () {\n        return Math.abs(this.signedRadiusV());\n    };\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    VEllipse.prototype.signedRadiusV = function () {\n        // Rotate axis back to origin before calculating radius\n        return new Vertex_1.Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    };\n    /**\n     * Get the the minima and maxima (points) of this (rotated) ellipse.\n     *\n     * @method getExtremePoints\n     * @instance\n     * @memberof VEllipse\n     * @return {[Vertex, Vertex, Vertex, Vertex]} Get the the minima and maxima (points) of this (rotated) ellipse.\n     */\n    VEllipse.prototype.getExtremePoints = function () {\n        var a = this.radiusH();\n        var b = this.radiusV();\n        // Calculate t_x values\n        var t_x1 = Math.atan2(-b * Math.sin(this.rotation), a * Math.cos(this.rotation));\n        var t_x2 = t_x1 + Math.PI;\n        // Calculate x values at t_x\n        var x_x1 = this.center.x + a * Math.cos(t_x1) * Math.cos(this.rotation) - b * Math.sin(t_x1) * Math.sin(this.rotation);\n        var y_x1 = this.center.y + a * Math.cos(t_x1) * Math.sin(this.rotation) + b * Math.sin(t_x1) * Math.cos(this.rotation);\n        var x_x2 = this.center.x + a * Math.cos(t_x2) * Math.cos(this.rotation) - b * Math.sin(t_x2) * Math.sin(this.rotation);\n        var y_x2 = this.center.y + a * Math.cos(t_x2) * Math.sin(this.rotation) + b * Math.sin(t_x2) * Math.cos(this.rotation);\n        var x_max, x_min;\n        if (x_x1 > x_x2) {\n            x_max = new Vertex_1.Vertex(x_x1, y_x1);\n            x_min = new Vertex_1.Vertex(x_x2, y_x2);\n        }\n        else {\n            x_max = new Vertex_1.Vertex(x_x2, y_x2);\n            x_min = new Vertex_1.Vertex(x_x1, y_x1);\n        }\n        // Calculate t_y values\n        var t_y1 = Math.atan2(b * Math.cos(this.rotation), a * Math.sin(this.rotation));\n        var t_y2 = t_y1 + Math.PI;\n        // Calculate y values at t_y\n        var x_y1 = this.center.x + a * Math.cos(t_y1) * Math.cos(this.rotation) - b * Math.sin(t_y1) * Math.sin(this.rotation);\n        var y_y1 = this.center.y + a * Math.cos(t_y1) * Math.sin(this.rotation) + b * Math.sin(t_y1) * Math.cos(this.rotation);\n        var x_y2 = this.center.x + a * Math.cos(t_y2) * Math.cos(this.rotation) - b * Math.sin(t_y2) * Math.sin(this.rotation);\n        var y_y2 = this.center.y + a * Math.cos(t_y2) * Math.sin(this.rotation) + b * Math.sin(t_y2) * Math.cos(this.rotation);\n        var y_max, y_min;\n        if (y_y1 > y_y2) {\n            y_max = new Vertex_1.Vertex(x_y1, y_y1);\n            y_min = new Vertex_1.Vertex(x_y2, y_y2);\n        }\n        else {\n            y_max = new Vertex_1.Vertex(x_y2, y_y2);\n            y_min = new Vertex_1.Vertex(x_y1, y_y1);\n        }\n        return [x_max, x_min, y_max, y_min];\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this ellipse.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this ellipse.\n     **/\n    VEllipse.prototype.getBounds = function () {\n        // Thanks to Cuixiping\n        //    https://stackoverflow.com/questions/87734/how-do-you-calculate-the-axis-aligned-bounding-box-of-an-ellipse\n        var r1 = this.radiusH();\n        var r2 = this.radiusV();\n        var ux = r1 * Math.cos(this.rotation);\n        var uy = r1 * Math.sin(this.rotation);\n        var vx = r2 * Math.cos(this.rotation + Math.PI / 2);\n        var vy = r2 * Math.sin(this.rotation + Math.PI / 2);\n        var bbox_halfwidth = Math.sqrt(ux * ux + vx * vx);\n        var bbox_halfheight = Math.sqrt(uy * uy + vy * vy);\n        return new Bounds_1.Bounds({ x: this.center.x - bbox_halfwidth, y: this.center.y - bbox_halfheight }, { x: this.center.x + bbox_halfwidth, y: this.center.y + bbox_halfheight });\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Move the ellipse by the given amount. This is equivalent by moving the `center` and `axis` points.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipse\n     * @return {VEllipse} this for chaining\n     **/\n    VEllipse.prototype.move = function (amount) {\n        this.center.add(amount);\n        this.axis.add(amount);\n        return this;\n    };\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.scale = function (factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    };\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    VEllipse.prototype.rotate = function (angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    };\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    VEllipse.prototype.vertAt = function (angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return new Vertex_1.Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    };\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.normalAt = function (angle, length) {\n        var point = this.vertAt(angle - this.rotation); // HERE IS THE CORRECT BEHAVIOR!\n        var foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        var angleA = new Line_1.Line(point, foci[0]).angle();\n        var angleB = new Line_1.Line(point, foci[1]).angle();\n        var centerAngle = angleA + (angleB - angleA) / 2.0;\n        var endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        var endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        var resultVector = this.center.distance(endPointA) < this.center.distance(endPointB)\n            ? new Vector_1.Vector(point, endPointB)\n            : new Vector_1.Vector(point, endPointA);\n        if (typeof length === \"number\") {\n            resultVector.setLength(length);\n        }\n        return resultVector;\n    };\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    VEllipse.prototype.tangentAt = function (angle, length) {\n        var normal = this.normalAt(angle, length);\n        return normal.inv().perp();\n    };\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    VEllipse.prototype.perimeter = function () {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        var a = this.radiusH();\n        var b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    };\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    VEllipse.prototype.getFoci = function () {\n        // https://www.mathopenref.com/ellipsefoci.html\n        var rh = this.radiusH();\n        var rv = this.radiusV();\n        var sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        var f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    };\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @method getEquidistantVertices\n     * @instance\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    VEllipse.prototype.getEquidistantVertices = function (pointCount) {\n        var angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        var result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @param {VertTuple<Vector> ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    VEllipse.prototype.lineIntersections = function (ray, inVectorBoundsOnly) {\n        // Question: what happens to extreme versions when ellipse is a line (width or height is zero)?\n        //           This would result in a Division_by_Zero exception!\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Step A: create clones for operations (keep originals unchanged)\n        var ellipseCopy = this.clone(); // VEllipse\n        var rayCopy = ray.clone(); // Vector\n        // Step B: move both so ellipse's center is located at (0,0)\n        var moveAmount = ellipseCopy.center.clone().inv();\n        ellipseCopy.move(moveAmount);\n        rayCopy.add(moveAmount);\n        // Step C: rotate eclipse backwards it's rotation, so that rotation is zero (0.0).\n        //         Rotate together with ray!\n        var rotationAmount = -ellipseCopy.rotation;\n        ellipseCopy.rotate(rotationAmount); // Rotation around (0,0) = center of translated ellipse\n        rayCopy.a.rotate(rotationAmount, ellipseCopy.center);\n        rayCopy.b.rotate(rotationAmount, ellipseCopy.center);\n        // Step D: find x/y factors to use for scaling to transform the ellipse to a circle.\n        //         Scale together with vector ray.\n        var radiusH = ellipseCopy.radiusH();\n        var radiusV = ellipseCopy.radiusV();\n        var scalingFactors = radiusH > radiusV ? { x: radiusV / radiusH, y: 1.0 } : { x: 1.0, y: radiusH / radiusV };\n        // Step E: scale ellipse AND ray by calculated factors.\n        ellipseCopy.axis.scaleXY(scalingFactors);\n        rayCopy.a.scaleXY(scalingFactors);\n        rayCopy.b.scaleXY(scalingFactors);\n        // Intermediate result: now the ellipse is transformed to a circle and we can calculate intersections :)\n        // Step F: calculate circle+line intersecions\n        var tmpCircle = new Circle_1.Circle(new Vertex_1.Vertex(), ellipseCopy.radiusH()); // radiusH() === radiusV()\n        var intersections = tmpCircle.lineIntersections(rayCopy, inVectorBoundsOnly);\n        // Step G: transform intersecions back to original configuration\n        intersections.forEach(function (intersectionPoint) {\n            // Reverse transformation from above.\n            intersectionPoint.scaleXY({ x: 1 / scalingFactors.x, y: 1 / scalingFactors.y }, ellipseCopy.center);\n            intersectionPoint.rotate(-rotationAmount, ellipseCopy.center);\n            intersectionPoint.sub(moveAmount);\n        });\n        return intersections;\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    VEllipse.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.center, vert);\n            var angle = lineFromCenter.angle();\n            // Calculate tangent at angle\n            return _this.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    VEllipse.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)?\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.radiusH();\n        var radiusV = this.radiusV();\n        var curves = [];\n        var angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        var curAngle = angles[0] + this.rotation;\n        var startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length] + this.rotation;\n            var endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                var startTangent = this.tangentAt(curAngle + this.rotation);\n                var endTangent = this.tangentAt(nextAngle + this.rotation);\n                // Find intersection (ignore that the result might be null in some extreme cases)\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                var startDiff = startPoint.difference(intersection);\n                var endDiff = endPoint.difference(intersection);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VEllipse.prototype.destroy = function () {\n        this.center.destroy();\n        this.axis.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * A static collection of ellipse-related helper functions.\n     * @static\n     */\n    VEllipse.utils = {\n        /**\n         * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n         *\n         * @name polarToCartesian\n         * @param {number} centerX - The x coordinate of the elliptic center.\n         * @param {number} centerY - The y coordinate of the elliptic center.\n         * @param {number} radiusH - The horizontal radius of the ellipse.\n         * @param {number} radiusV - The vertical radius of the ellipse.\n         * @param {number} angle - The angle (in radians) to get the desired outline point for.\n         * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n         */\n        polarToCartesian: function (centerX, centerY, radiusH, radiusV, angle) {\n            // Tanks to Narasinham for the vertex-on-ellipse equations\n            // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n            var s = Math.sin(Math.PI / 2 - angle);\n            var c = Math.cos(Math.PI / 2 - angle);\n            return {\n                x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n                y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n            };\n        },\n        /**\n         * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n         *\n         * @param radiusH\n         * @param radiusV\n         * @param phi\n         * @returns {number} theta\n         */\n        phiToTheta: function (radiusH, radiusV, phi) {\n            //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n            var tanPhi = Math.tan(phi);\n            var tanPhi2 = tanPhi * tanPhi;\n            var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n            return theta;\n        },\n        /**\n         * Get n equidistant points on the elliptic arc.\n         *\n         * @param pointCount\n         * @returns\n         */\n        equidistantVertAngles: function (radiusH, radiusV, pointCount) {\n            var angles = [];\n            for (var i = 0; i < pointCount; i++) {\n                var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n                var theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n                angles[i] = theta;\n            }\n            return angles;\n        }\n    }; // END utils\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author   Ikaros Kappler\n * @date     2021-02-26\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-11-01 Tweaked the `endpointToCenterParameters` function to handle negative values, too, without errors.\n * @modified 2025-04-01 Adapting a the `toCubicBezier` calculation to match an underlying change in the vertAt and tangentAt calculation of ellipses (was required to hamonize both methods with circles).\n * @modified 2025-04-02 Adding `VEllipseSector.containsAngle` method.\n * @modified 2025-04-02 Adding `VEllipseSector.lineIntersections` and `VEllipseSector.lineIntersectionTangents` and implementing `Intersectable`.\n * @modified 2025-04-07 Adding value wrapping (0 to TWO_PI) to the `VEllipseSector.containsAngle` method.\n * @modified 2025-04-09 Adding the `VEllipseSector.move` method.\n * @modified 2025-04-19 Added the `VEllipseSector.getStartPoint` and `getEndPoint` methods.\n * @modified 2025-04-23 Added the `VEllipseSector.getBounds` method.\n * @version  1.2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipseSector = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar VEllipseSector = /** @class */ (function () {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    function VEllipseSector(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils_1.geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils_1.geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Move the ellipse sector by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof VEllipseSector\n     * @return {VEllipseSector} this for chaining\n     **/\n    VEllipseSector.prototype.move = function (amount) {\n        this.ellipse.move(amount);\n        return this;\n    };\n    /**\n     * Checks wether the given angle (must be inside 0 and PI*2) is contained inside this sector.\n     *\n     * @param {number} angle - The numeric angle to check.\n     * @method containsAngle\n     * @instance\n     * @memberof VEllipseSectpr\n     * @return {boolean} True if (and only if) this sector contains the given angle.\n     */\n    VEllipseSector.prototype.containsAngle = function (angle) {\n        angle = geomutils_1.geomutils.mapAngleTo2PI(angle); // wrapMinMax(angle, 0, Math.PI * 2);\n        var sAngle = geomutils_1.geomutils.mapAngleTo2PI(this.startAngle);\n        var eAngle = geomutils_1.geomutils.mapAngleTo2PI(this.endAngle);\n        // TODO: cleanup\n        // if (this.startAngle <= this.endAngle) {\n        //   return angle >= this.startAngle && angle < this.endAngle;\n        // } else {\n        //   // startAngle > endAngle\n        //   return angle >= this.startAngle || angle < this.endAngle;\n        // }\n        if (sAngle <= eAngle) {\n            return angle >= sAngle && angle < eAngle;\n        }\n        else {\n            // startAngle > endAngle\n            return angle >= sAngle || angle < eAngle;\n        }\n    };\n    /**\n     * Get the sectors starting point (on the underlying ellipse, located at the start angle).\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof VEllipseSector\n     * @return {Vertex} The sector's stating point.\n     */\n    VEllipseSector.prototype.getStartPoint = function () {\n        return this.ellipse.vertAt(this.startAngle);\n    };\n    /**\n     * Get the sectors ending point (on the underlying ellipse, located at the end angle).\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof VEllipseSector\n     * @return {Vertex} The sector's ending point.\n     */\n    VEllipseSector.prototype.getEndPoint = function () {\n        return this.ellipse.vertAt(this.endAngle);\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounds of this elliptic sector.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof VEllipse\n     * @return {Bounds} The bounds of this elliptic sector.\n     **/\n    VEllipseSector.prototype.getBounds = function () {\n        var _this = this;\n        // Calculage angles from east, west, north and south box points and check if they are inside\n        var extremes = this.ellipse.getExtremePoints();\n        var candidates = extremes.filter(function (point) {\n            var angle = new Line_1.Line(_this.ellipse.center, point).angle() - _this.ellipse.rotation;\n            return _this.containsAngle(angle);\n        });\n        return Bounds_1.Bounds.computeFromVertices([this.getStartPoint(), this.getEndPoint()].concat(candidates));\n    };\n    //--- BEGIN --- Implement interface `Intersectable`\n    /**\n     * Get the line intersections as vectors with this ellipse.\n     *\n     * @method lineIntersections\n     * @instance\n     * @memberof VEllipseSectpr\n     * @param {VertTuple<Vector>} ray - The line/ray to intersect this ellipse with.\n     * @param {boolean} inVectorBoundsOnly - (default=false) Set to true if only intersections within the vector bounds are of interest.\n     * @returns\n     */\n    VEllipseSector.prototype.lineIntersections = function (ray, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // First get all line intersections from underlying ellipse.\n        var ellipseIntersections = this.ellipse.lineIntersections(ray, inVectorBoundsOnly);\n        // Drop all intersection points that are not contained in the circle sectors bounds.\n        var tmpLine = new Line_1.Line(this.ellipse.center, new Vertex_1.Vertex());\n        return ellipseIntersections.filter(function (intersectionPoint) {\n            tmpLine.b.set(intersectionPoint);\n            var lineAngle = tmpLine.angle();\n            return _this.containsAngle(lineAngle - _this.ellipse.rotation);\n        });\n    };\n    /**\n     * Get all line intersections of this polygon and their tangents along the shape.\n     *\n     * This method returns all intersection tangents (as vectors) with this shape. The returned array of vectors is in no specific order.\n     *\n     * @method lineIntersections\n     * @memberof VEllipseSectpr\n     * @param line\n     * @param lineIntersectionTangents\n     * @returns\n     */\n    VEllipseSector.prototype.lineIntersectionTangents = function (line, inVectorBoundsOnly) {\n        var _this = this;\n        if (inVectorBoundsOnly === void 0) { inVectorBoundsOnly = false; }\n        // Find the intersections of all lines plus their tangents inside the circle bounds\n        var interSectionPoints = this.lineIntersections(line, inVectorBoundsOnly);\n        return interSectionPoints.map(function (vert) {\n            // Calculate angle\n            var lineFromCenter = new Line_1.Line(_this.ellipse.center, vert);\n            var angle = lineFromCenter.angle();\n            // console.log(\"angle\", (angle / Math.PI) * 180.0);\n            // const angle = Math.random() * Math.PI * 2; // TODO\n            // Calculate tangent at angle\n            return _this.ellipse.tangentAt(angle);\n        });\n    };\n    //--- END --- Implement interface `Intersectable`\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    VEllipseSector.prototype.toCubicBezier = function (quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        var segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        var radiusH = this.ellipse.radiusH();\n        var radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        var curves = [];\n        var curAngle = angles[0];\n        var startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            var nextAngle = angles[(i + 1) % angles.length];\n            var endPoint = this.ellipse.vertAt(nextAngle);\n            var startTangent = this.ellipse.tangentAt(curAngle + this.ellipse.rotation);\n            var endTangent = this.ellipse.tangentAt(nextAngle + this.ellipse.rotation);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                var diff = startPoint.difference(endPoint);\n                var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                var intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                if (intersection) {\n                    // It's VERY LIKELY hat this ALWAYS happens; it's just a typesave variant.\n                    // Intersection cannot be null.\n                    var startDiff = startPoint.difference(intersection);\n                    var endDiff = endPoint.difference(intersection);\n                    var curve = new CubicBezierCurve_1.CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                    curves.push(curve);\n                }\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VEllipseSector.prototype.destroy = function () {\n        this.ellipse.destroy();\n        this.isDestroyed = true;\n    };\n    VEllipseSector.ellipseSectorUtils = {\n        /**\n         * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n         * Inspiration found at:\n         *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) {\n            if (typeof options === \"undefined\")\n                options = { moveToStart: true };\n            if (typeof rotation === \"undefined\")\n                rotation = 0.0;\n            // Important note: this function only works if start- and end-angle are within\n            // one whole circle [x,x+2*PI].\n            // Revelations of more than 2*PI might result in unexpected arcs.\n            // -> Use the geomutils.wrapMax( angle, 2*PI )\n            startAngle = geomutils_1.geomutils.wrapMax(startAngle, Math.PI * 2);\n            endAngle = geomutils_1.geomutils.wrapMax(endAngle, Math.PI * 2);\n            // Find the start- and end-point on the rotated ellipse\n            // XYCoords to Vertex (for rotation)\n            var end = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n            var start = new Vertex_1.Vertex(VEllipse_1.VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n            end.rotate(rotation, { x: x, y: y });\n            start.rotate(rotation, { x: x, y: y });\n            // Boolean stored as integers (0|1).\n            var diff = endAngle - startAngle;\n            var largeArcFlag;\n            if (diff < 0) {\n                largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            }\n            else {\n                largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            }\n            var sweepFlag = 1;\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push(\"M\", start.x, start.y);\n            }\n            // Arc rotation in degrees, not radians.\n            var r2d = 180 / Math.PI;\n            pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }, // END function describeSVGArc\n        /**\n         * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n         * elliptic sector is the same for all.\n         *\n         * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n         * distance from the start angle to the first angle and/or the distance from the last angle to\n         * the end angle may be different to the others.\n         *\n         * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n         * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n         *\n         * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n         *\n         * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n         * @param {number} radiusV - The second (vertical) radius of the ellipse.\n         * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n         * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n         * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n         * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n         */\n        equidistantVertAngles: function (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) {\n            var ellipseAngles = VEllipse_1.VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n            ellipseAngles = ellipseAngles.map(function (angle) { return VEllipseSector.ellipseSectorUtils.normalizeAngle(angle); });\n            var angleIsInRange = function (angle) {\n                if (startAngle < endAngle)\n                    return angle >= startAngle && angle <= endAngle;\n                else\n                    return angle >= startAngle || (angle <= endAngle && angle >= 0);\n            };\n            // Drop all angles outside the sector\n            ellipseAngles = ellipseAngles.filter(angleIsInRange);\n            // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n            // --> find the angle that is closest to the start angle\n            var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n            // Bring all angles into the correct order\n            //    Idea: use splice or slice here?\n            var angles = [];\n            for (var i = 0; i < ellipseAngles.length; i++) {\n                angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n            }\n            return angles;\n        },\n        findClosestToStartAngle: function (startAngle, endAngle, ellipseAngles) {\n            // Note: endAngle > 0 && startAngle > 0\n            if (startAngle > endAngle) {\n                var n = ellipseAngles.length;\n                for (var i = 0; i < n; i++) {\n                    var ea = geomutils_1.geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                    if (ea >= startAngle && ea >= endAngle) {\n                        return i;\n                    }\n                }\n            }\n            return 0;\n        },\n        normalizeAngle: function (angle) { return (angle < 0 ? Math.PI * 2 + angle : angle); },\n        /**\n         * Convert the elliptic arc from endpoint parameters to center parameters as described\n         * in the w3c svg arc implementation note.\n         *\n         * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n         *\n         * @param {number} x1 - The x component of the start point (end of last SVG command).\n         * @param {number} y1 - The y component of the start point (end of last SVG command).\n         * @param {number} rx - The first (horizontal) radius of the ellipse.\n         * @param {number} ry - The second (vertical) radius of the ellipse.\n         * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n         * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n         * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n         * @param {number} x2 - The x component of the end point (end of last SVG command).\n         * @param {number} y2 - The y component of the end point (end of last SVG command).\n         * @returns\n         */\n        endpointToCenterParameters: function (x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n            // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n            // Thanks to\n            //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n            var abs = Math.abs;\n            var sin = Math.sin;\n            var cos = Math.cos;\n            var sqrt = Math.sqrt;\n            var pow = function (n) {\n                return n * n;\n            };\n            var sinphi = sin(phi);\n            var cosphi = cos(phi);\n            // Step 1: simplify through translation/rotation\n            var x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n            var y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n            var px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n            // correct of out-of-range radii\n            var L = px / prx + py / pry;\n            if (L > 1) {\n                rx = sqrt(L) * abs(rx);\n                ry = sqrt(L) * abs(ry);\n            }\n            else {\n                rx = abs(rx);\n                ry = abs(ry);\n            }\n            // Step 2 + 3: compute center\n            var sign = fa === fs ? -1 : 1;\n            // const M: number = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n            var M = sqrt(Math.abs((prx * pry - prx * py - pry * px) / (prx * py + pry * px))) * sign;\n            var _cx = (M * (rx * y)) / ry;\n            var _cy = (M * (-ry * x)) / rx;\n            var cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n            var cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n            // Step 4: Compute start and end angle\n            var center = new Vertex_1.Vertex(cx, cy);\n            var axis = center.clone().addXY(rx, ry);\n            var ellipse = new VEllipse_1.VEllipse(center, axis, 0);\n            // console.log(\"VELLIPSE::::::\", ellipse);\n            ellipse.rotate(phi);\n            var startAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x1, y1)).angle();\n            var endAngle = new Line_1.Line(ellipse.center, new Vertex_1.Vertex(x2, y2)).angle();\n            return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n        }\n    }; // END ellipseSectorUtils\n    return VEllipseSector;\n}());\nexports.VEllipseSector = VEllipseSector;\n//# sourceMappingURL=VEllipseSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vector.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-10-25 Added the `getOrthogonal` method.\n * @modified 2025-04-14 Added the `Vector.rotate(number)` method.\n * @version  1.6.0\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vector = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    /**\n     * The inverse of a vector is a vector with the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = (line.b.x - line.a.x) * a - (line.b.y - line.a.y) * b;\n        var numerator2 = (this.b.x - this.a.x) * a - (this.b.y - this.a.y) * b;\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + a * (this.b.x - this.a.x), this.a.y + a * (this.b.y - this.a.y));\n    };\n    /**\n     * Get the orthogonal \"vector\" of this vector (rotated by 90° clockwise).\n     *\n     * @name getOrthogonal\n     * @method getOrthogonal\n     * @return {Vector} A new vector with the same length that stands on this vector's point a.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.getOrthogonal = function () {\n        // Orthogonal of vector (0,0)->(x,y) is (0,0)->(-y,x)\n        var linePoint = this.a.clone();\n        var startPoint = this.b.clone().sub(this.a);\n        var tmp = startPoint.x;\n        startPoint.x = -startPoint.y;\n        startPoint.y = tmp;\n        return new Vector(linePoint, startPoint.add(this.a));\n    };\n    /**\n     * Rotate this vector by the given angle around the first point `a`.\n     *\n     * @name rotate\n     * @method rotate\n     * @return {Vector} this - for chaining.\n     * @instance\n     * @memberof Vector\n     */\n    Vector.prototype.rotate = function (angle) {\n        this.b.rotate(angle, this.a);\n        return this;\n    };\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {XYCoords} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2023-09-29 Fixed a calculation error in the VertTuple.hasPoint() function; distance measure was broken!\n * @modified 2024-09-10 Chaging the first param of `pointDistance` from `Vertex` to less strict type `XYCoords`. This should not break anything.\n * @modified 2024-09-10 Adding the optional `epsilon` param to the `hasPoint` method.\n * @modified 2024-12-02 Added the `epsilon` param to the `colinear` method. Default is 1.0e-6.\n * @modified 2025-03-31 Added the `VertTuple.revert` method.\n * @modified 2025-04-15 Changed param of `VertTuple.moveTo` method from `Vertex` to `XYCoords`.\n * @modified 2025-04-15 Added method `VertTuple.move` method.\n * @version 1.4.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertTuple = void 0;\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    /**\n     * Reverse this vertex tuple: a becomes b, and b becomes a.\n     * This operation is in-place.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @instance\n     * @memberof VertTuple\n     * @return {VertTuple<T>} this\n     */\n    VertTuple.prototype.revert = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {XYCoords} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    /**\n     * Move this line by the given amount\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move both point of this tuple.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.move = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == \"undefined\") {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return (line.b.y - line.a.y) * (this.b.x - this.a.x) - (line.b.x - line.a.x) * (this.b.y - this.a.y);\n    };\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @param {epsilon?=1.0e-6} epsilon - The epsilon to use (default is 1.0e-6).\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line, epsilon) {\n        return Math.abs(this.denominator(line)) < (typeof epsilon === \"undefined\" ? Vertex_1.Vertex.EPSILON : epsilon);\n    };\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point - The point to check.\n     * @param {boolean=} insideBoundsOnly - [optional] If set to to true (default=false) the point must be between start and end point of the line.\n     * @param {number=Vertex.EPSILON} epsilon - [optional] A tolerance.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    VertTuple.prototype.hasPoint = function (point, insideBoundsOnly, epsilon) {\n        var t = this.getClosestT(point);\n        // Compare to pointDistance?\n        var distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex_1.Vertex.EPSILON) && t >= 0 && t <= 1;\n        }\n        else {\n            return distance < (epsilon !== null && epsilon !== void 0 ? epsilon : Vertex_1.Vertex.EPSILON); // t >= 0 && t <= 1;\n        }\n    };\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {XYCoords} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    VertTuple.prototype.destroy = function () {\n        this.a.destroy();\n        this.b.destroy();\n        this.isDestroyed = true;\n    };\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @modified 2021-12-01 Changed the type of param of `scale` to XYCoords.\n * @modified 2021-12-01 Added function `scaleXY` for non uniform scaling.\n * @modified 2021-12-17 Added the functions `lerp` and `lerpAbs` for linear interpolations.\n * @modified 2022-01-31 Added `Vertex.utils.arrayToJSON`.\n * @modified 2022-02-02 Added the `destroy` method.\n * @modified 2022-02-02 Cleared the `Vertex.toSVGString` function (deprecated). Use `drawutilssvg` instead.\n * @modified 2022-11-28 Added the `subXY`, `subX` and `subY` methods to the `Vertex` class.\n * @modified 2023-09-29 Downgraded types for the `Vertex.utils.buildArrowHead` function (replacing Vertex params by more generic XYCoords type).\n * @modified 2023-09-29 Added the `Vertex.abs()` method as it seems useful.\n * @modified 2024-03-08 Added the optional `precision` param to the `toString` method.\n * @modified 2024-12-17 Outsourced the euclidean distance calculation of `Vertex.distance` to `geomutils.dist4`.\n * @modified 2025-03-24 Making the second parameter `center` of the `Vertex.rotate` method optional.\n * @modified 2025-04-13 Adding the `Vertex.move(amount: XYCoords)` method (does the same as `add`, added by naming convention).\n * @modified 2025-05-07 Class `Vertex` is now implementing interface `IBounded` (to meet convention).\n * @version  2.11.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vertex = void 0;\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Bounds_1 = require(\"./Bounds\");\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw \"Cannot add \".concat(typeof x, \" to numeric x component!\");\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw \"Cannot add \".concat(typeof y, \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Move this point by the given amount.\n     *\n     * This method just calls `add(amount).\n     *\n     *\n     * @method move\n     * @param {Vertex} amount - The amount to move this vertex.\n     * @return {Vertex} this - For chaining.\n     * @instance\n     * @memberof Vertex\n     */\n    Vertex.prototype.move = function (amount) {\n        return this.add(amount);\n    };\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw \"Cannot add \".concat(typeof x, \" to numeric x component!\");\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw \"Cannot add \".concat(typeof y, \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Substract the passed amounts from the x- and y- components of this vertex.\n     *\n     * @method subXY\n     * @param {number} x - The amount to substract from x.\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.subXY = function (amountX, amountY) {\n        this.x -= amountX;\n        this.y -= amountY;\n        return this;\n    };\n    /**\n     * Substract the passed amounts from the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to substract from x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.subX = function (amountX) {\n        this.x -= amountX;\n        return this;\n    };\n    /**\n     * Substract the passed amounts from the y-component of this vertex.\n     *\n     * @method subY\n     * @param {number} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.subY = function (amountY) {\n        this.y -= amountY;\n        return this;\n    };\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    };\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        // return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n        return geomutils_1.geomutils.dist4(this.x, this.y, vert.x, vert.y);\n    };\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.angle = function (origin) {\n        var a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    };\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by one uniform scale factor.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        return this.scaleXY({ x: factor, y: factor }, center);\n    };\n    /**\n     * Perform a linear interpolation towards the given target vertex.\n     * The amount value `t` is relative, `t=0.0` means no change, `t=1.0`\n     * means this point will be moved to the exact target position.\n     *\n     * `t=0.5` will move this point to the middle of the connecting\n     * linear segment.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The relative amount, usually in [0..1], but other values will work, too.\n     * @returns\n     */\n    Vertex.prototype.lerp = function (target, t) {\n        var diff = this.difference(target);\n        // return new Vertex(this.x + diff.x * t, this.y + diff.y * t);\n        this.x += diff.x * t;\n        this.y += diff.y * t;\n        return this;\n    };\n    /**\n     * Perform a linear interpolation towards the given target vertex (absolute variant).\n     * The amount value `t` is absolute, which means the lerp amount is a direct distance\n     * value. This point will have move the amount of the passed distance `u`.\n     *\n     * @param {XYCoords} target - The target position to lerp this vertex to.\n     * @param {number} t - The absolute move amount to use to lerping.\n     * @returns\n     */\n    Vertex.prototype.lerpAbs = function (target, u) {\n        var dist = this.distance(target);\n        var diff = this.difference(target);\n        var step = { x: diff.x / dist, y: diff.y / dist };\n        // return new Vertex(this.x + step.x * u, this.y + step.y * u);\n        this.x += step.x * u;\n        this.y += step.y * u;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center by two independent x- and y- scale factors.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {XYCoords=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scaleXY = function (factors, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.x = center.x + (this.x - center.x) * factors.x;\n        this.y = center.y + (this.y - center.y) * factors.y;\n        return this;\n    };\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    /**\n     * Set both coordinates of this vertex to their absolute value (abs(x), abs(y)).\n     *\n     * @method abs\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     */\n    Vertex.prototype.abs = function () {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        return this;\n    };\n    //--- BEGIN --- Implement interface `IBounded`\n    /**\n     * Get the bounding box (bounds) of this Vertex.\n     * This is just by convention – any vertex is just a position without any useful with or height (0).\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Vertex\n     * @return {Bounds} The rectangular bounds of this Vertex (width and height are zero).\n     **/\n    Vertex.prototype.getBounds = function () {\n        // return Bounds.computeFromVertices([this.a, this.b, this.c]);\n        return Bounds_1.Bounds.computeFromVertices([this]);\n    };\n    //--- END --- Implement interface `IBounded`\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function (precision) {\n        if (typeof precision === \"undefined\") {\n            return \"(\" + this.x + \",\" + this.y + \")\";\n        }\n        else {\n            return \"(\" + this.x.toFixed(precision) + \",\" + this.y.toFixed(precision) + \")\";\n        }\n    };\n    /**\n     * This function should invalidate any installed listeners and invalidate this object.\n     * After calling this function the object might not hold valid data any more and\n     * should not be used.\n     */\n    Vertex.prototype.destroy = function () {\n        this.listeners.removeAllListeners();\n        this.isDestroyed = true;\n    };\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     * @readonly\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {XYCoords} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {XYCoords} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            console.warn(\"[DEPRECATION] Vertex.utils.buildArrowHead is deprecated. Please use Vector.utils.buildArrowHead instead.\");\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        },\n        /**\n         * Convert the given vertices (array) to a JSON string.\n         *\n         * @param {number?} precision - (optional) The numeric precision to be used (number of precision digits).\n         * @returns {string}\n         */\n        arrayToJSON: function (vertices, precision) {\n            return JSON.stringify(vertices.map(function (vert) {\n                return typeof precision === undefined\n                    ? { x: vert.x, y: vert.y }\n                    : { x: Number(vert.x.toFixed(precision)), y: Number(vert.y.toFixed(precision)) };\n            }));\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2024-03-10 Fixed some types for Typescript 5 compatibility.\n * @version  1.1.2\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexAttr = void 0;\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexListeners = void 0;\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addClickListener = function (listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeClickListener = function (listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireClickEvent = function (e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    };\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    /**\n     * Removes all listeners from this listeners object.\n     */\n    VertexListeners.prototype.removeAllListeners = function () {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n    };\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == \"undefined\")\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-12 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-06-01 Tweaked the `polyline` function; lineWidth now scales with scale.x.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-08-23 Fixed a type issue in the `polyline` function.\n * @modified 2022-08-23 Fixed a type issue in the `setConfiguration` function.\n * @modified 2022-08-23 Fixed a type issue in the `path` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Removed unused method stub for texturedPoly helper function (cleanup).\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @modified 2023-09-30 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2023-10-07 Adding the optional `arrowHeadBasePositionBuffer` param to the arrowHead(...) method.\n * @modified 2024-09-13 Remoed the scaling of `lineWidth` in the `polygon` and `polyline` methods. This makes no sense here and doesn't match up with the behavior of other line functions.\n * @version  1.13.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutils = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilssvg_1 = require(\"./drawutilssvg\");\nvar Vector_1 = require(\"./Vector\");\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        // this.lineDash = [];\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    drawutils.prototype.applyStrokeOpts = function (strokeOptions) {\n        var _this = this;\n        var _a, _b;\n        this.ctx.setLineDash(((_a = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashArray) !== null && _a !== void 0 ? _a : []).map(function (dashArrayElem) {\n            // Note assume scale.x === scale.y\n            // Invariant scale makes funny stuff anyway.\n            return dashArrayElem * _this.scale.x;\n        }));\n        this.ctx.lineDashOffset = ((_b = strokeOptions === null || strokeOptions === void 0 ? void 0 : strokeOptions.dashOffset) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.beginDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutils.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutils.prototype.setConfiguration = function (configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode || \"source-over\";\n    };\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDash: Array<number>) {\n    //   this.lineDash = lineDash;\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.setCurrentId = function (uid) {\n        // NOOP\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    drawutils.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var arrowHeadBasePosition = new Vertex_1.Vertex(0, 0);\n        this.arrowHead(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition); // Will NOT use dash configuration\n        this.line(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions); // Will use dash configuration\n    };\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    drawutils.prototype.cubicBezierArrow = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        var arrowHeadBasePosition = new Vertex_1.Vertex(0, 0);\n        // Will NOT use dash configuration\n        this.arrowHead(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        var diff = arrowHeadBasePosition.difference(endPoint);\n        // Will use dash configuration\n        this.cubicBezier(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n    };\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    drawutils.prototype.arrowHead = function (zA, zB, color, lineWidth, headLength, strokeOptions, arrowHeadBasePositionBuffer) {\n        // var headLength: number = 8; // length of head in pixels\n        if (headLength === void 0) { headLength = 8; }\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        var vertices = Vector_1.Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        this.ctx.moveTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size, alpha) {\n        if (alpha === void 0) { alpha = 1.0; }\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        this.ctx.globalAlpha = alpha;\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @param {XYCoords={x:0,y:0}} rotationCenter - (optional) The rotational center; default is center of bounding box.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        var basePolygonBounds = polygon.getBounds();\n        // var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n        var targetCenterDifference = new Vertex_1.Vertex(polygonPosition.x, polygonPosition.y).difference(basePolygonBounds.getCenter());\n        // var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n        // Get the position offset of the polygon\n        var targetTextureSize = new Vertex_1.Vertex(textureSize.width, textureSize.height);\n        // var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n        var targetTextureOffset = new Vertex_1.Vertex(textureSize.min.x, textureSize.min.y).sub(polygonPosition);\n        this.ctx.save();\n        // this.ctx.translate(this.offset.x + rotationCenter.x * this.scale.x, this.offset.y + rotationCenter.y * this.scale.y);\n        this.ctx.translate(this.offset.x + polygonPosition.x * this.scale.x, this.offset.y + polygonPosition.y * this.scale.y);\n        drawutils.helpers.clipPoly(this.ctx, {\n            x: -polygonPosition.x * this.scale.x,\n            y: -polygonPosition.y * this.scale.y\n        }, this.scale, polygon.vertices);\n        this.ctx.scale(this.scale.x, this.scale.y);\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(textureImage, 0, 0, textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        targetTextureOffset.x, // * this.scale.x,\n        targetTextureOffset.y, // * this.scale.y,\n        targetTextureSize.x, //  * this.scale.x,\n        targetTextureSize.y // * this.scale.y\n        );\n        this.ctx.restore();\n    };\n    /*\n    _texturedPoly(\n      textureImage: HTMLImageElement,\n      textureSize: Bounds,\n      polygon: Polygon,\n      polygonPosition: XYCoords,\n      rotation: number,\n      rotationCenter: XYCoords = { x: 0, y: 0 }\n    ): void {\n      var basePolygonBounds = polygon.getBounds();\n      var targetCenterDifference = polygonPosition.clone().difference(basePolygonBounds.getCenter());\n      var rotationalOffset = rotationCenter ? polygonPosition.difference(rotationCenter) : { x: 0, y: 0 };\n      // var rotationalOffset = { x: 0, y: 0 };\n      var tileCenter = basePolygonBounds.getCenter().sub(targetCenterDifference);\n  \n      // Get the position offset of the polygon\n      var targetTextureSize = new Vertex(textureSize.width, textureSize.height);\n      var targetTextureOffset = new Vertex(-textureSize.width / 2, -textureSize.height / 2).sub(targetCenterDifference);\n  \n      this.ctx.save();\n  \n      // this.ctx.translate(\n      //   this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n      //   this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      // );\n      this.ctx.translate(\n        this.offset.x + (tileCenter.x - rotationalOffset.x * 0 + targetTextureOffset.x * 0.0) * this.scale.x,\n        this.offset.y + (tileCenter.y - rotationalOffset.y * 0 + targetTextureOffset.y * 0.0) * this.scale.y\n      );\n      this.ctx.rotate(rotation);\n  \n      drawutils.helpers.clipPoly(\n        this.ctx,\n        {\n          x: (-targetCenterDifference.x * 1 - tileCenter.x - rotationalOffset.x) * this.scale.x,\n          y: (-targetCenterDifference.y * 1 - tileCenter.y - rotationalOffset.y) * this.scale.y\n        },\n        this.scale,\n        polygon.vertices\n      );\n      this.ctx.drawImage(\n        textureImage,\n        0,\n        0,\n        textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n        (-polygonPosition.x + targetTextureOffset.x * 1 - rotationalOffset.x * 1) * this.scale.x,\n        (-polygonPosition.y + targetTextureOffset.y * 1 - rotationalOffset.y * 1) * this.scale.y,\n        targetTextureSize.x * this.scale.x,\n        targetTextureSize.y * this.scale.y\n      );\n  \n      // const scaledTextureSize = new Bounds(\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y\n      //   ).scaleXY(this.scale, rotationCenter),\n      //   new Vertex(\n      //     -polygonPosition.x + targetTextureOffset.x - rotationalOffset.x + targetTextureSize.x,\n      //     -polygonPosition.y + targetTextureOffset.y - rotationalOffset.y + targetTextureSize.y\n      //   ).scaleXY(this.scale, rotationCenter)\n      // );\n      // this.ctx.drawImage(\n      //   textureImage,\n      //   0,\n      //   0,\n      //   textureImage.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n      //   textureImage.naturalHeight - 1, // To avoid errors substract 1 here.\n      //   scaledTextureSize.min.x,\n      //   scaledTextureSize.min.y,\n      //   scaledTextureSize.width,\n      //   scaledTextureSize.height\n      // );\n  \n      this.ctx.restore();\n    }\n    */\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth, strokeOptions) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {XYCoords} startPoint   - The start point of the cubic Bézier curve\n     * @param {XYCoords} controlPoint - The control point the cubic Bézier curve.\n     * @param {XYCoords} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth, strokeOptions) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color, lineWidth, strokeOptions) {\n        if (!path || path.length == 0) {\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgba(128,128,128, 0.5)\", undefined);\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.applyStrokeOpts(options);\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth, strokeOptions) {\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cross = function (center, radius, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.setLineDash([]); // Clear line-dash settings\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth, strokeOptions) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth, strokeOptions);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth, strokeOptions) {\n        if (vertices.length <= 1) {\n            return;\n        }\n        this.ctx.save();\n        this.applyStrokeOpts(strokeOptions);\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.text = function (text, x, y, options) {\n        // See https://stackoverflow.com/a/23523697\n        var _a, _b, _c;\n        options = options || {};\n        this.ctx.save();\n        var relX = this.offset.x + x * this.scale.x;\n        var relY = this.offset.y + y * this.scale.y;\n        var color = options.color || \"black\";\n        if (options.fontSize || options.fontFamily) {\n            // Scaling of text only works in uniform mode\n            this.ctx.font =\n                (options.fontWeight ? options.fontWeight + \" \" : \"\") +\n                    (options.fontStyle ? options.fontStyle + \" \" : \"\") +\n                    (options.fontSize ? options.fontSize * this.scale.x + \"px \" : \" \") +\n                    (options.fontFamily\n                        ? options.fontFamily.indexOf(\" \") === -1\n                            ? options.fontFamily\n                            : \"\\\"\".concat(options.fontFamily, \"\\\"\")\n                        : \"Arial\");\n        }\n        if (options.textAlign) {\n            this.ctx.textAlign = options.textAlign;\n        }\n        var rotation = (_a = options.rotation) !== null && _a !== void 0 ? _a : 0.0;\n        var lineHeight = ((_c = (_b = options.lineHeight) !== null && _b !== void 0 ? _b : options.fontSize) !== null && _c !== void 0 ? _c : 0) * this.scale.x;\n        this.ctx.translate(relX, relY);\n        this.ctx.rotate(rotation);\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, 0, lineHeight / 2);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, 0, lineHeight / 2);\n        }\n        // this.ctx.translate(-relX, -relY);\n        // this.ctx.rotate(-rotation); // is this necessary before 'restore()'?\n        this.ctx.restore();\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.font = \"lighter 9pt Arial\";\n        this.ctx.translate(x, y);\n        if (typeof rotation !== \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutils.prototype.path = function (pathData, color, lineWidth, options) {\n        var d = options && options.inplace ? pathData : drawutilssvg_1.drawutilssvg.copyPathData(pathData);\n        drawutilssvg_1.drawutilssvg.transformPathData(d, this.offset, this.scale);\n        if (color) {\n            this.ctx.strokeStyle = color;\n        }\n        this.ctx.lineWidth = lineWidth || 1;\n        this.applyStrokeOpts(options);\n        if (this.fillShapes) {\n            if (color) {\n                this.ctx.fillStyle = color;\n            }\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            if (color) {\n                this.ctx.strokeStyle = color;\n            }\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    drawutils.helpers = {\n        // A helper function to define the clipping path.\n        // This could be a candidate for the draw library.\n        clipPoly: function (ctx, offset, scale, vertices) {\n            ctx.beginPath();\n            // Set clip mask\n            ctx.moveTo(offset.x + vertices[0].x * scale.x, offset.y + vertices[0].y * scale.y);\n            for (var i = 1; i < vertices.length; i++) {\n                var vert = vertices[i];\n                ctx.lineTo(offset.x + vert.x * scale.x, offset.y + vert.y * scale.y);\n            }\n            ctx.closePath();\n            ctx.clip();\n        }\n    };\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-27 Added the `texturedPoly` function.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `lineDashes` attribute.\n * @version  0.0.10\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilsgl = void 0;\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext|null} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    drawutilsgl.prototype._x2rel = function (x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    };\n    drawutilsgl.prototype._y2rel = function (y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function (renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilsgl.prototype.endDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilsgl.prototype.setConfiguration = function (configuration) {\n        // TODO\n    };\n    // /**\n    //  * Set or clear the line-dash configuration. Pass `null` for un-dashed lines.\n    //  *\n    //  * See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n    //  * and https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash\n    //  * for how line dashes work.\n    //  *\n    //  * @method\n    //  * @param {Array<number> lineDashes - The line-dash array configuration.\n    //  * @returns {void}\n    //  */\n    // setLineDash(lineDashes: Array<number>) {\n    //   // TODO\n    // }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    drawutilsgl.prototype.setCurrentId = function (uid) {\n        // NOOP\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     **/\n    drawutilsgl.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    drawutilsgl.prototype.cubicBezierArrow = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    drawutilsgl.prototype.arrowHead = function (zA, zB, color, lineWidth, headLength) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (0.0=opaque, 1.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size, alpha) {\n        if (alpha === void 0) { alpha = 0.0; }\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilsgl\n     **/\n    drawutilsgl.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {VertXYCoordsex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {XYCoords} startPoint - The start of the handle.\n     * @param {XYCoords} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutilsgl.prototype.rect = function (position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cross = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.text = function (text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.label = function (text, x, y, rotation, color) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilsgl.prototype.path = function (pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @modified 2021-11-15 Adding more parameters tot the `text()` function: fontSize, textAlign, fontFamily, lineHeight.\n * @modified 2021-11-19 Fixing the `label(text,x,y)` position.\n * @modified 2021-11-19 Added the `color` param to the `label(...)` function.\n * @modified 2022-02-03 Added the `lineWidth` param to the `crosshair` function.\n * @modified 2022-02-03 Added the `cross(...)` function.\n * @modified 2022-03-26 Added the private `nodeDefs` and `bufferedNodeDefs` attributes.\n * @modified 2022-03-26 Added the `texturedPoly` function to draw textures polygons.\n * @modified 2022-07-26 Adding `alpha` to the `image(...)` function.\n * @modified 2022-11-10 Tweaking some type issues.\n * @modified 2023-02-04 Fixed a typo in the CSS classname for cubic Bézier paths: cubicBezier (was cubierBezier).\n * @modified 2023-02-10 The methods `setCurrentClassName` and `setCurrentId` also accept `null` now.\n * @modified 2023-09-29 Added initialization checks for null parameters.\n * @modified 2023-09-29 Added a missing implementation to the `drawurilssvg.do(XYCoords,string)` function. Didn't draw anything.\n * @modified 2023-09-29 Downgrading all `Vertex` param type to the more generic `XYCoords` type in these render functions: line, arrow, texturedPoly, cubicBezier, cubicBezierPath, handle, handleLine, dot, point, circle, circleArc, ellipse, grid, raster.\n * @modified 2023-09-29 Added the `headLength` parameter to the 'DrawLib.arrow()` function.\n * @modified 2023-09-29 Added the `arrowHead(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-09-29 Added the `cubicBezierArrow(...)` function to the 'DrawLib.arrow()` interface.\n * @modified 2023-10-04 Adding `strokeOptions` param to these draw function: line, arrow, cubicBezierArrow, cubicBezier, cubicBezierPath, circle, circleArc, ellipse, square, rect, polygon, polyline.\n * @modified 2024-01-30 Fixing an issue with immutable style sets; changes to the global draw config did not reflect here (do now).\n * @modified 2024-03-10 Fixing some types for Typescript 5 compatibility.\n * @modified 2024-07-24 Caching custom style defs in a private buffer variable.\n * @version  1.6.10\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilssvg = void 0;\nvar CircleSector_1 = require(\"./CircleSector\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilssvg = /** @class */ (function () {\n    /**\n     * Passed from primary to secondary instance.\n     */\n    //private nodeStyle: SVGStyleElement;\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    function drawutilssvg(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode, nodeDefs, bufferNodeDefs, nodeStyle) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex_1.Vertex(0, 0).set(offset);\n        this.scale = new Vertex_1.Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = Boolean(isSecondary);\n        this.drawConfig = drawConfig;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            if (!gNode || !bufferGNode || !nodeDefs || !bufferNodeDefs) {\n                throw \"Cannot create secondary svg draw lib with undefinde gNode|bufferGNode|nodeDefs|bufferNodeDefs.\";\n            }\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n            this.nodeDefs = nodeDefs;\n            this.bufferedNodeDefs = bufferNodeDefs;\n            if (nodeStyle) {\n                this.nodeStyle = nodeStyle;\n            }\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.addDefsNode();\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    /**\n     * Adds a default style defintion based on the passed DrawConfig.\n     * Twaek the draw config to change default colors or line thicknesses.\n     *\n     * @param {DrawConfig} drawConfig\n     */\n    drawutilssvg.prototype.addStyleDefs = function (drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        this.rebuildStyleDefs(drawConfig);\n    };\n    /**\n     * This method is required to re-define the global style defs. It is needed\n     * if any value in the DrawConfig changed in the meantime.\n     * @param drawConfig\n     */\n    drawutilssvg.prototype.rebuildStyleDefs = function (drawConfig) {\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        var keys = {\n            \"bezier\": \"CubicBezierCurve\",\n            //\"bezierPath\": \"BezierPath\", // TODO: is this correct?\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\",\n            \"text\": \"Text\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        var rules = [];\n        // console.log(\"drawConfig\", drawConfig);\n        for (var k in keys) {\n            var className = keys[k];\n            var drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(\".\".concat(className, \" { fill : none; stroke: \").concat(drawSettings.color, \"; stroke-width: \").concat(drawSettings.lineWidth, \"px }\"));\n            }\n            else {\n                console.warn(\"Warning: your draw config is missing the key '\".concat(k, \"' which is required.\"));\n            }\n        }\n        if (this.customStyleDefs) {\n            rules.push(\"\\n/* Custom styles */\\n\");\n            this.customStyleDefs.forEach(function (value, key) {\n                rules.push(key + \" { \" + value + \" }\");\n            });\n            // this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + rules.join(\"\\n\");\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    };\n    /**\n     * Adds the internal <defs> node.\n     */\n    drawutilssvg.prototype.addDefsNode = function () {\n        this.nodeDefs = this.createSVGNode(\"defs\");\n        // this.svgNode.appendChild(this.nodeDefs);\n        this.bufferedNodeDefs = this.createSVGNode(\"defs\");\n        this.svgNode.appendChild(this.nodeDefs);\n    };\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    drawutilssvg.prototype.addCustomStyleDefs = function (defs) {\n        this.customStyleDefs = defs;\n    };\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    drawutilssvg.prototype.findElement = function (key, nodeName) {\n        if (!key) {\n            return null;\n        }\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    };\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    drawutilssvg.prototype.createSVGNode = function (nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    };\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    drawutilssvg.prototype.makeNode = function (nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            // node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n            node.style[\"mix-blend-mode\"](this.drawlibConfiguration.blendMode);\n        }\n        // if (this.lineDashEnabled && this.lineDash && this.lineDash.length > 0 && drawutilssvg.nodeSupportsLineDash(nodeName)) {\n        //   node.setAttribute(\"stroke-dasharray\", this.lineDash.join(\" \"));\n        // }\n        return node;\n    };\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    drawutilssvg.prototype._bindFillDraw = function (node, className, color, lineWidth, strokeOptions) {\n        this._configureNode(node, className, this.fillShapes, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    };\n    /**\n     * Bind this given node to a parent. If no parent is passed then the global\n     * node buffer will be used.\n     *\n     * @method _bindNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {SVGElement=} bindingParent - (optional) You may pass node other than the glober buffer node.\n     * @returns {SVGElement} The passed node itself.\n     */\n    drawutilssvg.prototype._bindNode = function (node, bindingParent) {\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            (bindingParent !== null && bindingParent !== void 0 ? bindingParent : this.bufferGNode).appendChild(node);\n        }\n        return node;\n    };\n    /**\n     * Add custom CSS class names and the globally defined CSS classname to the\n     * given node.\n     *\n     * @method addCSSClasses\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The SVG node to bind.\n     * @param {string} className - The additional custom classname to add.\n     * @returns {void}\n     */\n    drawutilssvg.prototype._addCSSClasses = function (node, className) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", \"\".concat(className, \" \").concat(this.curClassName));\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n    };\n    drawutilssvg.prototype._configureNode = function (node, className, fillMode, color, lineWidth, strokeOptions) {\n        this._addCSSClasses(node, className);\n        node.setAttribute(\"fill\", fillMode && color ? color : \"none\");\n        node.setAttribute(\"stroke\", fillMode ? \"none\" : color || \"none\");\n        node.setAttribute(\"stroke-width\", \"\".concat(lineWidth || 1));\n        if (this.curId) {\n            node.setAttribute(\"id\", \"\".concat(this.curId)); // Maybe React-style 'key' would be better?\n        }\n        this.applyStrokeOpts(node, strokeOptions);\n        return node;\n    };\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    drawutilssvg.prototype.setSize = function (canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", \"0 0 \".concat(this.canvasSize.width, \" \").concat(this.canvasSize.height));\n        this.svgNode.setAttribute(\"width\", \"\".concat(this.canvasSize.width));\n        this.svgNode.setAttribute(\"height\", \"\".concat(this.canvasSize.height));\n    };\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilssvg.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, this.drawConfig, // null as any as DrawConfig, // no DrawConfig – this will work as long as `isSecondary===true`\n        true, // isSecondary\n        this.gNode, this.bufferGNode, this.nodeDefs, this.bufferedNodeDefs, this.nodeStyle);\n        return copy;\n    };\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    drawutilssvg.prototype.setConfiguration = function (configuration) {\n        this.drawlibConfiguration = configuration;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID|null} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentId = function (uid) {\n        this.curId = uid;\n    };\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string|null} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentClassName = function (className) {\n        this.curClassName = className;\n    };\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.beginDrawCycle = function (renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    };\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    drawutilssvg.prototype.endDrawCycle = function (renderTime) {\n        this.rebuildStyleDefs(this.drawConfig);\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferedNodeDefs, this.nodeDefs);\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        var tmpGNode = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmpGNode;\n        var tmpDefsNode = this.nodeDefs;\n        this.nodeDefs = this.bufferedNodeDefs;\n        this.bufferedNodeDefs = tmpDefsNode;\n    };\n    /**\n     * A private helper method to apply stroke options to the current\n     * context.\n     * @param {StrokeOptions=} strokeOptions -\n     */\n    drawutilssvg.prototype.applyStrokeOpts = function (node, strokeOptions) {\n        var _this = this;\n        if (strokeOptions &&\n            strokeOptions.dashArray &&\n            strokeOptions.dashArray.length > 0 &&\n            drawutilssvg.nodeSupportsLineDash(node.tagName)) {\n            node.setAttribute(\"stroke-dasharray\", strokeOptions.dashArray\n                .map(function (dashArayElem) {\n                return dashArayElem * _this.scale.x;\n            })\n                .join(\" \"));\n            if (strokeOptions.dashOffset) {\n                node.setAttribute(\"stroke-dashoffset\", \"\".concat(strokeOptions.dashOffset * this.scale.x));\n            }\n        }\n    };\n    drawutilssvg.prototype._x = function (x) {\n        return this.offset.x + this.scale.x * x;\n    };\n    drawutilssvg.prototype._y = function (y) {\n        return this.offset.y + this.scale.y * y;\n    };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {XYCoords} zA - The start point of the line.\n     * @param {XYCoords} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.line = function (zA, zB, color, lineWidth, strokeOptions) {\n        // const line: SVGElement = this.makeNode(\"line\");\n        // this.applyStrokeOpts(line, strokeOptions);\n        // line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        // line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        // line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        // line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        var line = this.makeLineNode(zA, zB, color, lineWidth, strokeOptions);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1, strokeOptions);\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.arrow = function (zA, zB, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var group = this.makeNode(\"g\");\n        var arrowHeadBasePosition = { x: 0, y: 0 };\n        // Just create the child nodes, don't bind them to the root node.\n        var arrowHead = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        var line = this.makeLineNode(zA, arrowHeadBasePosition, color, lineWidth, strokeOptions);\n        group.appendChild(line);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"linear-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    };\n    /**\n     * Draw a cubic Bézier curve and and an arrow at the end (endControlPoint) of the given line width the specified (CSS-) color and arrow size.\n     *\n     * @method cubicBezierArrow\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {headLength=8} headLength - (optional) The length of the arrow head (default is 8 units).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     */\n    drawutilssvg.prototype.cubicBezierArrow = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var group = this.makeNode(\"g\");\n        // Just create the child nodes, don't bind them to the root node.\n        var arrowHeadBasePosition = new Vertex_1.Vertex(0, 0);\n        var arrowHead = this.makeArrowHeadNode(endControlPoint, endPoint, color, lineWidth, headLength, undefined, arrowHeadBasePosition);\n        var diff = arrowHeadBasePosition.difference(endPoint);\n        var bezier = this.makeCubicBezierNode(startPoint, { x: endPoint.x - diff.x, y: endPoint.y - diff.y }, startControlPoint, { x: endControlPoint.x - diff.x, y: endControlPoint.y - diff.y }, color, lineWidth, strokeOptions);\n        group.appendChild(bezier);\n        group.appendChild(arrowHead);\n        this._addCSSClasses(group, \"cubicbezier-arrow\");\n        this._bindNode(group, undefined);\n        return group;\n    };\n    /**\n     * Draw just an arrow head a the end of an imaginary line (zB) of the given line width the specified (CSS-) color and size.\n     *\n     * @method arrow\n     * @param {XYCoords} zA - The start point of the arrow-line.\n     * @param {XYCoords} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=8} headLength - (optional) The length of the arrow head (default is 8 pixels).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof DrawLib\n     **/\n    drawutilssvg.prototype.arrowHead = function (zA, zB, color, lineWidth, headLength, strokeOptions) {\n        if (headLength === void 0) { headLength = 8; }\n        var node = this.makeArrowHeadNode(zA, zB, color, lineWidth, headLength, strokeOptions);\n        return this._bindFillDraw(node, \"arrowhead\", color, lineWidth || 1, strokeOptions);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {XYCoords} position - The position to draw the the upper left corner at.\n     * @param {XYCoords} size - The x/y-size to draw the image with.\n     * @param {number=0.0} alpha - (optional, default=0.0) The transparency (1.0=opaque, 0.0=transparent).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.image = function (image, position, size, alpha) {\n        var _this = this;\n        if (alpha === void 0) { alpha = 1.0; }\n        var node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        var setImageSize = function (image) {\n            if (image.naturalWidth) {\n                var ratioX = size.x / image.naturalWidth;\n                var ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", \"\".concat(image.naturalWidth * _this.scale.x));\n                node.setAttribute(\"height\", \"\".concat(image.naturalHeight * _this.scale.y));\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                // if (alpha) {\n                node.setAttribute(\"opacity\", \"\".concat(alpha));\n                // }\n                node.setAttribute(\"transform\", \"translate(\".concat(_this._x(position.x), \" \").concat(_this._y(position.y), \") scale(\").concat(ratioX, \" \").concat(ratioY, \")\"));\n            }\n        };\n        image.addEventListener(\"load\", function (event) {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", \"\".concat(0));\n        node.setAttribute(\"y\", \"\".concat(0));\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    };\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method texturedPoly\n     * @param {Image} textureImage - The image object to draw.\n     * @param {Bounds} textureSize - The texture size to use; these are the original bounds to map the polygon vertices to.\n     * @param {Polygon} polygon - The polygon to use as clip path.\n     * @param {XYCoords} polygonPosition - The polygon's position (relative), measured at the bounding box's center.\n     * @param {number} rotation - The rotation to use for the polygon (and for the texture).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.texturedPoly = function (textureImage, textureSize, polygon, polygonPosition, rotation) {\n        // const basePolygonBounds: Bounds = polygon.getBounds();\n        var rotatedScalingOrigin = new Vertex_1.Vertex(textureSize.min).clone().rotate(rotation, polygonPosition);\n        // const rotationCenter = polygonPosition.clone().add(rotatedScalingOrigin.difference(textureSize.min).inv());\n        // Create something like this\n        // ...\n        //    <defs>\n        //       <clipPath id=\"shape\">\n        //         <path fill=\"none\" d=\"...\"/>\n        //       </clipPath>\n        //    </defs>\n        //    ...\n        //    <g clip-path=\"url(#shape)\">\n        //       <g transform=\"scale(...)\">\n        //          <image width=\"643\" height=\"643\" transform=\"rotate(...)\" xlink:href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/222579/beagle400.jpg\" >\n        //       </g>\n        //    </g>\n        //    </image>\n        // ...\n        var clipPathNode = this.makeNode(\"clipPath\");\n        var clipPathId = \"clippath_\".concat(UIDGenerator_1.UIDGenerator.next()); // TODO: use a better UUID generator here?\n        clipPathNode.setAttribute(\"id\", clipPathId);\n        var gNode = this.makeNode(\"g\");\n        var imageNode = this.makeNode(\"image\");\n        imageNode.setAttribute(\"x\", \"\".concat(this._x(rotatedScalingOrigin.x)));\n        imageNode.setAttribute(\"y\", \"\".concat(this._y(rotatedScalingOrigin.y)));\n        imageNode.setAttribute(\"width\", \"\".concat(textureSize.width));\n        imageNode.setAttribute(\"height\", \"\".concat(textureSize.height));\n        imageNode.setAttribute(\"href\", textureImage.src);\n        // imageNode.setAttribute(\"opacity\", \"0.5\");\n        // SVG rotations in degrees\n        imageNode.setAttribute(\"transform\", \"rotate(\".concat(rotation * RAD_TO_DEG, \", \").concat(this._x(rotatedScalingOrigin.x), \", \").concat(this._y(rotatedScalingOrigin.y), \")\"));\n        var pathNode = this.makeNode(\"path\");\n        var pathData = [];\n        if (polygon.vertices.length > 0) {\n            var self_1 = this;\n            pathData.push(\"M\", \"\".concat(this._x(polygon.vertices[0].x)), \"\".concat(this._y(polygon.vertices[0].y)));\n            for (var i = 1; i < polygon.vertices.length; i++) {\n                pathData.push(\"L\", \"\".concat(this._x(polygon.vertices[i].x)), \"\".concat(this._y(polygon.vertices[i].y)));\n            }\n        }\n        pathNode.setAttribute(\"d\", pathData.join(\" \"));\n        clipPathNode.appendChild(pathNode);\n        this.bufferedNodeDefs.appendChild(clipPathNode);\n        gNode.appendChild(imageNode);\n        gNode.setAttribute(\"transform-origin\", \"\".concat(this._x(rotatedScalingOrigin.x), \" \").concat(this._y(rotatedScalingOrigin.y)));\n        gNode.setAttribute(\"transform\", \"scale(\".concat(this.scale.x, \", \").concat(this.scale.y, \")\"));\n        var clipNode = this.makeNode(\"g\");\n        clipNode.appendChild(gNode);\n        clipNode.setAttribute(\"clip-path\", \"url(#\".concat(clipPathId, \")\"));\n        // TODO: check if the image class is correct here or if we should use a 'clippedImage' class here\n        this._bindFillDraw(clipNode, \"image\", null, null); // No color, no lineWidth\n        return clipNode;\n    };\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        var node = this.makeCubicBezierNode(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions);\n        return this._bindNode(node, undefined);\n    };\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {XYCoords[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezierPath = function (path, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (!path || path.length == 0) {\n            return node;\n        }\n        // Draw curve\n        var d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    };\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handle = function (startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    };\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {XYCoords} startPoint - The start point to draw the handle at.\n     * @param {XYCoords} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handleLine = function (startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(128,128,128,0.5)\");\n    };\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {XYCoords} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.dot = function (p, color) {\n        var node = this.makeNode(\"line\");\n        node.setAttribute(\"x1\", \"\".concat(this._x(p.x)));\n        node.setAttribute(\"y1\", \"\".concat(this._y(p.y)));\n        node.setAttribute(\"x2\", \"\".concat(this._x(p.x)));\n        node.setAttribute(\"y2\", \"\".concat(this._y(p.y)));\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    };\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {XYCoords} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.point = function (p, color) {\n        var radius = 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\".concat(this._x(p.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(p.y)));\n        node.setAttribute(\"r\", \"\".concat(radius));\n        return this._bindFillDraw(node, \"point\", color, 1);\n    };\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circle = function (center, radius, color, lineWidth, strokeOptions) {\n        // Todo: draw ellipse when scalex!=scaley\n        var node = this.makeNode(\"circle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", \"\".concat(this._x(center.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(center.y)));\n        node.setAttribute(\"r\", \"\".concat(radius * this.scale.x)); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        var arcData = CircleSector_1.CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    };\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {XYCoords} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth, rotation, strokeOptions) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        var node = this.makeNode(\"ellipse\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"cx\", \"\".concat(this._x(center.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(center.y)));\n        node.setAttribute(\"rx\", \"\".concat(radiusX * this.scale.x));\n        node.setAttribute(\"ry\", \"\".concat(radiusY * this.scale.y));\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", \"rotate(\".concat((rotation * 180) / Math.PI, \" \").concat(this._x(center.x), \" \").concat(this._y(center.y), \")\"));\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    };\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.square = function (center, size, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"rectangle\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", \"\".concat(this._x(center.x - size / 2.0)));\n        node.setAttribute(\"y\", \"\".concat(this._y(center.y - size / 2.0)));\n        node.setAttribute(\"width\", \"\".concat(size * this.scale.x));\n        node.setAttribute(\"height\", \"\".concat(size * this.scale.y));\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {SVGElement}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.rect = function (position, width, height, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"rect\");\n        this.applyStrokeOpts(node, strokeOptions);\n        node.setAttribute(\"x\", \"\".concat(this._x(position.x)));\n        node.setAttribute(\"y\", \"\".concat(this._y(position.y)));\n        node.setAttribute(\"width\", \"\".concat(width * this.scale.x));\n        node.setAttribute(\"height\", \"\".concat(height * this.scale.y));\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {XYCoords} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // console.log(\"grid\");\n        // const node: SVGElement = this.makeNode(\"pattern\");\n        // var patternId = \"pattern_id_\" + Math.floor(Math.random() * 65365);\n        // node.setAttribute(\"id\", patternId);\n        // node.setAttribute(\"viewBox\", `0,0,${sizeX},${sizeY}`);\n        // node.setAttribute(\"width\", `${sizeX}`);\n        // node.setAttribute(\"height\", `${sizeX}`);\n        // var pattern: SVGElement = this.makeNode(\"path\");\n        // const d: SVGPathParams = [];\n        // d.push(\"M\", sizeX / 2.0, 0);\n        // d.push(\"L\", sizeX / 2.0, sizeY);\n        // d.push(\"M\", 0, sizeY / 2.0);\n        // d.push(\"L\", sizeX, sizeY / 2.0);\n        // node.setAttribute(\"d\", d.join(\" \"));\n        // this.bufferedNodeDefs.append(pattern);\n        // const fillNode: SVGElement = this.makeNode(\"rect\");\n        // // For some strange reason SVG rotation transforms use degrees instead of radians\n        // // Note that the background does not scale with the zoom level (always covers full element)\n        // fillNode.setAttribute(\"x\", \"0\");\n        // fillNode.setAttribute(\"y\", \"0\");\n        // fillNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        // fillNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // fillNode.setAttribute(\"fill\", `url(#${patternId})`);\n        // return this._bindFillDraw(fillNode, \"grid\", \"red\", 1);\n        var node = this.makeNode(\"path\");\n        var d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    };\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {XYCoords} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode(\"path\");\n        var d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    };\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {XYCoords} center - The center of the diamond.\n     * @param {number} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.diamondHandle = function (center, size, color) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    };\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {XYCoords} center - The center of the square.\n     * @param {XYCoords} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.squareHandle = function (center, size, color) {\n        var node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", \"\".concat(this._x(center.x) - size / 2.0));\n        node.setAttribute(\"y\", \"\".concat(this._y(center.y) - size / 2.0));\n        node.setAttribute(\"width\", \"\".concat(size));\n        node.setAttribute(\"height\", \"\".concat(size));\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    };\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {XYCoords} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        var node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", \"\".concat(this._x(center.x)));\n        node.setAttribute(\"cy\", \"\".concat(this._y(center.y)));\n        node.setAttribute(\"r\", \"\".concat(radius));\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    };\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=0.5} lineWidth - (optional, default=0.5) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.crosshair = function (center, radius, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, lineWidth || 0.5);\n    };\n    /**\n     * Draw a cross with diagonal axes with given radius, color and lineWidth at the given position.<br>\n     * <br>\n     * Note that the x's radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @param {number=1} lineWidth - (optional, default=1.0) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilssvg.prototype.cross = function (center, radius, color, lineWidth) {\n        var node = this.makeNode(\"path\");\n        var d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) + radius,\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y) + radius,\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y) - radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cross\", color, lineWidth || 1.0);\n    };\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polygon = function (polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {XYCoords[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {StrokeOptions=} strokeOptions - (optional) Stroke settings to use.\n     *\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polyline = function (vertices, isOpen, color, lineWidth, strokeOptions) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, strokeOptions);\n        if (vertices.length == 0) {\n            return node;\n        }\n        // Draw curve\n        var d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polygon\", color, lineWidth || 1);\n    };\n    /**\n     * Draw a text at the given relative position.\n     *\n     * @method text\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {string=} options.color - The Color to use.\n     * @param {string=} options.fontFamily - The font family to use.\n     * @param {number=} options.fontSize - The font size (in pixels) to use.\n     * @param {FontStyle=} options.fontStyle - The font style to use.\n     * @param {FontWeight=} options.fontWeight - The font weight to use.\n     * @param {number=} options.lineHeight - The line height (in pixels) to use.\n     * @param {number=} options.rotation - The (optional) rotation in radians.\n     * @param {string=} options.textAlign - The text align to use. According to the specifiactions (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign) valid values are `\"left\" || \"right\" || \"center\" || \"start\" || \"end\"`.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilssvg.prototype.text = function (text, x, y, options) {\n        var _a, _b, _c;\n        options = options || {};\n        var color = options.color || \"black\";\n        var lineHeight = ((_b = (_a = options.lineHeight) !== null && _a !== void 0 ? _a : options.fontSize) !== null && _b !== void 0 ? _b : 0) * this.scale.x;\n        // https://www.w3.org/TR/SVG/text.html#TextAnchorProperty\n        //    start | middle | end\n        var textAlign = options.textAlign === \"left\" || options.textAlign === \"start\"\n            ? \"start\"\n            : options.textAlign === \"center\"\n                ? \"middle\"\n                : options.textAlign === \"right\" || options.textAlign === \"end\"\n                    ? \"end\"\n                    : \"start\";\n        var transformOrigin = \"\".concat(this._x(x), \"px \").concat(this._y(y), \"px\");\n        var translate = \"translate(\".concat(this._x(x), \" \").concat(this._y(y) + lineHeight / 2, \")\");\n        // Safari has a transform-origin/rotation bug.\n        // It's essential to use rotate(r,x,y) here. \"rotate(r)\"\" with transform-origin(x,y) won't do the job.\n        // And rotate and translate cannot be used is combination on a text object.\n        // So wrap the text inside a <g>, translate the <g>, and rotate the text inside.\n        var rotate = options.rotation ? \"rotate(\".concat(options.rotation * RAD_TO_DEG, \" 0 0)\") : \"\";\n        var node = this.makeNode(\"g\");\n        var curId = this.curId;\n        this.curId = curId + \"_text\";\n        var textNode = this.makeNode(\"text\");\n        node.appendChild(textNode);\n        textNode.setAttribute(\"font-family\", (_c = options.fontFamily) !== null && _c !== void 0 ? _c : \"\"); // May be undefined\n        textNode.setAttribute(\"font-size\", options.fontSize ? \"\".concat(options.fontSize * this.scale.x) : \"\");\n        textNode.setAttribute(\"font-style\", options.fontStyle ? \"\".concat(options.fontStyle) : \"\");\n        textNode.setAttribute(\"font-weight\", options.fontWeight ? \"\".concat(options.fontWeight) : \"\");\n        textNode.setAttribute(\"text-anchor\", textAlign);\n        textNode.setAttribute(\"transform-origin\", \"0 0\");\n        textNode.setAttribute(\"transform\", rotate);\n        node.setAttribute(\"transform-origin\", transformOrigin);\n        node.setAttribute(\"transform\", translate);\n        textNode.innerHTML = text;\n        // Restore old ID\n        this.curId = curId;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    };\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @param {string=\"black\"} color - The color to use (default is black).\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.label = function (text, x, y, rotation, color) {\n        var node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", \"translate(\".concat(x, \",\").concat(y, \"), rotate(\").concat(((rotation || 0) / Math.PI) * 180, \")\"));\n        node.setAttribute(\"font-family\", \"Arial\");\n        node.setAttribute(\"font-size\", \"9pt\");\n        node.setAttribute(\"font-style\", \"normal\");\n        node.setAttribute(\"font-weight\", \"lighter\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", color || \"black\", null);\n    };\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @param {number=} options.dashOffset - (optional) `See StrokeOptions`.\n     * @param {number=[]} options.dashArray - (optional) `See StrokeOptions`.\n     *\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    drawutilssvg.prototype.path = function (pathData, color, lineWidth, options) {\n        var node = this.makeNode(\"path\");\n        this.applyStrokeOpts(node, options);\n        // Transform the path: in-place (fast) or copy (slower)\n        var d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    };\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.clear = function (color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = null; // undefined;\n        var node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", \"\".concat(this.canvasSize.width));\n        node.setAttribute(\"height\", \"\".concat(this.canvasSize.height));\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = null; // undefined;\n    };\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    drawutilssvg.prototype.removeAllChildNodes = function () {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n        while (this.bufferedNodeDefs.lastChild) {\n            this.bufferedNodeDefs.removeChild(this.bufferedNodeDefs.lastChild);\n        }\n    };\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    drawutilssvg.createSvg = function () {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    };\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.copyPathData = function (data) {\n        var copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    };\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    drawutilssvg.transformPathData = function (data, offset, scale) {\n        // Scale and translate {x,y}\n        var _stx = function (index) {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        var _sty = function (index) {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        var _sx = function (index) {\n            data[index] = scale.x * Number(data[index]);\n        };\n        var _sy = function (index) {\n            data[index] = scale.y * Number(data[index]);\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = function (index) {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            var cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    }; // END transformPathData\n    drawutilssvg.nodeSupportsLineDash = function (nodeName) {\n        return [\"line\", \"path\", \"circle\", \"ellipse\", \"rectangle\", \"rect\"].includes(nodeName);\n    };\n    /**\n     * Creates a basic <line> node with start and end coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeLineNode\n     * @param {XYCoords} zA - The line's start position.\n     * @param {XYCoords} zB - The line's start position.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGLineElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makeLineNode = function (zA, zB, color, lineWidth, strokeOptions, classNameOverride) {\n        var line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", \"\".concat(this._x(zA.x)));\n        line.setAttribute(\"y1\", \"\".concat(this._y(zA.y)));\n        line.setAttribute(\"x2\", \"\".concat(this._x(zB.x)));\n        line.setAttribute(\"y2\", \"\".concat(this._y(zB.y)));\n        this._configureNode(line, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"line\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return line;\n    };\n    /**\n     * Creates a basic <path> node with given path string data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makePathNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makePathNode = function (pathString, color, lineWidth, strokeOptions, classNameOverride) {\n        var path = this.makeNode(\"path\");\n        path.setAttribute(\"d\", pathString);\n        this._configureNode(path, classNameOverride !== null && classNameOverride !== void 0 ? classNameOverride : \"path\", this.fillShapes, color, lineWidth || 1, strokeOptions);\n        return path;\n    };\n    /**\n     * Creates a basic arrow head node (<path> node) at the end of the given line coordinates. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeArrowHeadNode\n     * @param {string} pathString - The path data (must be a valid path data string).\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {number=8} headLength - (optional) The length of the arrow head; if none is specified then the head will be 8 absolute units long.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makeArrowHeadNode = function (zA, zB, color, lineWidth, headLength, strokeOptions, arrowHeadBasePositionBuffer) {\n        if (headLength === void 0) { headLength = 8; }\n        var vertices = Vector_1.Vector.utils.buildArrowHead(zA, zB, headLength, this.scale.x, this.scale.y);\n        var d = [\"M\", this.offset.x + vertices[0].x, this.offset.y + vertices[0].y];\n        if (arrowHeadBasePositionBuffer) {\n            arrowHeadBasePositionBuffer.x = vertices[0].x / this.scale.x;\n            arrowHeadBasePositionBuffer.y = vertices[0].y / this.scale.y;\n        }\n        for (var i = 1; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        var node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"arrowhead\");\n        return node;\n    };\n    /**\n     * Creates a basic cubic Bézier path node (<path> node) with the given cubic Bézier data. The created node will not\n     * be bound to any root node.\n     *\n     * @private\n     * @method makeCubicBezierNode\n     * @param {XYCoords} startPoint - The start point of the cubic Bézier curve\n     * @param {XYCoords} endPoint   - The end point the cubic Bézier curve.\n     * @param {XYCoords} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {XYCoords} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the point with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @param {StrokeOptions=} strokeOptions - (optional) Additional stroke options to use.\n     * @param {string=} classNameOverride - (optional) If nothing is passed the default classname 'path' will be used.\n     * @param {XYCoords=} arrowHeadBasePositionBuffer - (optional) If not null, then this position will contain the arrow head's start point (after execution). Some sort of OUT variable.\n     * @return {SVGPathElement}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.makeCubicBezierNode = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth, strokeOptions) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        // Draw curve\n        var d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        var node = this.makePathNode(d.join(\" \"), color, lineWidth, strokeOptions, \"cubicBezier\");\n        return node;\n    };\n    drawutilssvg.HEAD_XML = [\n        '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n        '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n        \"\"\n    ].join(\"\\n\");\n    return drawutilssvg;\n}());\nexports.drawutilssvg = drawutilssvg;\n//# sourceMappingURL=drawutilssvg.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @modified 2024-11-15 Adding helper function `geomutils.mapAngleTo2PI(number)` for mapping any value into the interval [0,2*PI).\n * @modified 2024-11-22 Adding helper function `geomutils.dotProduct(number)` for calculating the dot product of two vertices (as vectors).\n *\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geomutils = void 0;\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * @param {number} angle - The numeric value to map.\n     * @return {number} The mapped angle inside [0,PI*2].\n     **/\n    mapAngleTo2PI: function (angle) {\n        // Source: https://forums.codeguru.com/showthread.php?384172-get-angle-into-range-0-2*pi\n        var new_angle = Math.asin(Math.sin(angle));\n        if (Math.cos(angle) < 0) {\n            return Math.PI - new_angle;\n        }\n        else if (new_angle < 0) {\n            return new_angle + 2 * Math.PI;\n        }\n        else {\n            return new_angle;\n        }\n    },\n    /**\n     * Calculate the euclidean distance between two points given by four coordinates (two coordinates each).\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @returns {number}\n     */\n    dist4: function (x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y1 - y2, 2));\n    },\n    /**\n     * Map any angle (any numeric value) to [0, Math.PI).\n     *\n     * A × B := (A.x * B.x) + (A.y * B.y)\n     *\n     * @param {XYCoords} vertA - The first vertex.\n     * @param {XYCoords} vertB - The second vertex.\n     * @return {number} The dot product of the two vertices.\n     **/\n    dotProduct: function (vertA, vertB) {\n        return vertA.x * vertB.x + vertA.y * vertB.y;\n    },\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * -1;\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate(-i * (insideAngle / n), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax: function (x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax: function (x, min, max) {\n        return min + exports.geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n/* Imports for webpack */\n\nglobalThis.UIDGenerator = require(\"./UIDGenerator.js\").UIDGenerator;\nglobalThis.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nglobalThis.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nglobalThis.Vertex = require(\"./Vertex.js\").Vertex;\n\nglobalThis.Bounds = require(\"./Bounds.js\").Bounds;\nglobalThis.Grid = require(\"./Grid.js\").Grid;\nglobalThis.Line = require(\"./Line.js\").Line;\nglobalThis.Vector = require(\"./Vector.js\").Vector;\nglobalThis.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nglobalThis.BezierPath = require(\"./BezierPath.js\").BezierPath;\nglobalThis.Polygon = require(\"./Polygon.js\").Polygon;\nglobalThis.Triangle = require(\"./Triangle.js\").Triangle;\nglobalThis.VEllipse = require(\"./VEllipse.js\").VEllipse;\nglobalThis.VEllipseSector = require(\"./VEllipseSector.js\").VEllipseSector;\nglobalThis.Circle = require(\"./Circle.js\").Circle;\nglobalThis.CircleSector = require(\"./CircleSector.js\").CircleSector;\nglobalThis.PBImage = require(\"./PBImage.js\").PBImage;\nglobalThis.PBText = require(\"./PBText.js\").PBText;\nglobalThis.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nglobalThis.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nglobalThis.drawutils = require(\"./draw.js\").drawutils;\n// globalThis.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;  // Unfinished\nglobalThis.drawutilssvg = require(\"./drawutilssvg.js\").drawutilssvg;\nglobalThis.geomutils = require(\"./geomutils.js\").geomutils;\nglobalThis.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n"],"names":["getLen","v","Math","sqrt","x","y","HandlerAdmin","constructor","el","this","handlers","add","handler","push","del","i","length","splice","dispatch","_args","len","apply","arguments","wrapFunc","handlerAdmin","AlloyFinger","option","element","document","querySelector","start","bind","move","end","cancel","addEventListener","preV","pinchStartLen","zoom","isDoubleTap","noop","rotate","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","globalThis","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","_self","Date","pageX","pageY","abs","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","event","afEvent","currentX","currentY","sCurrentX","sCurrentY","angle","v1","v2","mr","r","dot","acos","getAngle","cross","PI","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","on","off","destroy","removeEventListener","Object","defineProperty","exports","value","BezierPath","Bounds_1","CubicBezierCurve_1","UIDGenerator_1","Vertex_1","className","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","uid","UIDGenerator","next","totalArcLength","adjustCircular","bezierCurves","prototype","addCurve","curve","startPoint","endPoint","adjustSuccessorControlPoint","getLength","locateCurveByStartPoint","point","equals","locateCurveByEndPoint","locateCurveByStartControlPoint","startControlPoint","locateCurveByEndControlPoint","endControlPoint","updateArcLengths","getCurveCount","getCurveAt","curveIndex","translate","amount","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","scale","anchor","scaleFactor","scaleXY","scaleFactors","center","getClosestT","p","minIndex","minDist","dist","curveT","uMin","u","getPointAt","distance","max","min","getPoint","console","warn","uTemp","clone","relativeU","t","getTangentAt","getTangent","getPerpendicularAt","getPerpendicular","log","uResult","_locateUIndex","bCurve","uPart","lineIntersections","line","inVectorBoundsOnly","reduce","accu","curCurve","concat","lineIntersectionTangents","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","fromArray","curves","reverse","moveCurvePoint","pointID","moveAmount","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","Vertex","neighbourHandleBounds","mainHandleLength","pow","neighbourHandleLength","set","getBounds","b","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","Bounds","getEvenDistributionVertices","pointCount","Error","result","polygonPoint","stepSize","n","segmentLength","arcLength","curSegmentU","newPoint","isDestroyed","toPathPoints","arr","toJSON","prettyFormat","buffer","join","fromJSON","jsonString","obj","JSON","parse","fromCurve","Array","isArray","bPath","lastCurve","CubicBezierCurve","isInstance","fromObject","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","fromReducedList","bezierPath","Polygon_1","width","height","getNorthPoint","getSouthPoint","getWestPoint","getEastPoint","toPolygon","Polygon","getCenter","getMinDimension","getMaxDimension","randomPoint","horizontalSafeArea","verticalSafeArea","absHorizontalSafeArea","absVerticalSafeArea","random","toString","computeFromVertices","vertices","vert","xMin","xMax","yMin","yMax","computeFromBoundsSet","boundingBoxes","bounds","fromDimension","origin","Circle","Line_1","Vector_1","radius","containsPoint","containsCircle","circle","lineDistance","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","Vector","perp","subXY","addXY","circleIntersection","p0","p1","d","a","h","p2","x3","y3","x4","y4","Line","lineIntersection","interA","interB","transA","sub","transB","diff","difference","det","distSquared","belowSqrt","sign","intersectioLine","filter","hasPoint","_this","map","closestPoint","cos","sin","CircleSector","Circle_1","geomutils_1","startAngle","endAngle","circleBounds","candidates","containsAngle","wrappedAngle","geomutils","mapAngleTo2PI","wrappedStart","wrappedEnd","angleAt","circleSectorIntersection","sector","radicalLine","thisIntersectionAngleA","thisIntersectionAngleB","thatIntersectionAngleA","thatIntersectionAngleB","centerOfOriginalGap","resultSector","ray","ellipseIntersections","tmpLine","intersectionPoint","lineAngle","wrapMinMax","circleSectorUtils","polarToCartesian","centerX","centerY","describeSVGArc","options","moveToStart","firstHalf","secondHalf","largeArcFlag","sweepFlag","pathData","curveIntervals","segmentCache","segmentLengths","moveControlPoint","tmp","pointB","curveStep","tmpLength","newLength","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","tDiff","xMinMax","utils","cubicPolyMinMax","xl","xh","yMinMax","yl","yh","getPointByID","id","evaluateT","c","t2","nt2","tX","tY","trimStart","uValue","trimStartAt","convertU2T","subCurbePoints","getSubCurvePointsAt","trimEnd","trimEndAt","getSubCurve","uStart","uEnd","tangentVector","getStartTangent","getEndTangent","intersectionPoints","lineIntersectionTs","intersectionTangents","vec","A","B","C","bx","bezierCoeffs","by","poly","cubicRoots","root","p3","polyX","cubicPoly","disc","t1","startVec","endVec","inv","S","T","Q","R","D","ts","sgn","th","sort","coeffs","NaN","Grid","size","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","listeners","hasListener","lis","keyCode","listener","fireDownEvent","e","firePressEvent","fireUpEvent","key2code","key","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","down","press","up","isDown","extendStatics","__extends","setPrototypeOf","__proto__","hasOwnProperty","call","TypeError","String","__","create","VertTuple_1","_super","intersection","denominator","numerator1","numerator2","isNaN","intersections","intrsctn","moveTo","VertTuple","MouseHandler","XWheelEvent","XMouseEvent","MouseEvent","WheelEvent","name","mouseDownPos","undefined","mouseDragPos","mouseButton","installed","mousemove","mkParams","drag","relPos","mouseup","button","mousedown","click","wheel","offsetX","offsetY","eventName","_a","_b","rel","xEvent","params","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","PBImage","image","upperLeft","lowerRight","PBText","text","color","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","textAlign","rotation","__setFunctionName","f","prefix","description","configurable","PlotBoilerplate","alloyfinger_typescript_1","draw_1","drawgl_1","drawutilssvg_1","BezierPath_1","CircleSector_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","Triangle_1","VEllipse_1","VEllipseSector_1","VertexAttr_1","PBText_1","config","drawConfig","_c","contentChangeListeners","renderTime","_gui","VertexAttr","model","bezierAutoAdjust","selectable","isSelected","draggable","visible","canvas","fetch","fullSize","val","fitToParent","bool","scaleX","scaleY","rasterGrid","drawRaster","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableZoom","enablePan","enableGL","isBackdropFiltersEnabled","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","lineWidth","handleLine","pathVertex","fill","controlVertex","polygon","triangle","ellipse","ellipseSector","circleSector","vertex","selectedVertex","vector","grid","canvasSize","canvasElement","tagName","toLowerCase","eventCatcher","drawutilsgl","ctx","getContext","draw","copyInstance","drawutils","drawutilssvg","parentElement","createElement","style","position","left","top","cursor","appendChild","body","title","setAttribute","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","svgNode","createElementNS","tosvgDraw","offset","tosvgFill","beginDrawCycle","clear","drawAll","endDrawCycle","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","_d","_e","setCSSscale","addContentChangeListener","removeContentChangeListener","_fireContentChanged","addedDrawables","removedDrawables","drawable","doNotFireEvent","addDragListener","VEllipse","axis","VEllipseSector","Triangle","attr","enableBezierPathAutoAdjust","remove","removeWithVertices","removedDrawables_1","wasRemoved_1","removeVertex","wasRemoved","removeAll","keepVertices","triggerRedraw","Boolean","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","round","setCurrentClassName","setCurrentId","raster","crosshair","_handleColor","drawDrawables","drawDrawable","df","cubicBezier","squareHandle","diamondHandle","circleHandle","polyline","signedRadiusV","signedRadiusH","radiusH","radiusV","data","ellipseSectorUtils","circleArc","arrow","error","drawSelectPolygon","clearSelection","viewport","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","parentNode","display","padding","border","pl","pr","pt","bl","br","bt","bb","w","clientWidth","clientHeight","_f","_g","_setSize","HTMLCanvasElement","SVGElement","setSize","adjustOffset","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","containsVert","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","draggablePoint","fireDragStartEvent","mouseDragHandler","oldDragAmount","fireDragEvent","mouseUpHandler","fireDragEndEvent","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","afProps","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","touchItem0","item","touchItem1","fingerA","fingerB","window","createAlloyFinger","default","createGUI","props","getGUI","class_1","isVertex","safeMergeByKeys","extension","k","typ","extVal","transformOrigin","removeProperty","transform","fallback","isOpen","addVertex","addVertexAt","index","getEdgeAt","vertIndex","getVertexAt","getEdges","lines","getInnerAngleAt","isAcute","isAngleAcute","zero","p2mp1","p3mp2","p2mp1_len","p3mp2_len","dotProduct","lengthProduct","determinant","inside","j","xi","yi","xj","yj","containsVerts","verts","every","containsPolygon","lineSegment","area","signedArea","isClockwise","perimeter","factor","getMeanCenter","getCentroid","cur","locateLineIntersecion","intersectionTuple","polyLine","edgeIndex","lineIntersectionTangentsIndices","closestLineIntersection","closestInterSectionIndex","closestLineIntersectionIndex","allIntersections","closestIntersection","MAX_VALUE","curDist","curVert","getInterpolationPolygon","interpolationCount","nextVert","lerpAmount","lerp","getEvenDistributionPolygon","polygonIndex","nextPolygonPoint","loopMax","lerpAbs","elimitateColinearEdges","eps","slice","lineA","lineB","vertA","vertB","areColinear","vertC","colinear","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","total","l","sum","calcCircumcircle","getArea","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","E","F","G","EPSILON","cx","cy","radius_squared","inCircumcircle","min3","max3","modIndex","pointIsInTriangle","getIncircularTriangle","lineC","bisector1","nsectAngle","bisector2","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","current","getExtremePoints","x_max","x_min","t_x1","atan2","t_x2","x_x1","y_x1","x_x2","y_x2","y_max","y_min","t_y1","t_y2","x_y1","y_y1","x_y2","y_y2","r1","r2","ux","uy","vx","vy","bbox_halfwidth","bbox_halfheight","normalAt","foci","getFoci","angleA","centerAngle","endPointA","addX","endPointB","resultVector","setLength","rh","rv","sdiff","addY","getEquidistantVertices","angles","equidistantVertAngles","ellipseCopy","rayCopy","rotationAmount","scalingFactors","forEach","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","phi","tanPhi","tan","tanPhi2","atan","theta","sAngle","eAngle","normalizeAngle","wrapMax","r2d","fullEllipsePointCount","ellipseAngles","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","rx","ry","fa","fs","sinphi","cosphi","prx","pry","L","M","_cx","_cy","inverse","getOrthogonal","linePoint","buildArrowHead","zA","zB","headlen","factory","revert","normalize","newA","v0","epsilon","l2","vtutils","dist2","insideBoundsOnly","pointDistance","VertexListeners_1","tuple","VertexListeners","setX","setY","invX","invY","amountX","amountY","subX","subY","eqX","eqY","dist4","target","step","factors","ZERO","multiplyScalar","scalar","precision","removeAllListeners","randomVertex","viewPort","arrayToJSON","stringify","dragStart","dragEnd","addClickListener","_addListener","removeClickListener","_removeListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","_fireEvent","ve","newListener","oldListener","context","fillShapes","applyStrokeOpts","strokeOptions","setLineDash","dashArray","dashArrayElem","lineDashOffset","dashOffset","_fillOrDraw","fillStyle","strokeStyle","stroke","setConfiguration","configuration","globalCompositeOperation","blendMode","save","beginPath","lineTo","restore","headLength","arrowHeadBasePosition","arrowHead","cubicBezierArrow","arrowHeadBasePositionBuffer","alpha","complete","naturalWidth","globalAlpha","drawImage","naturalHeight","texturedPoly","textureImage","textureSize","polygonPosition","basePolygonBounds","targetTextureSize","targetTextureOffset","helpers","clipPoly","rect","closePath","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","arc","asSegment","radiusX","radiusY","sizeX","sizeY","ceil","relX","relY","font","indexOf","fillText","strokeText","label","inplace","copyPathData","transformPathData","Path2D","clearRect","fillRect","clip","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","copy","curId","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","RAD_TO_DEG","isSecondary","gNode","bufferGNode","nodeDefs","bufferNodeDefs","nodeStyle","drawlibConfiguration","cache","Map","bufferedNodeDefs","addStyleDefs","addDefsNode","createSVGNode","rebuildStyleDefs","keys","rules","drawSettings","customStyleDefs","innerHTML","addCustomStyleDefs","defs","findElement","nodeName","node","get","toUpperCase","delete","makeNode","_bindFillDraw","_configureNode","_bindNode","bindingParent","_addCSSClasses","curClassName","fillMode","childNodes","child","getAttribute","removeAllChildNodes","replaceChild","tmpGNode","tmpDefsNode","nodeSupportsLineDash","dashArayElem","_x","_y","makeLineNode","group","makeArrowHeadNode","makeCubicBezierNode","setImageSize","ratioX","ratioY","src","rotatedScalingOrigin","clipPathNode","clipPathId","imageNode","pathNode","clipNode","arcData","textNode","lastChild","removeChild","createSvg","_stx","_sty","_sx","_sy","lastPoint","_slp","includes","classNameOverride","makePathNode","pathString","HEAD_XML","new_angle","asin","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","definition","o","enumerable","prop","Symbol","toStringTag"],"sourceRoot":""}